<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Nginx</title>
    <link href="/2021/11/01/Nginx/"/>
    <url>/2021/11/01/Nginx/</url>
    
    <content type="html"><![CDATA[<h1><span id="nginx">Nginx</span></h1><!-- toc --><ul><li><a href="#%E7%AC%AC1%E7%AB%A0-nginx%E7%AE%80%E4%BB%8B">第1章 Nginx简介</a><ul><li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li><li><a href="#nginx-%E4%BD%9C%E4%B8%BA-web-%E6%9C%8D%E5%8A%A1%E5%99%A8">Nginx 作为 web 服务器</a></li><li><a href="#%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86">正向代理</a></li><li><a href="#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86">反向代理</a></li><li><a href="#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">负载均衡</a></li><li><a href="#%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB">动静分离</a></li></ul></li><li><a href="#%E7%AC%AC2%E7%AB%A0-nginx%E7%9A%84%E5%AE%89%E8%A3%85">第2章 Nginx的安装</a><ul><li><a href="#%E8%BF%9B%E5%85%A5-nginx-%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD">进入 nginx 官网，下载</a></li><li><a href="#%E5%AE%89%E8%A3%85-nginx">安装 nginx</a><ul><li><a href="#1-%E5%AE%89%E8%A3%85pcre">1、安装pcre</a></li><li><a href="#2-%E5%AE%89%E8%A3%85openssl-zlib-gcc">2、安装openssl 、zlib 、 gcc</a></li><li><a href="#3-%E5%AE%89%E8%A3%85-nginx">3、安装 nginx</a></li></ul></li><li><a href="#%E8%BF%90%E8%A1%8Cnginx">运行Nginx</a></li></ul></li><li><a href="#%E7%AC%AC3%E7%AB%A0-nginx%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">第3章 Nginx常用命令和配置文件</a><ul><li><a href="#nginx-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">Nginx 常用命令</a></li><li><a href="#nginx-%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">Nginx 的配置文件</a></li></ul></li><li><a href="#%E7%AC%AC4%E7%AB%A0-nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86">第4章 Nginx 反向代理</a><ul><li><a href="#nginx-%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E4%BE%8B-1">Nginx 配置实例-反向代理实例 1</a><ul><li><a href="#1-%E5%AE%9E%E7%8E%B0%E6%95%88%E6%9E%9C">1、实现效果</a></li><li><a href="#2-%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">2、准备工作</a></li><li><a href="#3-%E8%AE%BF%E9%97%AE%E8%BF%87%E7%A8%8B%E7%9A%84%E5%88%86%E6%9E%90">3、访问过程的分析</a></li><li><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5-%E5%9C%A8windows-%E7%B3%BB%E7%BB%9F%E7%9A%84-host-%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8C%E5%9F%9F%E5%90%8D%E5%92%8C-ip-%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB%E7%9A%84%E9%85%8D%E7%BD%AE">第一步 在windows 系统的 host 文件进行域名和 ip 对应关系的配置</a></li><li><a href="#5-%E6%9C%80%E7%BB%88%E6%B5%8B%E8%AF%95">5、最终测试</a></li></ul></li><li><a href="#nginx-%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E4%BE%8B-2">Nginx 配置实例-反向代理实例 2</a><ul><li><a href="#1-%E5%AE%9E%E7%8E%B0%E6%95%88%E6%9E%9C-1">1、实现效果</a></li><li><a href="#2-%E5%87%86%E5%A4%872%E4%B8%AAtomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%80%E4%B8%AA8080%E7%AB%AF%E5%8F%A3%E4%B8%80%E4%B8%AA8081%E7%AB%AF%E5%8F%A3">2、准备2个tomcat服务器，一个8080端口，一个8081端口</a></li><li><a href="#3-%E6%89%BE%E5%88%B0ngix%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE">3、找到ngix配置文件，进行反向代理配置</a></li><li><a href="#4-%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95">4、运行测试</a></li></ul></li></ul></li><li><a href="#%E7%AC%AC5%E7%AB%A0-nginx-%E5%9D%87%E8%A1%A1%E8%B4%9F%E8%BD%BD">第5章 Nginx 均衡负载</a><ul><li><a href="#nginx-%E9%85%8D%E7%BD%AE%E5%AE%9E%E4%BE%8B-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">Nginx 配置实例-负载均衡</a><ul><li><a href="#1-%E5%AE%9E%E7%8E%B0%E6%95%88%E6%9E%9C-2">1、实现效果</a></li><li><a href="#2-%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C-1">2、准备工作</a></li><li><a href="#3-%E5%9C%A8-nginx-%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E8%BF%9B%E8%A1%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%9A%84%E9%85%8D%E7%BD%AE">3、在 nginx 的配置文件中进行负载均衡的配置</a></li><li><a href="#4-%E6%B5%8B%E8%AF%95%E8%BF%90%E8%A1%8C">4、测试运行</a></li></ul></li><li><a href="#nginx-%E5%88%86%E9%85%8D%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AD%96%E7%95%A5">nginx 分配服务器策略</a><ul><li><a href="#%E7%AC%AC%E4%B8%80%E7%A7%8D%E8%BD%AE%E8%AF%A2%E9%BB%98%E8%AE%A4">第一种：轮询（默认）</a></li><li><a href="#%E7%AC%AC%E4%BA%8C%E7%A7%8Dweight">第二种：weight</a></li><li><a href="#%E7%AC%AC%E4%B8%89%E7%A7%8Dip_hash">第三种：ip_hash</a></li><li><a href="#%E7%AC%AC%E5%9B%9B%E7%A7%8Dfair%E7%AC%AC%E4%B8%89%E6%96%B9">第四种：fair（第三方）</a></li></ul></li></ul></li><li><a href="#%E7%AC%AC6%E7%AB%A0-nginx-%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB">第6章 Nginx 动静分离</a><ul><li><a href="#1-%E4%BB%80%E4%B9%88%E6%98%AF%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB">1、什么是动静分离</a></li><li><a href="#2-%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C-2">2、准备工作</a></li><li><a href="#3-%E5%85%B7%E4%BD%93%E9%85%8D%E7%BD%AE">3、具体配置</a></li><li><a href="#4-%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95-1">4、运行测试</a></li></ul></li><li><a href="#%E7%AC%AC7%E7%AB%A0-nginx-%E9%85%8D%E7%BD%AE%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4">第7章 Nginx 配置高可用集群</a><ul><li><a href="#1-%E4%BB%80%E4%B9%88%E6%98%AFnginx%E9%AB%98%E5%8F%AF%E7%94%A8">1、什么是Nginx高可用</a></li><li><a href="#2-%E9%85%8D%E7%BD%AE%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">2、配置高可用的准备工作</a></li><li><a href="#3-%E5%AE%89%E8%A3%85nginx%E5%B9%B6%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95">3、安装nginx并运行测试</a></li><li><a href="#4-%E5%AE%89%E8%A3%85keepalived">4、安装keepalived</a></li><li><a href="#5-%E5%AE%8C%E6%88%90%E9%AB%98%E5%8F%AF%E7%94%A8%E9%85%8D%E7%BD%AE%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE">5、完成高可用配置（主从配置）</a></li><li><a href="#6-%E5%9C%A8usrlocalsrc-%E6%B7%BB%E5%8A%A0%E6%A3%80%E6%B5%8B%E8%84%9A%E6%9C%AC">6、在/usr/local/src 添加检测脚本</a></li><li><a href="#7-%E6%8A%8A%E4%B8%A4%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A-nginx-%E5%92%8C-keepalived-%E5%90%AF%E5%8A%A8">7、把两台服务器上 nginx 和 keepalived 启动</a></li><li><a href="#8-%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95">8、运行测试</a></li></ul></li><li><a href="#%E7%AC%AC8%E7%AB%A0-nginx-%E7%9A%84%E5%8E%9F%E7%90%86">第8章 Nginx 的原理</a><ul><li><a href="#1-mater-%E5%92%8Cworker">1、mater 和worker</a></li><li><a href="#2-worker-%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%B7%A5%E4%BD%9C%E7%9A%84">2、worker 如何进行工作的</a></li><li><a href="#3-%E4%B8%80%E4%B8%AAmaster-%E5%92%8C%E5%A4%9A%E4%B8%AA-woker-%E6%9C%89%E5%A5%BD%E5%A4%84">3、一个master 和多个 woker 有好处</a></li><li><a href="#4-%E8%AE%BE%E7%BD%AE%E5%A4%9A%E5%B0%91%E4%B8%AAwoker-%E5%90%88%E9%80%82">4、设置多少个woker 合适</a></li><li><a href="#5-%E8%BF%9E%E6%8E%A5%E6%95%B0worker_connection">5、连接数worker_connection</a></li></ul></li></ul><!-- tocstop --><h2><span id="第1章-nginx简介">第1章 Nginx简介</span></h2><h3><span id="概述">概述</span></h3><p>Nginx  是一个高性能的 HTTP 和反向代理服务器。</p><p>特点是占有内存少，并发能力强。</p><h3><span id="nginx-作为-web-服务器">Nginx 作为 web 服务器</span></h3><p>Nginx 可以作为静态页面的 web 服务器，同时还支持 CGI 协议的动态语言，比如 perl、php等。<font color="red">但是不支持java。Java程序只能通过与tomcat配合完成。</font>Nginx专为性能优化而开发，性能是其最重要的考量,实现上非常注重效率 ，能经受高负载的考验,有报告表明能支持高达 50,000个并发连接数。</p><p><a href="https://lnmp.org/nginx.html">https://lnmp.org/nginx.html</a></p><h3><span id="正向代理">正向代理</span></h3><p>Nginx 不仅可以做反向代理，实现负载均衡。还能用作正向代理来进行上网等功能。 </p><p>正向代理：如果把局域网外的 Internet 想象成一个巨大的资源库，则局域网中的客户端要访问Internet，<font color="red">则需要通过代理服务器来访问</font>，这种代理服务就称为正向代理。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110291454506.png" alt="image-20211029145408405"></p><h3><span id="反向代理">反向代理</span></h3><p>反向代理，其实客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，在返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，<font color="red">暴露的是代理服务器地址，隐藏了真实服务器IP地址</font>。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110291454999.png" alt="image-20211029145455937"></p><p><font color="red">正向代理布置在客户端，反向代理布置在服务器端。</font></p><h3><span id="负载均衡">负载均衡</span></h3><p>增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的负载均衡</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110291500911.png" alt="image-20211029150032849"></p><h3><span id="动静分离">动静分离</span></h3><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110291502398.png" alt="image-20211029150243335"></p><h2><span id="第2章-nginx的安装">第2章 Nginx的安装</span></h2><h3><span id="进入-nginx-官网下载">进入 nginx 官网，下载</span></h3><p><a href="http://nginx.org/">http://nginx.org/</a></p><p>所需要的素材</p><ul><li>  pcre-8.37.tar.gz</li><li>  openssl-1.0.1t.tar.gz</li><li>  zlib-1.2.8.tar.gz</li><li>  nginx-1.11.1.tar.gz</li></ul><h3><span id="安装-nginx">安装 nginx</span></h3><h4><span id="1-安装pcre">1、安装pcre</span></h4><p>第一步 联网下载 pcre 压缩文件依赖</p><figure class="highlight awk"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//</span>downloads.sourceforge.net<span class="hljs-regexp">/project/</span>pcre<span class="hljs-regexp">/pcre/</span><span class="hljs-number">8.37</span>/pcre-<span class="hljs-number">8.37</span>.tar.gz <br></code></pre></div></td></tr></table></figure><p>第二步 解压压缩文件</p><figure class="highlight apache"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> –zxvf pcre-<span class="hljs-number">8</span>.<span class="hljs-number">37</span>.tar.gz<br></code></pre></div></td></tr></table></figure><p>第三步 源码的安装的3个步骤</p><p>配置(configure)、编译(make)、安装(make install)</p><p>进入文件夹内，运行</p><figure class="highlight gauss"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss">./configure<br><span class="hljs-built_in">make</span><br><span class="hljs-built_in">make</span> install<br></code></pre></div></td></tr></table></figure><p>也可以通过&amp;&amp;连接起来，表示当前一条命令正常结束后，后面的命令才会执行，如下</p><figure class="highlight gauss"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss">./configure  &amp;&amp;  <span class="hljs-built_in">make</span>  &amp;&amp;  <span class="hljs-built_in">make</span>  install<br></code></pre></div></td></tr></table></figure><p>可以用以下命令查看pcre是否安装完成。</p><figure class="highlight lua"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua">pcre-<span class="hljs-built_in">config</span> <span class="hljs-comment">--version</span><br></code></pre></div></td></tr></table></figure><h4><span id="2-安装openssl-zlib-gcc">2、安装openssl 、zlib 、 gcc</span></h4><figure class="highlight nsis"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nsis">yum -y install make <span class="hljs-literal">zlib</span> <span class="hljs-literal">zlib</span>-devel gcc-c++ libtool openssl openssl-devel<br></code></pre></div></td></tr></table></figure><h4><span id="3-安装-nginx">3、安装 nginx</span></h4><p>第一步 下载tar.gz包</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110291529928.png" alt="image-20211029152922904"></p><p>第二步 上传linux并解压</p><figure class="highlight java"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">tar –zxvf nginx...<br></code></pre></div></td></tr></table></figure><p>第三步 源码的安装的3个步骤</p><figure class="highlight gauss"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gauss">./configure  &amp;&amp;  <span class="hljs-built_in">make</span>  &amp;&amp;  <span class="hljs-built_in">make</span>  install<br></code></pre></div></td></tr></table></figure><h3><span id="运行nginx">运行Nginx</span></h3><p>进入目录 /usr/local/nginx/sbin/nginx 启动服务</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110291531602.png" alt="image-20211029153155575"></p><p><font color="red">注意：在windows 系统中访问 linux 中 nginx，默认不能访问的，因为防火墙问题 </font><br>（1）关闭防火墙</p><figure class="highlight arduino"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino">systemctl stop firewalld<br></code></pre></div></td></tr></table></figure><p>（2）开放访问的端口号，80 端口 </p><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli">查看开放的端口号 <br>firewall-cmd <span class="hljs-params">--list-all</span><br><br>设置开放的端口号 <br>firewall-cmd <span class="hljs-params">--add-service=http</span> –-permanent <br>firewall-cmd <span class="hljs-params">--add-port=80/tcp</span> <span class="hljs-params">--permanent</span><br><br>重启防火墙<br>firewall-cmd –<span class="hljs-keyword">reload</span><br></code></pre></div></td></tr></table></figure><h2><span id="第3章-nginx常用命令和配置文件">第3章 Nginx常用命令和配置文件</span></h2><h3><span id="nginx-常用命令">Nginx 常用命令</span></h3><p>进入 nginx 目录中</p><figure class="highlight awk"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin<br></code></pre></div></td></tr></table></figure><p>1、查看 nginx 版本号</p><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli"><span class="hljs-string">./nginx</span> -v<br></code></pre></div></td></tr></table></figure><p>2、启动 nginx</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs \">./nginx<br></code></pre></div></td></tr></table></figure><p>3、停止 nginx</p><figure class="highlight arduino"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino">./nginx -s stop<br></code></pre></div></td></tr></table></figure><p>4、重新加载 nginx</p><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli"><span class="hljs-string">./nginx</span> -s <span class="hljs-keyword">reload</span><br></code></pre></div></td></tr></table></figure><h3><span id="nginx-的配置文件">Nginx 的配置文件</span></h3><p>nginx 安装目录下，其默认的配置文件都放在这个目录的 conf 目录下，而主配置文件 nginx.conf 也在其中，后续对 nginx 的使用基本上都是对此配置文件进行相应的修改</p><figure class="highlight awk"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf/nginx.conf<br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110291541202.png" alt="image-20211029154106164"></p><p>配置文件中有很多#， 开头的表示注释内容，我们去掉所有以 # 开头的段落，精简之后的<br>内容如下：</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110291542962.png" alt="image-20211029154253928"></p><p>根据上述文件，我们可以很明显的将 nginx.conf 配置文件分为三部分： </p><p><font color="red">第一部分：全局块</font></p><p>从配置文件开始到 events 块之间的内容，主要会设置一些影响 nginx 服务器整体运行的配置指令，主要包括配置运行 Nginx 服务器的用户（组）、允许生成的 worker process 数，进程 PID 存放路径、日志存放路径和类型以及配置文件的引入等。</p><p>比如上面第一行配置的：</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110291543138.png" alt="image-20211029154347109"></p><p>这是 Nginx 服务器并发处理服务的关键配置，worker_processes值越大，可以支持的并发处理量也越多，但是会受到硬件、软件等设备的制约</p><p><font color="red">第二部分：events块</font></p><p>比如上面的配置：</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110291544372.png" alt="image-20211029154408347"></p><p>events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接，常用的设置包括是否开启对多 work process 下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 word process 可以同时支持的最大连接数等。 </p><p>上述例子就表示每个 work process 支持的最大连接数为 1024. </p><p>这部分的配置对 Nginx 的性能影响较大，在实际中应该灵活配置。 </p><p><font color="red">第三部分：http块</font></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110291544713.png" alt="image-20211029154435677"></p><p>这算是Nginx 服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。需要注意的是：http块也可以包括 http 全局块、server块。</p><p><font color="red">http全局块</font></p><p>http 全局块配置的指令包括文件引入、MIME-TYPE定义、日志自定义、连接超时时间、单链接请求数上限等。</p><p><font color="red">server 块</font></p><p>这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了节省互联网服务器硬件成本。</p><p>每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。</p><p><strong>1、全局 server 块</strong><br> 最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或 IP 配置。 </p><p><strong>2、location块</strong></p><p>一个server块可以配置多个location块。<br>这块的主要作用是基于 Nginx 服务器接收到的请求字符串（例如 server_name/uri-string），对虚拟主机名称（也可以是 IP 别名）之外的字符串（例如 前面的 /uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行。 </p><h2><span id="第4章-nginx-反向代理">第4章 Nginx 反向代理</span></h2><h3><span id="nginx-配置实例-反向代理实例-1">Nginx 配置实例-反向代理实例 1</span></h3><h4><span id="1-实现效果">1、实现效果</span></h4><p>打开浏览器，在浏览器地址栏输入地址 <a href="http://www.123.com,跳转到/">www.123.com，跳转到</a> liunx 系统tomcat 主页面中</p><h4><span id="2-准备工作">2、准备工作</span></h4><p>在liunx 系统安装 tomcat，使用默认端口8080</p><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli">1) 上传安装文件，并解压缩到<span class="hljs-string">/opt/tomcat</span><br><br>2) 进入解压目录<span class="hljs-string">/bin</span> , 启动 tomcat <span class="hljs-string">./startup.sh</span><br><br>3) 开放端口 8080<br>firewall-cmd <span class="hljs-params">--add-port=8080/tcp</span> <span class="hljs-params">--permanent</span> <br>firewall-cmd –<span class="hljs-keyword">reload</span><br>查看已经开放的端口号<br>firewall-cmd <span class="hljs-params">--list-all</span><br><br>4)访问测试http:<span class="hljs-string">//</span>&lt;linux ip&gt;<span class="hljs-function">:8080</span>，看到猫就好了<br></code></pre></div></td></tr></table></figure><h4><span id="3-访问过程的分析">3、访问过程的分析</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110291609577.png" alt="image-20211029160930539"></p><p>4、具体配置</p><h4><span id="第一步-在windows-系统的-host-文件进行域名和-ip-对应关系的配置">第一步 在windows 系统的 host 文件进行域名和 ip 对应关系的配置</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110291609840.png" alt="image-20211029160946812"></p><p>（1）添加内容在host 文件中 </p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110291609910.png" alt="image-20211029160954887"></p><p><font color="red">知道这个域名映射就行，不需要改它。</font></p><p>第二步 在 nginx 进行请求转发的配置（反向代理配置）</p><p>教程上server_name设置成了linux的ip地址。我觉得这个server_name没必要改，这里是Nginx的ip地址和端口号，所以写localhost就行。</p><p>也就是说，<font color="red">Nginx将本机的80端口转发到8080端口</font>。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110291626488.png" alt="image-20211029162602448"></p><h4><span id="5-最终测试">5、最终测试</span></h4><p>访问80端口的，成功转发到了8080端口。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110291628148.png" alt="image-20211029162839118"></p><h3><span id="nginx-配置实例-反向代理实例-2">Nginx 配置实例-反向代理实例 2</span></h3><h4><span id="1-实现效果">1、实现效果</span></h4><p>使用 nginx 反向代理，根据访问的路径跳转到不同端口的服务中<br>nginx 监听端口为9001，</p><p>访问 <a href="http://192.168.17.129:9001/edu/">http://192.168.17.129:9001/edu/</a> 直接跳转到 127.0.0.1:8080 </p><p>访问 <a href="http://192.168.17.129:9001/vod/">http://192.168.17.129:9001/vod/</a> 直接跳转到 127.0.0.1:8081</p><h4><span id="2-准备2个tomcat服务器一个8080端口一个8081端口">2、准备2个tomcat服务器，一个8080端口，一个8081端口</span></h4><p>实际上就是解压2份tomcat</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110291952500.png" alt="image-20211029195253476"></p><p>修改第二个tomcat的端口号，进入它的目录下 conf/server.xml，修改配置文件，搜索port，修改以下端口。</p><p>8005改成8015</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110291929293.png" alt="image-20211029192959258"></p><p>8080改成8081</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110291931408.png" alt="image-20211029190642304"></p><p>在8080的 tomcat 里面 webapps 目录中，创建名称是 edu 文件夹，在 edu 文件夹中创建<br>页面 a.html，用于测试，页面内容</p><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>tomcat:8080<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>在8081的 tomcat 里面 webapps 目录中，创建名称是 vod 文件夹，在 vod 文件夹中创建<br>页面 a.html，用于测试，页面内容</p><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>tomcat:8080<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="3-找到ngix配置文件进行反向代理配置">3、找到ngix配置文件，进行反向代理配置</span></h4><p>增加一个server，这里就根据下面这个注释了的server修改。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110291906348.png" alt="image-20211029190642304"></p><h4><span id="4-运行测试">4、运行测试</span></h4><p><font color="red">注意开放相关端口或关闭防火墙</font></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110291932254.png" alt="image-20211029193258221"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110291933230.png" alt="image-20211029193314193"></p><h2><span id="第5章-nginx-均衡负载">第5章 Nginx 均衡负载</span></h2><h3><span id="nginx-配置实例-负载均衡">Nginx 配置实例-负载均衡</span></h3><h4><span id="1-实现效果">1、实现效果</span></h4><p>（1）浏览器地址栏输入地址 <a href="http://192.168.17.129/edu/a.html%EF%BC%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%95%88%E6%9E%9C%EF%BC%8C%E5%B9%B3%E5%9D%87">http://192.168.17.129/edu/a.html，负载均衡效果，平均</a> 8080<br>和8081 端口中</p><h4><span id="2-准备工作">2、准备工作</span></h4><p>（1）准备两台tomcat 服务器，一台8080，一台 8081</p><p>（2）在两台 tomcat 里面 webapps 目录中，创建名称是 edu 文件夹，在 edu 文件夹中创建<br>页面 a.html，用于测试</p><h4><span id="3-在-nginx-的配置文件中进行负载均衡的配置">3、在 nginx 的配置文件中进行负载均衡的配置</span></h4><p>在主server上面写一下这个upstream</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110292255849.png" alt="image-20211029225557807"></p><p>这是的就是2个tomcat的IP地址。（这里因为是在本机上，所以写ip，写127.0.0.1，写localhost都是一样的）</p><p>代理设置为upstream的名字</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110292257304.png" alt="image-20211029225717273"></p><h4><span id="4-测试运行">4、测试运行</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110292301403.png" alt="image-20211029230132374"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110292301136.png" alt="image-20211029230143110"></p><p>多次请求，目标服务器在tomcat8080和tomcat8081之间切换。</p><h3><span id="nginx-分配服务器策略">nginx 分配服务器策略</span></h3><h4><span id="第一种轮询默认">第一种：轮询（默认）</span></h4><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除。</p><h4><span id="第二种weight">第二种：weight</span></h4><p>weight 代表权重默认为 1,权重越高被分配的客户端越多。</p><p>指定轮询几率，weight 和访问比率成正比，用于后端服务器性能不均的情况。 例如：</p><figure class="highlight routeros"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">upstream server_pool&#123;    <br>   <span class="hljs-built_in"> server </span>192.168.5.21 <span class="hljs-attribute">weight</span>=10;<br>   <span class="hljs-built_in"> server </span>192.168.5.22 <span class="hljs-attribute">weight</span>=10;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="第三种ip_hash">第三种：ip_hash</span></h4><p>每个请求按访问ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决session 的问题。例如：</p><figure class="highlight roboconf"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs roboconf">upstream server_pool&#123;    <br>    <span class="hljs-attribute">ip_hash;     </span><br><span class="hljs-attribute">    server 192.168.5.21</span>:80;     <br>    <span class="hljs-attribute">server 192.168.5.22</span>:80;     <br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="第四种fair第三方">第四种：fair（第三方）</span></h4><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><figure class="highlight html"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">upstream server_pool&#123;    <br>    server 192.168.5.21:80;     <br>    server 192.168.5.22:80;     <br>    fair;     <br>&#125;<br></code></pre></div></td></tr></table></figure><h2><span id="第6章-nginx-动静分离">第6章 Nginx 动静分离</span></h2><h3><span id="1-什么是动静分离">1、什么是动静分离</span></h3><p>Nginx 动静分离简单来说就是把动态跟静态请求分开，不能理解成只是单纯的把动态页面和静态页面物理分离。严格意义上说应该是动态请求跟静态请求分开，可以理解成使用 Nginx 处理静态页面，Tomcat处理动态页面。</p><p>动静分离从目前实现角度来讲大致分为两种：</p><ul><li>  一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案；</li><li>  另外一种方法就是动态跟静态文件混合在一起发布，通过 nginx 来分开。</li></ul><p><strong>通过 location 指定不同的后缀名实现不同的请求转发</strong>。</p><p><strong>通过 expires 参数设置，可以使浏览器缓存过期时间</strong>，减少与服务器之前的请求和流量。具体 Expires 定义：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。（如果经常更新的文件，不建议使用 Expires 来缓存），我这里设置 3d，表示在这 3 天之内访问这个 URL，发送一个请求，比对服务器该文件最后更新时间没有变化，则不会从服务器抓取，返回状态码 304，如果有修改，则直接从服务器重新下载，返回状态码 200。</p><h3><span id="2-准备工作">2、准备工作</span></h3><p>在liunx 系统中准备静态资源，用于进行访问</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110301514380.png" alt="image-20211030151408340"></p><p>image文件夹用于存放静态图片，准备个图片放进去</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110301534403.png" alt="image-20211030153406376"></p><p>www文件夹用于存放静态页面，准备个静态网页放进去</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110301533758.png" alt="image-20211030153358728"></p><h3><span id="3-具体配置">3、具体配置</span></h3><p>在 nginx 配置文件中进行配置</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110301518664.png" alt="image-20211030151818618"></p><p>添加2个location，地址和根指定好，设置了autoindex为on，就会有一个文件列表的效果。</p><h3><span id="4-运行测试">4、运行测试</span></h3><p><a href="http://192.168.199.137/image/a.jpg">http://192.168.199.137/image/a.jpg</a></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110301532656.png" alt="image-20211030153235524"></p><p><a href="http://192.168.199.137/image/">http://192.168.199.137/image/</a></p><p>因为配置文件 autoindex on，所以有文件列表的效果</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110301531321.png" alt="image-20211030153140281"></p><p><a href="http://192.168.199.137/www/a.html">http://192.168.199.137/www/a.html</a></p><p>测试静态网页</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110301531278.png" alt="image-20211030153108247"></p><h2><span id="第7章-nginx-配置高可用集群">第7章 Nginx 配置高可用集群</span></h2><h3><span id="1-什么是nginx高可用">1、什么是Nginx高可用</span></h3><p>就是当一个nginx宕机时，有另一个nginx可以顶上。用户始终访问的是一个虚拟ip，虚拟ip指向一个可用的nginx的ip地址。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110302234683.png" alt="image-20211030223423635"></p><p>所以配置高可用集群需要以下东西</p><p>（1）需要两台nginx 服务器</p><p>（2）需要keepalived</p><p>（3）需要虚拟ip</p><h3><span id="2-配置高可用的准备工作">2、配置高可用的准备工作</span></h3><p>（1）需要两台服务器，两个ip地址。<br>（2）在两台服务器安装 nginx<br>（3）在两台服务器安装 keepalive</p><h3><span id="3-安装nginx并运行测试">3、安装nginx并运行测试</span></h3><p><font color="red">注意别忘记关防火墙或开放端口</font></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110310059027.png" alt="image-20211031005919997"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110310059678.png" alt="image-20211031005937649"></p><h3><span id="4-安装keepalived">4、安装keepalived</span></h3><p>（1）使用yum 命令进行安装</p><figure class="highlight cmake"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> keepalived –y<br></code></pre></div></td></tr></table></figure><p>（2）安装之后，在 etc 里面生成目录keepalived，有文件 keepalived.conf</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110302307211.png" alt="image-20211030230731178"></p><h3><span id="5-完成高可用配置主从配置">5、完成高可用配置（主从配置）</span></h3><p>修改/etc/keepalived/keepalivec.conf 配置文件</p><p>主机配置</p><figure class="highlight puppet"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs puppet"><span class="hljs-keyword">global_defs</span> &#123;<span class="hljs-comment"># 全局配置</span><br>   notification_email &#123;<br>     acassen@firewall.loc<br>     failover@firewall.loc<br>     sysadmin@firewall.loc<br>   &#125;<br>   <span class="hljs-keyword">notification_email_from</span> <span class="hljs-keyword">Alexandre</span>.Cassen@firewall.loc<br>   smtp_server 192.168.199.137<br>   smtp_connect_timeout 30<br>   router_id LVS_DEVEL<span class="hljs-comment"># 访问到主机（主服务器的名字hostname）</span><br>&#125;<br><br>vrrp_script <span class="hljs-keyword">chk_http_port</span> &#123;<span class="hljs-comment"># 脚本配置</span><br>script <span class="hljs-string">&quot;/usr/local/src/nginx_check.sh&quot;</span><br>interval <span class="hljs-number">2</span> <span class="hljs-comment">#（检测脚本执行的间隔） </span><br>weight <span class="hljs-number">2</span><span class="hljs-comment"># 权重</span><br>&#125;<br><br><span class="hljs-keyword">vrrp_instance</span> <span class="hljs-keyword">VI_1</span> &#123;<span class="hljs-comment"># 虚拟ip配置</span><br>    state MASTER<span class="hljs-comment"># 备份服务器上将 MASTER 改为 BACKUP</span><br>    interface ens33<span class="hljs-comment"># 网卡</span><br>    virtual_router_id <span class="hljs-number">51</span><span class="hljs-comment"># 主、备机的 virtual_router_id 必须相同</span><br>    <span class="hljs-literal">priority</span> <span class="hljs-number">100</span><span class="hljs-comment"># 主、备机取不同的优先级，主机值较大，备份机值较小</span><br>    advert_int <span class="hljs-number">1</span><span class="hljs-comment"># 检测服务器是不是还活着的间隔</span><br>    authentication &#123;<span class="hljs-comment"># 校验的方式</span><br>        <span class="hljs-literal">auth_type</span> PASS<br>        auth_pass <span class="hljs-number">1111</span><br>    &#125;<br>    <span class="hljs-keyword">virtual_ipaddress</span> &#123;<br>        <span class="hljs-number">192.168</span>.<span class="hljs-number">199.140</span> // VRRP H 虚拟地址<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>服务器的名字怎么看呢？可以 vim /etc/hosts，然后给主机设一个名字。（<font color="orange">然而这项不配置也能成功。</font>）</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110310128795.png" alt="image-20211031012828742"></p><p><font color="red">注意，这里配的一定是主服务器的名字hostname。</font></p><p>查看hostname的命令：hostname</p><p>weight 2    # 权重</p><p>如果设成-20，就是当脚本中的条件成立时，就把当前主机的权重降20</p><p>网卡名字可以在ifconfig中查看</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110310133439.png" alt="image-20211031013322395"></p><p>从机配置</p><figure class="highlight angelscript"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript">global_defs &#123;<br>   notification_email &#123;<br>     <span class="hljs-symbol">acassen@</span>firewall.loc<br>     <span class="hljs-symbol">failover@</span>firewall.loc<br>     <span class="hljs-symbol">sysadmin@</span>firewall.loc<br>   &#125;<br>   notification_email_from Alexandre.<span class="hljs-symbol">Cassen@</span>firewall.loc<br>   smtp_server <span class="hljs-number">192.168</span><span class="hljs-number">.199</span><span class="hljs-number">.138</span><br>   smtp_connect_timeout <span class="hljs-number">30</span><br>   router_id LVS_DEVEL<br>&#125;<br><br>vrrp_script chk_http_port &#123; <br>script <span class="hljs-string">&quot;/usr/local/src/nginx_check.sh&quot;</span><br><span class="hljs-built_in">int</span>erval <span class="hljs-number">2</span> #（检测脚本执行的间隔） <br>weight <span class="hljs-number">2</span><br>&#125;<br><br>vrrp_instance VI_1 &#123;<br>    state BACKUP# 备份服务器上将 MASTER 改为 BACKUP<br>    <span class="hljs-keyword">interface</span> <span class="hljs-symbol">ens33</span># 网卡<br>    <span class="hljs-symbol">virtual_router_id</span> <span class="hljs-symbol">51</span># 主、备机的 <span class="hljs-symbol">virtual_router_id</span> 必须相同<br>    <span class="hljs-symbol">priority</span> <span class="hljs-symbol">90</span># 主、备机取不同的优先级，主机值较大，备份机值较小<br>    <span class="hljs-symbol">advert_int</span> <span class="hljs-symbol">1</span><br>    <span class="hljs-symbol">authentication</span> &#123;<br>        auth_type PASS<br>        auth_pass <span class="hljs-number">1111</span><br>    &#125;<br>    virtual_ipaddress &#123;<br>        <span class="hljs-number">192.168</span><span class="hljs-number">.199</span><span class="hljs-number">.140</span> <span class="hljs-comment">// VRRP H 虚拟地址</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3><span id="6-在usrlocalsrc-添加检测脚本">6、在/usr/local/src 添加检测脚本</span></h3><figure class="highlight bash"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash </span><br>A=`ps -C nginx –no-header |wc -l` <br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$A</span> -eq 0 ];<span class="hljs-keyword">then</span> <br>    /usr/<span class="hljs-built_in">local</span>/nginx/sbin/nginx <br>    sleep 2 <br>    <span class="hljs-keyword">if</span> [ `ps -C nginx --no-header |wc -l` -eq 0 ];<span class="hljs-keyword">then</span> <br>        killall keepalived <br>    <span class="hljs-keyword">fi</span> <br><span class="hljs-keyword">fi</span><br></code></pre></div></td></tr></table></figure><p>如果说nginx挂掉了，就kill掉keepalived</p><h3><span id="7-把两台服务器上-nginx-和-keepalived-启动">7、把两台服务器上 nginx 和 keepalived 启动</span></h3><figure class="highlight crmsh"><table><tr><td class="gutter hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">启动 nginx：./nginx <br>启动keepalived：systemctl <span class="hljs-literal">start</span> keepalived.service<br></code></pre></div></td></tr></table></figure><h3><span id="8-运行测试">8、运行测试</span></h3><p><font color="red"><code>ip a</code> 命令能够看到当前主机绑定的虚拟ip，只有正在响应的主机才会有。</font></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110310107790.png" alt="image-20211031010721739"></p><p>在浏览器地址栏输入 虚拟 ip 地址 192.168.199.140</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110310058583.png" alt="image-20211031005856550"></p><p>把主机的niginx和keepalived停止，再输入192.168.199.140，<strong>依然能够正常访问</strong>，高可用集群配置成功。</p><h2><span id="第8章-nginx-的原理">第8章 Nginx 的原理</span></h2><h3><span id="1-mater-和worker">1、mater 和worker</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110311315958.png" alt="image-20211031131543918"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110311315379.png" alt="image-20211031131548329"></p><h3><span id="2-worker-如何进行工作的">2、worker 如何进行工作的</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110311315447.png" alt="image-20211031131557379"></p><h3><span id="3-一个master-和多个-woker-有好处">3、一个master 和多个 woker 有好处</span></h3><p>（1）可以使用nginx –s reload 热部署，利用 nginx 进行热部署操作<br>（2）每个woker 是独立的进程，如果有其中的一个woker 出现问题，其他 woker 独立的，继续进行争抢，实现请求过程，不会造成服务中断</p><h3><span id="4-设置多少个woker-合适">4、设置多少个woker 合适</span></h3><p>worker 数和服务器的 cpu 数相等是最为适宜的</p><h3><span id="5-连接数worker_connection">5、连接数worker_connection</span></h3><p>第一个：发送请求，占用了 woker 的几个连接数？<br>答案：2 或者 4 个</p><p>第二个：nginx 有一个 master，有四个 woker，每个woker 支持最大的连接数 1024，支持的<br>最大并发数是多少？</p><ul><li>  普通的静态访问最大并发数是： worker_connections * worker_processes /2，</li><li>  而如果是HTTP 作 为反向代理来说，最大并发数量应该是 worker_connections * worker_processes/4。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>服务器</tag>
      
      <tag>负载均衡</tag>
      
      <tag>反向代理</tag>
      
      <tag>动静分离</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot框架</title>
    <link href="/2021/10/25/SpringBoot/"/>
    <url>/2021/10/25/SpringBoot/</url>
    
    <content type="html"><![CDATA[<h1><span id="springboot">SpringBoot</span></h1><!-- toc --><ul><li><a href="#%E7%AC%AC1%E7%AB%A0-%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8">第1章 框架入门</a><ul><li><a href="#springboot-%E7%AE%80%E4%BB%8B">SpringBoot 简介</a></li><li><a href="#springboot-%E7%9A%84%E7%89%B9%E6%80%A7">SpringBoot 的特性</a></li><li><a href="#springboot-%E5%9B%9B%E5%A4%A7%E6%A0%B8%E5%BF%83">SpringBoot 四大核心</a></li></ul></li><li><a href="#%E7%AC%AC2%E7%AB%A0-%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B">第2章 入门案例</a><ul><li><a href="#%E7%AC%AC%E4%B8%80%E4%B8%AA-springboot-%E9%A1%B9%E7%9B%AE">第一个 SpringBoot 项目</a><ul><li><a href="#1-%E6%96%B0%E5%BB%BAspringboot-%E9%A1%B9%E7%9B%AE%E9%9C%80%E8%A6%81%E8%81%94%E7%BD%91%E7%8A%B6%E6%80%81">1、新建SpringBoot 项目（<strong>需要联网状态</strong>）</a></li><li><a href="#2-%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84">2、项目结构</a></li><li><a href="#3-pomxml%E6%96%87%E4%BB%B6%E7%9A%84%E8%A7%A3%E9%87%8A">3、Pom.xml文件的解释</a></li><li><a href="#4-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAcontroller">4、创建一个Controller</a></li><li><a href="#5-%E8%BF%90%E8%A1%8C">5、运行</a></li><li><a href="#6-%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90">6、入门案例分析</a></li></ul></li><li><a href="#spring-boot-%E7%9A%84%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">Spring Boot 的核心配置文件</a><ul><li><a href="#properties-%E6%96%87%E4%BB%B6">.properties 文件</a></li><li><a href="#yml-%E6%96%87%E4%BB%B6">.yml 文件</a></li></ul></li><li><a href="#%E5%A4%9A%E7%8E%AF%E5%A2%83%E5%BC%80%E5%8F%91">多环境开发</a><ul><li><a href="#%E4%BD%BF%E7%94%A8properties%E6%96%87%E4%BB%B6">使用.properties文件</a></li><li><a href="#%E4%BD%BF%E7%94%A8yml%E6%96%87%E4%BB%B6">使用.yml文件</a></li></ul></li><li><a href="#spring-boot-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE">Spring Boot 自定义配置</a><ul><li><a href="#value-%E6%B3%A8%E8%A7%A3">@Value 注解</a></li><li><a href="#configurationproperties">@ConfigurationProperties</a></li><li><a href="#%E8%AD%A6%E5%91%8A%E8%A7%A3%E5%86%B3">警告解决</a></li><li><a href="#%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81">中文乱码</a></li><li><a href="#%E5%8F%8B%E6%83%85%E6%8F%90%E7%A4%BA">友情提示</a></li></ul></li><li><a href="#spring-boot-%E5%89%8D%E7%AB%AF%E4%BD%BF%E7%94%A8-jsp">Spring Boot 前端使用 JSP</a><ul><li><a href="#1-maven%E9%85%8D%E7%BD%AE%E4%BE%9D%E8%B5%96%E9%A1%B9">1、maven配置依赖项</a></li><li><a href="#2-maven%E9%85%8D%E7%BD%AE%E7%BC%96%E8%AF%91%E7%9B%AE%E5%BD%95">2、maven配置编译目录</a></li><li><a href="#3-%E9%85%8D%E7%BD%AEspringmvc%E9%85%8D%E7%BD%AE">3、配置springmvc配置</a></li><li><a href="#4-%E4%BB%A3%E7%A0%81%E7%BC%96%E5%86%99">4、代码编写</a></li><li><a href="#5-%E6%96%B0%E5%BB%BA%E7%95%8C%E9%9D%A2">5、新建界面</a></li><li><a href="#6-jsp%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE">6、jsp获取数据</a></li><li><a href="#7-%E6%B5%8B%E8%AF%95%E8%BF%90%E8%A1%8C">7、测试运行</a></li></ul></li></ul></li><li><a href="#%E7%AC%AC3%E7%AB%A0-springboot%E6%A1%86%E6%9E%B6web%E5%BC%80%E5%8F%91">第3章 SpringBoot框架Web开发</a><ul><li><a href="#srpingboot-%E9%9B%86%E6%88%90-mybatis">SrpingBoot 集成 MyBatis</a><ul><li><a href="#1-%E5%87%86%E5%A4%87%E6%95%B0%E6%8D%AE%E5%BA%93">1、准备数据库</a></li><li><a href="#2-%E5%88%9B%E5%BB%BAspringboot%E9%A1%B9%E7%9B%AE%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96">2、创建springboot项目并添加依赖</a></li><li><a href="#3-%E6%B7%BB%E5%8A%A0mysql%E5%8F%8D%E5%90%91%E5%B7%A5%E7%A8%8B%E6%8F%92%E4%BB%B6">3、添加mysql反向工程插件</a></li><li><a href="#4-%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%90%91%E5%B7%A5%E7%A8%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%88%B0%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%A0%B9%E7%9B%AE%E5%BD%95%E4%B8%8B">4、拷贝反向工程配置文件到项目的根目录下</a></li><li><a href="#5-%E7%82%B9%E5%87%BBmaven%E6%8F%92%E4%BB%B6%E4%B8%AD%E7%9A%84mybatis-generator%E6%8F%92%E4%BB%B6%E7%9A%84generate%E5%91%BD%E4%BB%A4">5、点击maven插件中的mybatis-generator插件的generate命令</a></li><li><a href="#6-springboot%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90">6、springboot核心配置文件中配置数据源</a></li><li><a href="#7-%E5%86%99%E4%BB%A3%E7%A0%81">7、写代码</a></li><li><a href="#8-mapper%E6%B3%A8%E8%A7%A3">8、@Mapper注解</a></li><li><a href="#9-%E6%B3%A8%E6%84%8F">9、注意</a></li><li><a href="#10-%E6%B5%8B%E8%AF%95%E8%BF%90%E8%A1%8C">10、测试运行</a></li></ul></li><li><a href="#dao%E7%9A%84%E5%85%B6%E4%BB%96%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F">Dao的其他开发方式</a><ul><li><a href="#mapperscan%E6%B3%A8%E8%A7%A3">@MapperScan注解</a></li></ul></li><li><a href="#%E5%B0%86%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E5%88%86%E5%BC%80">将接口和映射文件分开</a></li><li><a href="#%E4%BA%8B%E5%8A%A1%E6%94%AF%E6%8C%81">事务支持</a></li><li><a href="#springboot%E4%B8%8B%E7%9A%84springmvc">SpringBoot下的SpringMVC</a><ul><li><a href="#controller">@Controller</a></li><li><a href="#restcontroller">@RestController</a></li><li><a href="#requestmapping%E5%B8%B8%E7%94%A8">@RequestMapping（常用）</a></li><li><a href="#getmapping">@GetMapping</a></li><li><a href="#postmapping">@PostMapping</a></li><li><a href="#putmapping">@PutMapping</a></li><li><a href="#deletemapping">@DeleteMapping</a></li><li><a href="#%E6%BC%94%E7%A4%BA%E5%90%84%E7%A7%8D%E6%B3%A8%E8%A7%A3">演示各种注解</a></li><li><a href="#http-%E6%8E%A5%E5%8F%A3%E8%AF%B7%E6%B1%82%E5%B7%A5%E5%85%B7-postman-%E4%BB%8B%E7%BB%8D">Http 接口请求工具 Postman 介绍</a></li></ul></li><li><a href="#spring-boot-%E5%AE%9E%E7%8E%B0-restful">Spring Boot 实现 RESTful</a><ul><li><a href="#%E8%AE%A4%E8%AF%86-restful">认识 RESTFul</a></li><li><a href="#pathvariable">@PathVariable</a></li><li><a href="#postmapping-1">@PostMapping</a></li><li><a href="#deletemapping-1">@DeleteMapping</a></li><li><a href="#putmapping-1">@PutMapping</a></li><li><a href="#getmapping-1">@GetMapping</a></li><li><a href="#%E6%A1%88%E4%BE%8B%E4%BD%BF%E7%94%A8-restful-%E9%A3%8E%E6%A0%BC%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0%E5%AF%B9%E5%AD%A6%E7%94%9F%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%93%8D%E4%BD%9C">案例：使用 RESTful 风格模拟实现对学生的增删改查操作</a><ul><li><a href="#%E7%9B%B8%E5%85%B3%E4%BE%9D%E8%B5%96">相关依赖</a></li><li><a href="#%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">核心配置文件</a></li><li><a href="#%E9%80%9A%E8%BF%87%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E7%94%9F%E6%88%90-dao">通过逆向工程生成 DAO</a></li><li><a href="#%E5%88%9B%E5%BB%BA-restfulcontroller%E5%B9%B6%E7%BC%96%E5%86%99%E4%BB%A3%E7%A0%81">创建 RESTfulController，并编写代码</a></li></ul></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li><li><a href="#%E8%AF%B7%E6%B1%82%E5%86%B2%E7%AA%81%E7%9A%84%E9%97%AE%E9%A2%98">请求冲突的问题</a></li><li><a href="#restful-%E5%8E%9F%E5%88%99">RESTful 原则</a></li></ul></li><li><a href="#spring-boot-%E9%9B%86%E6%88%90-redis">Spring Boot 集成 Redis</a><ul><li><a href="#1-%E7%94%9F%E6%88%90bean%E5%92%8C%E6%8C%81%E4%B9%85%E5%B1%82">1、生成bean和持久层</a></li><li><a href="#2-%E6%B7%BB%E5%8A%A0-redis-%E4%BE%9D%E8%B5%96">2、添加 redis 依赖</a></li><li><a href="#3-spring-boot-%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">3、Spring Boot 核心配置文件</a></li><li><a href="#4-%E5%90%AF%E5%8A%A8-redis-%E6%9C%8D%E5%8A%A1">4、启动 redis 服务</a></li><li><a href="#5-rediscontroller-%E7%B1%BB">5、RedisController 类</a></li><li><a href="#6-studentservice-%E6%8E%A5%E5%8F%A3%E5%92%8Cstudentserviceimpl%E5%AE%9E%E7%8E%B0%E7%B1%BB">6、StudentService 接口和StudentServiceImpl实现类</a></li><li><a href="#7-studentmapper-%E6%8E%A5%E5%8F%A3%E5%92%8Cstudentmapper-%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6">7、StudentMapper 接口和StudentMapper 映射文件</a></li><li><a href="#8-%E6%B7%BB%E5%8A%A0mapperscan%E6%B3%A8%E8%A7%A3%E5%B9%B6%E5%90%AF%E5%8A%A8">8、添加MapperScan注解并启动</a></li><li><a href="#9-%E8%AE%A9-student-%E7%B1%BB%E5%AE%9E%E7%8E%B0%E5%BA%8F%E5%88%97%E5%8C%96%E6%8E%A5%E5%8F%A3%E5%8F%AF%E9%80%89">9、让 Student 类实现序列化接口（可选）</a></li><li><a href="#10-%E5%90%AF%E5%8A%A8-springboot-%E5%BA%94%E7%94%A8%E8%AE%BF%E9%97%AE%E6%B5%8B%E8%AF%95">10、启动 SpringBoot 应用，访问测试</a></li></ul></li><li><a href="#spring-boot-%E9%9B%86%E6%88%90-dubbo">Spring Boot 集成 Dubbo</a><ul><li><a href="#1-%E6%96%B0%E5%BB%BA%E6%8E%A5%E5%8F%A3%E5%B7%A5%E7%A8%8B">1、新建接口工程</a></li><li><a href="#2-%E6%96%B0%E5%BB%BA%E5%AE%9E%E4%BD%93bean">2、新建实体Bean</a></li><li><a href="#3-%E6%96%B0%E5%BB%BAservice%E6%8E%A5%E5%8F%A3">3、新建Service接口</a></li><li><a href="#4-%E6%96%B0%E5%BB%BA%E6%8F%90%E4%BE%9B%E8%80%85%E5%B7%A5%E7%A8%8B">4、新建提供者工程</a></li><li><a href="#5-%E6%8F%90%E4%BE%9B%E8%80%85%E5%B7%A5%E7%A8%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">5、提供者工程配置文件</a></li><li><a href="#6-application%E4%B8%AD%E5%BC%80%E5%90%AFdubbo%E9%85%8D%E7%BD%AE">6、Application中开启dubbo配置</a></li><li><a href="#7-%E6%96%B0%E5%BB%BAservice%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E7%B1%BB">7、新建Service接口实现类</a></li><li><a href="#8-%E6%96%B0%E5%BB%BA%E6%B6%88%E8%B4%B9%E8%80%85%E5%B7%A5%E7%A8%8B">8、新建消费者工程</a></li><li><a href="#9-%E6%B6%88%E8%B4%B9%E8%80%85%E5%B7%A5%E7%A8%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">9、消费者工程配置文件</a></li><li><a href="#10-application%E4%B8%AD%E5%BC%80%E5%90%AFdubbo%E9%85%8D%E7%BD%AE">10、Application中开启dubbo配置</a></li><li><a href="#11-%E6%96%B0%E5%BB%BAcontroller%E6%96%87%E4%BB%B6">11、新建Controller文件</a></li><li><a href="#12-%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95">12、运行测试</a></li></ul></li><li><a href="#springboot-ssm-redis-dubbo%E9%9B%86%E6%88%90">SpringBoot SSM、redis、dubbo集成</a><ul><li><a href="#1-%E6%96%B0%E5%BB%BA3%E4%B8%AA%E5%B7%A5%E7%A8%8B">1、新建3个工程</a></li><li><a href="#2-%E5%9C%A8%E6%8F%90%E4%BE%9B%E8%80%85%E5%B7%A5%E7%A8%8B%E4%B8%AD%E9%85%8D%E7%BD%AEmysql%E5%8F%8D%E5%90%91%E5%B7%A5%E7%A8%8B">2、在提供者工程中，配置mysql反向工程</a></li><li><a href="#3-%E6%8F%90%E4%BE%9B%E8%80%85%E5%B7%A5%E7%A8%8B%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">3、提供者工程的配置文件</a></li><li><a href="#4-serviceimpl">4、ServiceImpl</a></li><li><a href="#5-%E6%8F%90%E4%BE%9B%E8%80%85%E5%B7%A5%E7%A8%8Bapplication%E7%9A%842%E4%B8%AA%E6%B3%A8%E8%A7%A3">5、提供者工程application的2个注解</a></li><li><a href="#6-%E6%B6%88%E8%B4%B9%E8%80%85%E5%B7%A5%E7%A8%8B%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">6、消费者工程的配置文件</a></li><li><a href="#7-%E6%B6%88%E8%B4%B9%E8%80%85%E5%B7%A5%E7%A8%8B%E7%9A%84controller">7、消费者工程的controller</a></li><li><a href="#8-%E6%B6%88%E8%B4%B9%E8%80%85%E5%B7%A5%E7%A8%8Bapplication%E7%9A%841%E4%B8%AA%E6%B3%A8%E8%A7%A3">8、消费者工程application的1个注解</a></li><li><a href="#9-jsp%E6%96%87%E4%BB%B6">9、jsp文件</a></li><li><a href="#10-%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95">10、运行测试</a></li></ul></li></ul></li><li><a href="#%E7%AC%AC4%E7%AB%A0-springboot-%E9%9D%9Eweb-%E5%92%8C-%E6%94%B9%E5%9B%BE%E6%A0%87%E4%BA%86%E8%A7%A3">第4章 SpringBoot 非web 和 改图标（了解）</a><ul><li><a href="#%E6%96%B9%E5%BC%8F%E4%B8%80%E8%8E%B7%E5%8F%96spring%E5%AE%B9%E5%99%A8%E5%AF%B9%E8%B1%A1%E5%86%8D%E8%8E%B7%E5%8F%96%E4%B8%9A%E5%8A%A1bean%E8%B0%83%E7%94%A8">方式一：获取spring容器对象，再获取业务bean调用</a></li><li><a href="#%E6%96%B9%E5%BC%8F%E4%BA%8Cspring-boot-%E7%9A%84%E5%85%A5%E5%8F%A3%E7%B1%BB%E5%AE%9E%E7%8E%B0commandlinerunner-%E6%8E%A5%E5%8F%A3">方式二：Spring boot 的入口类实现CommandLineRunner 接口</a></li><li><a href="#%E5%85%B3%E9%97%AD-springboot-logo-%E5%9B%BE%E6%A0%87%E5%8F%8A%E5%90%AF%E5%8A%A8%E6%97%A5%E5%BF%97">关闭 SpringBoot Logo 图标及启动日志</a></li><li><a href="#%E4%BF%AE%E6%94%B9%E5%90%AF%E5%8A%A8%E7%9A%84-logo-%E5%9B%BE%E6%A0%87">修改启动的 logo 图标</a></li></ul></li><li><a href="#%E7%AC%AC5%E7%AB%A0-springboot%E4%BD%BF%E7%94%A8%E6%8B%A6%E6%88%AA%E5%99%A8">第5章 SpringBoot使用拦截器</a><ul><li><a href="#%E5%9B%9E%E9%A1%BEspringmvc%E4%BD%BF%E7%94%A8%E6%8B%A6%E6%88%AA%E5%99%A8%E6%AD%A5%E9%AA%A4">回顾springmvc使用拦截器步骤</a></li><li><a href="#springboot-%E4%BD%BF%E7%94%A8%E6%8B%A6%E6%88%AA%E5%99%A8">SpringBoot 使用拦截器</a><ul><li><a href="#1-%E5%88%9B%E5%BB%BAspringboot%E5%B7%A5%E7%A8%8B%E6%A8%A1%E5%9D%97">1、创建Springboot工程（模块）</a></li><li><a href="#2-%E6%96%B0%E5%BB%BAuserinterceptor%E7%94%A8%E6%88%B7%E6%8B%A6%E6%88%AA%E5%99%A8">2、新建UserInterceptor用户拦截器</a></li><li><a href="#3-%E6%96%B0%E5%BB%BAusercontroller">3、新建UserController</a></li><li><a href="#4-%E5%86%99%E4%B8%80%E4%B8%AA%E9%85%8D%E7%BD%AE%E7%B1%BBconfiguration">4、写一个配置类，@Configuration</a></li><li><a href="#5-%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95">5、运行测试</a></li></ul></li></ul></li><li><a href="#%E7%AC%AC6%E7%AB%A0-springboot%E4%B8%AD%E4%BD%BF%E7%94%A8servlet%E4%BA%86%E8%A7%A3">第6章 SpringBoot中使用Servlet（了解）</a><ul><li><a href="#%E6%96%B9%E5%BC%8F%E4%B8%80-%E9%80%9A%E8%BF%87%E6%B3%A8%E8%A7%A3%E6%89%AB%E6%8F%8F%E6%96%B9%E5%BC%8F">方式一 通过注解扫描方式</a><ul><li><a href="#1-%E6%96%B0%E5%BB%BAmyservlet%E6%B3%A8%E8%A7%A3webservlet">1、新建MyServlet，注解@WebServlet</a></li><li><a href="#2-%E5%9C%A8application%E4%B8%8A%E6%B7%BB%E5%8A%A0%E6%B3%A8%E8%A7%A3servletcomponentscan">2、在Application上添加注解@ServletComponentScan</a></li><li><a href="#3-%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95">3、运行测试</a></li></ul></li><li><a href="#%E6%96%B9%E5%BC%8F%E4%BA%8C-%E9%80%9A%E8%BF%87springboot%E7%9A%84%E9%85%8D%E7%BD%AE%E7%B1%BB%E5%AE%9E%E7%8E%B0">方式二 通过SpringBoot的配置类实现</a><ul><li><a href="#1-%E5%88%9B%E5%BB%BAmyservlet">1、创建MyServlet</a></li><li><a href="#2-springboot%E7%9A%84%E9%85%8D%E7%BD%AE%E7%B1%BB%E4%B8%AD%E6%B3%A8%E5%86%8Cservlet">2、SpringBoot的配置类中注册Servlet</a></li><li><a href="#3-%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95-1">3、运行测试</a></li></ul></li></ul></li><li><a href="#%E7%AC%AC7%E7%AB%A0-springboot%E4%B8%AD%E4%BD%BF%E7%94%A8filter%E4%BA%86%E8%A7%A3">第7章 SpringBoot中使用Filter（了解）</a><ul><li><a href="#%E6%96%B9%E5%BC%8F%E4%B8%80%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F">方式一：注解方式</a><ul><li><a href="#1-%E9%80%9A%E8%BF%87%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAfilter">1、通过注解方式创建一个Filter</a></li><li><a href="#2-application%E4%B8%8A%E5%8A%A0%E4%B8%8A%E6%B3%A8%E8%A7%A3servletcomponentscan">2、application上加上注解@ServletComponentScan</a></li><li><a href="#3-%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95-2">3、运行测试</a></li></ul></li><li><a href="#%E6%96%B9%E5%BC%8F%E4%BA%8Cspringboot%E9%85%8D%E7%BD%AE%E7%B1%BB%E6%96%B9%E5%BC%8F">方式二：SpringBoot配置类方式</a><ul><li><a href="#1-%E6%96%B0%E5%BB%BAmyfilter">1、新建MyFilter</a></li><li><a href="#2-%E7%BC%96%E5%86%99%E9%85%8D%E7%BD%AE%E7%B1%BB%E6%B3%A8%E5%86%8Cfilter">2、 编写配置类，注册Filter</a></li></ul></li></ul></li><li><a href="#%E7%AC%AC8%E7%AB%A0-springboot%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81">第8章 SpringBoot项目配置字符编码</a><ul><li><a href="#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAservlet">创建一个Servlet</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E9%85%8D%E7%BD%AE%E7%B1%BB-systemconfig">创建配置类 SystemConfig</a></li><li><a href="#%E5%85%B3%E9%97%AD-springboot-%E7%9A%84-http-%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E6%94%AF%E6%8C%81">关闭 SpringBoot 的 http 字符编码支持</a></li></ul><ul><li><a href="#%E6%96%B9%E6%B3%95%E4%BA%8C%E5%9C%A8-applicationproperties-%E4%B8%AD%E9%85%8D%E7%BD%AE%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E6%8E%A8%E8%8D%90">方法二：在 application.properties 中配置字符编码（推荐）</a><ul><li><a href="#%E5%88%9B%E5%BB%BA-servlet">创建 Servlet</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E9%85%8D%E7%BD%AE%E7%B1%BB-servletconfig">创建配置类 ServletConfig</a></li></ul></li></ul></li><li><a href="#%E7%AC%AC9%E7%AB%A0-springboot%E6%89%93%E5%8C%85%E4%B8%8E%E9%83%A8%E7%BD%B2">第9章 SpringBoot打包与部署</a><ul><li><a href="#spring-boot%E7%A8%8B%E5%BA%8F%E6%89%93-war-%E5%8C%85">Spring Boot程序打 war 包</a></li><li><a href="#spring-boot-%E7%A8%8B%E5%BA%8F%E6%89%93-jar-%E5%8C%85%E4%B8%8E%E8%BF%90%E8%A1%8C">Spring Boot 程序打 Jar 包与运行</a></li><li><a href="#%E6%89%93%E5%8C%85%E4%B8%8E%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93">打包与部署总结</a></li></ul></li><li><a href="#%E7%AC%AC10%E7%AB%A0-springboot-%E9%9B%86%E6%88%90-logback-%E6%97%A5%E5%BF%97">第10章 SpringBoot 集成 logback 日志</a></li><li><a href="#%E7%AC%AC11%E7%AB%A0-springboot-%E9%9B%86%E6%88%90-thymeleaf-%E6%A8%A1%E6%9D%BF">第11章 SpringBoot 集成 Thymeleaf 模板</a><ul><li><a href="#%E8%AE%A4%E8%AF%86thymeleaf">认识ThymeLeaf</a></li><li><a href="#spring-boot-%E9%9B%86%E6%88%90-thymeleaf">Spring Boot 集成 Thymeleaf</a><ul><li><a href="#1-%E5%88%9B%E5%BB%BA%E5%B7%A5%E7%A8%8B">1、创建工程</a></li><li><a href="#2-springboot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">2、springboot配置文件</a></li><li><a href="#3-%E5%86%99controller">3、写Controller</a></li><li><a href="#4-%E5%86%99thymeleaf%E7%9A%84html">4、写thymeleaf的html</a></li><li><a href="#5-%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95-1">5、运行测试</a></li></ul></li><li><a href="#thymeleaf%E8%A1%A8%E8%BE%BE%E5%BC%8F">Thymeleaf表达式</a><ul><li><a href="#%E6%A0%87%E5%87%86%E5%8F%98%E9%87%8F%E8%A1%A8%E8%BE%BE%E5%BC%8F">标准变量表达式</a></li><li><a href="#%E9%80%89%E6%8B%A9%E5%8F%98%E9%87%8F%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BA%86%E8%A7%A3%E4%B8%8D%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8">选择变量表达式（了解，不推荐使用）</a></li><li><a href="#url%E8%A1%A8%E8%BE%BE%E5%BC%8F">URL表达式</a></li></ul></li><li><a href="#thymeleaf-%E7%9A%84%E5%B8%B8%E8%A7%81%E5%B1%9E%E6%80%A7">Thymeleaf 的常见属性</a><ul><li><a href="#thaction">th:action</a></li><li><a href="#thmethod">th:method</a></li><li><a href="#thhref">th:href</a></li><li><a href="#thsrc">th:src</a></li><li><a href="#thid">th:id</a></li><li><a href="#thname">th:name</a></li><li><a href="#thvalue">th:value</a></li><li><a href="#thattr">th:attr</a></li><li><a href="#thtext">th:text</a></li><li><a href="#thobject">th:object</a></li><li><a href="#thonclick">th:onclick</a></li><li><a href="#thstyle">th:style</a></li><li><a href="#font-colorredtheachfont"><font color="red">*th:each</font></a><ul><li><a href="#%E9%81%8D%E5%8E%86-list-%E9%9B%86%E5%90%88">遍历 List 集合</a></li><li><a href="#%E9%81%8D%E5%8E%86-map-%E9%9B%86%E5%90%88">遍历 Map 集合</a></li><li><a href="#%E9%81%8D%E5%8E%86-array-%E6%95%B0%E7%BB%84">遍历 Array 数组</a></li><li><a href="#%E6%AF%94%E8%BE%83%E5%A4%8D%E6%9D%82%E7%9A%84%E5%BE%AA%E7%8E%AF%E6%A1%88%E4%BE%8B">比较复杂的循环案例</a></li></ul></li></ul></li><li><a href="#%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD">条件判断</a><ul><li><a href="#thif-%E5%92%8C-thunless">th:if 和 th:unless</a></li><li><a href="#thswitchthcase">th:switch/th:case</a></li><li><a href="#thinline">th:inline</a></li></ul></li><li><a href="#thymeleaf-%E5%AD%97%E9%9D%A2%E9%87%8F">Thymeleaf 字面量</a></li><li><a href="#thymeleaf-%E8%BF%90%E7%AE%97%E7%AC%A6">Thymeleaf 运算符</a></li><li><a href="#thymaleaf-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9F%BA%E6%9C%AC%E5%AF%B9%E8%B1%A1">Thymaleaf 表达式基本对象</a><ul><li><a href="#request">#request</a></li><li><a href="#session">#session</a></li></ul></li><li><a href="#thymeleaf-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8A%9F%E8%83%BD%E5%AF%B9%E8%B1%A1%E4%BA%86%E8%A7%A3">Thymeleaf 表达式功能对象（了解）</a></li></ul></li><li><a href="#%E7%AC%AC12%E7%AB%A0-%E6%80%BB%E7%BB%93%E5%8F%8A%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B">第12章 总结及综合案例</a><ul><li><a href="#%E6%80%BB%E7%BB%93-1">总结</a></li><li><a href="#%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B">综合案例</a></li></ul></li></ul><!-- tocstop --><h2><span id="第1章-框架入门">第1章 框架入门</span></h2><h3><span id="springboot-简介">SpringBoot 简介</span></h3><p>Spring Boot 用来<font color="red">简化 Spring 应用程序的创建和开发过程</font>，也可以说 Spring Boot 能简化我们之前采用SSM框架进行开发的过程。 </p><p>在以往我们采用 SSM 框架进行开发的时候，搭建和整合三大框架，我们需要做很多工作，比如配置 web.xml，配置 Spring，配置MyBatis，并将它们整合在一起等。</p><p>而 Spring Boot 框架对此开发过程进行了革命性的颠覆，完全抛弃了繁琐的 xml 配置过程，采用大量的默认配置简化我们的开发过程。 </p><p>所以采用 Spring Boot 可以<font color="red">非常容易和快速地创建基于 Spring 框架的应用程序</font>，它让编码变简单了，配置变简单了，部署变简单了，监控变简单了。正因为 Spring Boot 它化繁为简，让开发变得极其简单和快速，所以在业界备受关注。 </p><h3><span id="springboot-的特性">SpringBoot 的特性</span></h3><p>➢ 能够快速创建基于 Spring 的应用程序<br>➢ 能够直接使用 java main 方法启动<font color="red">内嵌的Tomcat 服务器</font>运行 Spring Boot 程序，不需<br>要部署 war 包文件<br>➢ 提供约定的starter POM 来<font color="red">简化Maven 配置</font>，让 Maven 的配置变得简单<br>➢ <font color="red">自动化配置</font>，根据项目的Maven 依赖配置，<font color="red">Spring boot 自动配置 Spring、Spring mvc等 </font><br>➢ 提供了程序的健康检查等功能<br>➢ 基本可以完全不使用XML 配置文件，<font color="red">采用注解配置 </font></p><h3><span id="springboot-四大核心">SpringBoot 四大核心</span></h3><ol><li>  自动配置</li><li>  起步依赖</li><li>  Actuator（国内不用）</li><li>  命令行界面（国内不用）</li></ol><h2><span id="第2章-入门案例">第2章 入门案例</span></h2><h3><span id="第一个-springboot-项目">第一个 SpringBoot 项目</span></h3><h4><span id="1-新建springboot-项目需要联网状态">1、新建SpringBoot 项目（<strong>需要联网状态</strong>）</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110151134866.png" alt="image-20211015113410771"></p><p>Next</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110151135676.png" alt="image-20211015113547638"></p><p>Finish</p><p>第一次新建需要下载相关依赖，请耐心等待。</p><h4><span id="2-项目结构">2、项目结构</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110151139096.png" alt="image-20211015113949066"></p><p>.mvn|mvnw|mvnw.cmd：使用脚本操作执行 maven 相关命令，国内使用较少，可删除</p><p>.gitignore：使用版本控制工具git 的时候，设置一些忽略提交的内容</p><p>static：存放静态资源，如图片，CSS，JavaScript等</p><p>templates：存放Web页面的模板文件</p><p>application.properties/application.yml 用于存放程序的各种依赖模块的配置信息，比如 服务端口，数据库连接配置等 </p><p>Application.java：SpringBoot 程序执行的入口，执行该程序中的main 方法，SpringBoot就启动了</p><h4><span id="3-pomxml文件的解释">3、Pom.xml文件的解释</span></h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--继承SpringBoot框架的一个父项目，所有自己开发的SpringBoot都必须继承--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--当前项目的坐标--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wangpeng.springboot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springboot-first<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--maven项目名称，可以删除--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>001-springboot-first<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--maven项目描述，可以删除--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--maven属性配置，可以在其它地方通过$&#123;&#125;方式进行引用--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--SpringBoot框架web项目起步依赖，通过该依赖自动关联其它依赖，不需要我们一个一个取添加了--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--SpringBoot框架测试起步依赖，例如junit测试，如果不需要的话可以删除--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--SpringBoot项目打包编译的插件--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="4-创建一个controller">4、创建一个Controller</span></h4><p>在com.wangpeng.springboot.web下新建IndexController.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.springboot.web;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/springboot/say&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-meta">@ResponseBody</span> <span class="hljs-function">String <span class="hljs-title">say</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello,SpringBoot!&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><font color="red"><strong>注意：新创建的类一定要位于 Application 同级目录或者下级目录，否则 SpringBoot 加载不到。</strong> </font></p><p>可以看出来，使用方法和SpringMVC一样，加个@Controller注解，@RequestMapping注解设置一下请求路径，然后加个@ResponseBody注解返回一个字符串数据。</p><h4><span id="5-运行">5、运行</span></h4><p>右键运行Application类中的main方法即可。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.springboot;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-comment">//SpringBoot项目启动入口类</span><br><span class="hljs-meta">@SpringBootApplication</span>  <span class="hljs-comment">//开启springboot配置</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;<br><br>    <span class="hljs-comment">//springboot项目代码必须放到Application类所在的同级目录或下级目录</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(Application.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>通过在控制台的输出，可以看到启动 SpringBoot 框架，会启动一个内嵌的 tomcat，端口号为 8080，上下文根为空</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110151307442.png" alt="image-20211015130702330"></p><p>在浏览器中输入 <a href="http://localhost:8080/springBoot/say">http://localhost:8080/springBoot/say</a> 访问</p><h4><span id="6-入门案例分析">6、入门案例分析</span></h4><p>➢ Spring Boot 的父级依赖 spring-boot-starter-parent 配置之后，当前的项目就是 Spring Boot 项目 </p><p>➢ spring-boot-starter-parent 是一个 Springboot 的父级依赖，开发 SpringBoot 程序都需要继承该父级项目，它用来提供相关的Maven 默认依赖，使用它之后，常用的jar包依赖可以省去 version 配置 </p><p>➢ Spring Boot 提供了哪些默认 jar 包的依赖，可查看该父级依赖的 pom 文件</p><p>➢ 如果不想使用某个默认的依赖版本，可以通过 pom.xml 文件的属性配置覆盖各个<br>依赖项，比如覆盖 Spring 版本</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span> <br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">spring-framework.version</span>&gt;</span>5.0.0.RELEASE&lt;/spring-framework.version &gt; <br><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><p>➢ @SpringBootApplication注解是Spring Boot项目的核心注解，主要作用是开启Spring 自动配置，如果在 Application 类上去掉该注解，那么不会启动 SpringBoot<br>程序 </p><p>➢ main 方法是一个标准的 Java 程序的 main 方法，主要作用是作为项目启动运行的入口 </p><p>➢ @Controller 及 @ResponseBody 依然是我们之前的 Spring MVC，因为 Spring Boot的里面依然是使用我们的 Spring MVC + Spring + MyBatis 等框架 </p><h3><span id="spring-boot-的核心配置文件">Spring Boot 的核心配置文件</span></h3><p>Spring Boot 的核心配置文件用于配置 Spring Boot 程序，名字必须以 application 开始</p><h4><span id="properties-文件">.properties 文件</span></h4><p>通过修改 application.properties 配置文件，在修改默认 tomcat <font color="red">端口号</font>及项目<font color="red">上下文根</font>。</p><p>键值对的 properties 属性文件配置方式</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment">#设置内嵌Tomcat端口号 </span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">9090 </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#配置项目上下文根 </span><br><span class="hljs-meta">server.servlet.context-path</span>=<span class="hljs-string">/003-springboot-port-context-path </span><br></code></pre></div></td></tr></table></figure><h4><span id="yml-文件">.yml 文件</span></h4><p>yml 是一种 yaml 格式的配置文件，主要采用一定的空格、换行等格式排版进行配置。</p><p>yaml 是一种直观的能够被计算机识别的的数据序列化格式，容易被人类阅读，yaml 类似于 xml，但是语法比 xml 简洁很多，<font color="red">值与前面的冒号配置项必须要有一个空格</font>， <strong>yml 后缀也可以使用 yaml 后缀</strong>。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110151312865.png" alt="image-20211015131244830"></p><p>注意：当两种格式配置文件同时存在，使用的是.properties 配置文件。</p><h3><span id="多环境开发">多环境开发</span></h3><p>在实际开发的过程中，我们的项目会经历很多的阶段（开发-&gt;测试-&gt;上线），每个阶段<br>的配置也会不同，例如：端口、上下文根、数据库等，那么这个时候为了方便在不同的环境之间切换，SpringBoot 提供了多环境配置，具体步骤如下</p><h4><span id="使用properties文件">使用.properties文件</span></h4><p>1、为每个环境创建一个配置文件，命名必须以application-环境标识.properties|yml</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110151314244.png" alt="image-20211015131433218"></p><p>2、不同的配置文件</p><p>application-dev.properties</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment">#开发环境</span><br><span class="hljs-comment">#设置内嵌Tomcat默认端口号 </span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">8080 </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#设置项目的上下文根 </span><br><span class="hljs-meta">server.servlet.context-path</span>=<span class="hljs-string">/005-springboot-multi-environment-dev </span><br></code></pre></div></td></tr></table></figure><p>application-product.properties</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment">#生产环境 </span><br><span class="hljs-comment">#配置内嵌Tomcat默认端口号 </span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">80 </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#配置项目上下文根 </span><br><span class="hljs-meta">server.servlet.context-path</span>=<span class="hljs-string">/005-springboot-multi-environment-product </span><br></code></pre></div></td></tr></table></figure><p>application-test.properties</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment">#测试环境 </span><br><span class="hljs-comment">#配置内嵌Tomcat端口号 </span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">8081 </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#配置项目的上下文根 </span><br><span class="hljs-meta">server.servlet.context-path</span>=<span class="hljs-string">/005-springboot-multi-environment-test </span><br></code></pre></div></td></tr></table></figure><p>在总配置文件 application.properties 进行环境的激活</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment">#SpringBoot的总配置文件 </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#激活开发环境 </span><br><span class="hljs-comment">#spring.profiles.active=dev </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#激活测试环境 </span><br><span class="hljs-comment">#spring.profiles.active=test </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#激活生产环境 </span><br><span class="hljs-meta">spring.profiles.active</span>=<span class="hljs-string">product</span><br></code></pre></div></td></tr></table></figure><p><font color="purple">等号右边的值和配置文件的环境标识名一致，可以更改总配置文件的配置，重新运行Application，查看启动的端口及上下文根</font></p><h4><span id="使用yml文件">使用.yml文件</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110151318315.png" alt="image-20211015131830268"></p><p>SpringBoot 总配置文件：application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment">#springboot总配置文件 </span><br> <br><span class="hljs-comment">#激活开发环境 </span><br><span class="hljs-comment">#spring: </span><br><span class="hljs-comment">#  profiles: </span><br><span class="hljs-comment">#    active: dev</span><br><span class="hljs-comment">#激活测试环境 </span><br><span class="hljs-comment">#spring: </span><br><span class="hljs-comment">#  profiles: </span><br><span class="hljs-comment">#    active: test </span><br> <br><span class="hljs-comment">#激活生产环境 </span><br><span class="hljs-attr">spring:</span> <br>  <span class="hljs-attr">profiles:</span> <br>    <span class="hljs-attr">active:</span> <span class="hljs-string">product</span><br></code></pre></div></td></tr></table></figure><p>开发环境配置文件：application-dev.yml</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment">#设置开发环境配置 </span><br>  <br><span class="hljs-attr">server:</span> <br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span> <span class="hljs-comment">#设置Tomcat内嵌端口号 </span><br>  <span class="hljs-attr">servlet:</span> <br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/dev</span>  <span class="hljs-comment">#设置上下文根</span><br>    <br></code></pre></div></td></tr></table></figure><p>测试环境配置文件：application-test.yml</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment">#设置测试环境配置 </span><br> <br><span class="hljs-attr">server:</span> <br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9090</span> <br>  <span class="hljs-attr">servlet:</span> <br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/test</span><br></code></pre></div></td></tr></table></figure><p>生产环境配置文件：application-product.yml</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment">#设置生产环境配置 </span><br> <br><span class="hljs-attr">server:</span> <br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span> <br>  <span class="hljs-attr">servlet:</span> <br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/product</span><br></code></pre></div></td></tr></table></figure><h3><span id="spring-boot-自定义配置">Spring Boot 自定义配置</span></h3><p>在 SpringBoot 的核心配置文件中，除了使用内置的配置项之外，我们还可以在自定义配置，然后采用如下注解去读取配置的属性值</p><h4><span id="value-注解">@Value 注解</span></h4><p>在核心配置文件 applicatin.properties 中，添加两个自定义配置项 school.name 和<br>website。在 IDEA 中可以看到这两个属性不能被 SpringBoot 识别，背景是桔色的</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110151326459.png" alt="image-20211015132638416"></p><p>application.yml 格式配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment">#设置端口号及上下文根 </span><br><span class="hljs-attr">server:</span> <br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9090</span> <br>  <span class="hljs-attr">servlet:</span> <br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/</span> <br> <br><span class="hljs-attr">school:</span> <br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ssm</span> <br><span class="hljs-attr">websit:</span> <span class="hljs-string">http://www.baidu.com</span><br></code></pre></div></td></tr></table></figure><p>使用@Value注解 赋值给变量，相当于直接 = 号赋默认初值。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringBootController</span> </span>&#123; <br> <br>    <span class="hljs-meta">@Value(&quot;$&#123;school.name&#125;&quot;)</span> <br>    <span class="hljs-keyword">private</span> String schoolName; <br> <br>    <span class="hljs-meta">@Value(&quot;$&#123;websit&#125;&quot;)</span> <br>    <span class="hljs-keyword">private</span> String websit; <br> <br>    <span class="hljs-meta">@RequestMapping(value = &quot;/springBoot/say&quot;)</span> <br>    <span class="hljs-keyword">public</span> <span class="hljs-meta">@ResponseBody</span> <span class="hljs-function">String <span class="hljs-title">say</span><span class="hljs-params">()</span> </span>&#123; <br>        <span class="hljs-keyword">return</span> schoolName + <span class="hljs-string">&quot;------&quot;</span> + websit; <br>    &#125; <br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="configurationproperties">@ConfigurationProperties</span></h4><p>在 com.abc.springboot.config 包下创建 ConfigInfo 类，并为该类加上 Component 和ConfigurationProperties 注解，并在 ConfigurationProperties 注解中添加属性 prefix，作用可以区分同名配置</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-comment">//创建对象，交给spring管理</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;school&quot;)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConfigInfo</span> </span>&#123; <br> <br>    <span class="hljs-keyword">private</span> String name; <br> <br>    <span class="hljs-keyword">private</span> String websit; <br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123; <br>        <span class="hljs-keyword">return</span> name; <br>    &#125; <br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123; <br>        <span class="hljs-keyword">this</span>.name = name; <br>    &#125; <br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getWebsit</span><span class="hljs-params">()</span> </span>&#123; <br>        <span class="hljs-keyword">return</span> websit; <br>    &#125; <br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setWebsit</span><span class="hljs-params">(String websit)</span> </span>&#123; <br>        <span class="hljs-keyword">this</span>.websit = websit; <br>    &#125; <br>&#125;<br></code></pre></div></td></tr></table></figure><p>application.properties 配置文件</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment">#设置内嵌Tomcat端口号 </span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">9090 </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#设置上下文根 </span><br><span class="hljs-meta">server.servlet.context-path</span>=<span class="hljs-string">/config</span><br> <br><span class="hljs-meta">school.name</span>=<span class="hljs-string">ssm </span><br><span class="hljs-meta">school.websit</span>=<span class="hljs-string">http://www.baidu.com</span><br></code></pre></div></td></tr></table></figure><p>application.yml 配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span> <br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9090</span> <br>  <span class="hljs-attr">servlet:</span> <br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/config</span><br><br><span class="hljs-attr">school:</span> <br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ABC</span> <br>  <span class="hljs-attr">websit:</span> <span class="hljs-string">http://www.baidu.com</span><br></code></pre></div></td></tr></table></figure><p>在 SpringBootController 中注入 ConfigInfo 配置类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span> <br><span class="hljs-keyword">private</span> ConfigInfo configInfo;<br></code></pre></div></td></tr></table></figure><p>修改 SpringBootController 类中的测试方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/springBoot/config&quot;)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-meta">@ResponseBody</span> <span class="hljs-function">String <span class="hljs-title">say</span><span class="hljs-params">()</span> </span>&#123; <br>    <span class="hljs-keyword">return</span> configInfo.getName() + <span class="hljs-string">&quot;=======&quot;</span> + configInfo.getWebsit(); <br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="警告解决">警告解决</span></h4><p>在 ConfigInfo 类中使用了 ConfigurationProperties 注解后，IDEA 会出现一个警告，<br>不影响程序的执行</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110151345641.png" alt="image-20211015134509604"></p><p>点击 open documentnation 跳转到网页，在网页中提示需要加一个依赖，我们将这<br>个依赖拷贝，粘贴到 pom.xml 文件中</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--解决使用@ConfigurationProperties注解出现警告问题--&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="中文乱码">中文乱码</span></h4><p>如果在 SpringBoot 核心配置文件中有中文信息，会出现乱码</p><ul><li>  一般在配置文件中，不建议出现中文（注释除外）</li><li>  如果有，可以先转化为 ASCII 码</li></ul><h4><span id="友情提示">友情提示</span></h4><p>大家如果是从其它地方拷贝的配置文件，一定要将里面的空格删干净</p><h3><span id="spring-boot-前端使用-jsp">Spring Boot 前端使用 JSP</span></h3><h4><span id="1-maven配置依赖项">1、maven配置依赖项</span></h4><p>在 pom.xml 文件中配置以下依赖项</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入Spring Boot内嵌的Tomcat对JSP的解析包，不加解析不了jsp页面--&gt;</span> <br><span class="hljs-comment">&lt;!--如果只是使用JSP页面，可以只添加该依赖--&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br> <br><span class="hljs-comment">&lt;!--如果要使用servlet必须添加该以下两个依赖--&gt;</span> <br><span class="hljs-comment">&lt;!-- servlet依赖的jar包--&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> <br> <br><span class="hljs-comment">&lt;!--如果使用JSTL必须添加该依赖--&gt;</span> <br><span class="hljs-comment">&lt;!--jstl标签依赖的jar包start--&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="2-maven配置编译目录">2、maven配置编译目录</span></h4><p>在 pom.xml 的 **<font color="red">build 标签中</font>**要配置以下信息</p><p>SpringBoot 要求 jsp 文件必须编译到指定的 META-INF/resources 目录下才能访问，否则访问不到。其实官方已经更建议使用模板技术（后面会讲模板技术）</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">    SpringBoot要求jsp文件必须编译到指定的META-INF/resources目录下才能访问，否则访问</span><br><span class="hljs-comment">不到。 </span><br><span class="hljs-comment">    其它官方已经建议使用模版技术（后面会课程会单独讲解模版技术） </span><br><span class="hljs-comment">--&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--源文件位置--&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/webapp<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span> <br>        <span class="hljs-comment">&lt;!--指定编译到META-INF/resources，该目录不能随便写--&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>&gt;</span>META-INF/resources<span class="hljs-tag">&lt;/<span class="hljs-name">targetPath</span>&gt;</span> <br>        <span class="hljs-comment">&lt;!--指定要把哪些文件编译进去，**表示webapp目录及子目录，*.*表示所有文件--&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.*<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><h4><span id="3-配置springmvc配置">3、配置springmvc配置</span></h4><p>在 application.properties 文件配置 Spring MVC 的视图展示为jsp，这里相当于 Spring MVC 的配置</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment">#SpringBoot核心配置文件 </span><br><span class="hljs-comment">#指定内嵌Tomcat端口号 </span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">8090 </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#配置SpringMVC视图解析器 </span><br><span class="hljs-comment">#其中：/ 表示目录为src/main/webapp </span><br><span class="hljs-meta">spring.mvc.view.prefix</span>=<span class="hljs-string">/ </span><br><span class="hljs-meta">spring.mvc.view.suffix</span>=<span class="hljs-string">.jsp</span><br></code></pre></div></td></tr></table></figure><p>application.yml 格式的配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment">#SpringBoot 核心配置文件 </span><br><span class="hljs-comment">#指定内嵌Tomcat 端口号 </span><br><span class="hljs-attr">server :</span> <br> <span class="hljs-attr">port :</span> <span class="hljs-number">8090</span> <br> <span class="hljs-attr">servlet :</span> <br> <span class="hljs-attr">context - path :</span> <span class="hljs-string">/</span> <br> <br><span class="hljs-comment">#配置SpringMVC视图解析器 </span><br><br><span class="hljs-comment">#其中：/ 表示目录为src/main/webapp </span><br><br><span class="hljs-attr">spring :</span> <br>  <span class="hljs-attr">mvc:</span> <br>  <span class="hljs-attr">view :</span> <br>    <span class="hljs-attr">prefix:</span> <span class="hljs-string">/</span> <br><span class="hljs-attr">suffix:</span> <span class="hljs-string">.jsp</span> <br></code></pre></div></td></tr></table></figure><p><font color="purple">集成完毕之后，剩下的步骤和我们使用 Spring MVC 一样</font></p><h4><span id="4-代码编写">4、代码编写</span></h4><p>在 com.abc.springboot.controller 包下创建 JspController 类，并编写代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringBootController</span> </span>&#123; <br> <br>    <span class="hljs-meta">@RequestMapping(value = &quot;/springBoot/jsp&quot;)</span> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">jsp</span><span class="hljs-params">(Model model)</span> </span>&#123; <br> <br>        model.addAttribute(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;SpringBoot 前端使用JSP页面！&quot;</span>); <br> <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>; <br>    &#125; <br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="5-新建界面">5、新建界面</span></h4><ol><li><p>  在 src/main 下创建一个 webapp 目录</p></li><li><p>  在Project Structure 中指定webapp为 Web Resource Directory</p></li><li><p>  根据提示创建一下Artifacts</p></li><li><p>  新建jsp页面</p></li></ol><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110151357386.png" alt="image-20211015135751329"></p><h4><span id="6-jsp获取数据">6、jsp获取数据</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110151358896.png" alt="image-20211015135817846"></p><h4><span id="7-测试运行">7、测试运行</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110151358285.png" alt="image-20211015135828256"></p><p><font color="red">注意：如果出不来，重启IDEA！！！！</font></p><h2><span id="第3章-springboot框架web开发">第3章 SpringBoot框架Web开发</span></h2><h3><span id="srpingboot-集成-mybatis">SrpingBoot 集成 MyBatis</span></h3><h4><span id="1-准备数据库">1、准备数据库</span></h4><p>创建数据库，库名springboot，编码utf-8</p><p>创建表，表名t_student</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110172245773.png" alt="image-20211017224549685"></p><p>插入数据</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110172246009.png" alt="image-20211017224622968"></p><p><font color="red">或者创建好数据库后，直接导入附件中的springboot.sql</font></p><h4><span id="2-创建springboot项目并添加依赖">2、创建springboot项目并添加依赖</span></h4><p>MyBatis和MySQL的依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--MyBatis整合SpringBoot的起步依赖--&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--MySQL的驱动依赖--&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="3-添加mysql反向工程插件">3、添加mysql反向工程插件</span></h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span> <br>        <span class="hljs-comment">&lt;!--配置文件的位置--&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">configurationFile</span>&gt;</span>GeneratorMapper.xml<span class="hljs-tag">&lt;/<span class="hljs-name">configurationFile</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">verbose</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">verbose</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">overwrite</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">overwrite</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><h4><span id="4-拷贝反向工程配置文件到项目的根目录下">4、拷贝反向工程配置文件到项目的根目录下</span></h4><p>GeneratorMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">generatorConfiguration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定连接数据库的 JDBC 驱动包所在位置，指定到你本机的完整路径 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">classPathEntry</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;D:\mysql-connector-java-5.1.6.jar&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置 table 表信息内容体，targetRuntime 指定采用 MyBatis3 的版本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tables&quot;</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 抑制生成注释，由于生成的注释都是英文的，可以不让它生成 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">commentGenerator</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suppressAllComments&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">commentGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 配置数据库连接信息 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/springboot&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;root&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;wangpeng123&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 生成 model 类，targetPackage 指定 model 类的包名</span><br><span class="hljs-comment">        targetProject 指定生成的 model 放在 eclipse 的哪个工程下面--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.wangpeng.springboot.model&quot;</span></span><br><span class="hljs-tag">                            <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src/main/java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 生成 MyBatis 的 Mapper.xml 文件，targetPackage 指定 mapper.xml 文件的</span><br><span class="hljs-comment">        包名， targetProject 指定生成的 mapper.xml 放在 eclipse 的哪个工程下面 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.wangpeng.springboot.mapper&quot;</span></span><br><span class="hljs-tag">                         <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src/main/java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 生成 MyBatis 的 Mapper 接口类文件,targetPackage 指定 Mapper 接口类的包</span><br><span class="hljs-comment">        名， targetProject 指定生成的 Mapper 接口放在 eclipse 的哪个工程下面 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span></span><br><span class="hljs-tag">                             <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.wangpeng.springboot.mapper&quot;</span> <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src/main/java&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 数据库表名及对应的 Java 模型类名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_student&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;Student&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">enableCountByExample</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">enableUpdateByExample</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">enableDeleteByExample</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">enableSelectByExample</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">selectByExampleQueryId</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110172251796.png" alt="image-20211017225110748"></p><p><strong>根据项目和数据库表的情况，修改GeneratorMapper.xml配置</strong></p><p><font color="red">➢ 如果使用高版本，驱动类变为：com.mysql.cj.jdbc.Driver </font><br><font color="red">➢ url 后面应该加属性 nullCatalogMeansCurrent=true，否则生成有问题<br>当前版本 MySQL 数据库为 5.7.18 </font></p><h4><span id="5-点击maven插件中的mybatis-generator插件的generate命令">5、点击maven插件中的mybatis-generator插件的generate命令</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110172255031.png" alt="image-20211017225549968"></p><p>生成相关文件</p><h4><span id="6-springboot核心配置文件中配置数据源">6、springboot核心配置文件中配置数据源</span></h4><p>mysql 5的配置</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment"># tomcat端口号</span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">9090</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 上下文根</span><br><span class="hljs-meta">server.servlet.context-path</span>=<span class="hljs-string">/04-springboot-mybatis</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 数据库配置</span><br><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/springboot?useUnicode=true&amp;characterEncoding=UTF-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=Asia/Shanghai</span><br><br><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">wangpeng123</span><br></code></pre></div></td></tr></table></figure><p>mysql 8的配置</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment">#配置内嵌Tomcat端口号 </span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">9090</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#配置项目上下文根 </span><br><span class="hljs-meta">server.servlet.context-path</span>=<span class="hljs-string">/04-springboot-web-mybatis</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#配置数据库的连接信息 </span><br><span class="hljs-comment">#注意这里的驱动类有变化</span><br><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver </span><br><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/springboot?useUnicode=true&amp;characterEncoding=UTF-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=GMT%2B8</span><br><br><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">123456</span><br></code></pre></div></td></tr></table></figure><p>GMT%2B8表示东八区，也可以使用Asia/Shanghai，表示中国地区</p><p>两者的区别，中国在1986-1991年期间使用夏令时，夏季采用东9区（拨快1小时），使用Asia/Shanghai在1986-1991年这段时间就自动调整时区。</p><h4><span id="7-写代码">7、写代码</span></h4><p>因为dao层已经帮我们生成了，所以就只需要写service层和controller层的内容。</p><p>StudentController</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentController</span> </span>&#123; <br> <br>    <span class="hljs-meta">@Autowired</span> <br>    <span class="hljs-keyword">private</span> StudentService studentService; <br> <br>    <span class="hljs-meta">@RequestMapping(value = &quot;/springBoot/student&quot;)</span> <br>    <span class="hljs-keyword">public</span> <span class="hljs-meta">@ResponseBody</span> <span class="hljs-function">Object <span class="hljs-title">student</span><span class="hljs-params">()</span> </span>&#123; <br> <br>        Student student = studentService.queryStudentById(<span class="hljs-number">1</span>); <br> <br>        <span class="hljs-keyword">return</span> student; <br>    &#125; <br>&#125;<br></code></pre></div></td></tr></table></figure><p>StudentService</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentService</span> </span>&#123; <br> <br>    <span class="hljs-comment">/** </span><br><span class="hljs-comment">     * 根据学生标识获取学生详情 </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> </span><br><span class="hljs-comment">     */</span> <br>    <span class="hljs-function">Student <span class="hljs-title">queryStudentById</span><span class="hljs-params">(Integer id)</span></span>; <br>&#125;<br></code></pre></div></td></tr></table></figure><p>StudentServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">StudentService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StudentMapper studentMapper;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Student <span class="hljs-title">queryStudentById</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> studentMapper.selectByPrimaryKey(id);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="8-mapper注解">8、@Mapper注解</span></h4><p>给反向生成的 StudentMapper 接口上加一个 Mapper 注解</p><p>@Mapper 作用：mybatis 自动扫描数据持久层的映射文件及 DAO 接口的关系</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentMapper</span> </span>&#123;<br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="9-注意">9、注意</span></h4><p>默认情况下，Mybatis 的 xml 映射文件不会编译到 target 的 class 目录下，所<br>以我们需要在 pom.xml 文件中配置 resource</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="10-测试运行">10、测试运行</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110172302893.png" alt="image-20211017230214839"></p><h3><span id="dao的其他开发方式">Dao的其他开发方式</span></h3><h4><span id="mapperscan注解">@MapperScan注解</span></h4><p>在 运 行 的 主 类 上 添 加 注 解 包 扫 描<br>@MapperScan(“com.abc.springboot.mapper”)</p><p>在运行主类 Application 上加@MapperScan(“com.abc.springboot.mapper”)</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span> <br><span class="hljs-meta">@MapperScan(basePackages = &quot;com.abc.springboot.mapper&quot;)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;<br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure><p>《basePackages = 》可以省略</p><p>开启了扫描注解，扫描数据持久层的mapper映谢配置文件，就不用写@Mapper注解了，更加方便。</p><h3><span id="将接口和映射文件分开">将接口和映射文件分开</span></h3><p>因为 SpringBoot 不能自动编译接口映射的 xml 文件，还需要手动在 pom 文件中指定，所以有的公司直接将映射文件直接放到resources 目录下</p><p>在 resources 目录下新建目录 mapper 存放映射文件，将 StudentMapper.xml 文件移到 resources/mapper 目录下</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110181539638.png" alt="image-20211018153908532"></p><p>在 application.properties 配置文件中指定映射文件的位置，<font color="red">这个配置只有接口和映射文件不在同一个包的情况下，才需要指定</font></p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment"># 指定Mybatis映射文件的路径 </span><br><span class="hljs-meta">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:mapper/*.xml</span><br></code></pre></div></td></tr></table></figure><p>当然这时候，pom.xml的resource也可以不打包javad里的xml了。</p><h3><span id="事务支持">事务支持</span></h3><p>Spring Boot 使用事务非常简单，底层依然采用的是 Spring 本身提供的事务管理</p><p>在<font color="red">入口类中使用注解 @EnableTransactionManagement 开启事务支持</font></p><p>在访问数据库的<font color="red"> Service 方法上添加注解 @Transactional </font>即可</p><p>懒得测试了</p><h3><span id="springboot下的springmvc">SpringBoot下的SpringMVC</span></h3><h4><span id="controller">@Controller</span></h4><p>Spring MVC 的注解，处理 http 请求</p><h4><span id="restcontroller">@RestController</span></h4><p>Spring 4 后新增注解，是@Controller 注解功能的增强<br><font color="red">是 @Controller 与@ResponseBody 的组合注解 </font><br>如果一个 Controller 类添加了@RestController，那么该Controller 类下的<font color="red">所有方法都相当于添加了@ResponseBody 注解</font>，用于返回字符串或json 数据 </p><p>演示</p><p>创建 MyRestController 类，演示@RestController 替代@Controller + @ResponseBody</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRestController</span> </span>&#123; <br>    <span class="hljs-meta">@Autowired</span> <br>    <span class="hljs-keyword">private</span> StudentService studentService; <br> <br>    <span class="hljs-meta">@RequestMapping(&quot;/boot/stu&quot;)</span> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">stu</span><span class="hljs-params">()</span></span>&#123; <br>        <span class="hljs-keyword">return</span> studentService.getStudentById(<span class="hljs-number">1</span>); <br>    &#125; <br>&#125;<br></code></pre></div></td></tr></table></figure><p>启动应用，浏览器访问测试</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110181546312.png" alt="image-20211018154634272"></p><h4><span id="requestmapping常用">@RequestMapping（常用）</span></h4><p>支持Get 请求，也支持Post 请求</p><h4><span id="getmapping">@GetMapping</span></h4><p>RequestMapping 和 Get 请求方法的组合<br><font color="red">只支持 Get 请求 </font><br>Get 请求主要用于<font color="red">查询操作</font></p><h4><span id="postmapping">@PostMapping</span></h4><p>RequestMapping 和 Post 请求方法的组合</p><p><font color="red">只支持 Post 请求 </font><br>Post 请求主要用户<font color="red">新增数据</font></p><h4><span id="putmapping">@PutMapping</span></h4><p>RequestMapping 和 Put 请求方法的组合</p><p><font color="red">只支持 Put 请求</font></p><p>Put 通常用于<font color="red">修改数据</font></p><h4><span id="deletemapping">@DeleteMapping</span></h4><p>RequestMapping 和 Delete 请求方法的组合<br><font color="red">只支持 Delete 请求 </font><br>通常用于<font color="red">删除数据 </font></p><h4><span id="演示各种注解">演示各种注解</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"> <br><span class="hljs-comment">/** </span><br><span class="hljs-comment"> * 该案例主要演示了使用Spring提供的不同注解接收不同类型的请求 </span><br><span class="hljs-comment"> */</span> <br><span class="hljs-comment">//RestController注解相当于加了给方法加了@ResponseBody注解，所以是不能跳转页面的，</span><br>只能返回字符串或者json数据 <br><span class="hljs-meta">@RestController</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MVCController</span> </span>&#123; <br> <br>    <span class="hljs-meta">@GetMapping(value = &quot;/query&quot;)</span> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>&#123; <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;@GetMapping注解,通常查询时使用&quot;</span>; <br>    &#125; <br> <br> <br>    <span class="hljs-meta">@PostMapping(value = &quot;/add&quot;)</span> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123; <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;@PostMapping注解，通常新增时使用&quot;</span>; <br>    &#125; <br> <br>    <span class="hljs-meta">@PutMapping(value = &quot;/modify&quot;)</span> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">modify</span><span class="hljs-params">()</span> </span>&#123; <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;@PutMapping注解，通常更新数据时使用&quot;</span>; <br>    &#125; <br> <br>    <span class="hljs-meta">@DeleteMapping(value = &quot;/remove&quot;)</span> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">remove</span><span class="hljs-params">()</span> </span>&#123; <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;@DeleteMapping注解，通常删除数据时使用&quot;</span>; <br>    &#125; <br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="http-接口请求工具-postman-介绍">Http 接口请求工具 Postman 介绍</span></h4><p>因为通过浏览器输入地址，默认发送的只能是 get 请求，通过 Postman 工具，可以模拟发送不同类型的请求，并查询结果，在安装的时候，有些机器可能会需要安装MicroSort .NET Framework</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110181549945.png" alt="image-20211018154950884"></p><p>使用 Postman 对其它请求类型做个测试</p><h3><span id="spring-boot-实现-restful">Spring Boot 实现 RESTful</span></h3><h4><span id="认识-restful">认识 RESTFul</span></h4><p>REST（英文：Representational State Transfer，简称 REST）</p><p>一种互联网软件架构设计的风格，但它并不是标准，它只是提出了一组客户端和服务器交互时的架构理念和设计原则，基于这种理念和原则设计的接口可以更简洁，更有层次。</p><p>任何的技术都可以实现这种理念，如果一个架构符合 REST 原则，就称它为 RESTFul 架构</p><p>比如我们要访问一个http 接口：<a href="http://localhost:8080/boot/order?id=1021&amp;status=1">http://localhost:8080/boot/order?id=1021&amp;status=1</a></p><p>采用RESTFul 风格则 http 地址为：<a href="http://localhost:8080/boot/order/1021/1">http://localhost:8080/boot/order/1021/1</a></p><p>好处是可以混淆参数</p><p><strong>Spring boot 开发RESTFul 主要是几个注解实现</strong></p><h4><span id="pathvariable">@PathVariable</span></h4><p>获取url 中的数据<br><font color="red">该注解是实现 RESTFul 最主要的一个注解</font></p><h4><span id="postmapping">@PostMapping</span></h4><p>接收和处理Post 方式的请求 </p><h4><span id="deletemapping">@DeleteMapping</span></h4><p>接收delete 方式的请求，可以使用 GetMapping 代替</p><h4><span id="putmapping">@PutMapping</span></h4><p>接收put 方式的请求，可以用PostMapping 代替</p><h4><span id="getmapping">@GetMapping</span></h4><p>接收get 方式的请求</p><h4><span id="案例使用-restful-风格模拟实现对学生的增删改查操作">案例：使用 RESTful 风格模拟实现对学生的增删改查操作</span></h4><h5><span id="相关依赖">相关依赖</span></h5><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span> <br>    <span class="hljs-comment">&lt;!--SpringBoot框架web项目起步依赖--&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> <br><br>    <span class="hljs-comment">&lt;!--MyBatis集成SpringBoot框架起步依赖--&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--MySQL驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span> <br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span> <br>    <span class="hljs-comment">&lt;!--指定配置资源的位置--&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span> <br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span> <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--mybatis代码自动生成插件--&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span> <br>                <span class="hljs-comment">&lt;!--配置文件的位置--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">configurationFile</span>&gt;</span>GeneratorMapper.xml<span class="hljs-tag">&lt;/<span class="hljs-name">configurationFile</span>&gt;</span> <br>                <span class="hljs-tag">&lt;<span class="hljs-name">verbose</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">verbose</span>&gt;</span> <br>                <span class="hljs-tag">&lt;<span class="hljs-name">overwrite</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">overwrite</span>&gt;</span> <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span> <br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><p>没有啥特别的</p><h5><span id="核心配置文件">核心配置文件</span></h5><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span> <br><span class="hljs-attr">port:</span> <span class="hljs-number">8090</span><br><span class="hljs-comment">#设置Tomcat内嵌端口号 </span><br><span class="hljs-attr">servlet:</span> <br><span class="hljs-attr">context-path:</span> <span class="hljs-string">/</span> <span class="hljs-comment">#设置上下文根 </span><br><br><span class="hljs-comment">#配置数据源 </span><br><span class="hljs-attr">spring:</span> <br>  <span class="hljs-attr">datasource:</span> <br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span> <br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/springboot?useUnicode=true&amp;characterEncoding=UTF-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span> <br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span> <br></code></pre></div></td></tr></table></figure><p>也没有啥特别的</p><h5><span id="通过逆向工程生成-dao">通过逆向工程生成 DAO</span></h5><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110191929979.png" alt="image-20211019192915895"></p><h5><span id="创建-restfulcontroller并编写代码">创建 RESTfulController，并编写代码</span></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RESTfulController</span> </span>&#123; <br><br>    <span class="hljs-comment">/** </span><br><span class="hljs-comment">     * 添加学生 </span><br><span class="hljs-comment">     * 请求地址：</span><br><span class="hljs-comment">http://localhost:9090/014-springboot-restful/springBoot/student/wangpeng/23 </span><br><span class="hljs-comment">     * 请求方式：POST </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> </span><br><span class="hljs-comment">     */</span> <br>    <span class="hljs-meta">@PostMapping(value = &quot;/springBoot/student/&#123;name&#125;/&#123;age&#125;&quot;)</span> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">addStudent</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;name&quot;)</span> String name, </span></span><br><span class="hljs-params"><span class="hljs-function">                             <span class="hljs-meta">@PathVariable(&quot;age&quot;)</span> Integer age)</span> </span>&#123; <br><br>        Map&lt;String,Object&gt; retMap = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;(); <br>        retMap.put(<span class="hljs-string">&quot;name&quot;</span>,name); <br>        retMap.put(<span class="hljs-string">&quot;age&quot;</span>,age); <br><br>        <span class="hljs-keyword">return</span> retMap; <br>    &#125;<br>    <span class="hljs-comment">/** </span><br><span class="hljs-comment">     * 删除学生 </span><br><span class="hljs-comment">     * 请求地址：</span><br><span class="hljs-comment">http://localhost:9090/014-springboot-restful/springBoot/student/1 </span><br><span class="hljs-comment">     * 请求方式：Delete </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> </span><br><span class="hljs-comment">     */</span> <br>    <span class="hljs-meta">@DeleteMapping(value = &quot;/springBoot/student/&#123;id&#125;&quot;)</span> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">removeStudent</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123; <br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;删除的学生id为：&quot;</span> + id; <br>    &#125; <br><br>    <span class="hljs-comment">/** </span><br><span class="hljs-comment">     * 修改学生信息 </span><br><span class="hljs-comment">     * 请求地址：</span><br><span class="hljs-comment">http://localhost:9090/014-springboot-restful/springBoot/student/2 </span><br><span class="hljs-comment">     * 请求方式：Put </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> </span><br><span class="hljs-comment">     */</span> <br>    <span class="hljs-meta">@PutMapping(value = &quot;/springBoot/student/&#123;id&#125;&quot;)</span> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">modifyStudent</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123; <br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;修改学生的id为&quot;</span> + id; <br>    &#125; <br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/springBoot/student/&#123;id&#125;&quot;)</span> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">queryStudent</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123; <br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;查询学生的id为&quot;</span> + id; <br>    &#125; <br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后运行测试一下</p><h4><span id="总结">总结</span></h4><p>传递参数变简单了</p><p>服务提供者对外只提供了一个接口服务，而不是传统的 CRUD 四个接口</p><h4><span id="请求冲突的问题">请求冲突的问题</span></h4><p>➢ 改路径<br>➢ 改请求方式 </p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110191934743.png" alt="image-20211019193425711"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110191934836.png" alt="image-20211019193430802"></p><p>上面两个不会冲突，因为路径不一样</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110191934836.png" alt="image-20211019193430802"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110191934132.png" alt="image-20211019193448098"></p><p>上面两个会冲突，因为不会分辨名字，只会分辨位置。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110191934132.png" alt="image-20211019193448098"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110191935562.png" alt="image-20211019193556520"></p><p>上面两个不会冲突，因为请求方式不一样</p><h4><span id="restful-原则">RESTful 原则</span></h4><p>➢ 增 post 请求、删 delete 请求、改 put 请求、查 get 请求<br>➢ <font color="red">请求路径不要出现动词</font><br>例如：查询订单接口<br><font color="red"> /boot/order/1021/1（推荐） </font><br> /boot/queryOrder/1021/1（不推荐）<br>➢ <font color="red">分页、排序等操作，不需要使用斜杠传参数</font><br>例如：订单列表接口<br> /boot/orders?page=1&amp;sort=desc<br>一般传的参数不是数据库表的字段，可以不采用斜杠 </p><p><font color="red">数据库表的字段，才使用斜杠</font></p><h3><span id="spring-boot-集成-redis">Spring Boot 集成 Redis</span></h3><h4><span id="1-生成bean和持久层">1、生成bean和持久层</span></h4><p>首先通过 MyBatis 逆向工程生成实体 bean 和数据持久层</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110191937929.png" alt="image-20211019193747882"></p><h4><span id="2-添加-redis-依赖">2、添加 redis 依赖</span></h4><p>在 pom.xml 文件中添加 redis 依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 加载 spring boot redis包 --&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="3-spring-boot-核心配置文件">3、Spring Boot 核心配置文件</span></h4><p>多配置一个redis</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment">#配置内嵌Tomcat端口号 </span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">9090 </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#配置项目上下文根 </span><br><span class="hljs-meta">server.servlet.context-path</span>=<span class="hljs-string">/016-springboot-redis </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#配置连接MySQL数据库信息 </span><br><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://192.168.92.134:3306/springboot?useUnicode</span><br>=<span class="hljs-meta">true&amp;characterEncoding</span>=<span class="hljs-string">UTF-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDa</span><br><span class="hljs-attr">tetimeCode</span>=<span class="hljs-string">false&amp;serverTimezone=UTC </span><br><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver </span><br><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root </span><br><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">123456 </span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">#配置redis连接信息 </span><br><span class="hljs-meta">spring.redis.host</span>=<span class="hljs-string">192.168.92.134 </span><br><span class="hljs-meta">spring.redis.port</span>=<span class="hljs-string">6379 </span><br><span class="hljs-meta">spring.redis.password</span>=<span class="hljs-string">123456</span><br></code></pre></div></td></tr></table></figure><h4><span id="4-启动-redis-服务">4、启动 redis 服务</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110191939273.png" alt="image-20211019193923230"></p><h4><span id="5-rediscontroller-类">5、RedisController 类</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisController</span> </span>&#123; <br> <br>    <span class="hljs-meta">@Autowired</span> <br>    <span class="hljs-keyword">private</span> StudentService studentService; <br> <br>    <span class="hljs-comment">/** </span><br><span class="hljs-comment">     * 请求地址：</span><br><span class="hljs-comment">http://localhost:9090/016-springboot-redis//springboot/allStudentCount </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> </span><br><span class="hljs-comment">     */</span> <br>    <span class="hljs-meta">@GetMapping(value = &quot;/springboot/allStudentCount&quot;)</span> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">allStudentCount</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123; <br> <br>        Long allStudentCount = studentService.queryAllStudentCount(); <br> <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;学生总人数：&quot;</span> + allStudentCount; <br>    &#125; <br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="6-studentservice-接口和studentserviceimpl实现类">6、StudentService 接口和StudentServiceImpl实现类</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentService</span> </span>&#123;<br>        <span class="hljs-comment">/** </span><br><span class="hljs-comment">     * 获取学生总人数 </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> </span><br><span class="hljs-comment">     */</span> <br>    <span class="hljs-function">Long <span class="hljs-title">queryAllStudentCount</span><span class="hljs-params">()</span></span>; <br>&#125;<br></code></pre></div></td></tr></table></figure><p>配置了上面的步骤，Spring</p><p>Boot 将自动配置 RedisTemplate，在需要操作 redis 的类中</p><p>注入redisTemplate 即可。 </p><p>注意：<font color="red">Spring Boot 帮我们注入 RedisTemplate 类，泛型里面只能写 &lt;String, String&gt;、&lt;Object, Object&gt;或者什么都不写</font></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">StudentService</span> </span>&#123; <br><br>    <span class="hljs-meta">@Autowired</span> <br>    <span class="hljs-keyword">private</span> StudentMapper studentMapper; <br><br>    <span class="hljs-meta">@Autowired</span> <br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;Object,Object&gt; redisTemplate; <br><br>    <span class="hljs-meta">@Override</span> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">queryAllStudentCount</span><span class="hljs-params">()</span> </span>&#123; <br><br>        <span class="hljs-comment">//设置redisTemplate对象key的序列化方式 </span><br>        redisTemplate.setKeySerializer(<span class="hljs-keyword">new</span> StringRedisSerializer()); <br><br>        <span class="hljs-comment">//从redis缓存中获取总人数 </span><br>        Long allStudentCount = (Long) <br>            redisTemplate.opsForValue().get(<span class="hljs-string">&quot;allStudentCount&quot;</span>); <br>        <span class="hljs-comment">//判断是否为空 </span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">null</span> == allStudentCount) &#123; <br>            <span class="hljs-comment">//去数据库查询，并存放到redis缓存中</span><br>            allStudentCount = studentMapper.selectAllStudentCount(); <br><br>            redisTemplate.opsForValue().set(<span class="hljs-string">&quot;allStudentCount&quot;</span>,allStudentCount,<span class="hljs-number">15</span>, <br>                                            TimeUnit.SECONDS); <br>        &#125; <br>        <span class="hljs-keyword">return</span> allStudentCount; <br>    &#125; <br>&#125; <br></code></pre></div></td></tr></table></figure><h4><span id="7-studentmapper-接口和studentmapper-映射文件">7、StudentMapper 接口和StudentMapper 映射文件</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/** </span><br><span class="hljs-comment"> * 获取学生总人数 </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> </span><br><span class="hljs-comment"> */</span> <br><span class="hljs-function">Long <span class="hljs-title">selectAllStudentCount</span><span class="hljs-params">()</span></span>;<br></code></pre></div></td></tr></table></figure><p>映射文件</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--获取学生总人数--&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAllStudentCount&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Long&quot;</span>&gt;</span> <br>    select <br>      count(*) <br>    from <br>      t_student <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="8-添加mapperscan注解并启动">8、添加MapperScan注解并启动</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span> <br><span class="hljs-meta">@MapperScan(basePackages = &quot;com.abc.springboot.mapper&quot;)</span><span class="hljs-comment">//扫描数据持久层 </span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;<br>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123; <br>        SpringApplication.run(Application.class, args); <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="9-让-student-类实现序列化接口可选">9、让 Student 类实现序列化接口（可选）</span></h4><p>在类名上 Alt + 回车，如果没有提示生成序列化 id，那么需要做如下的配置</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110191943992.png" alt="image-20211019194318908"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110191943004.png" alt="image-20211019194322962"></p><h4><span id="10-启动-springboot-应用访问测试">10、启动 SpringBoot 应用，访问测试</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110191943421.png" alt="image-20211019194338382"></p><h3><span id="spring-boot-集成-dubbo">Spring Boot 集成 Dubbo</span></h3><h4><span id="1-新建接口工程">1、新建接口工程</span></h4><p>接口工程是普通的java maven工程。</p><h4><span id="2-新建实体bean">2、新建实体Bean</span></h4><p>com.wangpeng.sprintboot.model</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>...<br>&#125;<br></code></pre></div></td></tr></table></figure><p>注意：<font color="red">一定要集成Serializable，进行序列化</font>，因为dobbo需要在网络中通过二进制数据流传输。</p><h4><span id="3-新建service接口">3、新建Service接口</span></h4><p>com.wangpeng.springboot.service</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.springboot.service;<br><br><span class="hljs-keyword">import</span> com.wangpeng.springboot.model.User;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">findUserById</span><span class="hljs-params">(Integer id)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="4-新建提供者工程">4、新建提供者工程</span></h4><p>pom.xml如下</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-comment">&lt;!--父工程--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--项目GAV坐标--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wangpeng.springboot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springboot-dubbo-provider<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--spingboot web 起步依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--dubbo集成springboot起步依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--注册中心--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.101tec<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zkclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--接口工程--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wangpeng.springboot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>05-springboot-dubbo-interface<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--springboot编译打包插件--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>分析一下，需要导入几个依赖</p><ol><li>  dubbo集成springboot起步依赖</li><li>  注册中心</li><li>  接口工程</li></ol><h4><span id="5-提供者工程配置文件">5、提供者工程配置文件</span></h4><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment"># 设置端口号</span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">8081</span><br><span class="hljs-comment"># 上下文根</span><br><span class="hljs-meta">server.servlet.context-path</span>=<span class="hljs-string">/</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># dubbo的设置</span><br><span class="hljs-comment"># 应用名字</span><br><span class="hljs-meta">spring.application.name</span>=<span class="hljs-string">springboot-dubbo-provider</span><br><span class="hljs-comment"># 是服务提供者</span><br><span class="hljs-meta">spring.dubbo.server</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># 设置注册中心</span><br><span class="hljs-meta">spring.dubbo.registry</span>=<span class="hljs-string">zookeeper://192.168.199.134:2181</span><br></code></pre></div></td></tr></table></figure><h4><span id="6-application中开启dubbo配置">6、Application中开启dubbo配置</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.springboot;<br><br><span class="hljs-keyword">import</span> com.alibaba.dubbo.spring.boot.annotation.EnableDubboConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDubboConfiguration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(Application.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>@EnableDubboConfiguration 注解开启dubbo配置，这样才能解析配置文件的内容。</p><h4><span id="7-新建service接口实现类">7、新建Service接口实现类</span></h4><p>com.wangpeng.springboot.impl.UserServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.springboot.service.impl;<br><br><span class="hljs-keyword">import</span> com.alibaba.dubbo.config.annotation.Service;<br><span class="hljs-keyword">import</span> com.wangpeng.springboot.model.User;<br><span class="hljs-keyword">import</span> com.wangpeng.springboot.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Service(interfaceClass = UserService.class, version = &quot;1.0.0&quot;, timeout = 15000)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">findUserById</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setId(id);<br>        user.setName(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>@Component也可以使用spring下的@Service</p><p>尤其注意该注解@Service，<font color="red">它是dubbo包下的Service</font>，他是dubbo配置服务的</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service(interfaceClass = 接口类, version = &quot;版本号&quot;, timeout = 超时时间)</span><br></code></pre></div></td></tr></table></figure><p>等等其他的dubbo的配置都可以放在括号中。</p><h4><span id="8-新建消费者工程">8、新建消费者工程</span></h4><p><font color="red">pom.xml引入的依赖和提供者一样！</font></p><h4><span id="9-消费者工程配置文件">9、消费者工程配置文件</span></h4><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment"># 设置端口号</span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">8080</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 设置上下文根</span><br><span class="hljs-meta">server.servlet.context-path</span>=<span class="hljs-string">/</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 设置dubbo</span><br><span class="hljs-comment"># 设置应用名称</span><br><span class="hljs-meta">spring.application.name</span>=<span class="hljs-string">springboot-dubbo-consumer</span><br><span class="hljs-comment"># 指定注册中心</span><br><span class="hljs-meta">spring.dubbo.registry</span>=<span class="hljs-string">zookeeper://192.168.199.134:2181</span><br></code></pre></div></td></tr></table></figure><h4><span id="10-application中开启dubbo配置">10、Application中开启dubbo配置</span></h4><p>还是加上该注解</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@EnableDubboConfiguration</span><br></code></pre></div></td></tr></table></figure><h4><span id="11-新建controller文件">11、新建Controller文件</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.springboot.controller;<br><br><span class="hljs-keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;<br><span class="hljs-keyword">import</span> com.wangpeng.springboot.model.User;<br><span class="hljs-keyword">import</span> com.wangpeng.springboot.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Reference(interfaceClass = UserService.class, version = &quot;1.0.0&quot;, check = false)</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/user&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-meta">@ResponseBody</span> <span class="hljs-function">User <span class="hljs-title">queryUser</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        User user = userService.findUserById(id);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>很明显，以前用的@Autowired注解，被@Reference替换了。</p><p>该注解就是dubbo消费者中引入接口服务所使用的。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Reference(interfaceClass = 接口类,version = &quot;版本号&quot;, check = 检查提供者开启与否)</span><br></code></pre></div></td></tr></table></figure><h4><span id="12-运行测试">12、运行测试</span></h4><ol><li><p>  在Linux中打开zookeeper</p></li><li><p>  注意一定要关闭防火墙或者开放2181端口！</p></li><li><p>  启动服务提供者</p></li><li><p>  启动服务消费者</p></li><li><p>  浏览器输入请求测试</p></li></ol><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110221726760.png" alt="image-20211022172611652"></p><p>得到反馈，测试成功</p><h3><span id="springboot-ssm-redis-dubbo集成">SpringBoot SSM、redis、dubbo集成</span></h3><h4><span id="1-新建3个工程">1、新建3个工程</span></h4><ul><li>  接口工程</li><li>  提供者工程</li><li>  消费者工程</li></ul><p>在接口工程中，新建2个package，model和service</p><p>在提供者工程中，新建2个package，mapper和service</p><p>在消费者工程中，新建1个package，controller（或者web）</p><p>配置maven，注意，不要多写依赖，可能会导致未知的问题。</p><p>提供者工程pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--父工程--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--项目GAV坐标--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wangpeng.springboot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springboot-all-provider<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--springboot web起步依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--Dubbo集成SpringBoot起步依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--注册中心--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.101tec<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zkclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--mybatis整合springboot起步依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--mysql--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--SpringBoot集成Redis起步依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--接口工程--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wangpeng.springboot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>08-springboot-all-interface<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--资源路径--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--资源路径--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--mysql反向工程插件--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--配置文件的位置--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">configurationFile</span>&gt;</span>GeneratorMapper.xml<span class="hljs-tag">&lt;/<span class="hljs-name">configurationFile</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">verbose</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">verbose</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">overwrite</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">overwrite</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--springboot编译打包插件--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>消费者工程pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--父工程--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--项目GAV坐标--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wangpeng.springboot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springboot-all-consumer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--springboot web 起步依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--Dubbo集成SpringBoot起步依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--注册中心--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.101tec<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>zkclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--springboot集成jsp--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--接口工程--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wangpeng.springboot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>08-springboot-all-interface<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--jsp指定编译目录--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--源文件位置--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/webapp<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--目标位置--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>&gt;</span>META-INF/resources<span class="hljs-tag">&lt;/<span class="hljs-name">targetPath</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--指定文件--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>*.*<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--编译打包插件--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="2-在提供者工程中配置mysql反向工程">2、在提供者工程中，配置mysql反向工程</span></h4><p>在pom.xml中添加mysql反向工程插件</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--配置文件的位置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configurationFile</span>&gt;</span>GeneratorMapper.xml<span class="hljs-tag">&lt;/<span class="hljs-name">configurationFile</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">verbose</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">verbose</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">overwrite</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">overwrite</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>复制配置文件到提供者工程的根目录</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110231406240.png" alt="image-20211023140605163"></p><p>在配置文件中，注意以下配置</p><ol><li>  配置数据库连接信息</li><li>  配置model类的目录，注意，因为这个目录不在当前项目中，所以不能使用相对路径，需要到explorer中复制在计算机中的绝对路径</li></ol><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110231408934.png" alt="image-20211023140825862"></p><ol start="3"><li>  mapper.xml就在当前提供者项目，没问题</li><li>  mapper的接口也在当前提供者项目中，没问题</li><li>  表名看一下</li></ol><p>然后就可以进行反向工程生成了</p><h4><span id="3-提供者工程的配置文件">3、提供者工程的配置文件</span></h4><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment"># 端口号</span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">8081</span><br><span class="hljs-comment"># 上下文根</span><br><span class="hljs-meta">server.servlet.context-path</span>=<span class="hljs-string">/</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 配置数据库</span><br><span class="hljs-comment"># 数据库配置</span><br><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/springboot?useUnicode=true&amp;characterEncoding=UTF-8&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=Asia/Shanghai</span><br><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">wangpeng123</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 配置dubbo</span><br><span class="hljs-meta">spring.application.name</span>=<span class="hljs-string">springboot-all-provider</span><br><span class="hljs-meta">spring.dubbo.server</span>=<span class="hljs-string">true</span><br><span class="hljs-meta">spring.dubbo.registry</span>=<span class="hljs-string">zookeeper://192.168.199.134:2181</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 配置redis</span><br><span class="hljs-meta">spring.redis.host</span>=<span class="hljs-string">192.168.199.134</span><br><span class="hljs-meta">spring.redis.port</span>=<span class="hljs-string">6379</span><br><span class="hljs-comment"># spring.redis.password=</span><br></code></pre></div></td></tr></table></figure><h4><span id="4-serviceimpl">4、ServiceImpl</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.springboot.service;<br><br><span class="hljs-keyword">import</span> com.alibaba.dubbo.config.annotation.Service;<br><span class="hljs-keyword">import</span> com.wangpeng.springboot.mapper.StudentMapper;<br><span class="hljs-keyword">import</span> com.wangpeng.springboot.model.Student;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Service(interfaceName = &quot;com.wangpeng.springboot.service.StudentService&quot;, version = &quot;1.0.0&quot;, timeout = 15000)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">StudentService</span></span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StudentMapper studentMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;Object,Object&gt; redisTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Student <span class="hljs-title">queryStudentById</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        Student student = studentMapper.selectByPrimaryKey(id);<br>        <span class="hljs-keyword">return</span> student;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">queryAllStudentCount</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">//提升系统性能,用户体验提升</span><br>        <span class="hljs-comment">//首先去redis缓存中查询,如果有:直接使用,如果没有:去数据库查询并存放到redis缓存中</span><br>        Integer allStudentCount = (Integer) redisTemplate.opsForValue().get(<span class="hljs-string">&quot;allStudentCount&quot;</span>);<br><br>        <span class="hljs-comment">//判断是否有值</span><br>        <span class="hljs-keyword">if</span> (allStudentCount == <span class="hljs-keyword">null</span>) &#123;<br><br>            <span class="hljs-comment">//去数据库查询</span><br>            allStudentCount = studentMapper.selectAllStudentCount();<br><br>            <span class="hljs-comment">//并存放到redis缓存中</span><br>            redisTemplate.opsForValue().set(<span class="hljs-string">&quot;allStudentCount&quot;</span>,allStudentCount,<span class="hljs-number">30</span>, TimeUnit.SECONDS);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> allStudentCount;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>老规矩，不多说</p><h4><span id="5-提供者工程application的2个注解">5、提供者工程application的2个注解</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.springboot;<br><br><span class="hljs-keyword">import</span> com.alibaba.dubbo.spring.boot.annotation.EnableDubboConfiguration;<br><span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@MapperScan(&quot;com.wangpeng.springboot.mapper&quot;)</span><br><span class="hljs-meta">@EnableDubboConfiguration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(Application.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="6-消费者工程的配置文件">6、消费者工程的配置文件</span></h4><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment"># 端口号</span><br><span class="hljs-meta">server.port</span>=<span class="hljs-string">8080</span><br><span class="hljs-comment"># 上下文</span><br><span class="hljs-meta">server.servlet.context-path</span>=<span class="hljs-string">/</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># dubbo配置</span><br><span class="hljs-meta">spring.application.name</span>=<span class="hljs-string">springboot-all-consumer</span><br><span class="hljs-meta">spring.dubbo.registry</span>=<span class="hljs-string">zookeeper://192.168.199.134:2181</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 视图解析器</span><br><span class="hljs-meta">spring.mvc.view.prefix</span>=<span class="hljs-string">/</span><br><span class="hljs-meta">spring.mvc.view.suffix</span>=<span class="hljs-string">.jsp</span><br></code></pre></div></td></tr></table></figure><h4><span id="7-消费者工程的controller">7、消费者工程的controller</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.springboot.controller;<br><br><span class="hljs-keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;<br><span class="hljs-keyword">import</span> com.wangpeng.springboot.model.Student;<br><span class="hljs-keyword">import</span> com.wangpeng.springboot.service.StudentService;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Reference(interfaceName = &quot;com.wangpeng.springboot.service.StudentService&quot;, version = &quot;1.0.0&quot;, check = false)</span><br>    <span class="hljs-keyword">private</span> StudentService studentService;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/student/detail/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">studentDetail</span><span class="hljs-params">(Model model, <span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;<br>        Student student = studentService.queryStudentById(id);<br>        model.addAttribute(<span class="hljs-string">&quot;student&quot;</span>, student);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;studentDetail&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/student/all/count&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function">Object <span class="hljs-title">allStudentCount</span><span class="hljs-params">()</span> </span>&#123;<br><br>        Integer allStudentCount = studentService.queryAllStudentCount();<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;学生总人数为:&quot;</span>+allStudentCount;<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>老规矩，不多说</p><h4><span id="8-消费者工程application的1个注解">8、消费者工程application的1个注解</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.springboot;<br><br><span class="hljs-keyword">import</span> com.alibaba.dubbo.spring.boot.annotation.EnableDubboConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDubboConfiguration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(Application.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="9-jsp文件">9、jsp文件</span></h4><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: wangpeng<br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">10</span>/<span class="hljs-number">22</span><br>  Time: <span class="hljs-number">23</span>:<span class="hljs-number">46</span><br>  To change <span class="hljs-keyword">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;学生详情&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;学生编号:$&#123;student.id&#125;&lt;/h1&gt;<br>&lt;h1&gt;学生姓名:$&#123;student.name&#125;&lt;/h1&gt;<br>&lt;h1&gt;学生年龄:$&#123;student.age&#125;&lt;/h1&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h4><span id="10-运行测试">10、运行测试</span></h4><ul><li>  先检查linux中的redis和zookeeper是否开启</li><li>  run提供者工程</li><li>  run消费者工程</li></ul><h2><span id="第4章-springboot-非web-和-改图标了解">第4章 SpringBoot 非web 和 改图标（了解）</span></h2><h3><span id="方式一获取spring容器对象再获取业务bean调用">方式一：获取spring容器对象，再获取业务bean调用</span></h3><p>直接在 main 方法中，根据 SpringApplication.run()方法获取返回的 Spring 容器对象，再获取业务 bean 进行调用</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110231502616.png" alt="image-20211023150221528"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.abc.springboot; <br><br><span class="hljs-keyword">import</span> com.abc.springboot.service.UserService; <br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication; <br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication; <br><span class="hljs-keyword">import</span> org.springframework.context.ConfigurableApplicationContext; <br><br><span class="hljs-meta">@SpringBootApplication</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123; <br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123; <br><br>        <span class="hljs-comment">/** </span><br><span class="hljs-comment">         * SpringBoot程序启动后，返回值是ConfigurableApplicationContext，它也是一个</span><br><span class="hljs-comment">Spring容器对象 </span><br><span class="hljs-comment">         * 它其它相当于原来Spring中启动容器ClassPathXmlApplicationContext context = </span><br><span class="hljs-comment">new ClassPathXmlApplicationContext(&quot;&quot;); </span><br><span class="hljs-comment">         */</span> <br><br>        <span class="hljs-comment">//获取SpringBoot程序启动后的Spring容器 </span><br>        ConfigurableApplicationContext context = <br>            SpringApplication.run(Application.class, args); <br><br>        <span class="hljs-comment">//从Spring容器中获取指定bean的对象 </span><br>        UserService userService = (UserService) <br>            context.getBean(<span class="hljs-string">&quot;userServiceImpl&quot;</span>); <br><br>        <span class="hljs-comment">//调用业务bean的方法 </span><br>        String sayHello = userService.sayHello(); <br><br>        System.out.println(sayHello); <br>    &#125; <br>&#125; <br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110231502038.png" alt="image-20211023150243946"></p><h3><span id="方式二spring-boot-的入口类实现commandlinerunner-接口">方式二：Spring boot 的入口类实现CommandLineRunner 接口</span></h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.abc.springboot; <br><br><span class="hljs-keyword">import</span> com.abc.springboot.service.UserService; <br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired; <br><span class="hljs-keyword">import</span> org.springframework.boot.CommandLineRunner; <br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication; <br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication; <br><br><span class="hljs-meta">@SpringBootApplication</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CommandLineRunner</span> </span>&#123; <br><br><br>    <span class="hljs-comment">//第二步：通过容器获取bean，并注入给userService </span><br>    <span class="hljs-meta">@Autowired</span> <br>    <span class="hljs-keyword">private</span> UserService userService; <br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123; <br>        <span class="hljs-comment">//第一步：SpringBoot的启动程序，会初始化spring容器 </span><br>        SpringApplication.run(Application2.class,args); <br>    &#125; <br><br>    <span class="hljs-comment">//覆盖接口中的run方法 </span><br>    <span class="hljs-meta">@Override</span> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">(String... args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123; <br><br>        <span class="hljs-comment">//第三步：容器启动后调用run方法，在该方法中调用业务方法 </span><br>        String sayHello = userService.sayHello(); <br><br>        System.out.println(sayHello); <br><br>    &#125; <br>&#125;<br></code></pre></div></td></tr></table></figure><h3><span id="关闭-springboot-logo-图标及启动日志">关闭 SpringBoot Logo 图标及启动日志</span></h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.abc.springboot; <br><br><span class="hljs-keyword">import</span> org.springframework.boot.Banner; <br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication; <br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication; <br><br><span class="hljs-meta">@SpringBootApplication</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123; <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123; <br>        SpringApplication springApplication =<br>            <span class="hljs-keyword">new</span> SpringApplication(Application.class); <br>        <br>        <span class="hljs-comment">//关闭启动logo的输出</span><br>        springApplication.setBannerMode(Banner.Mode.OFF); <br>        springApplication.run(args); <br>    &#125; <br>&#125;<br></code></pre></div></td></tr></table></figure><h3><span id="修改启动的-logo-图标">修改启动的 logo 图标</span></h3><p>修改前 LOGO</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110231506969.png" alt="image-20211023150632886"></p><p>在 src/main/resources 放入 banner.txt 文件，该文件名字不能随意，文件中的内容就是要输出的 logo</p><p>可 以 利 用 网 站 生 成 图 标 ： <a href="https://www.bootschool.net/ascii">https://www.bootschool.net/ascii</a> 或 者<br><a href="http://patorjk.com/software/taag/%EF%BC%8C%E5%B0%86%E7%94%9F%E6%88%90%E5%A5%BD%E7%9A%84%E5%9B%BE%E6%A0%87%E6%96%87%E5%AD%97%E7%B2%98%E8%B4%B4%E5%88%B0">http://patorjk.com/software/taag/，将生成好的图标文字粘贴到</a> banner.txt 文件中，然后将关闭 logo 输出的语句注释，启动看效果</p><h2><span id="第5章-springboot使用拦截器">第5章 SpringBoot使用拦截器</span></h2><h3><span id="回顾springmvc使用拦截器步骤">回顾springmvc使用拦截器步骤</span></h3><ul><li><p>自定义拦截器类，实现 HandlerInterceptor 接口</p><ul><li>  在里面重写方法（AOP）</li></ul></li><li><p>在web.xml中注册拦截器类</p></li></ul><h3><span id="springboot-使用拦截器">SpringBoot 使用拦截器</span></h3><h4><span id="1-创建springboot工程模块">1、创建Springboot工程（模块）</span></h4><p>整理一下pom.xml，没什么特别的</p><p>springboot配置文件，也没有什么特别的，把端口号和上下文根写一下</p><h4><span id="2-新建userinterceptor用户拦截器">2、新建UserInterceptor用户拦截器</span></h4><p>com.wangpeng.springboot.interceptor.UserInterceptor</p><p>然后继承HandlerInterceptor，重写方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wanpeng.springboot.interceptor;<br><br><span class="hljs-keyword">import</span> com.wanpeng.springboot.User;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        User user = (User) request.getSession().getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br><br>        <span class="hljs-keyword">if</span>(user == <span class="hljs-keyword">null</span>) &#123;  <span class="hljs-comment">//没有登录</span><br>            <span class="hljs-comment">//重定向</span><br>            response.sendRedirect(request.getContextPath() + <span class="hljs-string">&quot;/user/error&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;   <span class="hljs-comment">//拦截</span><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    <span class="hljs-comment">//放行</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        HandlerInterceptor.<span class="hljs-keyword">super</span>.postHandle(request, response, handler, modelAndView);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        HandlerInterceptor.<span class="hljs-keyword">super</span>.afterCompletion(request, response, handler, ex);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="3-新建usercontroller">3、新建UserController</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wanpeng.springboot.web;<br><br><span class="hljs-keyword">import</span> com.wanpeng.springboot.User;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><span class="hljs-keyword">import</span> org.springframework.web.context.support.HttpRequestHandlerServlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/user/one&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-meta">@ResponseBody</span> <span class="hljs-function">String <span class="hljs-title">one</span><span class="hljs-params">()</span> </span>&#123;  <span class="hljs-comment">//已经登录才可以访问</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;已经登录可以访问了&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/user/error&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-meta">@ResponseBody</span> <span class="hljs-function">String <span class="hljs-title">error</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;你没有登录，不能访问&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/user/login&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-meta">@ResponseBody</span> <span class="hljs-function">String <span class="hljs-title">login</span><span class="hljs-params">(HttpServletRequest req)</span> </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setId(<span class="hljs-number">1001</span>);<br>        user.setName(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        user.setAge(<span class="hljs-number">20</span>);<br>        req.getSession().setAttribute(<span class="hljs-string">&quot;user&quot;</span>, user);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;登录成功&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>定义3个请求</p><ol><li>  已登录才能访问的资源</li><li>  错误展示</li><li>  登录请求</li></ol><h4><span id="4-写一个配置类configuration">4、写一个配置类，@Configuration</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wanpeng.springboot.config;<br><br><span class="hljs-keyword">import</span> com.wanpeng.springboot.interceptor.UserInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-meta">@Configuration</span>  <span class="hljs-comment">//表明是一个配置类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterceptorConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;    <span class="hljs-comment">//配置webmvc</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;<br>        <span class="hljs-comment">// 定义需要拦截的路径</span><br>        String[] addPath = &#123;<br>                <span class="hljs-string">&quot;/user/**&quot;</span>,<br>        &#125;;<br>        <span class="hljs-comment">// 定义不需要拦截的路径</span><br>        String[] excludePath = &#123;<br>                <span class="hljs-string">&quot;/user/error&quot;</span>,<br>                <span class="hljs-string">&quot;/user/login&quot;</span><br>        &#125;;<br><br>        registry.addInterceptor(<span class="hljs-keyword">new</span> UserInterceptor())<br>                .addPathPatterns(addPath)<br>                .excludePathPatterns(excludePath);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>添加注解，@Configuration ，表明是一个配置类</p><p>类继承于WebMvcConfigurer，重写addInterceptors方法。</p><h4><span id="5-运行测试">5、运行测试</span></h4><p>毫无问题</p><h2><span id="第6章-springboot中使用servlet了解">第6章 SpringBoot中使用Servlet（了解）</span></h2><h3><span id="方式一-通过注解扫描方式">方式一 通过注解扫描方式</span></h3><h4><span id="1-新建myservlet注解webservlet">1、新建MyServlet，注解@WebServlet</span></h4><p>继承HttpServlet，重写doGet和doPost方法；添加WebServlet，参数是请求路径</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(urlPatterns = &quot;/myServlet&quot;)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123; <br><br>    <span class="hljs-meta">@Override</span> <br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123; <br>        response.getWriter().print(<span class="hljs-string">&quot;My SpringBoot Servlet&quot;</span>); <br>        response.getWriter().flush(); <br>        response.getWriter().close(); <br>    &#125; <br><br>    <span class="hljs-meta">@Override</span> <br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123; <br>        doGet(request,response); <br>    &#125; <br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="2-在application上添加注解servletcomponentscan">2、在Application上添加注解@ServletComponentScan</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span> <br><span class="hljs-meta">@ServletComponentScan(basePackages = &quot;com.abc.springboot.servlet&quot;)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123; <br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123; <br>        SpringApplication.run(Application.class, args); <br>    &#125; <br> <br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="3-运行测试">3、运行测试</span></h4><p>正常</p><h3><span id="方式二-通过springboot的配置类实现">方式二 通过SpringBoot的配置类实现</span></h3><h4><span id="1-创建myservlet">1、创建MyServlet</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123; <br><br>    <span class="hljs-meta">@Override</span> <br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123; <br><br>        resp.getWriter().print(<span class="hljs-string">&quot;Hello,SpringBoot Servlet!&quot;</span>); <br>        resp.getWriter().flush(); <br>        resp.getWriter().close(); <br><br>    &#125; <br><br>    <span class="hljs-meta">@Override</span> <br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123; <br>        doGet(req,resp); <br>    &#125; <br>&#125; <br></code></pre></div></td></tr></table></figure><p>这里就不需要写注解了</p><h4><span id="2-springboot的配置类中注册servlet">2、SpringBoot的配置类中注册Servlet</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>  <span class="hljs-comment">//将此类作为配置类 </span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletConfig</span> </span>&#123; <br><br>    <span class="hljs-comment">//@Bean是一个方法级别上的注解，主要用在配置类里 </span><br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">     * 相当于一个&lt;beans&gt; </span><br><span class="hljs-comment">     *               &lt;bean id=&quot;&quot; class=&quot;&quot;/&gt; </span><br><span class="hljs-comment">     *         &lt;/beans&gt; </span><br><span class="hljs-comment">     * */</span> <br><br>    <span class="hljs-meta">@Bean</span> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title">myServletRegistrationBean</span><span class="hljs-params">()</span> </span>&#123; <br>        <span class="hljs-comment">//将自定义servlet注册到注册Servlet类中，并指定访问路径 </span><br>        ServletRegistrationBean servletRegistrationBean = <span class="hljs-keyword">new</span> ServletRegistrationBean(<span class="hljs-keyword">new</span> MyServlet(), <span class="hljs-string">&quot;/springboot/myServlet&quot;</span>); <br><br>        <span class="hljs-keyword">return</span> servletRegistrationBean; <br>    &#125; <br>&#125; <br></code></pre></div></td></tr></table></figure><h4><span id="3-运行测试">3、运行测试</span></h4><p>正常</p><h2><span id="第7章-springboot中使用filter了解">第7章 SpringBoot中使用Filter（了解）</span></h2><h3><span id="方式一注解方式">方式一：注解方式</span></h3><h4><span id="1-通过注解方式创建一个filter">1、通过注解方式创建一个Filter</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(urlPatterns = &quot;/springboot/myFilter&quot;)</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123; <br><br>    <span class="hljs-meta">@Override</span> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">        <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123; <br>        System.out.println(<span class="hljs-string">&quot;-------------您已进入过滤器---------------&quot;</span>); <br><br>        filterChain.doFilter(servletRequest,servletResponse); <br><br>    &#125; <br><br>&#125; <br></code></pre></div></td></tr></table></figure><p>从以前的学习中了解到，Filter就是个Servlet，所以很明显，<font color="red">在SpringBoot中，Filter的使用和Servlet的基本一样的</font>。</p><p>不一样的是，这里urlPatterns需要写过滤路径，可以使用通配符。</p><h4><span id="2-application上加上注解servletcomponentscan">2、application上加上注解@ServletComponentScan</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ServletComponentScan(basePackages = &quot;com.abc.springboot.filter&quot;)</span> <br><span class="hljs-meta">@SpringBootApplication</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123; <br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123; <br>        SpringApplication.run(Application.class, args); <br>    &#125; <br><br>&#125; <br></code></pre></div></td></tr></table></figure><p>仍然和servlet一样</p><h4><span id="3-运行测试">3、运行测试</span></h4><p>正常</p><h3><span id="方式二springboot配置类方式">方式二：SpringBoot配置类方式</span></h3><h4><span id="1-新建myfilter">1、新建MyFilter</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123; <br><br>    <span class="hljs-meta">@Override</span> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, </span></span><br><span class="hljs-params"><span class="hljs-function">                         FilterChain filterChain)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">        <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123; <br>        System.out.println(<span class="hljs-string">&quot;-------------通过配置类注册过滤器---------------&quot;</span>); <br>        filterChain.doFilter(servletRequest,servletResponse); <br><br>    &#125; <br><br>&#125; <br></code></pre></div></td></tr></table></figure><h4><span id="2-编写配置类注册filter">2、 编写配置类，注册Filter</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//定义为配置类 </span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FilterConfig</span> </span>&#123; <br><br>    <span class="hljs-meta">@Bean</span> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title">myFilterRegistration</span><span class="hljs-params">()</span> </span>&#123; <br><br>        <span class="hljs-comment">//注册过滤器 </span><br>        FilterRegistrationBean filterRegistrationBean = <span class="hljs-keyword">new</span> FilterRegistrationBean(<span class="hljs-keyword">new</span> MyFilter()); <br><br>        <span class="hljs-comment">//添加过滤路径</span><br>        filterRegistrationBean.addUrlPatterns(<span class="hljs-string">&quot;/springboot/*&quot;</span>,<span class="hljs-string">&quot;/user/*&quot;</span>); <br><br>        <span class="hljs-keyword">return</span> filterRegistrationBean; <br><br>    &#125; <br><br>&#125; <br></code></pre></div></td></tr></table></figure><p>这里和Servlet稍有不同，需要注意。</p><h2><span id="第8章-springboot项目配置字符编码">第8章 SpringBoot项目配置字符编码</span></h2><h4><span id="创建一个servlet">创建一个Servlet</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123; <br><br>    <span class="hljs-meta">@Override</span> <br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> </span><br><span class="hljs-function">        ServletException, IOException </span>&#123; <br>        resp.getWriter().print(<span class="hljs-string">&quot;Hello World，世界您好！&quot;</span>); <br>        <span class="hljs-comment">//设置浏览器编码格式 </span><br>        resp.setContentType(<span class="hljs-string">&quot;text/html;character=utf-8&quot;</span>); <br>        resp.getWriter().flush(); <br>        resp.getWriter().close(); <br>    &#125; <br><br>    <span class="hljs-meta">@Override</span> <br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> </span><br><span class="hljs-function">        <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123; <br>        doGet(req, resp); <br>    &#125; <br>&#125;<br></code></pre></div></td></tr></table></figure><p><font color="red">在 servlet 中添加 response.setContextType(“text/html;charset=utf-8”)指定浏览器编码方式 </font></p><h4><span id="创建配置类-systemconfig">创建配置类 SystemConfig</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>  <span class="hljs-comment">//设置为配置类 </span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SystemConfig</span> </span>&#123; <br><br>    <span class="hljs-meta">@Bean</span> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title">myServletRegistration</span><span class="hljs-params">()</span> </span>&#123; <br><br>        ServletRegistrationBean servletRegistrationBean = <span class="hljs-keyword">new</span> ServletRegistrationBean(<span class="hljs-keyword">new</span> MyServlet(), <span class="hljs-string">&quot;/springboot/myServlet&quot;</span>); <br><br>        <span class="hljs-keyword">return</span> servletRegistrationBean; <br>    &#125; <br><br>    <span class="hljs-meta">@Bean</span> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title">characterFilterRegistration</span><span class="hljs-params">()</span> </span>&#123; <br><br>        <span class="hljs-comment">//设置字符编码过滤器 </span><br>        <span class="hljs-comment">//CharacterEncoding是由Spring提供的一个字符编码过滤器，之前是配置在</span><br>web.xml文件中 <br>            CharacterEncodingFilter characterEncodingFilter = <span class="hljs-keyword">new</span> <br>            CharacterEncodingFilter(); <br>        <span class="hljs-comment">//强制使用指定字符编码 </span><br>        characterEncodingFilter.setForceEncoding(<span class="hljs-keyword">true</span>); <br>        <span class="hljs-comment">//设置指定字符编码 </span><br>        characterEncodingFilter.setEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>); <br><br>        <span class="hljs-comment">//创建过滤器注册bean </span><br>        FilterRegistrationBean filterRegistrationBean = <span class="hljs-keyword">new</span> <br>            FilterRegistrationBean(); <br>        <span class="hljs-comment">//设置字符编码过滤器 </span><br>        filterRegistrationBean.setFilter(characterEncodingFilter); <br>        <span class="hljs-comment">//设置字符编码过滤器路径 </span><br>        filterRegistrationBean.addUrlPatterns(<span class="hljs-string">&quot;/*&quot;</span>); <br><br>        <span class="hljs-keyword">return</span> filterRegistrationBean; <br>    &#125; <br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="关闭-springboot-的-http-字符编码支持">关闭 SpringBoot 的 http 字符编码支持</span></h4><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment">#关闭springboot的http字符编码支持 </span><br><span class="hljs-comment">#只有关闭该选项后，spring字符编码过滤器才生效 </span><br><span class="hljs-meta">spring.http.encoding.enabled</span>=<span class="hljs-string">false </span><br></code></pre></div></td></tr></table></figure><h3><span id="方法二在-applicationproperties-中配置字符编码推荐">方法二：在 application.properties 中配置字符编码（推荐）</span></h3><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment">#设置请求响应的字符编码 </span><br><span class="hljs-meta">spring.http.encoding.enabled</span>=<span class="hljs-string">true </span><br><span class="hljs-meta">spring.http.encoding.force</span>=<span class="hljs-string">true </span><br><span class="hljs-meta">spring.http.encoding.charset</span>=<span class="hljs-string">UTF-8 </span><br></code></pre></div></td></tr></table></figure><h4><span id="创建-servlet">创建 Servlet</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123; <br><br>    <span class="hljs-meta">@Override</span> <br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> </span><br><span class="hljs-function">        ServletException, IOException </span>&#123; <br>        resp.getWriter().print(<span class="hljs-string">&quot;Hello World!世界您真好！&quot;</span>); <br>        resp.setContentType(<span class="hljs-string">&quot;text/html;character=utf-8&quot;</span>); <br>        resp.getWriter().flush(); <br>        resp.getWriter().close(); <br>    &#125; <br><br>    <span class="hljs-meta">@Override</span> <br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123; <br>        doGet(req, resp); <br>    &#125; <br>&#125; <br></code></pre></div></td></tr></table></figure><h4><span id="创建配置类-servletconfig">创建配置类 ServletConfig</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletConfig</span> </span>&#123; <br><br>    <span class="hljs-meta">@Bean</span> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title">myServletRegistration</span><span class="hljs-params">()</span> </span>&#123; <br>        ServletRegistrationBean servletRegistrationBean = <span class="hljs-keyword">new</span> ServletRegistrationBean(<span class="hljs-keyword">new</span> MyServlet(),<span class="hljs-string">&quot;/myservlet&quot;</span>); <br>        <span class="hljs-keyword">return</span> servletRegistrationBean; <br>    &#125; <br>&#125;<br></code></pre></div></td></tr></table></figure><h2><span id="第9章-springboot打包与部署">第9章 SpringBoot打包与部署</span></h2><h3><span id="spring-boot程序打-war-包">Spring Boot程序打 war 包</span></h3><p>程序入口类需扩展继承 SpringBootServletInitializer 类并覆盖 configure 方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SpringBootServletInitializer</span> </span>&#123; <br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123; <br>        SpringApplication.run(Application.class, args); <br>    &#125; <br><br>    <span class="hljs-meta">@Override</span> <br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> SpringApplicationBuilder <span class="hljs-title">configure</span><span class="hljs-params">(SpringApplicationBuilder builder)</span> </span>&#123; <br>        <span class="hljs-comment">//参数为当前SpringBoot启动类 </span><br>        <span class="hljs-keyword">return</span> builder.sources(Application.class); <br>    &#125; <br>&#125;<br></code></pre></div></td></tr></table></figure><p>在 pom.xml 中添加（修改）打包方式为 war</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>在 pom.xml 中配置将配置文件编译到类路径</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--jsp编译位置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/webapp<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">targetPath</span>&gt;</span>META-INF/resources<span class="hljs-tag">&lt;/<span class="hljs-name">targetPath</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.*<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--mybatis的mapper.xml--&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--src/main/resources下的所有配置文件编译到classes下面去--&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.*<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><p>在 pom.xml 的 build 标签下通过 finalName 指定打 war包的名字</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>springboot<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><p><font color="red">特别注意：如果外部tomcat和内部tomcat的版本不一致，一定要指定tomcat版本。</font></p><p>在properties中，添加下面语句。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">tomcat.version</span>&gt;</span>8.0.50<span class="hljs-tag">&lt;/<span class="hljs-name">tomcat.version</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>通过 Maven package 命令打 war 包到 target 目录下</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110260048550.png" alt="image-20211026004840458"></p><p><font color="red">注意，使用外部的tomcat，部署war包时，一定要加包名</font>。</p><h3><span id="spring-boot-程序打-jar-包与运行">Spring Boot 程序打 Jar 包与运行</span></h3><p>因为 SpringBoot 默认打包方式就是jar 包,所以我们直接执行 Maven 的 package 命令就行了</p><p>修改 pom.xml 文件中打包插件的版本</p><p>默认 SpingBoot 提供的打包插件版本为 2.2.2.RELEASE，这个版本打的 jar 包 jsp 不能访问，</p><p><font color="red">我们这里修改为 1.4.2.RELEASE（其它版本测试都有问题）</font></p><p><font color="red">非常关键！</font></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- SpringBoot提供打包编译插件 --&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><p>将 target 下的 jar 包拷贝到某一个目录，在该目录下执行 java -jar jar 包名称</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110260050835.png" alt="image-20211026005027794"></p><h3><span id="打包与部署总结">打包与部署总结</span></h3><p>➢ 在 IDEA 中直接运行 Spring Boot 程序的main 方法（开发阶段）<br>➢ 用 maven 将Spring Boot 安装为一个jar 包，使用 Java 命令运行<br>java -jar springboot-xxx.jar<br>可以将该命令封装到一个 Linux 的一个 shell 脚本中（上线部署）<br>◼ 写一个 shell 脚本(run.sh)：<br>    #!/bin/sh<br>    java -jar xxx.jar </p><p>◼ 赋权限 chmod 777 run.sh </p><p>◼ 启动 shell 脚本： ./run.sh </p><h2><span id="第10章-springboot-集成-logback-日志">第10章 SpringBoot 集成 logback 日志</span></h2><p>Spring Boot 官方推荐优先使用带有 -spring 的文件名作为你的日志配置（如使用 logback-spring.xml ，而不是 logback.xml），命名为<font color="red"> logback-spring.xml </font>的日志配置文件。 默认的命名规则，并且放在<font color="red"> src/main/resources</font> 下。</p><p>如果你即想完全掌控日志配置，但又不想用 logback.xml 作为Logback 配置的名字，application.yml 可以通过 logging.config 属性指定自定义的名字： </p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">logging.config</span>=<span class="hljs-string">classpath:logging-config.xml</span><br></code></pre></div></td></tr></table></figure><p>我们一般针对 DAO 的包进行 DEBUG 日志设置（先不看）：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.abc.springboot.mapper&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><p>这样的话，只打印 SQL 语句： </p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110260054801.png" alt="image-20211026005435762"></p><p>代码里打印日志</p><p>之前我们大多数时候自己在<font color="red">每个类创建日志对象去打印信息</font>，比较麻烦：<br>private static final Logger logger = LoggerFactory.getLogger(StudentServiceImpl.class);<br>logger.error(“xxx”);<br>现在可以直接在类上通过<font color="red"> @Slf4j </font>标签去声明式注解日志对象 </p><p>在 pom.xml 中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--@Slf4j自动化日志对象--&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>添加 lombok 插件<img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110260055138.png" alt="image-20211026005518065"></p><p><font color="red">注意：新版idea已经自带lombok插件。</font></p><p>logback-spring.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span> <br><span class="hljs-comment">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果</span><br><span class="hljs-comment">设置为WARN，则低于WARN的信息都不会输出 --&gt;</span> <br><span class="hljs-comment">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为</span><br><span class="hljs-comment">true --&gt;</span><br><span class="hljs-comment">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认</span><br><span class="hljs-comment">单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span> <br><span class="hljs-comment">&lt;!-- de<span class="hljs-doctag">bug:</span>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback</span><br><span class="hljs-comment">运行状态。默认值为false。通常不打印 --&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>  <span class="hljs-attr">scan</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">scanPeriod</span>=<span class="hljs-string">&quot;10 seconds&quot;</span>&gt;</span> <br><br>    <span class="hljs-comment">&lt;!--输出到控制台--&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> </span><br><span class="hljs-tag">              <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span> <br>        <span class="hljs-comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大</span><br><span class="hljs-comment">于或等于此级别的日志信息--&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>debug<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">Pattern</span>&gt;</span>%date [%-5p] [%thread] %logger&#123;60&#125; <br>                [%file : %line] %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">Pattern</span>&gt;</span> <br>            <span class="hljs-comment">&lt;!-- 设置字符集 --&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span> <br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE&quot;</span> </span><br><span class="hljs-tag">              <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span> <br>        <span class="hljs-comment">&lt;!--&lt;File&gt;/home/log/stdout.log&lt;/File&gt;--&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">File</span>&gt;</span>D:/log/stdout.log<span class="hljs-tag">&lt;/<span class="hljs-name">File</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%date [%-5p] %thread %logger&#123;60&#125; <br>                [%file : %line] %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> </span><br><span class="hljs-tag">                       <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span> <br>            <span class="hljs-comment">&lt;!-- 添加.gz 历史日志会启用压缩 大大缩小日志文件所占空间 --&gt;</span> <br><br>            <span class="hljs-comment">&lt;!--&lt;fileNamePattern&gt;/home/log/stdout.log.%d&#123;yyyy-MM-dd&#125;.log&lt;/fileNam</span><br><span class="hljs-comment">ePattern&gt;--&gt;</span> <br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>D:/log/stdout.log.%d&#123;yyyy-MM-dd&#125;.log&lt;/fileNamePatter<br>                n&gt; <br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><span class="hljs-comment">&lt;!--  保留30天日志 --&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span> <br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.abc.springboot.mapper&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span> /&gt;</span> <br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span>/&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><p>日志级别：TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，设置之后，会输出级别大于等于该级别的日志。</p><ul><li>  <code>&lt;root level=&quot;INFO&quot;&gt; </code>，主要看这个。</li><li>  <code>&lt;level&gt;debug&lt;/level&gt;</code>，如果说小的设置了更高的级别，那就响应大于等于该级别的。</li></ul><p>做个Controller</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.springboot.web;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/test&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-meta">@ResponseBody</span> <span class="hljs-function">String <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        log.trace(<span class="hljs-string">&quot;查询当前学生人数&quot;</span>);<br>        log.debug(<span class="hljs-string">&quot;查询当前学生人数&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;查询当前学生人数&quot;</span>);<br>        log.warn(<span class="hljs-string">&quot;查询当前学生人数&quot;</span>);<br>        log.error(<span class="hljs-string">&quot;查询当前学生人数&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;10&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>启动测试</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110271123050.png" alt="image-20211027112252925"></p><h2><span id="第11章-springboot-集成-thymeleaf-模板">第11章 SpringBoot 集成 Thymeleaf 模板</span></h2><h3><span id="认识thymeleaf">认识ThymeLeaf</span></h3><p>Thymeleaf 是一个流行的模板引擎，该模板引擎采用 Java 语言开发。</p><p>模板引擎是一个技术名词，是跨领域跨平台的概念，在 Java 语言体系下有模板引擎，在 C#、PHP 语言体系下也有模板引擎，甚至在 JavaScript 中也会用到模板引擎技术，Java 生态下的模板引擎有 Thymeleaf 、Freemaker、Velocity、Beetl（国产） 等。 </p><p>Thymeleaf 对网络环境不存在严格的要求，既能用于 Web 环境下，也能用于非 Web 环<br>境下。在非Web 环境下，他能直接显示模板上的静态数据；在 Web 环境下，它能像 Jsp 一<br>样从后台接收数据并替换掉模板上的静态数据。它是基于 HTML 的，以 HTML 标签为载体，Thymeleaf 要寄托在 HTML 标签下实现。 </p><p>SpringBoot 集成了 Thymeleaf 模板技术，并且 Spring Boot 官方也推荐使用 Thymeleaf 来替代 JSP 技术，Thymeleaf 是另外的一种模板技术，它本身并不属于 Spring Boot，Spring Boot。</p><p>只是很好地集成这种模板技术，作为前端页面的数据展示，在过去的 Java Web 开发中，我<br>们往往会选择使用 Jsp 去完成页面的动态渲染，但是 jsp 需要翻译编译运行，效率低。</p><p>Thymeleaf 的官方网站：<a href="http://www.thymeleaf.org/">http://www.thymeleaf.org</a><br>Thymeleaf 官方手册：<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html</a></p><h3><span id="spring-boot-集成-thymeleaf">Spring Boot 集成 Thymeleaf</span></h3><h4><span id="1-创建工程">1、创建工程</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110271131098.png" alt="image-20211027113103859"></p><p>按照这种方式创建后，pom.xml 文件下会自动添加如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--SpringBoot集成Thymeleaf的起步依赖--&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> <br> <br><span class="hljs-comment">&lt;!--SpringBoot开发web项目的起步依赖--&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="2-springboot配置文件">2、springboot配置文件</span></h4><p>在Spring boot的核心配置文件application.properties 中对Thymeleaf 进行配置</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment">#thymeleaf页面的缓存开关，默认true开启缓存 </span><br><span class="hljs-comment">#建议在开发阶段关闭thymeleaf页面缓存，目的实时看到页面 </span><br><span class="hljs-meta">spring.thymeleaf.cache</span>=<span class="hljs-string">false</span><br></code></pre></div></td></tr></table></figure><p>下面的这个其实什么都不用配置就可以工作，因为基本 Thymeleaf 的配置都有默认值</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment">#thymeleaf模版前缀,默认可以不写</span><br><span class="hljs-meta">spring.thymeleaf.prefix</span>=<span class="hljs-string">classpath:/templates/ </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#thymeleaf模版后缀,默认可以不写 </span><br><span class="hljs-meta">spring.thymeleaf.suffix</span>=<span class="hljs-string">.html</span><br></code></pre></div></td></tr></table></figure><h4><span id="3-写controller">3、写Controller</span></h4><p>创建 ThymeleafController 去映射到模板页面（和 SpringMVC 基本一致）</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.springboot.web;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;test&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();<br>        mv.addObject(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;你好 thymeleaf&quot;</span>);<br>        mv.setViewName(<span class="hljs-string">&quot;index&quot;</span>);<br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="4-写thymeleaf的html">4、写thymeleaf的html</span></h4><p>在 src/main/resources 的 templates 下新建一个 index.html 页<br>面用于展示数据</p><p>HTML 页面的<code>&lt;html&gt;</code>元素中加入以下属性：</p><p><font color="red"><code>&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</code></font></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;data&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>th:text获取的数据是存放到标签体中的。</p><p><font color="purple">注意：Springboot 使用 thymeleaf 作为视图展示，约定将模板文件放置在src/main/resource/templates 目录下，静态资源放置在src/main/resource/static 目录下 </font></p><h4><span id="5-运行测试">5、运行测试</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110271148117.png" alt="image-20211027114812027"></p><h3><span id="thymeleaf表达式">Thymeleaf表达式</span></h3><p>创建实体 User 实体类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Data</span> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123; <br> <br>    <span class="hljs-keyword">private</span> Integer id; <br> <br>    <span class="hljs-keyword">private</span> String name; <br> <br>    <span class="hljs-keyword">private</span> String phone; <br> <br>    <span class="hljs-keyword">private</span> String address; <br> <br>&#125;<br></code></pre></div></td></tr></table></figure><p>Data注解是lombok插件带的注解，使用它注意还需要添加lombok的依赖。</p><p>一般来说，不推荐使用lombok。</p><h4><span id="标准变量表达式">标准变量表达式</span></h4><p><font color="purple">注意：th:text=”” 是 Thymeleaf 的一个属性，用于文本的显示</font></p><p>语法 ${…}</p><p>标准变量表达式用于访问容器（tomcat）上下文环境中的变量，功能和 EL 中的 <code>$&#123;&#125;</code> 相<br>同。Thymeleaf 中的变量表达式使用 <code>$&#123;变量名&#125;</code> 的方式获取 Controller 中 model 其中的数据</p><p>演示</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">用户编号：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br>用户姓名：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br>用户手机号：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.phone&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br>用户地址：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.address&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="选择变量表达式了解不推荐使用">选择变量表达式（了解，不推荐使用）</span></h4><p>选择变量表达式，也叫星号变量表达式，使用 th:object </p><p>属性来绑定对象<br>选择表达式首先使用th:object 来绑定后台传来的 User 对象，然后使用 * 来代表这个对<br>象，后面 {} 中的值是此对象中的属性。<br>选择变量表达式 *{…} 是另一种类似于标准变量表达式 <code>$&#123;...&#125;</code> 表示变量的方法<br>选择变量表达式在执行时是在选择的对象上求解，而<code>$&#123;...&#125;</code>是在上下文的变量Model 上求解，这种写法比标准变量表达式繁琐，只需要大家了解即可 </p><p>演示</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>展示User用户信息（星号表达式,仅在div范围内有效）：<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:object</span>=<span class="hljs-string">&quot;$&#123;user&#125;&quot;</span>&gt;</span> <br>    用户编号：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*&#123;id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br>    用户姓名：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*&#123;name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br>    用户手机号：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*&#123;phone&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br>    用户地址：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*&#123;address&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>=======选择变量表达式=======<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span> <br>用户编号：*&#123;user.id&#125; ==&gt; <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*&#123;user.id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br>用户姓名：*｛user.name｝ ==&gt; <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*&#123;user.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br>用户手机号：*&#123;user.phone&#125; ==&gt; <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*&#123;user.phone&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br>用户地址：*&#123;user.address&#125; ==&gt; <span class="hljs-tag">&lt;<span class="hljs-name">span</span> </span><br><span class="hljs-tag"><span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;*&#123;user.address&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="url表达式">URL表达式</span></h4><p>语法@{…}</p><p>说明</p><p>主要用于链接、地址的展示，可用于<br><code>&lt;script src=&quot;...&quot;&gt;、&lt;link href=&quot;...&quot;&gt;、&lt;a href=&quot;...&quot;&gt;、&lt;form action=&quot;...&quot;&gt;、&lt;img src=&quot;&quot;&gt;</code>等，可以在 URL 路径中动态获取数据 </p><p>演示</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>URL路径表达式 -&gt; @&#123;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>URL路径表达式：@&#123;...&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>绝对路径（没有参数）<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;http://localhost:8080/thymeleaf/info&#125;&quot;</span>&gt;</span>查看：绝对路径<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>绝对路径（路径中有参数）<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;&#x27;http://localhost:8080/thymeleaf/user/info?id=&#x27; + </span></span><br><span class="hljs-string"><span class="hljs-tag">                    $&#123;user.id&#125;&#125;&quot;</span>&gt;</span>查看用户信息：绝对路径(带参数)<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red&quot;</span>&gt;</span>实际开发推荐使用：相对路径（没有参数）<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/thymeleaf/info&#125;&quot;</span>&gt;</span>查看：相对路径<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red&quot;</span>&gt;</span>实际开发推荐使用：相对路径（路径中有参数）<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;&#x27;/thymeleaf/user/info?id=&#x27; + $&#123;user.id&#125;&#125;&quot;</span>&gt;</span>查看用户信息：相<br>            对路径（带参数）<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/thymeleaf/info(id=$&#123;user.id&#125;)&#125;&quot;</span>&gt;</span>推荐使用：优雅的带参数路径<br>            写法<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>为了演示加上下文的效果，在 application.properties 中配置项目上下文</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">server.servlet.context-path</span>=<span class="hljs-string">/url-expression</span><br></code></pre></div></td></tr></table></figure><p>在 ThymeleafController 中添加如下方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/thymeleaf/url&quot;)</span> <br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">url</span><span class="hljs-params">(Model model)</span> </span>&#123; <br>    User user = <span class="hljs-keyword">new</span> User(); <br>    user.setId(<span class="hljs-number">2</span>); <br>    user.setName(<span class="hljs-string">&quot;赵六&quot;</span>); <br>    user.setPhone(<span class="hljs-string">&quot;13800000000&quot;</span>); <br>    user.setAddress(<span class="hljs-string">&quot;上海市&quot;</span>); <br><br>    model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>,user); <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;url&quot;</span>; <br>&#125; <br><br><span class="hljs-meta">@RequestMapping(value = &quot;/thymeleaf/info&quot;)</span> <br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">info</span><span class="hljs-params">(Integer id)</span> </span>&#123; <br>    System.out.println(<span class="hljs-string">&quot;用户编号：&quot;</span> + id); <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;info&quot;</span>; <br>&#125; <br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110271355138.png" alt="image-20211027135535064"></p><p>主要关注下面两种用法就可以了</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;&#x27;/thymeleaf/user/info?id=&#x27; + $&#123;user.id&#125;&#125;&quot;</span>&gt;</span>查看用户信息：相<br>    对路径（带参数）<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/thymeleaf/info(id=$&#123;user.id&#125;)&#125;&quot;</span>&gt;</span>推荐使用：优雅的带参数路径<br>    写法<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="thymeleaf-的常见属性">Thymeleaf 的常见属性</span></h3><h4><span id="thaction">th:action</span></h4><p>th:action 定义后台控制器的路径，类似<form>标签的 action 属性，主要结合 URL 表达式,获取动态变量</form></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;&#x27;/user/login?id=&#x27;+$&#123;user.id&#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>我们请求的流程是，发送请求给服务器，服务器接收请求后，处理请求，跳转到指定的静态 html 页面，在服务器端，Thymeleaf 模板引擎会按照它的语法，对动态数据进行处理，所以如果要是 th 开头，模板引擎能够识别，会在服务器端进行处理，获取数据；如果没有以 th 开头，那么 Thymeleaf 模板引擎不会处理，直接返回给客户端了。 </p><h4><span id="thmethod">th:method</span></h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/user/login&#125;&quot;</span> <span class="hljs-attr">th:method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="thhref">th:href</span></h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;&#x27;http://www.baidu.com?id=&#x27; + $&#123;user.id&#125;&quot;</span>&gt;</span>th:href链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="thsrc">th:src</span></h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/jquery-1.7.2.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="thid">th:id</span></h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:id</span>=<span class="hljs-string">&quot;$&#123;hello&#125;&quot;</span>&gt;</span>aaa<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="thname">th:name</span></h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">th:type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">th:id</span>=<span class="hljs-string">&quot;userName&quot;</span> <span class="hljs-attr">th:name</span>=<span class="hljs-string">&quot;userName&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="thvalue">th:value</span></h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userId&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userId&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;userId&#125;&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="thattr">th:attr</span></h4><p>该属性也是用于给 HTML 中某元素的某属性赋值，好处是可以给 html 中没有定义的属性动态的赋值。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>th:attr属性的使用<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">zhangsan</span>=<span class="hljs-string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br><span class="hljs-comment">&lt;!--通过th:attr对自定义的属性赋值--&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:attr</span>=<span class="hljs-string">&quot;zhangsan=$&#123;user.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110271416371.png" alt="image-20211027141629310"></p><h4><span id="thtext">th:text</span></h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">用于文本的显示，该属性显示的文本在标签体中，如果是文本框，数据会在文本框外显示，<br>要想显示在文本框内，使用 th:value <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;realName&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;reaName&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;realName&#125;&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="thobject">th:object</span></h4><p>用于数据对象绑定<br>通常用于选择变量表达式（星号表达式）</p><h4><span id="thonclick">th:onclick</span></h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>th:onclick的使用<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span> <br><span class="hljs-comment">&lt;!--目前thymeleaf版本要求只能传递数字和布尔值--&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:onclick</span>=<span class="hljs-string">&quot;&#x27;show(&#x27;+$&#123;user.id&#125;+&#x27;)&#x27;&quot;</span>&gt;</span>点击：显示学生编号<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"> </span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params">id</span>) </span>&#123; </span><br><span class="javascript">        alert(<span class="hljs-string">&quot;用户编号为：&quot;</span> + id); </span><br><span class="javascript">    &#125; </span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="thstyle">th:style</span></h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:onclick</span>=<span class="hljs-string">&quot;&#x27;show(&#x27;+$&#123;user.id&#125;+&#x27;)&#x27;&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">th:style</span>=<span class="hljs-string">&quot;&#x27;font-size:40px;color:red;&#x27;&quot;</span>&gt;</span>点击：显示学生编号<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="theach"><font color="red">*th:each</font></span></h4><p>这个属性非常常用，比如从后台传来一个对象集合那么就可以使用此属性遍历输出，它与<br>JSTL 中的&lt;c: forEach&gt;类似，此属性既可以循环遍历集合，也可以循环遍历数组及Map</p><h5><span id="遍历-list-集合">遍历 List 集合</span></h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;test&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();<br>        List&lt;Student&gt; students = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>            Student student = <span class="hljs-keyword">new</span> Student();<br>            student.setId(i);<br>            student.setName(<span class="hljs-string">&quot;张&quot;</span> + i);<br>            student.setAge(<span class="hljs-number">20</span> + i);<br>            students.add(student);<br>        &#125;<br><br>        mv.addObject(<span class="hljs-string">&quot;studentList&quot;</span>, students);<br>        mv.setViewName(<span class="hljs-string">&quot;index&quot;</span>);<br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>html</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;student,studentStat:$&#123;studentList&#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;studentStat.index&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;student.id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;student.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;student.age&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><code>th:each=&quot;user, iterStat : $&#123;userlist&#125;&quot;</code>中的 ${userList} 是后台传过来的集合</p><p>user<br>定义变量，去接收遍历${userList}集合中的一个数据 </p><p>iterStat </p><p>${userList} 循环体的信息 </p><p>其中user 及iterStat 自己可以随便取名</p><p>interStat 是循环体的信息，通过该变量可以获取如下信息</p><p>index: 当前迭代对象的 index（从 0 开始计算）</p><p>count: 当前迭代对象的个数（从 1 开始计算）这两个用的较多 </p><p>size: 被迭代对象的大小 </p><p>current: 当前迭代变量 </p><p>even/odd: 布尔值，当前循环是否是偶数/奇数（从 0 开始计算） </p><p>first: 布尔值，当前循环是否是第一个 </p><p>last: 布尔值，当前循环是否是最后一个 </p><p>注意：<font color="red">循环体信息 interStat 也可以不定义，则默认采用迭代变量加上 Stat 后缀，即userStat</font></p><p>效果</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110271801002.png" alt="image-20211027180138929"></p><h5><span id="遍历-map-集合">遍历 Map 集合</span></h5><p>在 ThymeleafController 中添加 eachMap 方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/each/map&quot;)</span> <br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">eachMap</span><span class="hljs-params">(Model model)</span> </span>&#123; <br><br>    Map&lt;Integer,Object&gt; userMaps = <span class="hljs-keyword">new</span> HashMap&lt;Integer, Object&gt;(); <br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123; <br>        User user = <span class="hljs-keyword">new</span> User(); <br>        user.setId(i); <br>        user.setName(<span class="hljs-string">&quot;李四&quot;</span>+i); <br>        user.setPhone(<span class="hljs-string">&quot;1390000000&quot;</span>+i); <br>        user.setAddress(<span class="hljs-string">&quot;天津市&quot;</span>+i); <br><br>        userMaps.put(i,user); <br>    &#125; <br><br>    model.addAttribute(<span class="hljs-string">&quot;userMaps&quot;</span>,userMaps); <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;eachMap&quot;</span>; <br>&#125;<br></code></pre></div></td></tr></table></figure><p> 添加 eachMap.html 页面对 Map 集合进行遍历</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>循环遍历Map集合<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>th:each循环遍历Map集合<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;userMap,userMapStat:$&#123;userMaps&#125;&quot;</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;userMapStat.count&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;userMap.key&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;userMap.value&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;userMap.value.id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;userMap.value.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;userMap.value.phone&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;userMap.value.address&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><code>th:each=&quot;userMap,userMapStat:$&#123;userMaps&#125;&quot; </code>，用 userMap 变量接收每次遍历的结果，封装为一个键值对，userMapStat 状态<br>userMap.key：获取当前键值对中的key<br>userMap.value：获取当前键值对中的 value </p><p>效果</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110271805329.png" alt="image-20211027180530250"></p><h5><span id="遍历-array-数组">遍历 Array 数组</span></h5><p>在 ThymeleafController 中的 eachArray 方法中准备数组数据</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/each/array&quot;)</span> <br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">eachArray</span><span class="hljs-params">(Model model)</span> </span>&#123; <br>    User[] userArray = <span class="hljs-keyword">new</span> User[<span class="hljs-number">10</span>]; <br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123; <br>        User user = <span class="hljs-keyword">new</span> User(); <br>        user.setId(i); <br>        user.setName(<span class="hljs-string">&quot;赵六&quot;</span>+i); <br>        user.setPhone(<span class="hljs-string">&quot;1380000000&quot;</span>+i); <br>        user.setAddress(<span class="hljs-string">&quot;深圳市&quot;</span>+i); <br>        userArray[i] = user; <br>    &#125; <br><br>    model.addAttribute(<span class="hljs-string">&quot;userArray&quot;</span>,userArray); <br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;eachArray&quot;</span>; <br>&#125;<br></code></pre></div></td></tr></table></figure><p>在 eachArray.html 页面对数组进行遍历（和 List 一样）</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>循环遍历Array数组<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;user,userStat:$&#123;userArray&#125;&quot;</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;userStat.count&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.phone&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.address&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><p>效果<br><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110271806877.png" alt="image-20211027180649809"></p><h5><span id="比较复杂的循环案例">比较复杂的循环案例</span></h5><p>需求：List 里面放 Map，Map 里面又放的是 List</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110271807754.png" alt="image-20211027180713673"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/each/all&quot;)</span> <br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">eachAll</span><span class="hljs-params">(Model model)</span> </span>&#123; <br><br>    <span class="hljs-comment">//list -&gt; Map -&gt; List -&gt; User </span><br>    List&lt;Map&lt;Integer,List&lt;User&gt;&gt;&gt; myList = <span class="hljs-keyword">new</span> ArrayList&lt;Map&lt;Integer, <br>    List&lt;User&gt;&gt;&gt;(); <br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123; <br><br>        Map&lt;Integer,List&lt;User&gt;&gt; myMap = <span class="hljs-keyword">new</span> HashMap&lt;Integer, <br>        List&lt;User&gt;&gt;(); <br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">2</span>; j++) &#123; <br><br>            List&lt;User&gt; myUserList = <span class="hljs-keyword">new</span> ArrayList&lt;User&gt;(); <br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">3</span>; k++) &#123; <br><br>                User user = <span class="hljs-keyword">new</span> User(); <br>                user.setId(k); <br>                user.setName(<span class="hljs-string">&quot;张三&quot;</span>+k); <br>                user.setPhone(<span class="hljs-string">&quot;1350000000&quot;</span>+k); <br>                user.setAddress(<span class="hljs-string">&quot;广州市&quot;</span>+i); <br><br>                myUserList.add(user); <br><br>            &#125; <br>            myMap.put(j,myUserList); <br><br>        &#125; <br>        myList.add(myMap); <br><br>    &#125; <br><br>    model.addAttribute(<span class="hljs-string">&quot;myList&quot;</span>,myList); <br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;eachAll&quot;</span>; <br>&#125; <br></code></pre></div></td></tr></table></figure><p>在 eachAll.html 页面对复杂集合关系进行遍历</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>循环遍历复杂集合<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>循环遍历复杂集合:list -&gt; Map -&gt; List -&gt; User<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;myListMap:$&#123;myList&#125;&quot;</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;myListMapObj:$&#123;myListMap&#125;&quot;</span>&gt;</span> <br>                Map集合的key：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;myListMapObj.key&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;myListMapObjList:$&#123;myListMapObj.value&#125;&quot;</span>&gt;</span> <br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;myListMapObjList.id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;myListMapObjList.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;myListMapObjList.phone&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br>                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;myListMapObjList.address&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><p>不要慌，仍然是套娃，效果如下</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110271809165.png" alt="image-20211027180924074"></p><h3><span id="条件判断">条件判断</span></h3><h4><span id="thif-和-thunless">th:if 和 th:unless</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/condition&quot;)</span> <br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">condition</span><span class="hljs-params">(HttpServletRequest request,Model model)</span> </span>&#123; <br><br>    User user1 = <span class="hljs-keyword">null</span>; <br>    model.addAttribute(<span class="hljs-string">&quot;user1&quot;</span>,user1); <br><br>    User user2 = <span class="hljs-keyword">new</span> User(); <br>    user2.setId(<span class="hljs-number">1001</span>); <br><br>    user2.setName(<span class="hljs-string">&quot;小岳岳&quot;</span>); <br><br>    user2.setPhone(<span class="hljs-string">&quot;13900000000&quot;</span>); <br>    user2.setAddress(<span class="hljs-string">&quot;北京市&quot;</span>); <br><br>    model.addAttribute(<span class="hljs-string">&quot;user2&quot;</span>,user2); <br>    model.addAttribute(<span class="hljs-string">&quot;sex&quot;</span>,<span class="hljs-number">1</span>);<br>    <br>    User user3 = <span class="hljs-keyword">new</span> User(); <br>    user3.setId(<span class="hljs-number">1002</span>); <br>    user3.setName(<span class="hljs-string">&quot;孙悦&quot;</span>); <br>    user3.setPhone(<span class="hljs-string">&quot;13200000000&quot;</span>); <br>    user3.setAddress(<span class="hljs-string">&quot;北京市&quot;</span>); <br>    <br>    model.addAttribute(<span class="hljs-string">&quot;user3&quot;</span>,user3); <br>    request.getSession().setAttribute(<span class="hljs-string">&quot;user3&quot;</span>,user3); <br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;condition&quot;</span>; <br>&#125; <br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>条件判断<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>th:if 用法:如果满足条件显示，否则相反<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;sex eq 1&#125;&quot;</span>&gt;</span> <br>            男：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;sex eq 0&#125;&quot;</span>&gt;</span> <br>            女：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;0&quot;</span>/&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>th:unless 用法：与th:if用法相反，即对条件判断条件取反<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:unless</span>=<span class="hljs-string">&quot;$&#123;sex == 1&#125;&quot;</span>&gt;</span> <br>            男：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:unless</span>=<span class="hljs-string">&quot;$&#123;sex eq 0&#125;&quot;</span>&gt;</span> <br>            女：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;0&quot;</span>/&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;user1 eq null&#125;&quot;</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red&quot;</span>&gt;</span>用户未登录<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:unless</span>=<span class="hljs-string">&quot;$&#123;user2 == null&#125;&quot;</span>&gt;</span> <br>            用户姓名：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user2.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>从session中获取值<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;user3 != null&#125;&quot;</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user3.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><h4><span id="thswitchthcase">th:switch/th:case</span></h4><p>switch，case 判断语句</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>th:switch/th:case 用法<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:switch</span>=<span class="hljs-string">&quot;$&#123;sex&#125;&quot;</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>性别：男<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>性别：女<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:case</span>=<span class="hljs-string">&quot;*&quot;</span>&gt;</span>性别：保密<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><p><font color="purple">一旦某个 case 判断值为 true，剩余的 case 默认不执行，“*”表示默认的 case，前面的 case 都不匹配时候，执行默认的 case </font></p><p>效果</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110271817297.png" alt="image-20211027181704235"></p><h4><span id="thinline">th:inline</span></h4><p>th:inline 有三个取值类型 (text, javascript和 none)，值为none 什么都不做，没有效果</p><p>（1） 内敛文本（th:inline=”text”） </p><p>内敛文本表达式不依赖于 html 标签，直接使用内敛表达式[[表达式]]即可获取动态数据，但必须要求在父级标签上加 th:inline = “text”属性</p><p>在 ThymeleafController 类中添加方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"> <br><span class="hljs-meta">@RequestMapping(value = &quot;/inline&quot;)</span> <br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">inlineText</span><span class="hljs-params">(Model model)</span> </span>&#123; <br> <br>    User user = <span class="hljs-keyword">new</span> User(); <br>    user.setId(<span class="hljs-number">1003</span>); <br>    user.setName(<span class="hljs-string">&quot;杰克&quot;</span>); <br>    user.setPhone(<span class="hljs-string">&quot;13899990000&quot;</span>); <br>    user.setAddress(<span class="hljs-string">&quot;天津市&quot;</span>); <br>    model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>,user); <br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;inline &quot;</span>; <br>&#125;<br></code></pre></div></td></tr></table></figure><p>创建 inline.html 页面</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>内敛文本<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标准变量表达式(展示数据)<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span> <br>        用户编号：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br>        用户姓名：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br>        用户手机号：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.phone&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br>        用户地址：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.address&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>内敛文本th:inline=&quot;text&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:inline</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span> <br>            用户编号：<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>[[$&#123;user.id&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br>            用户姓名：[[$&#123;user.name&#125;]]<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br>            用户手机号：[[$&#123;user.phone&#125;]]<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br>            用户地址：[[$&#123;user.address&#125;]]<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><p>浏览器访问测试</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110271825512.png" alt="image-20211027182504438"></p><p><font color="red">注意：一般我们将 th:inline=”text”放到<code>&lt;body th:inline=&quot;text&quot;&gt;</code>标签中</font></p><p>（2）内敛脚本（th:inline=”javascript”）</p><p>th:inline=”javascript”在js 代码中获取后台的动态数据</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:inline</span>=<span class="hljs-string">&quot;javascript&quot;</span>&gt;</span><span class="javascript"> </span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showInlineJavaScript</span>(<span class="hljs-params"></span>) </span>&#123; </span><br><span class="javascript">        alert(<span class="hljs-string">&quot;欢迎 &quot;</span> + [[$&#123;user.name&#125;]] + <span class="hljs-string">&quot; 到我院指导工作！联系方式： &quot;</span> + </span><br><span class="javascript">[[$&#123;user.phone&#125;]]); </span><br><span class="javascript">    &#125; </span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">th:onclick</span>=<span class="hljs-string">&quot;showInlineJavaScript()&quot;</span>&gt;</span>展示内容<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>效果</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110271826698.png" alt="image-20211027182637598"></p><h3><span id="thymeleaf-字面量">Thymeleaf 字面量</span></h3><p>字面量：对应数据类型的合法取值，可以在 html 页面直接使用，不需要后台传递</p><p>在 ThymeleafController 类中添加方法并准备数据 </p><p><font color="red">不多说了，就是常量。</font></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;&#x27;/user/info?id=&#x27; + $&#123;user.id&#125;&#125;&quot;</span>&gt;</span>查看用户：文本字面的路径使用<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><br>今年是<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;2019&quot;</span>&gt;</span>1949<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>年<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;success&#125;&quot;</span>&gt;</span>执行成功<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;user ne null&#125;&quot;</span>&gt;</span>用户不为空<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;共&#x27;+$&#123;totalRows&#125;+&#x27;条&#x27;+$&#123;totalPage&#125;+&#x27;页，当前第&#x27;+$&#123;currentPage&#125;+&#x27;</span></span><br><span class="hljs-string"><span class="hljs-tag">页&#x27;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="thymeleaf-运算符">Thymeleaf 运算符</span></h3><p>三元运算：表达式?”正确结果”:”错误结果” </p><p>算术运算：+ , - , * , / , % </p><p>关系比较:：&gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le ) </p><p>相等判断：== , != ( eq , ne ) </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/operator&quot;)</span> <br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">operator</span><span class="hljs-params">(Model model)</span> </span>&#123; <br> <br>    model.addAttribute(<span class="hljs-string">&quot;sex&quot;</span>,<span class="hljs-number">1</span>); <br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;operator&quot;</span>; <br>&#125;<br></code></pre></div></td></tr></table></figure><p>页面</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>运算符<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>三元运算符<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;sex eq 1 ? &#x27;男&#x27;:&#x27;女&#x27;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;sex == 1 ? &#x27;男&#x27;:&#x27;女&#x27;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br> <br>20*8=<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;20 * 8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br>20/8=<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;20 / 8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br>20+8=<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;20 + 8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br>20-8=<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;20 - 8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br> <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;5 &gt; 2&quot;</span>&gt;</span>5&gt;2是真的<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;5 gt 2&quot;</span>&gt;</span>5 gt 2是真的<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110271851037.png" alt="image-20211027185102965"></p><h3><span id="thymaleaf-表达式基本对象">Thymaleaf 表达式基本对象</span></h3><p>模板引擎提供了一组内置的对象，这些内置的对象可以直接在模板中使用，这些对象由#号开始引用，我们比较常用的内置对象</p><h4><span id="request">#request</span></h4><p>#request相当 于httpServletRequest 对 象，这是3.x版 本， 若 是2.x版本使用#httpServletRequest，在页面获取应用的上下文根，一般在 js 中请求路径中加上可以避免 404 </p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Thymeleaf表达式基本对象<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:inline</span>=<span class="hljs-string">&quot;javascript&quot;</span>&gt;</span><span class="javascript"> </span><br><span class="javascript">            <span class="hljs-keyword">var</span> basePath = [[$&#123;#httpServletRequest.getScheme() + <span class="hljs-string">&quot;://&quot;</span> + </span><br><span class="javascript">                             #httpServletRequest.getServerName() + <span class="hljs-string">&quot;:&quot;</span> + </span><br><span class="javascript">                             #httpServletRequest.getServerPort() + </span><br><span class="javascript">                             #httpServletRequest.getContextPath()&#125;]]; </span><br><span class="javascript"></span><br><span class="javascript">                             <span class="hljs-comment">//http://localhost:8080/springboot/user/login</span></span><br><span class="javascript">                             <span class="hljs-comment">//获取协议名称 </span></span><br><span class="javascript">                             <span class="hljs-keyword">var</span> scheme = [[$&#123;#request.getScheme()&#125;]]; </span><br><span class="javascript">                             <span class="hljs-comment">//获取服务IP地址 </span></span><br><span class="javascript">                             <span class="hljs-keyword">var</span> serverName = [[$&#123;#request.getServerName()&#125;]]; </span><br><span class="javascript">                             <span class="hljs-comment">//获取服务端口号 </span></span><br><span class="javascript">                             <span class="hljs-keyword">var</span> serverPort = [[$&#123;#request.getServerPort()&#125;]]; </span><br><span class="javascript">                             <span class="hljs-comment">//获取上下文根 </span></span><br><span class="javascript">                             <span class="hljs-keyword">var</span> contextPath = [[$&#123;#request.getContextPath()&#125;]]; </span><br><span class="javascript"></span><br><span class="javascript">                             <span class="hljs-keyword">var</span> allPath = scheme+<span class="hljs-string">&quot;://&quot;</span>+serverName+<span class="hljs-string">&quot;:&quot;</span>+serverPort+contextPath; </span><br><span class="javascript"></span><br><span class="javascript">                             alert(allPath); </span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><h4><span id="session">#session</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/index&quot;)</span> <br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123; <br> <br>    request.getSession().setAttribute(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;zhangsan&quot;</span>); <br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>; <br>&#125; <br></code></pre></div></td></tr></table></figure><p>页面</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>从SESSION中获取用户名称<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;#session.getAttribute(&#x27;username&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;#httpSession.getAttribute(&#x27;username&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">$&#123;session.user.username&#125;<br></code></pre></div></td></tr></table></figure><h3><span id="thymeleaf-表达式功能对象了解">Thymeleaf 表达式功能对象（了解）</span></h3><p>模板引擎提供的一组功能性内置对象，可以在模板中直接使用这些对象提供的功能方法<br>工作中常使用的数据类型，如集合，时间，数值，可以使用 Thymeleaf 的提供的功能性对象来处理它们</p><p>内置功能对象前都需要加#号，内置对象一般都以 s 结尾<br>官方手册：<a href="http://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html">http://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html</a></p><figure class="highlight vala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vala"><span class="hljs-meta">#dates: java.util.Date 对象的实用方法： </span><br><br>&lt;span th:text=<span class="hljs-string">&quot;$&#123;#dates.format(curDate, &#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;</span>&gt;&lt;/span&gt; <br><br><span class="hljs-meta">#calendars: 和dates 类似, 但是 java.util.Calendar 对象； </span><br><br><span class="hljs-meta">#numbers: 格式化数字对象的实用方法； </span><br><br><span class="hljs-meta">#strings: 字符串对象的实用方法： contains, startsWith,prepending/appending 等； </span><br><br><span class="hljs-meta">#objects: 对 objects 操作的实用方法； </span><br><br><span class="hljs-meta">#bools: 对布尔值求值的实用方法； </span><br><br><span class="hljs-meta">#arrays: 数组的实用方法； </span><br><br><span class="hljs-meta">#lists: list 的实用方法，比如&lt;span th:text=&quot;$&#123;#lists.size(datas)&#125;&quot;&gt;&lt;/span&gt; </span><br><br><span class="hljs-meta">#sets: set 的实用方法； </span><br><br><span class="hljs-meta">#maps: map 的实用方法； </span><br><br><span class="hljs-meta">#aggregates: 对数组或集合创建聚合的实用方法； </span><br></code></pre></div></td></tr></table></figure><h2><span id="第12章-总结及综合案例">第12章 总结及综合案例</span></h2><h3><span id="总结">总结</span></h3><p>采用 Spring Boot 开发实质上也是一个常规的 Spring 项目开发，只是利用了 SpringBoot启动程序和自动配置简化开发过程，提高开发效率。 </p><p>SpringBoot 项目开发代码的实现依然是使用 SpringMVC+ Spring + MyBatis 等，当然能集成几乎所有的开源项目， SpringBoot 是极速web 开发框架。 </p><p>采用SpringBoot 开发，需要掌握大量的注解，所以日常开发中注意对注解的积累。 </p><h3><span id="综合案例">综合案例</span></h3><p>通过上面内容的学习，我们完成一个综合案例：<br>采用 SpringBoot + Dubbo + MyBatis + Redis + Thymeleaf 实现对数据库的增删改查、缓存操作。<br>主要目的是练习 Springboot 如何集成各类技术进行项目开发</p>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>SpringBoot框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>远程服务Dubbo与Zookeeper</title>
    <link href="/2021/10/23/dubbo/"/>
    <url>/2021/10/23/dubbo/</url>
    
    <content type="html"><![CDATA[<h1><span id="dubbo">dubbo</span></h1><!-- toc --><ul><li><a href="#%E7%AC%AC%E4%B8%80%E7%AB%A0-rpc-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86">第一章 RPC 基础知识</a><ul><li><a href="#%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84">软件架构</a><ul><li><a href="#1%E5%8D%95%E4%B8%80%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84">（1）单一应用架构</a></li><li><a href="#2%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84">（2）分布式服务架构</a></li></ul></li><li><a href="#%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F">分布式系统</a></li><li><a href="#rpc">RPC</a></li></ul></li><li><a href="#%E7%AC%AC%E4%BA%8C%E7%AB%A0-dubbo-%E6%A1%86%E6%9E%B6">第二章 dubbo 框架</a><ul><li><a href="#dubbo-%E6%A6%82%E8%BF%B0">dubbo 概述</a></li><li><a href="#%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84">基本架构</a></li><li><a href="#dubbo-%E6%94%AF%E6%8C%81%E7%9A%84%E5%8D%8F%E8%AE%AE">dubbo 支持的协议</a></li><li><a href="#%E7%9B%B4%E8%BF%9E%E6%96%B9%E5%BC%8Fdubbo">直连方式dubbo</a><ul><li><a href="#1-%E6%96%B0%E5%BB%BA%E6%8E%A5%E5%8F%A3%E5%B7%A5%E7%A8%8B003-link-interface">1、新建接口工程003-link-interface</a></li><li><a href="#2-user%E5%AE%9E%E4%BD%93%E7%B1%BB">2、User实体类</a></li><li><a href="#3-userservice%E6%8E%A5%E5%8F%A3">3、UserService接口</a></li><li><a href="#4-%E6%96%B0%E5%BB%BA%E6%8F%90%E4%BE%9B%E8%80%85%E5%B7%A5%E7%A8%8B004-link-userservice-provider">4、新建提供者工程004-link-userservice-provider</a></li><li><a href="#5-userserviceimpl%E5%AE%9E%E7%8E%B0%E7%B1%BB">5、UserServiceImpl实现类</a></li><li><a href="#6-%E6%96%B0%E5%BB%BA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">6、新建配置文件</a></li><li><a href="#7-webxml%E4%B8%AD%E9%85%8D%E7%BD%AE%E7%9B%91%E5%90%AC%E5%99%A8">7、web.xml中配置监听器</a></li><li><a href="#8-%E6%96%B0%E5%BB%BA%E6%B6%88%E8%B4%B9%E8%80%85%E5%B7%A5%E7%A8%8B005-link-consumer">8、新建消费者工程005-link-consumer</a></li><li><a href="#9-usercontroller%E6%8E%A7%E5%88%B6%E5%B1%82%E7%B1%BB">9、UserController控制层类</a></li><li><a href="#10-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6dubbo-consumerxml">10、配置文件dubbo-consumer.xml</a></li><li><a href="#11-springmvc%E7%9A%84%E9%85%8D%E7%BD%AEapplicationxml">11、springmvc的配置application.xml</a></li><li><a href="#12-webxml%E4%B8%AD%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%A4%AE%E8%B0%83%E5%BA%A6%E5%99%A8">12、web.xml中配置中央调度器</a></li><li><a href="#13-%E6%96%B0%E5%BB%BAjsp%E9%A1%B5%E9%9D%A2userdetailjsp">13、新建jsp页面，userDetail.jsp</a></li><li><a href="#14-%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95">14、运行测试</a></li></ul></li></ul></li><li><a href="#%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83-zookeeper">第三章 注册中心-ZooKeeper</a><ul><li><a href="#%E6%A6%82%E8%BF%B0">概述</a><ul><li><a href="#%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F">注册中心工作方式</a></li><li><a href="#zookeeper-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83">Zookeeper 注册中心</a></li></ul></li><li><a href="#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85">下载安装</a><ul><li><a href="#windows%E7%8E%AF%E5%A2%83">windows环境</a></li><li><a href="#linux%E7%8E%AF%E5%A2%83">Linux环境</a></li></ul></li><li><a href="#%E4%BD%BF%E7%94%A8zookeeper">使用Zookeeper</a><ul><li><a href="#1-%E4%BF%AE%E6%94%B9%E6%8F%90%E4%BE%9B%E8%80%85%E5%B7%A5%E7%A8%8B%E5%A2%9E%E5%8A%A0zookeeper%E4%BE%9D%E8%B5%96">1、修改提供者工程，增加zookeeper依赖</a></li><li><a href="#2-%E4%BF%AE%E6%94%B9%E6%8F%90%E4%BE%9B%E8%80%85%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">2、修改提供者配置文件</a></li><li><a href="#3-%E4%BF%AE%E6%94%B9%E6%B6%88%E8%B4%B9%E8%80%85%E5%B7%A5%E7%A8%8B%E5%A2%9E%E5%8A%A0zookeeper%E4%BE%9D%E8%B5%96">3、修改消费者工程，增加zookeeper依赖</a></li><li><a href="#4-%E4%BF%AE%E6%94%B9%E6%B6%88%E8%B4%B9%E8%80%85%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">4、修改消费者配置文件</a></li><li><a href="#5-%E6%B3%A8%E6%84%8F%E9%99%A4%E4%BA%86%E7%94%A8autowired%E6%B3%A8%E8%A7%A3%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8resource%E6%B3%A8%E8%A7%A3%E6%9D%A5%E6%B3%A8%E5%85%A5">5、注意，除了用Autowired注解，也可以使用resource注解来注入</a></li><li><a href="#6-%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95">6、运行测试</a></li></ul></li><li><a href="#%E4%BD%BF%E7%94%A8linux%E4%B8%8B%E7%9A%84zookeeper">使用linux下的zookeeper</a><ul><li><a href="#1-%E5%85%88%E7%9C%8B%E4%B8%8Blinux%E7%9A%84ip%E5%9C%B0%E5%9D%80">1、先看下linux的ip地址</a></li><li><a href="#2-%E6%9B%B4%E6%94%B9%E6%8F%90%E4%BE%9B%E8%80%85%E5%92%8C%E6%B6%88%E8%B4%B9%E8%80%85%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84zookeeper%E7%9A%84ip%E5%9C%B0%E5%9D%80">2、更改提供者和消费者配置文件的zookeeper的ip地址</a></li><li><a href="#3-%E5%90%AF%E5%8A%A8linux%E4%B8%8B%E7%9A%84zookeeper">3、启动linux下的zookeeper</a></li><li><a href="#4-%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99">4、关闭防火墙</a></li></ul></li></ul></li><li><a href="#%E7%AC%AC%E5%9B%9B%E7%AB%A0-dubbo%E7%9A%84%E9%85%8D%E7%BD%AE">第四章 dubbo的配置</a><ul><li><a href="#%E7%89%88%E6%9C%AC%E5%8F%B7version%E7%9A%84%E4%BD%BF%E7%94%A8">版本号Version的使用</a><ul><li><a href="#1-%E6%8F%90%E4%BE%9B%E8%80%85%E5%A4%9A%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%AE%9E%E7%8E%B0%E7%B1%BB">1、提供者多建一个实现类</a></li><li><a href="#2-%E4%BF%AE%E6%94%B9%E6%8F%90%E4%BE%9B%E8%80%85%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">2、修改提供者的配置文件</a></li><li><a href="#3-%E6%B6%88%E8%B4%B9%E8%80%85%E5%BC%95%E7%94%A8%E5%B8%A6%E7%89%88%E6%9C%AC%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3">3、消费者引用带版本的服务接口</a></li><li><a href="#4-%E4%BF%AE%E6%94%B9controller">4、修改controller</a></li><li><a href="#5-%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95">5、运行测试</a></li></ul></li><li><a href="#check-%E6%A3%80%E6%9F%A5%E4%BE%9D%E8%B5%96%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%98%AF%E5%90%A6%E5%8F%AF%E7%94%A8">check 检查依赖的服务是否可用</a></li><li><a href="#%E9%87%8D%E8%AF%95%E6%AC%A1%E6%95%B0">重试次数</a></li><li><a href="#%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4">超时时间</a></li></ul></li><li><a href="#%E7%AC%AC%E4%BA%94%E7%AB%A0-%E7%9B%91%E6%8E%A7%E4%B8%AD%E5%BF%83">第五章 监控中心</a><ul><li><a href="#%E5%8F%91%E5%B8%83%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83">发布配置中心</a><ul><li><a href="#%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">修改配置文件</a></li><li><a href="#%E5%90%AF%E5%8A%A8%E6%AD%A5%E9%AA%A4">启动步骤</a></li></ul></li></ul></li></ul><!-- tocstop --><h2><span id="第一章-rpc-基础知识">第一章 RPC 基础知识</span></h2><h3><span id="软件架构">软件架构</span></h3><h4><span id="1单一应用架构">（1）单一应用架构</span></h4><p>当网站流量很小时，应用规模小时，只需一个应用，将所有功能都部署在一起，以减少<br>部署服务器数量和成本。</p><p>此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。数<br>据库的处理时间影响应用的性能</p><p>这种结构的应用适合小型系统，小型网站，或者企业的内部系统，用户较少，请求量不大，对请求的处理时间没有太高的要求。 将所有功能都部署到一个服务器，简单易用。开发项目的难度低。</p><p>缺点：</p><p>1、性能扩展比较困难<br>2、不利于多人同时开发<br>3、不利于升级维护<br>4、整个系统的空间占用比较大</p><h4><span id="2分布式服务架构">（2）分布式服务架构</span></h4><p>当应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。分布式系统将服务作为独立的应用，实现服务共享和重用。</p><h3><span id="分布式系统">分布式系统</span></h3><p>分布式系统是若干独立计算机（服务器）的集合，这些计算机对于用户来说就像单个相关系统，分布式系统（distributed system）是建立在网络之上的服务器端一种结构。</p><p>分布式系统中的计算机可以使用不同的操作系统，可以运行不同应用程序提供服务，将服务分散部署到多个计算机服务器上。</p><h3><span id="rpc">RPC</span></h3><p>RPC 【Remote Procedure Call】是指远程过程调用，是一种进程间通信方式，是一种技术思想，而不是规范。</p><p>它允许程序调用另一个地址空间（网络的另一台机器上）的过程或函<br>数，而不用开发人员显式编码这个调用的细节。调用本地方法和调用远程方法一样。</p><p>RPC 的实现方式可以不同。例如java 的rmi, spring 远程调用等。</p><p>使用PRC 可以将本地的调用扩展到远程调用（分布式系统的其他服务器）</p><p>RPC 的特点 </p><ol><li>简单：使用简单，建立分布式应用更容易。 </li><li>高效：调用过程看起来十分清晰，效率高。 </li><li>通用：进程间通讯的方式，有通用的规则。</li></ol><h2><span id="第二章-dubbo-框架">第二章 dubbo 框架</span></h2><h3><span id="dubbo-概述">dubbo 概述</span></h3><p>Apache Dubbo (incubating) |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC 框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p><p>Dubbo 是一个分布式服务框架，致力于提供高性能和透明化的<font color="red">RPC</font>远程服务调用方案、服务治理方案。</p><p>官网：<a href="http://dubbo.apache.org/zh-cn/">http://dubbo.apache.org/zh-cn/</a></p><p>特性: </p><p>面向接口代理：调用接口的方法，在A 服务器调用B 服务器的方法，由dubbo 实现对B 的调用，无需关心实现的细节，就像MyBatis 访问Dao 的接口，可以操作数据库一样。不用关心Dao 接口方法的实现。</p><h3><span id="基本架构">基本架构</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110192007956.png" alt="image-20211019200725899"></p><p>==服务提供者（Provider）==：暴露服务的服务提供方，服务提供者在启动时，<strong>向注册中心注册自己提供的服务</strong>。</p><p>==服务消费者（Consumer）==: 调用远程服务的服务消费方，服务消费者在启动时，<strong>向注册中心订阅</strong>自己所需的<strong>服务</strong>，服务消费者，<strong>从提供者地址列表中</strong>，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p><p>==注册中心（Registry）==：注册中心<strong>返回服务提供者地址列表</strong>给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</p><p>==监控中心（Monitor）==：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</p><h3><span id="dubbo-支持的协议">dubbo 支持的协议</span></h3><p>支持多种协议：dubbo , hessian , rmi , http, webservice , thrift , memcached , redis。<br>dubbo 官方推荐使用dubbo 协议。dubbo 协议默认端口20880</p><p>使用dubbo 协议，spring 配置文件加入：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:protocol</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dubbo&quot;</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;20880&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="直连方式dubbo">直连方式dubbo</span></h3><p>点对点的直连项目:消费者直接访问服务提供者，没有注册中心。消费者必须指定服务<br>提供者的访问地址（url）</p><p>消费者直接通过url 地址访问固定的服务提供者。这个url 地址是不变的。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110192011683.png" alt="image-20211019201114638"></p><h4><span id="1-新建接口工程003-link-interface">1、新建接口工程003-link-interface</span></h4><p>注意，maven不需要加archetype，普通java工程就可以。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wangpeng.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>003-link-interface<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>没啥特殊的</p><h4><span id="2-user实体类">2、User实体类</span></h4><p>新建实体类，com.wangpeng.dubbo,.model.User.java</p><p>定义属性，加上get和set方法，<font color="red">注意一定要继承Serializable</font>，使其序列化。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.dubbo.model;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(Integer age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="3-userservice接口">3、UserService接口</span></h4><p>新建接口，com.wangpeng.dubbo.service.UserService.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.dubbo.service;<br><br><span class="hljs-keyword">import</span> com.wangpeng.dubbo.model.User;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-function">User <span class="hljs-title">queryUserById</span><span class="hljs-params">(Integer id)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="4-新建提供者工程004-link-userservice-provider">4、新建提供者工程004-link-userservice-provider</span></h4><p>maven的archetype选择快速web，新建maven web工程。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wangpeng.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>004-link-userservice-provider<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--spring依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.16.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--web mvc--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.16.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--dubbo--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--接口工程--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wangpeng.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>003-link-interface<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--jdk1.8编译插件--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>添加几个依赖：</p><ol><li>  spring</li><li>  springmvc</li><li>  dubbo</li><li>  接口工程</li></ol><p>其中，接口工程就是我们在步骤1新建的工程，把它的坐标写进来。</p><h4><span id="5-userserviceimpl实现类">5、UserServiceImpl实现类</span></h4><p>com.wangpeng.dubbo.service.impl.UserServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.dubbo.service.impl;<br><br><span class="hljs-keyword">import</span> com.wangpeng.dubbo.model.User;<br><span class="hljs-keyword">import</span> com.wangpeng.dubbo.service.UserService;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">queryUserById</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setId(id);<br>        user.setName(<span class="hljs-string">&quot;lisi&quot;</span>);<br>        user.setAge(<span class="hljs-number">23</span>);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="6-新建配置文件">6、新建配置文件</span></h4><p>在resources中新建dubbo-userservice-provider.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns:dubbo</span>=<span class="hljs-string">&quot;http://dubbo.apache.org/schema/dubbo&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--服务提供者声明的名称--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:application</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;004-link-userservice-provider&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--访问服务协议的名称及端口号，dubbo协议--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:protocol</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dubbo&quot;</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;20880&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        暴露服务接口-&gt;service</span><br><span class="hljs-comment">        interface:暴露服务接口的全限定类名</span><br><span class="hljs-comment">        ref:接口引用的实现类在spring容器中的标识</span><br><span class="hljs-comment">        registry:如果不使用注册中心，则值为：N/A</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:service</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.wangpeng.dubbo.service.UserService&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">registry</span>=<span class="hljs-string">&quot;N/A&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--将接口的实现类加载到spring容器中--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wangpeng.dubbo.service.impl.UserServiceImpl&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>几个东西：</p><ol><li>  dubbo中声明的名称</li><li>  访问协议的名称和端口号</li><li>暴露服务接口<ol><li>  接口名</li><li>  引用的实现类</li><li>  注册中心</li></ol></li><li>  实现类丢到容器中</li></ol><h4><span id="7-webxml中配置监听器">7、web.xml中配置监听器</span></h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--监听器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:dubbo-userservice-provider.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置监听器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="8-新建消费者工程005-link-consumer">8、新建消费者工程005-link-consumer</span></h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wangpeng.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>005-link-consumer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--spring依赖--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.16.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--web mvc--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.16.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--dubbo--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--接口工程--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wangpeng.dubbo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>003-link-interface<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--jdk1.8编译插件--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>和提供者的pom.xml一样的依赖</p><h4><span id="9-usercontroller控制层类">9、UserController控制层类</span></h4><p>com.wangpeng.dubbo.UserController.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.dubbo.web;<br><br><span class="hljs-keyword">import</span> com.wangpeng.dubbo.model.User;<br><span class="hljs-keyword">import</span> com.wangpeng.dubbo.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">userDetail</span><span class="hljs-params">(Model model, Integer id)</span> </span>&#123;<br>        User user = userService.queryUserById(id);<br>        model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>, user);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;userDetail&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>private UserService <font color="red">userService</font>; 爆红不用理会。</p><h4><span id="10-配置文件dubbo-consumerxml">10、配置文件dubbo-consumer.xml</span></h4><p>dubbo消费者配置</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns:dubbo</span>=<span class="hljs-string">&quot;http://dubbo.apache.org/schema/dubbo&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--声明消费者的名称--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:application</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;005-link-consumer&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        引用远程服务接口</span><br><span class="hljs-comment">        id: 远程服务接口对象名称</span><br><span class="hljs-comment">        interface：远程服务接口的全限定类名</span><br><span class="hljs-comment">        url：访问服务接口的地址</span><br><span class="hljs-comment">        registry：不使用注册中心，值为N/A</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.wangpeng.dubbo.service.UserService&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;dubbo://localhost:20880&quot;</span> <span class="hljs-attr">registry</span>=<span class="hljs-string">&quot;N/A&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="11-springmvc的配置applicationxml">11、springmvc的配置application.xml</span></h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--扫描组件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wangpeng.dubbo.web&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置注解驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置视图解析器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="12-webxml中配置中央调度器">12、web.xml中配置中央调度器</span></h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:application.xml,classpath:dubbo-consumer.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="13-新建jsp页面userdetailjsp">13、新建jsp页面，userDetail.jsp</span></h4><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;页面标题&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1&gt;用户详情&lt;/h1&gt;<br>&lt;div&gt;用户标识:$&#123;user.id&#125;&lt;/div&gt;<br>&lt;div&gt;用户名称:$&#123;user.name&#125;&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h4><span id="14-运行测试">14、运行测试</span></h4><p>配置一下tomcat</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110202141181.png" alt="image-20211020214128133"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110202141156.png" alt="image-20211020214150109"></p><ol><li>  先运行提供者程序</li><li>  再运行消费者程序</li></ol><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110202143143.png" alt="image-20211020214328113"></p><h2><span id="第三章-注册中心-zookeeper">第三章 注册中心-ZooKeeper</span></h2><h3><span id="概述">概述</span></h3><p>Multicast 注册中心：组播方式<br>Redis 注册中心：使用Redis 作为注册中心<br>Simple 注册中心：就是一个dubbo 服务。作为注册中心。提供查找服务的功能。<br>Zookeeper 注册中心：使用Zookeeper 作为注册中心  </p><p>推荐使用Zookeeper 注册中心。</p><h4><span id="注册中心工作方式">注册中心工作方式</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110202145769.png" alt="image-20211020214517729"></p><h4><span id="zookeeper-注册中心">Zookeeper 注册中心</span></h4><p>Zookeeper 是一个高性能的，分布式的，开放源码的分布式应用程序协调服务。简称zk。<br>Zookeeper 是翻译管理是动物管理员。可以理解为windows 中的资源管理器或者注册表。他是一个树形结构。这种树形结构和标准文件系统相似。ZooKeeper 树中的每个节点被称为Znode。和文件系统的目录树一样，ZooKeeper 树中的每个节点可以拥有子节点。每个节点表示一个唯一服务资源。Zookeeper 运行需要java 环境。</p><h3><span id="下载安装">下载安装</span></h3><p>官网：<a href="http://zookeeper.apache.org/">Apache ZooKeeper</a></p><p>在官网下载最新版本，是tar.gz格式。</p><h4><span id="windows环境">windows环境</span></h4><p>1、找个地方解压，我这里选择D:\zookeeper</p><p>2、进入路径D:\zookeeper\apache-zookeeper-3.7.0-bin\conf</p><p>3、复制zoo_sample.cfg并改名zoo.cfg</p><p>4、修改配置文件zoo.cg</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110211926182.png" alt="image-20211021192637126"></p><p>tickTime: 心跳的时间，单位毫秒. Zookeeper 服务器之间或客户端与服务器之间维持心跳的</p><p>时间间隔，也就是每个 tickTime 时间就会发送一个心跳。表明存活状态。 </p><p>dataDir: 数据目录，可以是任意目录。存储 zookeeper 的快照文件、pid 文件，默认为/tmp/zookeeper，建议在zookeeper 安装目录下创建data 目录，将dataDir 配置改<br>为/usr/local/zookeeper-3.4.10/data </p><p>clientPort: 客户端连接zookeeper 的端口，即zookeeper 对外的服务端口，默认为2181 </p><p>改2个东西：</p><ol><li>  数据目录，这个自己指定一个地方</li><li>  admin.serverPort，zookeeper另外启动的一个服务的端口号，默认是8080，容易占用，改一个不容易占用的。（<font color="red">这个配置项配置文件没有的话，自己加一下</font>）。</li></ol><p>启动zookeeper</p><p>在bin目录下，执行zkServer.cmd，就启动了zookeeper</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110202217852.png" alt="image-20211020221753765"></p><p>关闭zookeeper：关闭窗口即可</p><h4><span id="linux环境">Linux环境</span></h4><p>1、使用xftp软件把tar.gz的包给上传到linux下 \usr\local\tools（没有tools文件夹就mkdir一下）</p><p>2、压缩包解压</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">tar</span> -zxvf zookeeper-<span class="hljs-number">3</span>.<span class="hljs-number">7</span>.<span class="hljs-number">0</span>-bin.tar.gz -C /usr/local/<br></code></pre></div></td></tr></table></figure><p>3、然后给文件夹换个简洁的名字，比如zookeeper-3.7.0</p><figure class="highlight cos"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cos"><span class="hljs-keyword">mv</span> 旧名字 新名字<br></code></pre></div></td></tr></table></figure><p>4、在zookeeper-3.7.0给新建一个文件夹data（待会用来配置数据文件的位置）</p><p>5、进入配置文件路径</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/zookeeper-3.7.0/</span>conf<br></code></pre></div></td></tr></table></figure><p>6、复制一下zoo_sample.cfg并改名zoo.cfg</p><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-keyword">cp</span> zoo_sample.cfg zoo.cfg<br></code></pre></div></td></tr></table></figure><p>7、修改配置文件</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">vim</span> zoo.cfg<br></code></pre></div></td></tr></table></figure><p>修改下面标注的两项。（admin.serverPort项目自己添加）</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110202242033.png" alt="image-20211020224254986"></p><p>8、启动zookeeper</p><p>进入zookeeper-3.7.0下的bin/，然后执行zkServer.sh的脚本</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">./zkServer.sh <span class="hljs-literal">start</span><br></code></pre></div></td></tr></table></figure><p>9、查看运行状态</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> zoo<br></code></pre></div></td></tr></table></figure><p>看到一堆进程就对了</p><p>10、关闭zookeeper</p><p>还是进入到zookeeper-3.7.0下的bin/，关闭脚本</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">./zkServer.<span class="hljs-keyword">sh</span> <span class="hljs-keyword">stop</span><br></code></pre></div></td></tr></table></figure><h3><span id="使用zookeeper">使用Zookeeper</span></h3><h4><span id="1-修改提供者工程增加zookeeper依赖">1、修改提供者工程，增加zookeeper依赖</span></h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--zookeeper--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.curator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>curator-framework<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="2-修改提供者配置文件">2、修改提供者配置文件</span></h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns:dubbo</span>=<span class="hljs-string">&quot;http://dubbo.apache.org/schema/dubbo&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--服务提供者声明的名称--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:application</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;008-link-userservice-provider&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--访问服务协议的名称及端口号，dubbo协议--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:protocol</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dubbo&quot;</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;20880&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--指定注册中心地址和端口号--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:registry</span> <span class="hljs-attr">address</span>=<span class="hljs-string">&quot;zookeeper://localhost:2181&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--暴露服务接口-&gt;service--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:service</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.wangpeng.dubbo.service.UserService&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userService&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--将接口的实现类加载到spring容器中--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wangpeng.dubbo.service.impl.UserServiceImpl&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>把<code>registry=&quot;N/A&quot;</code>去掉，新增registry标签，内容是zookeeper的客户端地址</p><h4><span id="3-修改消费者工程增加zookeeper依赖">3、修改消费者工程，增加zookeeper依赖</span></h4><p>不赘述</p><h4><span id="4-修改消费者配置文件">4、修改消费者配置文件</span></h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns:dubbo</span>=<span class="hljs-string">&quot;http://dubbo.apache.org/schema/dubbo&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--声明消费者的名称--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:application</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;005-link-consumer&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--指定注册中心--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:registry</span> <span class="hljs-attr">address</span>=<span class="hljs-string">&quot;zookeeper://localhost:2181&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--引用远程服务接口--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.wangpeng.dubbo.service.UserService&quot;</span> /&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>同样把<code>registry=&quot;N/A&quot;</code>去掉，新增registry标签，内容是zookeeper的客户端地址</p><h4><span id="5-注意除了用autowired注解也可以使用resource注解来注入">5、注意，除了用Autowired注解，也可以使用resource注解来注入</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.dubbo.web;<br><br><span class="hljs-keyword">import</span> com.wangpeng.dubbo.model.User;<br><span class="hljs-keyword">import</span> com.wangpeng.dubbo.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">userDetail</span><span class="hljs-params">(Model model, Integer id)</span> </span>&#123;<br>        User user = userService.queryUserById(id);<br>        model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>, user);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;userDetail&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>@Autowired 先by type，然后再by name</p><p>@Resource 只by name</p><h4><span id="6-运行测试">6、运行测试</span></h4><ol><li><p>  先双击zookeeper目录下，bin下的zkServer.cmd启动zookeeper</p></li><li><p>  启动服务提供者的工程</p></li><li><p>  启动消费者的工程</p></li></ol><h3><span id="使用linux下的zookeeper">使用linux下的zookeeper</span></h3><h4><span id="1-先看下linux的ip地址">1、先看下linux的ip地址</span></h4><p>ifconfig</p><h4><span id="2-更改提供者和消费者配置文件的zookeeper的ip地址">2、更改提供者和消费者配置文件的zookeeper的ip地址</span></h4><p>改下zookeeper的ip地址</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--指定注册中心地址和端口号--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:registry</span> <span class="hljs-attr">address</span>=<span class="hljs-string">&quot;zookeeper://192.168.199.134:2181&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="3-启动linux下的zookeeper">3、启动linux下的zookeeper</span></h4><p>进入usr/local/zookeeper/bin/下，启动zkServier.sh</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">./zkServer.sh <span class="hljs-literal">start</span><br></code></pre></div></td></tr></table></figure><h4><span id="4-关闭防火墙">4、关闭防火墙</span></h4><p>查看防火墙状态</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl status firewalld</span><br></code></pre></div></td></tr></table></figure><p>关闭防火墙</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino">ststemctl stop fireewalld<br></code></pre></div></td></tr></table></figure><h2><span id="第四章-dubbo的配置">第四章 dubbo的配置</span></h2><h3><span id="版本号version的使用">版本号Version的使用</span></h3><p>每个接口都应定义版本号，为后续不兼容升级提供可能。当一个接口有不同的实现，项目早期使用的一个实现类， 之后创建接口的新的实现类。区分不同的接口实现使用version。<br>特别是项目需要把早期接口的实现全部换位新的实现类，也需要使用version. </p><p>可以用版本号从早期的接口实现过渡到新的接口实现，版本号不同的服务相互间不引用。</p><h4><span id="1-提供者多建一个实现类">1、提供者多建一个实现类</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110211854674.png" alt="image-20211021185441592"></p><h4><span id="2-修改提供者的配置文件">2、修改提供者的配置文件</span></h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns:dubbo</span>=<span class="hljs-string">&quot;http://dubbo.apache.org/schema/dubbo&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--服务提供者声明的名称--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:application</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;008-link-userservice-provider&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--访问服务协议的名称及端口号，dubbo协议--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:protocol</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dubbo&quot;</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;20880&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--指定注册中心地址和端口号--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:registry</span> <span class="hljs-attr">address</span>=<span class="hljs-string">&quot;zookeeper://192.168.199.134:2181&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--暴露服务接口-&gt;service--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:service</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.wangpeng.dubbo.service.UserService&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userService-v1&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0.0&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:service</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.wangpeng.dubbo.service.UserService&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userService-v2&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;2.0.0&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--将接口的实现类加载到spring容器中--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService-v1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wangpeng.dubbo.service.impl.UserServiceImpl&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService-v2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wangpeng.dubbo.service.impl.UserServiceImpl2&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>暴露服务接口的地方，增加version属性，区分版本</p><h4><span id="3-消费者引用带版本的服务接口">3、消费者引用带版本的服务接口</span></h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="hljs-attr">xmlns:dubbo</span>=<span class="hljs-string">&quot;http://dubbo.apache.org/schema/dubbo&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--声明消费者的名称--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:application</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;005-link-consumer&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--指定注册中心--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:registry</span> <span class="hljs-attr">address</span>=<span class="hljs-string">&quot;zookeeper://192.168.199.134:2181&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--引用远程服务接口--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService1&quot;</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.wangpeng.dubbo.service.UserService&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0.0&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService2&quot;</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.wangpeng.dubbo.service.UserService&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;2.0.0&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="4-修改controller">4、修改controller</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.dubbo.web;<br><br><span class="hljs-keyword">import</span> com.wangpeng.dubbo.model.User;<br><span class="hljs-keyword">import</span> com.wangpeng.dubbo.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService1;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService2;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/user1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">userDetail1</span><span class="hljs-params">(Model model, Integer id)</span> </span>&#123;<br>        User user = userService1.queryUserById(id);<br>        model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>, user);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;userDetail&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/user2&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">userDetail2</span><span class="hljs-params">(Model model, Integer id)</span> </span>&#123;<br>        User user = userService2.queryUserById(id);<br>        model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>, user);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;userDetail&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="5-运行测试">5、运行测试</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110211856401.png" alt="image-20211021185612355"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110211856183.png" alt="image-20211021185625146"></p><h3><span id="check-检查依赖的服务是否可用">check 检查依赖的服务是否可用</span></h3><p>dubbo 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止Spring 初始化完成，以便上线时，能及早发现问题，默认check=true。通过check=”false”关闭检查，比如，测试时，有些服务不关心，或者出现了循环依赖，必须有一方先启动。</p><p>例1：关闭某个服务的启动时检查<br>&lt;dubbo:reference interface=”com.foo.BarService” check=”false” /&gt;<br>例2：关闭注册中心启动时检查<br>&lt;dubbo:registry check=”false” /&gt;<br>默认启动服务时检查注册中心存在并已运行。注册中心不启动会报错。</p><p>一般来说：</p><ul><li>  在开发阶段，设成false</li><li>  在上线时，设成true</li></ul><h3><span id="重试次数">重试次数</span></h3><p>消费者访问提供者，如果访问失败，则切换重试访问其它服务器，但重试会带来更长延迟。<br>访问时间变长，用户的体验较差。多次重新访问服务器有可能访问成功。可通过 retries=”2”<br>来设置重试次数(不含第一次)。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">重试次数配置如下： <br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:service</span> <span class="hljs-attr">retries</span>=<span class="hljs-string">&quot;2&quot;</span> /&gt;</span> <br>或 <br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">retries</span>=<span class="hljs-string">&quot;2&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><p>一般也懒得写</p><h3><span id="超时时间">超时时间</span></h3><p>由于网络或服务端不可靠，会导致调用出现一种不确定的中间状态（超时）。为了避免超时<br>导致客户端资源（线程）挂起耗尽，必须设置超时时间。<br>timeout：调用远程服务超时时间(毫秒)</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">消费端-指定接口超时配置 <br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:reference</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.foo.BarService&quot;</span> <span class="hljs-attr">timeout</span>=<span class="hljs-string">&quot;2000&quot;</span>/&gt;</span><br><br>服务端-指定接口超时配置 <br><span class="hljs-tag">&lt;<span class="hljs-name">dubbo:server</span> <span class="hljs-attr">interface</span>=<span class="hljs-string">&quot;com.foo.BarService&quot;</span> <span class="hljs-attr">timeout</span>=<span class="hljs-string">&quot;2000&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><h2><span id="第五章-监控中心">第五章 监控中心</span></h2><p>dubbo 的使用，其实只需要有注册中心，消费者，提供者这三个就可以使用了，但是并不能看到有哪些消费者和提供者，为了更好的调试，发现问题，解决问题，因此引入 dubbo-admin。<br>通过 dubbo-admin 可以对消费者和提供者进行管理。可以在dubbo 应用部署做动态的调整，服务的管理。</p><p>dubbo-admin<br>图形化的服务管理页面；安装时需要指定注册中心地址，即可从注册中心中获取到所有的提供者/消费者进行配置管理</p><p>dubbo-monitor-simple<br>简单的监控中心；</p><h3><span id="发布配置中心">发布配置中心</span></h3><p>下载监控中心，<a href="https://github.com/apache/incubator-dubbo-ops">https://github.com/apache/incubator-dubbo-ops</a></p><h4><span id="修改配置文件">修改配置文件</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110212127827.png" alt="image-20211021212718783"></p><p> application.properties 文件，内容如下：</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110212127672.png" alt="image-20211021212727627"></p><h4><span id="启动步骤">启动步骤</span></h4><p>1） 先启动注册中心<br>2） 执行提供者项目<br>3） java -jar dubbo-admin-0.0.1-SNAPSHOT.jar 启动dubbo 管理后台<br>4） 在浏览器地址栏输入 <a href="http://localhost:7001/">http://localhost:7001</a> 访问监控中心-控制台。</p><p>账号密码都是root</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110212126594.png" alt="image-20211021212628489"></p>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>分布式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>分布式</tag>
      
      <tag>远程服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NoSQL数据库-Redis远程字典</title>
    <link href="/2021/10/22/Redis/"/>
    <url>/2021/10/22/Redis/</url>
    
    <content type="html"><![CDATA[<h1><span id="redis">Redis</span></h1><!-- toc --><ul><li><a href="#%E5%8F%91%E5%B1%95">发展</a><ul><li><a href="#web10%E6%97%B6%E4%BB%A3">Web1.0时代</a></li><li><a href="#web20%E6%97%B6%E4%BB%A3">Web2.0时代</a></li><li><a href="#%E8%A7%A3%E5%86%B3cpu%E5%8F%8A%E5%86%85%E5%AD%98%E5%8E%8B%E5%8A%9B">解决CPU及内存压力</a></li><li><a href="#%E8%A7%A3%E5%86%B3io%E5%8E%8B%E5%8A%9B">解决IO压力</a></li><li><a href="#nosql%E6%95%B0%E6%8D%AE%E5%BA%93">NoSQL数据库</a></li><li><a href="#nosql%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF">NoSQL适用场景</a></li><li><a href="#nosql%E4%B8%8D%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF">NoSQL不适用场景</a></li><li><a href="#%E8%A1%8C%E5%BC%8F%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE%E5%BA%93">行式存储数据库</a></li><li><a href="#%E5%9B%BE%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93">图关系型数据库</a></li></ul></li><li><a href="#redis%E6%A6%82%E8%BF%B0">Redis概述</a><ul><li><a href="#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">应用场景</a></li><li><a href="#redis%E5%AE%89%E8%A3%85">Redis安装</a></li><li><a href="#%E5%89%8D%E5%8F%B0%E5%90%AF%E5%8A%A8%E4%B8%8D%E6%8E%A8%E8%8D%90">前台启动（不推荐)</a></li><li><a href="#%E5%90%8E%E5%8F%B0%E5%90%AF%E5%8A%A8%E6%8E%A8%E8%8D%90">后台启动（推荐）</a></li><li><a href="#%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86">相关知识</a></li></ul></li><li><a href="#%E5%B8%B8%E7%94%A8%E4%BA%94%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">常用五大数据类型</a><ul><li><a href="#%E9%94%AEkey">键（key）</a></li><li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2string">字符串（String）</a><ul><li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li><li><a href="#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">常用命令</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">数据结构</a></li></ul></li><li><a href="#%E5%88%97%E8%A1%A8list">列表（List）</a><ul><li><a href="#%E7%AE%80%E4%BB%8B-1">简介</a></li><li><a href="#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-1">常用命令</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-1">数据结构</a></li></ul></li><li><a href="#%E9%9B%86%E5%90%88set">集合（Set）</a><ul><li><a href="#%E7%AE%80%E4%BB%8B-2">简介</a></li><li><a href="#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-2">常用命令</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-2">数据结构</a></li></ul></li><li><a href="#%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88sorted-set">有序集合（sorted set）</a><ul><li><a href="#%E7%AE%80%E4%BB%8B-3">简介</a></li><li><a href="#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-3">常用命令</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-3">数据结构</a></li><li><a href="#%E8%B7%B3%E8%B7%83%E8%A1%A8%E8%B7%B3%E8%A1%A8">跳跃表（跳表）</a></li></ul></li></ul></li><li><a href="#redis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">Redis配置文件</a><ul><li><a href="#units-%E5%8D%95%E4%BD%8D">###Units 单位###</a></li><li><a href="#includes%E5%8C%85%E5%90%AB">###INCLUDES包含###</a></li><li><a href="#%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE">###网络相关配置###</a><ul><li><a href="#bindfont-colorred%E9%87%8D%E8%A6%81font">bind（<font color="red">重要</font>）</a></li><li><a href="#protected-modefont-colorred%E9%87%8D%E8%A6%81font">protected-mode（<font color="red">重要</font>）</a></li><li><a href="#prot">prot</a></li><li><a href="#tcp-backlog">tcp-backlog</a></li><li><a href="#timeout">timeout</a></li><li><a href="#tcp-keepalive">tcp-keepalive</a></li></ul></li><li><a href="#general%E9%80%9A%E7%94%A8">###GENERAL通用###</a><ul><li><a href="#daemonize">daemonize</a></li><li><a href="#pidfile">pidfile</a></li><li><a href="#loglevel">loglevel</a></li><li><a href="#logfile">logfile</a></li><li><a href="#database16">database16</a></li></ul></li><li><a href="#security%E5%AE%89%E5%85%A8">###SECURITY安全###</a><ul><li><a href="#%E8%AE%BE%E7%BD%AE%E5%AF%86%E7%A0%81">设置密码</a></li></ul></li><li><a href="#limits">###LIMITS###</a><ul><li><a href="#maxclients">maxclients</a></li><li><a href="#maxmemory">maxmemory</a></li><li><a href="#maxmemory-policy">maxmemory-policy</a></li><li><a href="#maxmemory-samples">maxmemory-samples</a></li></ul></li></ul></li><li><a href="#redis%E5%8F%91%E5%B8%83%E5%92%8C%E8%AE%A2%E9%98%85">Redis发布和订阅</a><ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%91%E5%B8%83%E5%92%8C%E8%AE%A2%E9%98%85">什么是发布和订阅</a></li><li><a href="#redis%E7%9A%84%E5%8F%91%E5%B8%83%E5%92%8C%E8%AE%A2%E9%98%85">Redis的发布和订阅</a></li><li><a href="#%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%AE%9E%E7%8E%B0">发布订阅命令行实现</a></li></ul></li><li><a href="#redis%E6%96%B0%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">Redis新数据类型</a><ul><li><a href="#bitmaps">Bitmaps</a><ul><li><a href="#%E7%AE%80%E4%BB%8B-4">简介</a></li><li><a href="#%E5%91%BD%E4%BB%A4">命令</a></li><li><a href="#bitmaps%E4%B8%8Eset%E5%AF%B9%E6%AF%94">Bitmaps与set对比</a></li></ul></li><li><a href="#hyperloglog">HyperLoglog</a><ul><li><a href="#%E7%AE%80%E4%BB%8B-5">简介</a></li><li><a href="#%E5%91%BD%E4%BB%A4-1">命令</a></li></ul></li><li><a href="#geospatial">Geospatial</a><ul><li><a href="#%E7%AE%80%E4%BB%8B-6">简介</a></li><li><a href="#%E5%91%BD%E4%BB%A4-2">命令</a></li></ul></li></ul></li><li><a href="#redis_jedis_%E6%B5%8B%E8%AF%95">Redis_Jedis_测试</a><ul><li><a href="#jedis%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84jar%E5%8C%85">Jedis所需要的jar包</a></li><li><a href="#%E8%BF%9E%E6%8E%A5redis%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">连接Redis的注意事项</a></li><li><a href="#%E6%B5%8B%E8%AF%95%E7%A8%8B%E5%BA%8F">测试程序</a></li><li><a href="#%E6%B5%8B%E8%AF%95%E7%9B%B8%E5%85%B3%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">测试相关数据类型</a><ul><li><a href="#key">Key</a></li><li><a href="#string">String</a></li><li><a href="#list">List</a></li><li><a href="#set">set</a></li><li><a href="#hash">hash</a></li><li><a href="#zset">zset</a></li></ul></li></ul></li><li><a href="#redis_jedis_%E5%AE%9E%E4%BE%8B">Redis_Jedis_实例</a><ul><li><a href="#%E5%AE%8C%E6%88%90%E4%B8%80%E4%B8%AA%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8A%9F%E8%83%BD">完成一个手机验证码功能</a></li></ul></li><li><a href="#redis%E4%B8%8Espringboot%E6%95%B4%E5%90%88">Redis与SpringBoot整合</a><ul><li><a href="#1-%E5%BC%95%E5%85%A5redis%E7%9B%B8%E5%85%B3%E4%BE%9D%E8%B5%96">1、引入redis相关依赖</a></li><li><a href="#2-applicationproperties-%E9%85%8D%E7%BD%AEredis%E9%85%8D%E7%BD%AE">2、application.properties 配置redis配置</a></li><li><a href="#3-%E6%B7%BB%E5%8A%A0redis%E9%85%8D%E7%BD%AE%E7%B1%BB">3、添加redis配置类</a></li><li><a href="#4-%E6%B5%8B%E8%AF%95">4、测试</a></li></ul></li></ul><!-- tocstop --><h2><span id="发展">发展</span></h2><p>技术的分类</p><p>1、解决功能性的问题：Java、Jsp、RDBMS、Tomcat、HTML、Linux、JDBC、SVN</p><p>2、解决扩展性的问题：Struts、Spring、SpringMVC、Hibernate、Mybatis</p><p>3、解决性能的问题：NoSQL、Java线程、Hadoop、Nginx、MQ、ElasticSearch</p><h3><span id="web10时代">Web1.0时代</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211008104849.png" alt="image-20211008104842391"></p><h3><span id="web20时代">Web2.0时代</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211008104855.png" alt="image-20211008104855821"></p><h3><span id="解决cpu及内存压力">解决CPU及内存压力</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211008104909.png" alt="image-20211008104909002"></p><h3><span id="解决io压力">解决IO压力</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211008105025.png" alt="image-20211008105025694"></p><h3><span id="nosql数据库">NoSQL数据库</span></h3><p>NoSQL(NoSQL = <strong>Not Only SQL</strong> )，意即“不仅仅是SQL”，泛指<strong>非关系型的数据库</strong>。 </p><p>NoSQL 不依赖业务逻辑方式存储，而以简单的<font color="red">key-value</font>模式存储。因此大大的增加了数据库的扩展能力。</p><ul><li><p>  不遵循SQL标准。</p></li><li><p>  不支持ACID (<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%AD%90%E6%80%A7">原子性</a>（atomicity）、<a href="https://baike.baidu.com/item/%E4%B8%80%E8%87%B4%E6%80%A7">一致性</a>（consistency）、<a href="https://baike.baidu.com/item/%E9%9A%94%E7%A6%BB%E6%80%A7">独立性</a>（isolation）、<a href="https://baike.baidu.com/item/%E6%8C%81%E4%B9%85%E6%80%A7">持久性</a>(durability) )。</p></li><li><p>  远超于SQL的性能。</p></li></ul><h3><span id="nosql适用场景">NoSQL适用场景</span></h3><ul><li><p>  对数据<font color="red">高并发</font>的读写</p></li><li><p>  <font color="red">海量数据</font> 的读写</p></li><li><p>  对数据<font color="red">高可扩展性</font>的</p></li></ul><h3><span id="nosql不适用场景">NoSQL不适用场景</span></h3><ul><li><p>  需要事务支持</p></li><li><p>  基于sql的结构化查询存储，处理复杂的关系,需要即席查询。</p></li><li><p>  （用不着sql的和用了sql也不行的情况，请考虑用NoSql）</p></li></ul><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211008132736.png" alt="image-20211008132736328"></p><h3><span id="行式存储数据库">行式存储数据库</span></h3><p>行式数据库</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211008132815.png" alt="image-20211008132815362"></p><p>列式数据库</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211008132817.png" alt="image-20211008132817953"></p><p>Hbase</p><p>HBase是<strong>Hadoop</strong>项目中的数据库。它用于需要对大量的数据进行随机、实时的读写操作的场景中。HBase的目标就是处理数据量<strong>非常庞大</strong>的表，可以用<strong>普通的计算机</strong>处理超过<strong>10****亿行数据</strong>，还可处理有数百万<strong>列</strong>元素的数据表。</p><p>Cassandra[kəˈsændrə]</p><p>Apache Cassandra是一款免费的开源NoSQL数据库，其设计目的在于管理由大量商用服务器构建起来的庞大集群上的<strong>海量数据集</strong>**(数据量通常达到PB级别)。在众多显著特性当中，Cassandra最为卓越的长处是对写入及读取操作进行规模调整，而且其不强调主集群的设计思路能够以相对直观的方式简化各集群的创建与扩展流程。</p><h3><span id="图关系型数据库">图关系型数据库</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211008133005.png" alt="image-20211008133005798"></p><h2><span id="redis概述">Redis概述</span></h2><ul><li><p>  Redis是一个开源的<font color="red">key-value</font>存储系统。</p></li><li><p>  和Memcached类似，它支持存储的value类型相对更多，包括<font color="red">string</font>(字符串)、<font color="red">list</font>(链表)、<font color="red">set</font>(集合)、<font color="red">zset</font>(sorted set –有序集合)和<font color="red">hash</font>（哈希类型）。</p></li><li><p>  这些数据类型都支持<font color="red">push/pop、add/remove</font>及取交集并集和差集及更丰富的操作，而且这些操作都是<font color="red">原子性</font>的。</p></li><li><p>  在此基础上，Redis支持各种不同方式的<font color="red">排序</font>。</p></li><li><p>  与memcached一样，为了保证效率，数据都是<font color="red">缓存在内存</font>中。</p></li><li><p>  区别的是Redis会<font color="red">周期性</font>的把更新的<font color="red">数据写入磁盘</font>或者把修改操作写入追加的记录文件。</p></li><li><p>  并且在此基础上实现了<font color="red">master-slave</font>(主从)同步。</p></li></ul><h3><span id="应用场景">应用场景</span></h3><ul><li>  配合关系型数据库做高速缓存</li><li>  多样的数据结构存储持久化数据</li></ul><h3><span id="redis安装">Redis安装</span></h3><p>中文官网：<a href="http://redis.cn/">http://redis.cn/</a></p><ol><li>确保安装了C环境（在装linux的时候，如果勾选了开发环境，则自带）<ul><li>  <strong>gcc –version</strong>测试</li></ul></li><li>  下载redis-6.2.1.tar.gz放/opt目录</li><li>  解压命令：tar -zxvf redis-6.2.1.tar.gz</li><li>  解压完成后进入目录：cd redis-6.2.1</li><li>  在redis-6.2.1目录下再次执行make命令（只是编译好）</li><li>如果没有准备好C语言编译环境，make 会报错—Jemalloc/jemalloc.h：没有那个文件<ul><li>  解决方案：运行make distclean</li></ul></li><li>  跳过make test 继续执行: make install</li><li>安装目录：usr/local/bin<ul><li>  redis-benchmark:性能测试工具，可以在自己本子运行，看看自己本子性能如何</li><li>  redis-check-aof：修复有问题的AOF文件，rdb和aof后面讲</li><li>  redis-check-dump：修复有问题的dump.rdb文件</li><li>  redis-sentinel：Redis集群使用</li><li>  redis-server：Redis服务器启动命令</li><li>  <font color="red">redis-cli：客户端，操作入口</font></li></ul></li></ol><h3><span id="前台启动不推荐">前台启动（不推荐)</span></h3><p>前台启动，命令行窗口不能关闭，否则服务器停止</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211008152720.png" alt="image-20211008152720673"></p><h3><span id="后台启动推荐">后台启动（推荐）</span></h3><ol><li><p>备份redis.conf</p><ul><li><p>  拷贝一份redis.conf到其他目录</p></li><li><p>  cp /opt/redis-6.2.5/redis.conf /myredis/redis.conf</p></li></ul></li><li><p>后台启动设置拷贝后的文件daemonize no改成yes</p><ul><li>  修改redis.conf(128行)文件将里面的daemonize no 改成 yes，让服务在后台启动</li></ul></li><li><p>Redis启动</p><ol><li><p>redis-server /myredis/redis.conf</p><p>  <img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211008153036.png" alt="image-20211008153036602"></p></li></ol></li><li><p>redis-cli</p><p>  <img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211008153225.png" alt="image-20211008153225169"></p></li><li><p>  多个端口可以：redis-cli -p 6379</p></li><li><p>测试验证：ping</p><p>  <img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211008153402.png" alt="image-20211008153402789"></p></li><li><p>Redis关闭</p><p>  单实例关闭：redis-cli shutdown</p><p>  <img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211008153443.png" alt="image-20211008153443045"></p><p>  也可以进入终端后再关闭</p><p>   <img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211008153445.png" alt="image-20211008153445756"></p><p>  多实例关闭，指定端口关闭：redis-cli -p 6379 shutdown</p></li></ol><p>也可以直接kill掉进程</p><p><font color="red">改了端口号一定要带上端口号</font></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110132209133.png" alt="image-20211013220924085"></p><h3><span id="相关知识">相关知识</span></h3><p>默认16个数据库，类似数组下标从0开始，<font color="red">初始默认使用0号库</font></p><p><font color="red"><code> select  &lt;dbid&gt;</code></font>来切换数据库。如: select 8 </p><p>统一密码管理，所有库同样密码。</p><p><font color="red">dbsize</font> 查看当前数据库的key的数量</p><p><font color="red">flushdb</font> 清空当前库</p><p><font color="red">flushall</font> 通杀全部库</p><p>Redis是单线程+多路IO复用技术</p><blockquote><p>  多路复用是指使用一个线程来检查多个文件描述符（Socket）的就绪状态，比如调用select和poll函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启动线程执行（比如使用线程池）</p><p>  串行  vs  多线程+锁（memcached） vs  单线程+多路IO复用(Redis)</p><p>  （与Memcache三点不同: 支持多数据类型，支持持久化，单线程+多路IO复用）      </p></blockquote><h2><span id="常用五大数据类型">常用五大数据类型</span></h2><h4><span id="键key">键（key）</span></h4><p>keys *                            查看当前库所有key  (匹配：keys *1)</p><p>exists key                    判断某个key是否存在</p><p>type key                        查看你的key是什么类型</p><p>del key                            删除指定的key数据</p><p><font color="red">unlink key                      根据value选择非阻塞删除</font></p><blockquote><p>  仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。</p></blockquote><p>expire key 10              10秒钟：为给定的key设置过期时间</p><p>ttl key                             查看还有多少秒过期，<font color="red">-1表示永不过期，-2表示已过期</font></p><p>select                            命令切换数据库</p><p>dbsize                        查看当前数据库的key的数量</p><p>flushdb                        清空当前库</p><p>flushall                            通杀全部库</p><h4><span id="字符串string">字符串（String）</span></h4><h5><span id="简介">简介</span></h5><p>String是Redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。</p><p>String类型<font color="red">是二进制安全的</font>。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象。</p><p>String类型是Redis最基本的数据类型，一个Redis中字符串value最多可以是<font color="red">512M</font>。</p><h5><span id="常用命令">常用命令</span></h5><p><code>set &lt;key&gt;&lt;value&gt;</code>                                    添加键值对</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211008160608.png" alt="image-20211008160608094"></p><ul><li><p>  NX：当数据库中key不存在时，可以将key-value添加数据库</p></li><li><p>  XX：当数据库中key存在时，可以将key-value添加数据库，与NX参数互斥</p></li><li><p>  EX：key的超时秒数</p></li><li><p>PX：key的超时毫秒数，与EX互斥</p><p>  <code>get  &lt;key&gt;</code>                                        查询对应键值</p><p>  <code>append &lt;key&gt;&lt;value&gt;    </code>                        将给定的<code>&lt;value&gt;</code> 追加到原值的末尾</p></li></ul><p><code>strlen &lt;key&gt;</code>                                            获得值的长度</p><p><code>setnx &lt;key&gt;&lt;value&gt;</code>                                只有在 key 不存在时  设置 key 的值</p><p><code>incr &lt;key&gt;</code>                                                将 key 中储存的<font color="red">数字值</font>增1。只能对数字值操作，如果为空，新增值为1</p><p><code>decr &lt;key&gt;</code>                                                将 key 中储存的数字值减1。只能对数字值操作，如果为空，新增值为-1</p><p><code>incrby / decrby &lt;key&gt;&lt;步长&gt;</code>                将 key 中储存的数字值增减。自定义步长。</p><p><code>mset &lt;key1&gt;&lt;value1&gt;&lt;key2&gt;&lt;value2&gt;... </code>                同时设置一个或多个 key-value对 </p><p><code>mget &lt;key1&gt;&lt;key2&gt;&lt;key3&gt;...</code>                                    同时获取一个或多个 value </p><p><code>msetnx &lt;key1&gt;&lt;value1&gt;&lt;key2&gt;&lt;value2&gt;... </code>            同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</p><p><code>getrange &lt;key&gt;&lt;起始位置&gt;&lt;结束位置&gt;</code>                        获得值的范围，类似java中的substring，<strong>前包，后包</strong></p><p><code>setrange &lt;key&gt;&lt;起始位置&gt;&lt;value&gt;</code>                            用<code>&lt;value&gt;</code>覆写<code>&lt;key&gt;</code>所储存的字符串值，从&lt;起始位置&gt;开始(<strong>索引从0****开始</strong>)。</p><p>**<code>setex &lt;key&gt;&lt;****过期时间****&gt;&lt;value&gt;**</code>            设置键值的同时，设置过期时间，单位秒。</p><p><code>getset &lt;key&gt;&lt;value&gt;</code>                                                    以新换旧，设置了新值同时获得旧值。</p><h5><span id="数据结构">数据结构</span></h5><p>String的数据结构为简单动态字符串(Simple Dynamic String,缩写SDS)。是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配.</p><p>​                               </p><p>如图中所示，内部为当前字符串实际分配的空间capacity一般要高于实际字符串长度len。当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容时一次只会多扩1M的空间。需要注意的是字符串最大长度为512M。</p><h4><span id="列表list">列表（List）</span></h4><h5><span id="简介">简介</span></h5><p>单键多值</p><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p><p>它的底层实际是个<font color="red">双向链表</font>，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211012215256.png" alt="image-20211012215249452"></p><h5><span id="常用命令">常用命令</span></h5><p><code>lpush/rpush &lt;key&gt;&lt;value1&gt;&lt;value2&gt;&lt;value3&gt;...</code>                        从左边/右边插入一个或多个值。</p><p><code>lpop/rpop &lt;key&gt;</code>                                                                                    从左边/右边吐出一个值。值在键在，值光键亡。</p><p><code>rpoplpush &lt;key1&gt;&lt;key2&gt;</code>                                                                        从<code>&lt;key1&gt;</code>列表右边吐出一个值，插到<code>&lt;key2&gt;</code>列表左边。</p><p><code>lrange &lt;key&gt;&lt;start&gt;&lt;stop&gt;</code>                                                                按照索引下标获得元素(从左到右)</p><p><code>lrange mylist 0 -1</code>                                                                                 0左边第一个，-1右边第一个，（0-1表示获取所有）</p><p><code>lindex &lt;key&gt;&lt;index&gt;    </code>                                                                            按照索引下标获得元素(从左到右)</p><p><code>llen &lt;key&gt;</code>                                                                                                获得列表长度 </p><p><code>linsert &lt;key&gt; before &lt;value&gt;&lt;newvalue&gt;</code>                                        在<code>&lt;value&gt;</code>的后面插入<code>&lt;newvalue&gt;</code>插入值</p><p><code>lrem &lt;key&gt;&lt;n&gt;&lt;value&gt;</code>                                                                            从左边删除n个value(从左到右)</p><p><code>lset&lt;key&gt;&lt;index&gt;&lt;value&gt;</code>                                                                    将列表key下标为index的值替换成value</p><h5><span id="数据结构">数据结构</span></h5><p>List的数据结构为快速链表quickList。</p><p>首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也即是压缩列表。</p><p>它将所有的元素紧挨着一起存储，分配的是一块连续的内存。</p><p>当数据量比较多的时候才会改成quicklist。</p><p>因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是int类型的数据，结构上还需要两个额外的指针prev和next。</p><p>Redis将链表和ziplist结合起来组成了quicklist。也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p><h4><span id="集合set">集合（Set）</span></h4><h5><span id="简介">简介</span></h5><p>Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以**<font color="red">自动排重</font>**的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。</p><p>Redis的Set是string类型的无序集合。它底层其实是一个value为null的hash表，所以添加，删除，查找的**<font color="red">复杂度都是O(1)</font>**。</p><p>一个算法，随着数据的增加，执行时间的长短，如果是O(1)，数据增加，查找数据的时间不变</p><h5><span id="常用命令">常用命令</span></h5><p><code>sadd &lt;key&gt;&lt;value1&gt;&lt;value2&gt; ..... </code>                        将一个或多个 member 元素加入到集合 key 中，已经存在的 member 元素将被忽略</p><p><code>smembers &lt;key&gt;</code>                                                            取出该集合的所有值。</p><p><code>sismember &lt;key&gt;&lt;value&gt;</code>                                            判断集合<code>&lt;key&gt;</code>是否为含有该<code>&lt;value&gt;</code>值，有1，没有0</p><p><code>scard&lt;key&gt;</code>                                                                    返回该集合的元素个数。</p><p><code>srem &lt;key&gt;&lt;value1&gt;&lt;value2&gt; ....</code>                             删除集合中的某个元素。</p><p><code>spop &lt;key&gt;</code>                                                                        随机从该集合中吐出一个值。</p><p><code>srandmember &lt;key&gt;&lt;n&gt;</code>                                                    随机从该集合中取出n个值。不会从集合中删除 。</p><p><code>smove &lt;source&gt;&lt;destination&gt;value</code>                            把集合中一个值从一个集合移动到另一个集合</p><p><code>sinter &lt;key1&gt;&lt;key2&gt;</code>                                                        返回两个集合的交集元素。</p><p><code>sunion &lt;key1&gt;&lt;key2&gt;</code>                                                        返回两个集合的并集元素。</p><p><code>sdiff &lt;key1&gt;&lt;key2&gt;</code>                                                        返回两个集合的<strong>差集</strong>元素(key1中的，不包含key2中的)</p><h5><span id="数据结构">数据结构</span></h5><p>Set数据结构是dict字典，字典是用哈希表实现的。</p><p>Java中HashSet的内部实现使用的是HashMap，只不过所有的value都指向同一个对象。Redis的set结构也是一样，它的内部也使用hash结构，所有的value都指向同一个内部值。</p><h4><span id="有序集合sorted-set">有序集合（sorted set）</span></h4><h5><span id="简介">简介</span></h5><p>Redis有序集合zset与普通集合set非常相似，是一个<font color="red">没有重复元素</font>的字符串集合。</p><p>不同之处是有序集合的每个成员都关联了一个**<font color="red">评分（score）</font>**,这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。<font color="red">集合的成员是唯一的，但是评分可以是重复了 </font>。</p><p>因为元素是有序的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。</p><p>访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。</p><h5><span id="常用命令">常用命令</span></h5><p><code>zadd &lt;key&gt;&lt;score1&gt;&lt;value1&gt;&lt;score2&gt;&lt;value2&gt;…</code></p><p>将一个或多个 member 元素及其 score 值加入到有序集 key 当中。</p><p><code>zrange &lt;key&gt;&lt;start&gt;&lt;stop&gt; [WITHSCORES]** </code></p><p>返回有序集 key 中，下标在<code>&lt;start&gt;&lt;stop&gt;</code>之间的元素</p><p>带WITHSCORES，可以让分数一起和值返回到结果集。</p><p><code>zrangebyscore key minmax [withscores] [limit offset count]</code></p><p>返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。 </p><p><code>zrevrangebyscore key maxmin [withscores] [limit offset count]        </code></p><p>同上，改为从大到小排列。 </p><p><code>zincrby &lt;key&gt;&lt;increment&gt;&lt;value&gt;</code>               为元素的score加上增量</p><p><code>zrem &lt;key&gt;&lt;value&gt;</code>                                            删除该集合下，指定值的元素</p><p><code>zcount &lt;key&gt;&lt;min&gt;&lt;max&gt;</code>                                    统计该集合，分数区间内的元素个数 </p><p><code>zrank &lt;key&gt;&lt;value&gt;</code>                                            返回该值在集合中的排名，从0开始。</p><p>案例：如何利用zset实现一个文章访问量的排行榜？</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211013161435.png" alt="image-20211013161428255"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211013162312.png" alt="image-20211013162312595"></p><h5><span id="数据结构">数据结构</span></h5><p>SortedSet(zset)是Redis提供的一个非常特别的数据结构，一方面它等价于Java的数据结构Map&lt;String, Double&gt;，可以给每一个元素value赋予一个权重score，另一方面它又类似于TreeSet，内部的元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素的列表。</p><p>zset底层使用了两个数据结构</p><p>（1）hash，hash的作用就是关联元素value和权重score，保障元素value的唯一性，可以通过元素value找到相应的score值。</p><p>（2）跳跃表，跳跃表的目的在于给元素value排序，根据score的范围获取元素列表。</p><h5><span id="跳跃表跳表">跳跃表（跳表）</span></h5><p>1、简介</p><p>  有序集合在生活中比较常见，例如根据成绩对学生排名，根据得分对玩家排名等。对于有序集合的底层实现，可以用数组、平衡树、链表等。数组不便元素的插入、删除；平衡树或红黑树虽然效率高但结构复杂；链表查询需要遍历所有效率低。Redis采用的是跳跃表。跳跃表效率堪比红黑树，实现远比红黑树简单。</p><p>2、实例</p><p>  对比有序链表和跳跃表，从链表中查询出51</p><p>（1）  有序链表</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211013162339.png" alt="image-20211013162339456"></p><p>要查找值为51的元素，需要从第一个元素开始依次查找、比较才能找到。共需要6次比较。</p><p>（1）  跳跃表</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211013162505.png" alt="image-20211013162505023"></p><p>从第2层开始，1节点比51节点小，向后比较。</p><p>21节点比51节点小，继续向后比较，后面就是NULL了，所以从21节点向下到第1层</p><p>在第1层，41节点比51节点小，继续向后，61节点比51节点大，所以从41向下</p><p>在第0层，51节点为要查找的节点，节点被找到，共查找4次。</p><p>从此可以看出跳跃表比有序链表效率要高</p><h2><span id="redis配置文件">Redis配置文件</span></h2><p>自定义目录：/myredis/redis.conf</p><h3><span id="units-单位">###Units 单位###</span></h3><p>配置大小单位,开头定义了一些基本的度量单位，只支持bytes，不支持bit</p><p>大小写不敏感</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211013162707.png" alt="image-20211013162707881"></p><h3><span id="includes包含">###INCLUDES包含###</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211013162752.png" alt="image-20211013162752625"></p><p>类似jsp中的include，多实例的情况可以把公用的配置文件提取出来</p><h3><span id="网络相关配置">###网络相关配置###</span></h3><h4><span id="bind重要">bind（<font color="red">重要</font>）</span></h4><p>默认情况bind=127.0.0.1只能接受本机的访问请求</p><p>不写的情况下，无限制接受任何ip地址的访问</p><p>生产环境肯定要写你应用服务器的地址；服务器是需要远程访问的，所以需要将其注释掉</p><p><font color="red">如果开启了protected-mode，那么在没有设定bind ip且没有设密码的情况下，Redis只允许接受本机的响应</font>，==所以要注释掉==</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211013162952.png" alt="image-20211013162952076"></p><p>保存配置，停止服务，重启启动查看进程，不再是本机访问了。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211013163001.png" alt="image-20211013163001398"></p><h4><span id="protected-mode重要">protected-mode（<font color="red">重要</font>）</span></h4><p>将本机访问保护模式设置no</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211013163029.png" alt="image-20211013163029472"></p><h4><span id="prot">prot</span></h4><p>端口号，默认 6379</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211013163116.png" alt="image-20211013163116480"></p><h4><span id="tcp-backlog">tcp-backlog</span></h4><p>设置tcp的backlog，backlog其实是一个连接队列，backlog队列总和=未完成三次握手队列 + 已经完成三次握手队列。</p><p>在高并发环境下你需要一个高backlog值来避免慢客户端连接问题。</p><p>注意Linux内核会将这个值减小到/proc/sys/net/core/somaxconn的值（128），所以需要确认增大/proc/sys/net/core/somaxconn和/proc/sys/net/ipv4/tcp_max_syn_backlog（128）两个值来达到想要的效果</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211013163142.png" alt="image-20211013163142400"></p><h4><span id="timeout">timeout</span></h4><p>一个空闲的客户端维持多少秒会关闭，0表示关闭该功能。即<font color="red">永不关闭</font>。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211013163257.png" alt="image-20211013163257931"></p><h4><span id="tcp-keepalive">tcp-keepalive</span></h4><p>对访问客户端的一种<font color="red">心跳检测</font>，每个n秒检测一次。</p><p>单位为秒，如果设置为0，则不会进行Keepalive检测，建议设置成60。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211013163327.png" alt="image-20211013163327484"></p><h3><span id="general通用">###GENERAL通用###</span></h3><h4><span id="daemonize">daemonize</span></h4><p>是否为后台进程，设置为yes</p><p>守护进程，后台启动</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211013163409.png" alt="image-20211013163409924"></p><h4><span id="pidfile">pidfile</span></h4><p>存放pid文件的位置，每个实例会产生一个不同的pid文件</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20211013163649.png" alt="image-20211013163649007"></p><h4><span id="loglevel">loglevel</span></h4><p>指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为<strong>notice</strong></p><p>四个级别根据使用阶段来选择，生产环境选择notice 或者warning</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110131637567.png" alt="image-20211013163741525"></p><h4><span id="logfile">logfile</span></h4><p>日志文件名称</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110131638203.png" alt="image-20211013163802169"></p><h4><span id="database16">database16</span></h4><p><font color="green">设定库的数量 默认16</font>，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id</dbid></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110131638019.png" alt="image-20211013163822988"></p><h3><span id="security安全">###SECURITY安全###</span></h3><h4><span id="设置密码">设置密码</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110131638938.png" alt="image-20211013163857892"></p><p>访问密码的查看、设置和取消</p><p>在命令中设置密码，只是临时的。重启redis服务器，密码就还原了。</p><p>永久设置，需要再配置文件中进行设置。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110131639489.png" alt="image-20211013163918454"></p><h3><span id="limits">###LIMITS###</span></h3><h4><span id="maxclients">maxclients</span></h4><ul><li><p>  设置redis同时可以与多少个客户端进行连接。</p></li><li><p>  默认情况下为10000个客户端。</p></li><li><p>  如果达到了此限制，redis则会拒绝新的连接请求，并且向这些连接请求方发出“max number of clients reached”以作回应。</p></li></ul><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110131639386.png" alt="image-20211013163957343"></p><h4><span id="maxmemory">maxmemory</span></h4><ul><li><p>  建议<strong>必须设置</strong>，否则，将内存占满，造成服务器宕机</p></li><li><p>  设置redis可以使用的内存量。一旦到达内存使用上限，redis将会试图移除内部数据，移除规则可以通过maxmemory-policy来指定。</p></li><li><p>  如果redis无法根据移除规则来移除内存中的数据，或者设置了“不允许移除”，那么redis则会针对那些需要申请内存的指令返回错误信息，比如SET、LPUSH等。</p></li><li><p>  但是对于无内存申请的指令，仍然会正常响应，比如GET等。如果你的redis是主redis（说明你的redis有从redis），那么在设置内存使用上限时，需要在系统中留出一些内存空间给同步队列缓存，只有在你设置的是“不移除”的情况下，才不用考虑这个因素。</p></li></ul><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110131641836.png" alt="image-20211013164116771"></p><h4><span id="maxmemory-policy">maxmemory-policy</span></h4><ul><li><p>  volatile-lru：使用LRU算法移除key，只对设置了过期时间的键；（最近最少使用）</p></li><li><p>  allkeys-lru：在所有集合key中，使用LRU算法移除key</p></li><li><p>  volatile-random：在过期集合中移除随机的key，只对设置了过期时间的键</p></li><li><p>  allkeys-random：在所有集合key中，移除随机的key</p></li><li><p>  volatile-ttl：移除那些TTL值最小的key，即那些最近要过期的key</p></li><li><p>  noeviction：不进行移除。针对写操作，只是返回错误信息</p></li></ul><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110131641199.png" alt="image-20211013164156136"></p><h4><span id="maxmemory-samples">maxmemory-samples</span></h4><ul><li><p>  设置样本数量，LRU算法和最小TTL算法都并非是精确的算法，而是估算值，所以你可以设置样本的大小，redis默认会检查这么多个key并选择其中LRU的那个。</p></li><li><p>  一般设置3到7的数字，数值越小样本越不准确，但性能消耗越小。</p></li></ul><h2><span id="redis发布和订阅">Redis发布和订阅</span></h2><h3><span id="什么是发布和订阅">什么是发布和订阅</span></h3><p>Redis 发布订阅 (pub/sub) 是一种消息通信模式：<strong>发送者 (pub) 发送消息，订阅者 (sub) 接收消息</strong>。</p><p>Redis 客户端可以订阅任意数量的频道。</p><h3><span id="redis的发布和订阅">Redis的发布和订阅</span></h3><p>客户端可以订阅频道如下图</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110131650010.png" alt="image-20211013165011974"></p><p>当给这个频道发布消息后，消息就会发送给订阅的客户端</p><h3><span id="发布订阅命令行实现">发布订阅命令行实现</span></h3><p>1、 打开一个客户端订阅channel1</p><p>SUBSCRIBE channel1</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110131652647.png" alt="image-20211013165254607"></p><p>2、打开另一个客户端，给channel1发布消息hello</p><p>publish channel1 hello</p><p> <img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110131652852.png" alt="image-20211013165257825"></p><p>返回的1是订阅者数量</p><p>3、打开第一个客户端可以看到发送的消息</p><p> <img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110131653814.png" alt="image-20211013165300783"></p><p>注：发布的消息没有持久化，如果在订阅的客户端收不到hello，只能收到订阅后发布的消息</p><h2><span id="redis新数据类型">Redis新数据类型</span></h2><h3><span id="bitmaps">Bitmaps</span></h3><h4><span id="简介">简介</span></h4><p>现代计算机用二进制（位） 作为信息的基础单位， 1个字节等于8位， 例如“abc”字符串是由3个字节组成， 但实际在计算机存储时将其用二进制表示， “abc”分别对应的ASCII码分别是97、 98、 99， 对应的二进制分别是01100001、 01100010和01100011，如下图</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110131658852.png" alt="image-20211013165849816"></p><p>合理地使用操作位能够有效地提高内存使用率和开发效率。</p><p>   Redis提供了Bitmaps这个“数据类型”可以实现对位的操作：</p><p>（1）  Bitmaps本身不是一种数据类型， 实际上它就是字符串（key-value） ， 但是它可以对字符串的位进行操作。</p><p>（2）  Bitmaps单独提供了一套命令， 所以在Redis中使用Bitmaps和使用字符串的方法不太相同。 可以把Bitmaps想象成一个以位为单位的数组， 数组的每个单元只能存储0和1， 数组的下标在Bitmaps中叫做偏移量。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110131659844.png" alt="image-20211013165910810"></p><h4><span id="命令">命令</span></h4><p>1、setbit</p><p>（1）格式</p><p><code>setbit&lt;key&gt;&lt;offset&gt;&lt;value&gt;</code>设置Bitmaps中某个偏移量的值（0或1）</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110132003840.png" alt="image-20211013200300789"></p><p>*offset:偏移量从0开始</p><p>（2）实例</p><p>每个独立用户是否访问过网站存放在Bitmaps中， 将访问的用户记做1， 没有访问的用户记做0， 用偏移量作为用户的id。</p><p>设置键的第offset个位的值（从0算起） ， 假设现在有20个用户，userid=1， 6， 11， 15， 19的用户对网站进行了访问， 那么当前Bitmaps初始化结果如图</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110132003262.png" alt="image-20211013200322225"></p><p>unique:users:20201106代表2020-11-06这天的独立访问用户的Bitmaps</p><p><font color="red">注</font>：很多应用的用户id以一个指定数字（例如10000） 开头， 直接将用户id和Bitmaps的偏移量对应势必会造成一定的浪费， 通常的做法是每次做setbit操作时将用户id减去这个指定数字。</p><p>在第一次初始化Bitmaps时， 假如偏移量非常大， 那么整个初始化过程执行会比较慢， 可能会造成Redis的阻塞。</p><p>2、getbit</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110132005406.png" alt="image-20211013200519375"></p><p>获取键的第offset位的值（从0开始算）</p><p>获取id=8的用户是否在2020-11-06这天访问过， 返回0说明没有访问过：</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110132005590.png" alt="image-20211013200538560"></p><p>注：因为100根本不存在，所以也是返回0</p><p>3、bitcount</p><p>统计<strong>字符串</strong>被设置为1的bit数。一般情况下，给定的整个字符串都会被进行计数，通过指定额外的 start 或 end 参数，可以让计数只在特定的位上进行。start 和 end 参数的设置，都可以使用负数值：比如 -1 表示最后一个位，而 -2 表示倒数第二个位，start、end 是指bit组的字节的下标数，二者皆包含。</p><p>（1）格式</p><p><code>bitcount&lt;key&gt;[start end]</code> 统计字符串从start字节到end字节比特值为1的数量</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110132006436.png" alt="image-20211013200609405"></p><p>（2）实例</p><p>计算2022-11-06这天的独立访问用户数量</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110132006430.png" alt="image-20211013200626399"></p><p>start和end代表起始和结束字节数， 下面操作计算用户id在第1个字节到第3个字节之间的独立访问用户数， 对应的用户id是11， 15， 19。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110132006669.png" alt="image-20211013200634639"></p><p><font color="red">举例： K1 【01000001 01000000 00000000 00100001】，对应【0，1，2，3】</font></p><p>bitcount K1 1 2 ： 统计下标1、2字节组中bit=1的个数，即01000000 00000000</p><p>–》bitcount K1 1 2 　　–》1</p><p>bitcount K1 1 3 ： 统计下标1、2字节组中bit=1的个数，即01000000 00000000 00100001</p><p>–》bitcount K1 1 3　　–》3</p><p>bitcount K1 0 -2 ： 统计下标0到下标倒数第2，字节组中bit=1的个数，即01000001 01000000  00000000</p><p>–》bitcount K1 0 -2　　–》3</p><p> 注意：redis的setbit设置或清除的是bit位置，而bitcount计算的是byte位置。</p><p>4、bitop</p><p>(1)格式</p><p><code>bitop and(or/not/xor) &lt;destkey&gt; [key…]</code></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110132009317.png" alt="image-20211013200904276"></p><p>bitop是一个复合操作， 它可以做多个Bitmaps的and（交集） 、 or（并集） 、 not（非） 、 xor（异或） 操作并将结果保存在destkey中。</p><p>(2)实例</p><p>2020-11-04 日访问网站的userid=1,2,5,9。</p><p>setbit unique:users:20201104 1 1</p><p>setbit unique:users:20201104 2 1</p><p>setbit unique:users:20201104 5 1</p><p>setbit unique:users:20201104 9 1</p><p>2020-11-03 日访问网站的userid=0,1,4,9。</p><p>setbit unique:users:20201103 0 1</p><p>setbit unique:users:20201103 1 1</p><p>setbit unique:users:20201103 4 1</p><p>setbit unique:users:20201103 9 1</p><p>计算出两天都访问过网站的用户数量</p><p>bitop and unique:users:and:20201104_03</p><p> unique:users:20201103unique:users:20201104</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110132052021.png" alt="image-20211013205253987">         </p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110132053245.png" alt="image-20211013205302205">                 </p><p>计算出任意一天都访问过网站的用户数量（例如月活跃就是类似这种） ， 可以使用or求并集</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110132053913.png" alt="image-20211013205328881"></p><h4><span id="bitmaps与set对比">Bitmaps与set对比</span></h4><p>假设网站有1亿用户， 每天独立访问的用户有5千万， 如果每天用集合类型和Bitmaps分别存储活跃用户可以得到表</p><table><thead><tr><th>set和Bitmaps存储一天活跃用户对比</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>数据  类型</td><td>每个用户id占用空间</td><td>需要存储的用户量</td><td>全部内存量</td></tr><tr><td>集合  类型</td><td>64位</td><td>50000000</td><td>64位*50000000 = 400MB</td></tr><tr><td>Bitmaps</td><td>1位</td><td>100000000</td><td>1位*100000000 = 12.5MB</td></tr></tbody></table><p> 很明显， 这种情况下使用Bitmaps能节省很多的内存空间， 尤其是随着时间推移节省的内存还是非常可观的</p><table><thead><tr><th>set和Bitmaps存储独立用户空间对比</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>数据类型</td><td>一天</td><td>一个月</td><td>一年</td></tr><tr><td>集合类型</td><td>400MB</td><td>12GB</td><td>144GB</td></tr><tr><td>Bitmaps</td><td>12.5MB</td><td>375MB</td><td>4.5GB</td></tr></tbody></table><p>但Bitmaps并不是万金油， 假如该网站每天的独立访问用户很少， 例如只有10万（大量的僵尸用户） ， 那么两者的对比如下表所示， 很显然， 这时候使用Bitmaps就不太合适了， 因为基本上大部分位都是0。</p><table><thead><tr><th>set和Bitmaps存储一天活跃用户对比（独立用户比较少）</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>数据类型</td><td>每个userid占用空间</td><td>需要存储的用户量</td><td>全部内存量</td></tr><tr><td>集合类型</td><td>64位</td><td>100000</td><td>64位*100000 = 800KB</td></tr><tr><td>Bitmaps</td><td>1位</td><td>100000000</td><td>1位*100000000 = 12.5MB</td></tr></tbody></table><h3><span id="hyperloglog">HyperLoglog</span></h3><h4><span id="简介">简介</span></h4><p>在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站PV（PageView页面访问量）,可以使用Redis的incr、incrby轻松实现。</p><p>但像UV（UniqueVisitor，独立访客）、独立IP数、搜索记录数等需要去重和计数的问题如何解决？这种求集合中不重复元素个数的问题称为基数问题。</p><p>解决基数问题有很多种方案：</p><p>（1）数据存储在MySQL表中，使用distinct count计算不重复个数</p><p>（2）使用Redis提供的hash、set、bitmaps等数据结构来处理</p><p>以上的方案结果精确，但随着数据不断增加，导致占用空间越来越大，对于非常大的数据集是不切实际的。</p><p>能否能够降低一定的精度来平衡存储空间？Redis推出了HyperLogLog</p><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p><p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p><p>什么是基数?</p><p>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。</p><h4><span id="命令">命令</span></h4><p>1、pfadd</p><p>（1）格式</p><p><code>pfadd &lt;key&gt;&lt; element&gt; [element ...]</code>  添加指定元素到 HyperLogLog 中</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110132055205.png" alt="image-20211013205531169"></p><p>（2）实例</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110132055066.png"></p><p>​    将所有元素添加到指定HyperLogLog数据结构中。如果执行命令后HLL估计的近似基数发生变化，则返回1，否则返回0。</p><p>2、pfcount</p><p>（1）格式</p><p><code>pfcount&lt;key&gt; [key ...]</code><font color="red">计算HLL的近似基数，可以计算多个HLL</font>，比如用HLL存储每天的UV，计算一周的UV可以使用7天的UV合并计算即可</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110132057980.png" alt="image-20211013205747946"></p><p>（2）实例</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110132057562.png" alt="image-20211013205758527"></p><p>3、pfmerge</p><p><code>pfmerge&lt;destkey&gt;&lt;sourcekey&gt; [sourcekey ...]</code> 将一个或多个HLL合并后的结果存储在另一个HLL中，比如每月活跃用户可以使用每天的活跃用户来合并计算可得</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110132059478.png" alt="image-20211013205908441"></p><p>（2）实例</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110132059935.png" alt="image-20211013205923901"></p><h3><span id="geospatial">Geospatial</span></h3><h4><span id="简介">简介</span></h4><p>Redis 3.2 中增加了对GEO类型的支持。GEO，Geographic，地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度。redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作。</p><h4><span id="命令">命令</span></h4><p>1、geoadd</p><p>（1）格式</p><p><code>geoadd&lt;key&gt;&lt; longitude&gt;&lt;latitude&gt;&lt;member&gt; [longitude latitude member...]</code>  添加地理位置（经度，纬度，名称）</p><p>（2）实例</p><p>geoadd china:city 121.47 31.23 shanghai</p><p>geoadd china:city 106.50 29.53 chongqing 114.05 22.52 shenzhen 116.38 39.90 beijing</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110132100067.png" alt="image-20211013210027022"></p><p>两极无法直接添加，一般会下载城市数据，直接通过 Java 程序一次性导入。</p><p>有效的经度从 -180 度到 180 度。有效的纬度从 -85.05112878 度到 85.05112878 度。</p><p>当坐标位置超出指定范围时，该命令将会返回一个错误。</p><p>已经添加的数据，是无法再次往里面添加的。</p><p>2、geopos </p><p>（1）格式</p><p><code>geopos &lt;key&gt;&lt;member&gt; [member...]</code> 获得指定地区的坐标值</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110132101302.png" alt="image-20211013210100268"></p><p>（2）实例</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110132101662.png" alt="image-20211013210106628"></p><p>3、geodist</p><p><code>geodist&lt;key&gt;&lt;member1&gt;&lt;member2&gt; [m|km|ft|mi ]</code> 获取两个位置之间的直线距离</p><p><img src="C:\Users\wangpeng\AppData\Roaming\Typora\typora-user-images\image-20211013210125133.png" alt="image-20211013210125133"></p><p>（2）实例</p><p>获取两个位置之间的直线距离</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110132102640.png" alt="image-20211013210207604"></p><p>单位：</p><p>m 表示单位为米[默认值]。</p><p>km 表示单位为千米。</p><p>mi 表示单位为英里。</p><p>ft 表示单位为英尺。</p><p>如果用户没有显式地指定单位参数， 那么 GEODIST 默认使用米作为单位</p><p>4、georadius</p><p>（1）格式</p><p><code>georadius&lt;key&gt;&lt; longitude&gt;&lt;latitude&gt;radius m|km|ft|mi</code>  以给定的经纬度为中心，找出某一半径内的元素</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110132102860.png" alt="image-20211013210231828"></p><p>经度 纬度 距离 单位</p><p>（2）实例</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110132102673.png" alt="image-20211013210242640"></p><h2><span id="redis_jedis_测试">Redis_Jedis_测试</span></h2><h3><span id="jedis所需要的jar包">Jedis所需要的jar包</span></h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;redis.clients&lt;/groupId&gt;<br>    &lt;artifactId&gt;jedis&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">3.2</span><span class="hljs-number">.0</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></div></td></tr></table></figure><h3><span id="连接redis的注意事项">连接Redis的注意事项</span></h3><ol><li>  为了安全，最好给redis换个端口port，并设置密码 requirepass</li><li>  redis.conf中需要注释掉 bind 127.0.0.1</li><li>  redis.conf中需要设置保护模式为no，protected-mode no</li><li>  需要linux防火墙关闭或者放行端口（建议放行端口）</li><li>  如果用云服务器，注意在安全组放行对应端口。</li></ol><h3><span id="测试程序">测试程序</span></h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.test;<br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">&quot;192.168.137.3&quot;</span>,<span class="hljs-number">6379</span>);<br>        String pong = jedis.ping();<br>        System.out.println(<span class="hljs-string">&quot;连接成功：&quot;</span>+pong);<br>        jedis.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3><span id="测试相关数据类型">测试相关数据类型</span></h3><h4><span id="key">Key</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">jedis.set(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>);<br>jedis.set(<span class="hljs-string">&quot;k2&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>);<br>jedis.set(<span class="hljs-string">&quot;k3&quot;</span>, <span class="hljs-string">&quot;v3&quot;</span>);<br>Set&lt;String&gt; keys = jedis.keys(<span class="hljs-string">&quot;*&quot;</span>);<br>System.out.println(keys.size());<br><span class="hljs-keyword">for</span> (String key : keys) &#123;<br>System.out.println(key);<br>&#125;<br>System.out.println(jedis.exists(<span class="hljs-string">&quot;k1&quot;</span>));<br>System.out.println(jedis.ttl(<span class="hljs-string">&quot;k1&quot;</span>));                <br>System.out.println(jedis.get(<span class="hljs-string">&quot;k1&quot;</span>));<br><br></code></pre></div></td></tr></table></figure><h4><span id="string">String</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">jedis.mset(<span class="hljs-string">&quot;str1&quot;</span>,<span class="hljs-string">&quot;v1&quot;</span>,<span class="hljs-string">&quot;str2&quot;</span>,<span class="hljs-string">&quot;v2&quot;</span>,<span class="hljs-string">&quot;str3&quot;</span>,<span class="hljs-string">&quot;v3&quot;</span>);<br>System.out.println(jedis.mget(<span class="hljs-string">&quot;str1&quot;</span>,<span class="hljs-string">&quot;str2&quot;</span>,<span class="hljs-string">&quot;str3&quot;</span>));<br></code></pre></div></td></tr></table></figure><h4><span id="list">List</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">List&lt;String&gt; list = jedis.lrange(<span class="hljs-string">&quot;mylist&quot;</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (String element : list) &#123;<br>System.out.println(element);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="set">set</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">jedis.sadd(<span class="hljs-string">&quot;orders&quot;</span>, <span class="hljs-string">&quot;order01&quot;</span>);<br>jedis.sadd(<span class="hljs-string">&quot;orders&quot;</span>, <span class="hljs-string">&quot;order02&quot;</span>);<br>jedis.sadd(<span class="hljs-string">&quot;orders&quot;</span>, <span class="hljs-string">&quot;order03&quot;</span>);<br>jedis.sadd(<span class="hljs-string">&quot;orders&quot;</span>, <span class="hljs-string">&quot;order04&quot;</span>);<br>Set&lt;String&gt; smembers = jedis.smembers(<span class="hljs-string">&quot;orders&quot;</span>);<br><span class="hljs-keyword">for</span> (String order : smembers) &#123;<br>System.out.println(order);<br>&#125;<br>jedis.srem(<span class="hljs-string">&quot;orders&quot;</span>, <span class="hljs-string">&quot;order02&quot;</span>);<br></code></pre></div></td></tr></table></figure><h4><span id="hash">hash</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">jedis.hset(<span class="hljs-string">&quot;hash1&quot;</span>,<span class="hljs-string">&quot;userName&quot;</span>,<span class="hljs-string">&quot;lisi&quot;</span>);<br>System.out.println(jedis.hget(<span class="hljs-string">&quot;hash1&quot;</span>,<span class="hljs-string">&quot;userName&quot;</span>));<br>Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String,String&gt;();<br>map.put(<span class="hljs-string">&quot;telphone&quot;</span>,<span class="hljs-string">&quot;13810169999&quot;</span>);<br>map.put(<span class="hljs-string">&quot;address&quot;</span>,<span class="hljs-string">&quot;atguigu&quot;</span>);<br>map.put(<span class="hljs-string">&quot;email&quot;</span>,<span class="hljs-string">&quot;abc@163.com&quot;</span>);<br>jedis.hmset(<span class="hljs-string">&quot;hash2&quot;</span>,map);<br>List&lt;String&gt; result = jedis.hmget(<span class="hljs-string">&quot;hash2&quot;</span>, <span class="hljs-string">&quot;telphone&quot;</span>,<span class="hljs-string">&quot;email&quot;</span>);<br><span class="hljs-keyword">for</span> (String element : result) &#123;<br>System.out.println(element);<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4><span id="zset">zset</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">jedis.zadd(<span class="hljs-string">&quot;zset01&quot;</span>, <span class="hljs-number">100d</span>, <span class="hljs-string">&quot;z3&quot;</span>);<br>jedis.zadd(<span class="hljs-string">&quot;zset01&quot;</span>, <span class="hljs-number">90d</span>, <span class="hljs-string">&quot;l4&quot;</span>);<br>jedis.zadd(<span class="hljs-string">&quot;zset01&quot;</span>, <span class="hljs-number">80d</span>, <span class="hljs-string">&quot;w5&quot;</span>);<br>jedis.zadd(<span class="hljs-string">&quot;zset01&quot;</span>, <span class="hljs-number">70d</span>, <span class="hljs-string">&quot;z6&quot;</span>);<br> <br>Set&lt;String&gt; zrange = jedis.zrange(<span class="hljs-string">&quot;zset01&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (String e : zrange) &#123;<br>System.out.println(e);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2><span id="redis_jedis_实例">Redis_Jedis_实例</span></h2><h3><span id="完成一个手机验证码功能">完成一个手机验证码功能</span></h3><p>要求：</p><p>1、输入手机号，点击发送后随机生成6位数字码，2分钟有效</p><p>2、输入验证码，点击验证，返回成功或失败</p><p>3、每个手机号每天只能输入3次</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/202110141622053.png" alt="image-20211014162205959"></p><p>这里就不写界面了，演示个Demo</p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.demo1;<br><br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 思路：</span><br><span class="hljs-comment"> * 1. 输入手机号</span><br><span class="hljs-comment"> * 2. 判断该手机号的发送次数，满了返回失败，没满count++并放置验证码到redis中</span><br><span class="hljs-comment"> * 3. 发短信，把验证码发给目标手机</span><br><span class="hljs-comment"> * 4. 用户输入验证码，与redis中的验证码进行比较，输出成功与否</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VerifyCode</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//输入手机号</span><br>        System.out.print(<span class="hljs-string">&quot;请输入手机号:&quot;</span>);<br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        String phone = sc.next();<br><br>        <span class="hljs-comment">//放置验证码</span><br>        String code = setCode(phone);<br>        <span class="hljs-keyword">if</span>(code == <span class="hljs-keyword">null</span>) &#123;  <span class="hljs-comment">//没成功放置，说明满了3次</span><br>            System.out.println(<span class="hljs-string">&quot;今日已发送3次，请明天再尝试&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//发送短信</span><br>        System.out.println(<span class="hljs-string">&quot;发送短信,您的验证码是:&quot;</span> + code);<br><br>        <span class="hljs-comment">//等待用户输入验证码</span><br>        System.out.print(<span class="hljs-string">&quot;请输入验证码:&quot;</span>);<br>        String userCode = sc.next();<br><br>        <span class="hljs-comment">//得到验证码进行校验</span><br>        String redisCode = getCode(phone);<br>        <span class="hljs-keyword">if</span>(redisCode == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">//没成功得到，说明验证码超时</span><br>            System.out.println(<span class="hljs-string">&quot;验证码超时，请重新获取&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(userCode.equals(redisCode)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;恭喜你，验证码正确&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;很抱歉，验证码错误&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getCode</span><span class="hljs-params">(String phone)</span> </span>&#123;<br>        <span class="hljs-comment">//连接redis</span><br>        Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">&quot;47.97.104.230&quot;</span>, <span class="hljs-number">6379</span>);<br>        jedis.auth(<span class="hljs-string">&quot;自己的密码&quot;</span>);<br><br>        String codeKey = <span class="hljs-string">&quot;VerifyCode&quot;</span> + phone + <span class="hljs-string">&quot;:code&quot;</span>;<br><br>        <span class="hljs-comment">// 获得验证码</span><br>        String code = jedis.get(codeKey);<br><br>        jedis.close();<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 得到验证码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> phone</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">setCode</span><span class="hljs-params">(String phone)</span> </span>&#123;<br>        <span class="hljs-comment">//连接redis</span><br>        Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">&quot;47.97.104.230&quot;</span>, <span class="hljs-number">6379</span>);<br>        jedis.auth(<span class="hljs-string">&quot;自己的密码&quot;</span>);<br><br>        String countKey = <span class="hljs-string">&quot;VerifyCode&quot;</span> + phone + <span class="hljs-string">&quot;:count&quot;</span>;<br>        String codeKey = <span class="hljs-string">&quot;VerifyCode&quot;</span> + phone + <span class="hljs-string">&quot;:code&quot;</span>;<br><br>        <span class="hljs-comment">//得到次数</span><br>        String countStr = jedis.get(countKey);<br>        <span class="hljs-keyword">if</span>(countStr == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">//当前是0次</span><br>            jedis.setex(countKey, <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>,<span class="hljs-string">&quot;1&quot;</span>); <span class="hljs-comment">//设置1次，时间24小时</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(Integer.parseInt(countStr) &lt;= <span class="hljs-number">2</span>) &#123; <span class="hljs-comment">//当前小于2次</span><br>            jedis.incr(countKey);<br>        &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">//否则大于2次，不能发了</span><br>            jedis.close();  <span class="hljs-comment">//返回前关闭redis</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        String verifyCode = createCode();<br>        <span class="hljs-comment">//放进redis</span><br>        jedis.setex(codeKey, <span class="hljs-number">60</span> * <span class="hljs-number">2</span>, verifyCode); <span class="hljs-comment">//自动覆盖</span><br><br>        jedis.close();  <span class="hljs-comment">//返回前关闭redis</span><br>        <span class="hljs-keyword">return</span> verifyCode;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建一个验证码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 验证码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">createCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//取5位随机数,10000~99999</span><br>        Random random = <span class="hljs-keyword">new</span> Random();<br>        Integer randomNumb = random.nextInt(<span class="hljs-number">89999</span>) + <span class="hljs-number">10000</span>;<br>        <span class="hljs-keyword">return</span> randomNumb.toString();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2><span id="redis与springboot整合">Redis与SpringBoot整合</span></h2><h3><span id="1-引入redis相关依赖">1、引入redis相关依赖</span></h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- redis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- spring2.X集成redis所需common-pool2--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="2-applicationproperties-配置redis配置">2、application.properties 配置redis配置</span></h3><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment">#Redis服务器地址</span><br><span class="hljs-meta">spring.redis.host</span>=<span class="hljs-string">192.168.140.136</span><br><span class="hljs-comment">#Redis服务器连接端口</span><br><span class="hljs-meta">spring.redis.port</span>=<span class="hljs-string">6379</span><br><span class="hljs-comment">#Redis数据库索引（默认为0）</span><br><span class="hljs-meta">spring.redis.database</span>= <span class="hljs-string">0</span><br><span class="hljs-comment">#连接超时时间（毫秒）</span><br><span class="hljs-meta">spring.redis.timeout</span>=<span class="hljs-string">1800000</span><br><span class="hljs-comment">#连接池最大连接数（使用负值表示没有限制）</span><br><span class="hljs-meta">spring.redis.lettuce.pool.max-active</span>=<span class="hljs-string">20</span><br><span class="hljs-comment">#最大阻塞等待时间(负数表示没限制)</span><br><span class="hljs-meta">spring.redis.lettuce.pool.max-wait</span>=<span class="hljs-string">-1</span><br><span class="hljs-comment">#连接池中的最大空闲连接</span><br><span class="hljs-meta">spring.redis.lettuce.pool.max-idle</span>=<span class="hljs-string">5</span><br><span class="hljs-comment">#连接池中的最小空闲连接</span><br><span class="hljs-meta">spring.redis.lettuce.pool.min-idle</span>=<span class="hljs-string">0</span><br></code></pre></div></td></tr></table></figure><h3><span id="3-添加redis配置类">3、添加redis配置类</span></h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@EnableCaching</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CachingConfigurerSupport</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory factory)</span> </span>&#123;<br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> RedisTemplate&lt;&gt;();<br>        RedisSerializer&lt;String&gt; redisSerializer = <span class="hljs-keyword">new</span> StringRedisSerializer();<br>        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="hljs-keyword">new</span> Jackson2JsonRedisSerializer(Object.class);<br>        ObjectMapper om = <span class="hljs-keyword">new</span> ObjectMapper();<br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(om);<br>        template.setConnectionFactory(factory);<br><span class="hljs-comment">//key序列化方式</span><br>        template.setKeySerializer(redisSerializer);<br><span class="hljs-comment">//value序列化</span><br>        template.setValueSerializer(jackson2JsonRedisSerializer);<br><span class="hljs-comment">//value hashmap序列化</span><br>        template.setHashValueSerializer(jackson2JsonRedisSerializer);<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CacheManager <span class="hljs-title">cacheManager</span><span class="hljs-params">(RedisConnectionFactory factory)</span> </span>&#123;<br>        RedisSerializer&lt;String&gt; redisSerializer = <span class="hljs-keyword">new</span> StringRedisSerializer();<br>        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="hljs-keyword">new</span> Jackson2JsonRedisSerializer(Object.class);<br><span class="hljs-comment">//解决查询缓存转换异常的问题</span><br>        ObjectMapper om = <span class="hljs-keyword">new</span> ObjectMapper();<br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(om);<br><span class="hljs-comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span><br>        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()<br>                .entryTtl(Duration.ofSeconds(<span class="hljs-number">600</span>))<br>                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))<br>                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))<br>                .disableCachingNullValues();<br>        RedisCacheManager cacheManager = RedisCacheManager.builder(factory)<br>                .cacheDefaults(config)<br>                .build();<br>        <span class="hljs-keyword">return</span> cacheManager;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3><span id="4-测试">4、测试</span></h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/redisTest&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisTestController</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testRedis</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//设置值到redis</span><br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;lucy&quot;</span>);<br>        <span class="hljs-comment">//从redis获取值</span><br>        String name = (String)redisTemplate.opsForValue().get(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>NoSQL数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数据库</tag>
      
      <tag>NoSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开发工具-Git和GitHub</title>
    <link href="/2021/10/07/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-Git/"/>
    <url>/2021/10/07/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-Git/</url>
    
    <content type="html"><![CDATA[<h1><span id="git">Git</span></h1><!-- toc --><ul><li><a href="#%E7%AC%AC1%E7%AB%A0-git%E6%A6%82%E8%BF%B0">第1章 Git概述</a><ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6">什么是版本控制？</a></li><li><a href="#%E9%9B%86%E4%B8%AD%E5%BC%8F%E5%92%8C%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7">集中式和分布式版本控制工具</a><ul><li><a href="#%E9%9B%86%E4%B8%AD%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7">集中式版本控制工具</a></li><li><a href="#%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7">分布式版本控制工具</a></li></ul></li><li><a href="#git-%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6">Git 工作机制</a></li><li><a href="#git-%E5%92%8C%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1%E4%B8%AD%E5%BF%83">Git 和代码托管中心</a></li></ul></li><li><a href="#%E7%AC%AC2%E7%AB%A0-git%E5%AE%89%E8%A3%85">第2章 GIt安装</a><ul><li><a href="#%E5%AE%89%E8%A3%85">安装</a></li><li><a href="#%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F">安装成功</a></li></ul></li><li><a href="#%E7%AC%AC3%E7%AB%A0-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">第3章 Git常用命令</a><ul><li><a href="#%E8%AE%BE%E7%BD%AE%E7%94%A8%E6%88%B7%E7%AD%BE%E5%90%8D">设置用户签名</a></li><li><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%AC%E5%9C%B0%E5%BA%93">初始化本地库</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E6%9C%AC%E5%9C%B0%E5%BA%93%E7%8A%B6%E6%80%81">查看本地库状态</a></li><li><a href="#%E6%B7%BB%E5%8A%A0%E6%9A%82%E5%AD%98%E5%8C%BA">添加暂存区</a></li><li><a href="#%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E5%BA%93">提交本地库</a></li><li><a href="#%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC">历史版本</a><ul><li><a href="#%E6%9F%A5%E7%9C%8B%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF%E6%97%A5%E5%BF%97%E4%BF%A1%E6%81%AF">查看版本信息（日志信息）</a></li><li><a href="#%E7%89%88%E6%9C%AC%E7%A9%BF%E6%A2%AD">版本穿梭</a></li><li><a href="#%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2%E7%9A%84%E5%8E%9F%E7%90%86">版本切换的原理</a></li></ul></li></ul></li><li><a href="#%E7%AC%AC4%E7%AB%A0-git%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C">第4章 Git分支操作</a><ul><li><a href="#%E5%88%86%E6%94%AF%E7%9A%84%E5%A5%BD%E5%A4%84">分支的好处</a></li><li><a href="#%E5%88%86%E6%94%AF%E7%9A%84%E6%93%8D%E4%BD%9C">分支的操作</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E5%88%86%E6%94%AF">查看分支</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AF">创建分支</a></li><li><a href="#%E4%BF%AE%E6%94%B9%E5%88%86%E6%94%AF">修改分支</a></li><li><a href="#%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF">切换分支</a></li><li><a href="#%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF">合并分支</a></li><li><a href="#%E4%BA%A7%E7%94%9F%E5%86%B2%E7%AA%81">产生冲突</a></li><li><a href="#%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81">解决冲突</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AF%E5%92%8C%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF%E5%9B%BE%E8%A7%A3">创建分支和切换分支图解</a></li></ul></li><li><a href="#%E7%AC%AC5%E7%AB%A0-git-%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C%E6%9C%BA%E5%88%B6">第5章 Git 团队协作机制</a><ul><li><a href="#%E5%9B%A2%E9%98%9F%E5%86%85%E5%8D%8F%E4%BD%9C">团队内协作</a></li><li><a href="#%E8%B7%A8%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C">跨团队协作</a></li></ul></li><li><a href="#%E7%AC%AC6-%E7%AB%A0-github-%E6%93%8D%E4%BD%9C">第6 章 GitHub 操作</a><ul><li><a href="#%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">创建远程仓库</a></li><li><a href="#%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%93%8D%E4%BD%9C">远程仓库操作</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%88%AB%E5%90%8D">创建远程仓库别名</a></li><li><a href="#%E6%8E%A8%E9%80%81%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">推送本地分支到远程仓库</a></li><li><a href="#%E5%85%8B%E9%9A%86%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%88%B0%E6%9C%AC%E5%9C%B0">克隆远程仓库到本地</a></li><li><a href="#%E9%82%80%E8%AF%B7%E5%8A%A0%E5%85%A5%E5%9B%A2%E9%98%9F">邀请加入团队</a></li><li><a href="#%E6%8B%89%E5%8F%96%E8%BF%9C%E7%A8%8B%E5%BA%93%E5%86%85%E5%AE%B9">拉取远程库内容</a><ul><li><a href="#%E6%8B%89%E5%8F%96%E5%92%8C%E5%85%8B%E9%9A%86%E7%9A%84%E5%8C%BA%E5%88%AB">拉取和克隆的区别</a></li></ul></li><li><a href="#%E8%B7%A8%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C-1">跨团队协作</a></li><li><a href="#ssh-%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95">SSH 免密登录</a></li></ul></li><li><a href="#%E7%AC%AC7%E7%AB%A0-idea-%E9%9B%86%E6%88%90git">第7章 IDEA 集成Git</a><ul><li><a href="#%E9%85%8D%E7%BD%AE-git-%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6">配置 Git 忽略文件</a></li><li><a href="#%E5%AE%9A%E4%BD%8D-git-%E7%A8%8B%E5%BA%8F">定位 Git 程序</a></li><li><a href="#%E6%B7%BB%E5%8A%A0%E5%88%B0%E6%9A%82%E5%AD%98%E5%8C%BA">添加到暂存区</a></li><li><a href="#%E6%8F%90%E4%BA%A4%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%BA%93">提交到本地库</a></li><li><a href="#%E5%88%87%E6%8D%A2%E7%89%88%E6%9C%AC">切换版本</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AF-1">创建分支</a></li><li><a href="#%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF-1">切换分支</a></li><li><a href="#%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF-1">合并分支</a></li><li><a href="#%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81-1">解决冲突</a></li></ul></li><li><a href="#%E7%AC%AC8%E7%AB%A0-idea-%E9%9B%86%E6%88%90github">第8章 IDEA 集成GitHub</a><ul><li><a href="#%E8%AE%BE%E7%BD%AE-github-%E8%B4%A6%E5%8F%B7">设置 GitHub 账号</a></li><li><a href="#%E5%88%86%E4%BA%AB%E5%B7%A5%E7%A8%8B%E5%88%B0-github">分享工程到 GitHub</a></li><li><a href="#push-%E6%8E%A8%E9%80%81%E6%9C%AC%E5%9C%B0%E5%BA%93%E5%88%B0%E8%BF%9C%E7%A8%8B%E5%BA%93">push 推送本地库到远程库</a></li><li><a href="#pull-%E6%8B%89%E5%8F%96%E8%BF%9C%E7%A8%8B%E5%BA%93%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%BA%93">pull 拉取远程库到本地库</a><ul><li><a href="#update%E5%92%8Cpull-%E7%9A%84%E5%8C%BA%E5%88%AB">update和pull 的区别</a></li></ul></li><li><a href="#clone-%E5%85%8B%E9%9A%86%E8%BF%9C%E7%A8%8B%E5%BA%93%E5%88%B0%E6%9C%AC%E5%9C%B0">clone 克隆远程库到本地</a></li></ul></li><li><a href="#%E7%AC%AC9%E7%AB%A0-%E5%9B%BD%E5%86%85%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1%E4%B8%AD%E5%BF%83-%E7%A0%81%E4%BA%91">第9章 国内代码托管中心-码云</a></li></ul><!-- tocstop --><h2><span id="第1章-git概述">第1章 Git概述</span></h2><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929123544.png" alt="image-20210929123544357"></p><p>GIt是免费、开源的分布式版本控制工具。</p><h3><span id="什么是版本控制">什么是版本控制？</span></h3><p>版本控制是一种记录文件内容变化，以便将来查阅特定版本修订情况的系统。<br>版本控制其实最重要的是可以记录文件修改历史记录，从而让用户能够查看历史版本，方便版本切换。 </p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929120709.png" alt="image-20210929120702573"></p><h3><span id="集中式和分布式版本控制工具">集中式和分布式版本控制工具</span></h3><h4><span id="集中式版本控制工具">集中式版本控制工具</span></h4><p>CVS、SVN(Subversion)、VSS……<br>集中化的版本控制系统诸如 CVS、SVN 等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。</p><p>这种做法带来了许多好处，每个人都可以在一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个集中化的版本控制系统，要远比在各个客户端上维护本地数据库来得轻松容易。 </p><p>这么做显而易见的缺点是中央服务器的单点故障。如果服务器宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。 </p><h4><span id="分布式版本控制工具">分布式版本控制工具</span></h4><p>Git、Mercurial、Bazaar、Darcs……<br>像 Git 这种分布式版本控制工具，客户端提取的不是最新版本的文件快照，而是把代码仓库完整地镜像下来（本地库）。这样任何一处协同工作用的文件发生故障，事后都可以用其他客户端的本地仓库进行恢复。因为每个客户端的每一次文件提取操作，实际上都是一次对整个文件仓库的完整备份。 </p><p>分布式的版本控制系统出现之后,解决了集中式版本控制系统的缺陷: </p><ol><li>服务器断网的情况下也可以进行开发（因为版本控制是在本地进行的） </li><li>每个客户端保存的也都是整个完整的项目（包含历史记录，更加安全） </li></ol><h3><span id="git-工作机制">Git 工作机制</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929121131.png" alt="image-20210929121131089"></p><h3><span id="git-和代码托管中心">Git 和代码托管中心</span></h3><p>代码托管中心是基于网络服务器的远程代码仓库，一般我们简单称为远程库。 </p><p>➢ 局域网<br>    ✓ GitLab </p><p>➢ 互联网<br>    ✓ GitHub（外网）<br>    ✓ Gitee 码云（国内网站） </p><h2><span id="第2章-git安装">第2章 GIt安装</span></h2><h3><span id="安装">安装</span></h3><p>官网地址： <a href="https://git-scm.com/">https://git-scm.com/</a></p><p>安装比较简单，基本都是默认配置，下一步就行。</p><p>可以更改一下安装目录，推荐D:\Git，尽量不要有空格。</p><h3><span id="安装成功">安装成功</span></h3><p>在桌面任意位置右键菜单，选择Git Bash Here就可以打开GIt Bash命令行终端。</p><p><font color="red">在Git Bash 终端里输入git –version 查看git 版本，如图所示，说明Git 安装成功。</font></p><h2><span id="第3章-git常用命令">第3章 Git常用命令</span></h2><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git config –global user.name 用户名</td><td>设置用户签名（只设置一次）</td></tr><tr><td>git config –global user.email 邮箱</td><td>设置用户签名（只设置一次）</td></tr><tr><td>git init</td><td>初始化本地库</td></tr><tr><td>git status</td><td>查看本地库状态</td></tr><tr><td>git add 文件名</td><td>添加到暂存区</td></tr><tr><td>git commit -m “日志信息” 文件名</td><td>提交到本地库</td></tr><tr><td>git reflog</td><td>查看历史记录</td></tr><tr><td>git reset –hard 版本号</td><td>版本穿梭</td></tr></tbody></table><h3><span id="设置用户签名">设置用户签名</span></h3><figure class="highlight lua"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global user.name 用户名 </span><br>git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global user.email 邮箱 </span><br></code></pre></div></td></tr></table></figure><p>说明：<br>签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看到，以此确认本次提交是谁做的。<font color="red">Git 首次安装必须设置一下用户签名，否则无法提交代码。 </font><br><font color="green">※注意：这里设置用户签名和将来登录GitHub（或其他代码托管中心）的账号没有任何关系。 </font></p><h3><span id="初始化本地库">初始化本地库</span></h3><p>进入需要管理的项目的目录下，打开git bash，输入命令</p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></div></td></tr></table></figure><p>然后会在该目录下生成一个.git文件夹（<font color="red">注意是隐藏的</font>），说明成功了，现在项目就交给了GIt来管理。</p><h3><span id="查看本地库状态">查看本地库状态</span></h3><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">git status</span><br></code></pre></div></td></tr></table></figure><p>首次查看（工作区没有任何文件）</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">$ git status<br>On branch <span class="hljs-keyword">master</span> <br> <br><span class="hljs-title">No</span> commits yet <br></code></pre></div></td></tr></table></figure><p>新增文件（hello.txt）</p><figure class="highlight erlang-repl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang-repl">$ vim hello.txt <br>hello git! hello wangpeng! <br>hello git! hello wangpeng! <br>hello git! hello wangpeng! <br>hello git! hello wangpeng! <br>hello git! hello wangpeng! <br>hello git! hello wangpeng! <br>hello git! hello wangpeng! <br>hello git! hello wangpeng! <br>hello git! hello wangpeng! <br>hello git! hello wangpeng! <br></code></pre></div></td></tr></table></figure><p>再次查看（检测到未追踪的文件）</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">$ git status<br>On branch master <br> <br>No commits yet <br> <br>Untracked <span class="hljs-keyword">file</span><span class="hljs-variable">s:</span> <br>  (use <span class="hljs-string">&quot;git add &lt;file&gt;...&quot;</span> <span class="hljs-keyword">to</span> include in what will <span class="hljs-keyword">be</span> committed) <br> <br>        hello.txt <br> <br>nothing added <span class="hljs-keyword">to</span> commit but untracked <span class="hljs-keyword">files</span> present (use <span class="hljs-string">&quot;git add&quot;</span> <br><span class="hljs-keyword">to</span> track) <br></code></pre></div></td></tr></table></figure><h3><span id="添加暂存区">添加暂存区</span></h3><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">git <span class="hljs-builtin-name">add</span> 文件名<br></code></pre></div></td></tr></table></figure><p>演示</p><figure class="highlight livecodeserver"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livecodeserver">$ git <span class="hljs-built_in">add</span> hello.txt<br><br>warning: LF will be replaced <span class="hljs-keyword">by</span> <span class="hljs-literal">CRLF</span> <span class="hljs-keyword">in</span> hello.txt. <br>The <span class="hljs-built_in">file</span> will have its original <span class="hljs-built_in">line</span> endings <span class="hljs-keyword">in</span> your working <br><span class="hljs-built_in">directory</span>. <br></code></pre></div></td></tr></table></figure><p>查看状态</p><figure class="highlight vhdl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vhdl">$ git status <br><span class="hljs-keyword">On</span> branch master <br> <br>No commits yet <br> <br>Changes <span class="hljs-keyword">to</span> be committed: <br>  (<span class="hljs-keyword">use</span> <span class="hljs-string">&quot;git rm --cached &lt;file&gt;...&quot;</span> <span class="hljs-keyword">to</span> unstage) <br> <br>        <span class="hljs-keyword">new</span> <span class="hljs-keyword">file</span>: hello.txt <br></code></pre></div></td></tr></table></figure><h3><span id="提交本地库">提交本地库</span></h3><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;日志信息&quot;</span> 文件名 <br></code></pre></div></td></tr></table></figure><p>演示</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">$ git <span class="hljs-keyword">commit</span> -m &quot;my first commit&quot; hello.txt <br><span class="hljs-built_in">warning</span>: LF will be replaced <span class="hljs-keyword">by</span> CRLF <span class="hljs-keyword">in</span> hello.txt. <br>The file will have its original <span class="hljs-type">line</span> endings <span class="hljs-keyword">in</span> your working <br>directory. <br>[master (root-<span class="hljs-keyword">commit</span>) <span class="hljs-number">86366</span>fa] my first <span class="hljs-keyword">commit</span> <br> <span class="hljs-number">1</span> file changed, <span class="hljs-number">16</span> insertions(+) <br> <span class="hljs-keyword">create</span> mode <span class="hljs-number">100644</span> hello.txt <br></code></pre></div></td></tr></table></figure><p>查看状态（没有文件需要提交） </p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">$ git status <br><span class="hljs-keyword">On</span> branch master <br><span class="hljs-keyword">nothing</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">commit</span>, working tree clean <br></code></pre></div></td></tr></table></figure><h3><span id="历史版本">历史版本</span></h3><h4><span id="查看版本信息日志信息">查看版本信息（日志信息）</span></h4><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c">git reflog 查看版本信息 <br>git <span class="hljs-built_in">log</span> 查看版本详细信息 <br></code></pre></div></td></tr></table></figure><p>演示</p><figure class="highlight perl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs perl">$ git reflog <br>087a1a7 (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: <span class="hljs-keyword">my</span> third commit <br>ca8ded6 HEAD@&#123;1&#125;: commit: <span class="hljs-keyword">my</span> second commit <br><span class="hljs-number">86366</span>fa HEAD@&#123;2&#125;: commit (initial): <span class="hljs-keyword">my</span> first commit <br></code></pre></div></td></tr></table></figure><p>前面7位的就是版本号</p><h4><span id="版本穿梭">版本穿梭</span></h4><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard 版本号</span><br></code></pre></div></td></tr></table></figure><h4><span id="版本切换的原理">版本切换的原理</span></h4><p>Head指针，指向当前正在使用的分支或版本。</p><p>master指针，指向主分支的最新版本。</p><p>正常状态下，master指针指向主分支的最新版本，head指针指向master。</p><p>使用版本传送reset后，master指针就指向某个版本，所以head也能定位到那个版本。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929125151.png" alt="image-20210929125151395"></p><p>idea里如果reset到之前的版本，就看不到后面的版本了（虽然依旧存在），如果想恢复，需要在reflog日志信息里找到后面版本的版本号，然后重新reset。</p><h2><span id="第4章-git分支操作">第4章 Git分支操作</span></h2><p>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行。分支可以简单理解为副本，一个分支就是一个单独的副本。（分支底层其实也是指针的引用） </p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929130107.png" alt="image-20210929130107368"></p><h3><span id="分支的好处">分支的好处</span></h3><p>同时并行推进多个功能开发，提高开发效率。<br>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败<br>的分支删除重新开始即可。 </p><h3><span id="分支的操作">分支的操作</span></h3><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把指定的分支合并到当前分支上</td></tr></tbody></table><h3><span id="查看分支">查看分支</span></h3><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch -v</span><br></code></pre></div></td></tr></table></figure><p>演示</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">$ git branch -v <br>* <span class="hljs-keyword">master</span> <span class="hljs-title">087a1a7</span> my third commit  （*代表当前所在的分区） <br></code></pre></div></td></tr></table></figure><h3><span id="创建分支">创建分支</span></h3><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">git <span class="hljs-keyword">branch </span>分支名<br></code></pre></div></td></tr></table></figure><p>演示</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">$  git branch hot-fix <br><br>$ git branch -v <br>  hot-fix <span class="hljs-number">087</span>a1a7 <span class="hljs-keyword">my</span> <span class="hljs-keyword">third</span> commit  （刚创建的新的分支，并将主分支master的内容复制了一份） <br>* master  <span class="hljs-number">087</span>a1a7 <span class="hljs-keyword">my</span> <span class="hljs-keyword">third</span> commit <br></code></pre></div></td></tr></table></figure><h3><span id="修改分支">修改分支</span></h3><p>在当前分支直接改就行</p><h3><span id="切换分支">切换分支</span></h3><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> checkout 分支名<br></code></pre></div></td></tr></table></figure><h3><span id="合并分支">合并分支</span></h3><figure class="highlight cos"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cos">git <span class="hljs-keyword">merge</span> 分支名<br></code></pre></div></td></tr></table></figure><p>合并可能会产生冲突。</p><h3><span id="产生冲突">产生冲突</span></h3><p>冲突产生的原因：<br>合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改。Git 无法替<br>我们决定使用哪一个。必须人为决定新代码内容。 </p><h3><span id="解决冲突">解决冲突</span></h3><p>1）编辑有冲突的文件，删除特殊符号，决定要使用的内容<br>特殊符号：<font color="red">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</font> 当前分支的代码 <font color="red"><code>=======</code></font> 合并过来的代码<font color="red"> &gt;&gt;&gt;&gt;&gt;&gt;&gt;</font> hot-fix </p><h3><span id="创建分支和切换分支图解">创建分支和切换分支图解</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929133959.png" alt="image-20210929133959649"></p><p>创建分支的本质就是多创建一个指针。<br>HEAD 如果指向master，那么我们现在就在master 分支上。<br>HEAD 如果执行hotfix，那么我们现在就在hotfix 分支上。 </p><p><font color="red">所以切换分支的本质就是移动HEAD 指针</font>。 </p><h2><span id="第5章-git-团队协作机制">第5章 Git 团队协作机制</span></h2><h3><span id="团队内协作">团队内协作</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929134113.png" alt="image-20210929134113240"></p><h3><span id="跨团队协作">跨团队协作</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929134128.png" alt="image-20210929134128109"></p><h2><span id="第6-章-github-操作">第6 章 GitHub 操作</span></h2><p>GitHub 网址：<a href="https://github.com/">https://github.com/</a> </p><p>Ps:全球最大同性交友网站，技术宅男的天堂</p><p>登录上自己的账号。</p><p>为了方便演示，这里使用了三个账号。岳不群，令狐冲和东方不败。</p><h3><span id="创建远程仓库">创建远程仓库</span></h3><p>第一步 点击头像旁边的+，New repository</p><p>第二步 给仓库起个名字，默认为公开权限，其他不用动，点击Create repository，创建成功。</p><h3><span id="远程仓库操作">远程仓库操作</span></h3><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git remote -v</td><td>查看当前所有远程地址别名</td></tr><tr><td>git remote add 别名 远程地址</td><td>起别名</td></tr><tr><td>git push 别名 分支</td><td>推送本地分支上的内容到远程仓库</td></tr><tr><td>git clone 远程地址</td><td>将远程仓库的内容克隆到本地</td></tr><tr><td>git pull 远程库地址别名 远程分支名</td><td>将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并</td></tr></tbody></table><h3><span id="创建远程仓库别名">创建远程仓库别名</span></h3><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">git remote -v 查看当前所有远程地址别名 <br>git remote <span class="hljs-builtin-name">add</span> 别名 远程地址 <br></code></pre></div></td></tr></table></figure><p>这个地址在创建完远程仓库后生成的连接，如图所示红框中</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929134638.png" alt="image-20210929134638022"></p><h3><span id="推送本地分支到远程仓库">推送本地分支到远程仓库</span></h3><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> <span class="hljs-keyword">push</span> 别名 分支<br></code></pre></div></td></tr></table></figure><h3><span id="克隆远程仓库到本地">克隆远程仓库到本地</span></h3><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">远程地址</span><br></code></pre></div></td></tr></table></figure><p>小结：clone 会做如下操作。1、拉取代码。2、初始化本地仓库。3、创建别名</p><h3><span id="邀请加入团队">邀请加入团队</span></h3><p>1）选择邀请合作者，比如令狐冲</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929134807.png" alt="image-20210929134807891"></p><p>2）填入想要合作的人，令狐冲</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929134818.png" alt="image-20210929134818556"></p><p>3 ）复制地址并通过微信钉钉等方式发送给令狐冲</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929134830.png" alt="image-20210929134830676"></p><p>4）令狐冲点击接受岳不群的邀请</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929134857.png" alt="image-20210929134857824"></p><p>这样令狐冲就可以在自己的账号下看到该远程仓库，并具有相应的权限（如<font color="red">push权限</font>）</p><h3><span id="拉取远程库内容">拉取远程库内容</span></h3><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> pull 远程库地址别名 远程分支名<br></code></pre></div></td></tr></table></figure><h4><span id="拉取和克隆的区别">拉取和克隆的区别</span></h4><p>克隆是本地没有文件，把远程仓库的内容完整复制下来。</p><p>拉取是本地已有该仓库的文件，然后更新内容。</p><h3><span id="跨团队协作">跨团队协作</span></h3><p>1）将远程仓库的地址复制发给邀请跨团队协作的人，比如东方不败</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929135238.png" alt="image-20210929135238935"></p><p>2）在东方不败的GitHub 账号里的地址栏复制收到的链接，然后点击Fork 将项目叉到自己的本地仓库。 </p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929135305.png" alt="image-20210929135305672"></p><p>叉入中… </p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929135316.png" alt="image-20210929135316505"></p><p>叉成功后可以看到当前仓库信息。 </p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929135328.png" alt="image-20210929135328500"></p><p>3）东方不败就可以在线编辑叉取过来的文件。</p><p>4）编辑完毕后，填写描述信息并点击左下角绿色按钮提交。</p><p>5）接下来点击上方的Pull 请求，并创建一个新的请求。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929135645.png" alt="image-20210929135645796"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929142133.png" alt="image-20210929142133261"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929142137.png" alt="image-20210929142137848"></p><p>回到岳不群的GitHub 账号可以看到有一个Pull request 请求</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929135555.png" alt="image-20210929135555353"></p><p>进入到聊天室，可以讨论代码相关内容。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929142150.png" alt="image-20210929142150245"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929142156.png" alt="image-20210929142156931"></p><p>7）如果代码没有问题，可以点击Merge pull reque 合并代码。 </p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929142209.png" alt="image-20210929142209290"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929142213.png" alt="image-20210929142213615"></p><h3><span id="ssh-免密登录">SSH 免密登录</span></h3><p>我们可以看到远程仓库中还有一个SSH 的地址，因此我们也可以使用SSH 进行访问。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929142240.png" alt="image-20210929142240454"></p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell">--进入当前用户的家目录<br><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span><br><br>--删除.ssh目录<br><span class="hljs-variable">$</span> <span class="hljs-built_in">rm</span> <span class="hljs-literal">-rvf</span> .ssh<br><br>--运行命令生成.ssh秘钥目录[注意：这里-<span class="hljs-type">C</span>这个参数是大写的<span class="hljs-type">C</span>]<br><span class="hljs-variable">$</span> ssh<span class="hljs-literal">-keygen</span> <span class="hljs-literal">-t</span> rsa <span class="hljs-literal">-C</span> huanfenz@qq.com<br><br>--进入.ssh目录查看文件列表<br><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> .ssh<br><span class="hljs-variable">$</span> ll <span class="hljs-literal">-a</span><br><br>--查看id_rsa.pub文件内容<br><span class="hljs-variable">$</span> <span class="hljs-built_in">cat</span> id_rsa.pub<br><br>ssh<span class="hljs-literal">-rsa</span> <br>AAAAB3NzaC1yc2EAAAADAQABAAABAQDRXRsk9Ohtg1AXLltsuNRAGBsx3ypE1O1Rkdzpm<br>l1woa6y6G62lZri3XtCH0F7GQvnMvQtPISJFXXWo+jFHZmqYQa/<span class="hljs-number">6</span>kOIMv2sszcoj2Qtwl<br>lGXTPn/<span class="hljs-number">4</span>T2<span class="hljs-built_in">h</span>/cHjSHfc+ks8OYP7OWOOefpOCbYY/<span class="hljs-number">7</span>DWYrl89k7nQlfd+A1FV/vQmcsa1L<br>P5ihqjpjms2CoUUen8kZHbjwHBAHQHWRE+Vc371MG/dwINvCi8n7ibI86o2k0dW0+<span class="hljs-number">8</span><span class="hljs-built_in">SL</span>+<br>svPV/Y0G9m+RAqgec8b9U6DcSSAMH5uq4UWfnAcUNagb/aJQLytrH0pLa8nMv3XdSGNNo<br>AGBFeW2+K81XrmkP27FrLI6lDef atguiguyueyue@aliyun.com <br></code></pre></div></td></tr></table></figure><p>复制id_rsa.pub 文件内容，登录GitHub，点击用户头像→Settings→SSH and GPG keys </p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929142420.png" alt="image-20210929142420505"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929142425.png" alt="image-20210929142425232"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929142432.png" alt="image-20210929142432455"></p><p>接下来再往远程仓库push 东西的时候使用SSH 连接就不需要登录了。 </p><h2><span id="第7章-idea-集成git">第7章 IDEA 集成Git</span></h2><h3><span id="配置-git-忽略文件">配置 Git 忽略文件</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929142509.png" alt="image-20210929142509653"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929142519.png" alt="image-20210929142519886"></p><p>问题1:为什么要忽略他们？<br>答：与项目的实际功能无关，不参与服务器上部署运行。把它们忽略掉能够屏蔽IDE 工具之间的差异。 </p><p>问题2：怎么忽略？<br>1）创建忽略规则文件xxxx.ignore（前缀名随便起，建议是git.ignore）<br>这个文件的存放位置原则上在哪里都可以，为了便于让~/.gitconfig 文件引用，建议也放在用<br>户家目录下</p><p>git.ignore 文件模版内容如下：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># Compiled class file</span><br>*<span class="hljs-string">.class</span><br><br><span class="hljs-comment"># Log file</span><br>*<span class="hljs-string">.log</span><br> <br><span class="hljs-comment"># BlueJ files</span><br>*<span class="hljs-string">.ctxt</span><br> <br><span class="hljs-comment"># Mobile Tools for Java (J2ME)</span><br><span class="hljs-string">.mtj.tmp/</span><br> <br><span class="hljs-comment"># Package Files #</span><br>*<span class="hljs-string">.jar</span><br>*<span class="hljs-string">.war</span><br>*<span class="hljs-string">.nar</span><br>*<span class="hljs-string">.ear</span><br>*<span class="hljs-string">.zip</span><br>*<span class="hljs-string">.tar.gz</span><br>*<span class="hljs-string">.rar</span><br> <br><span class="hljs-comment"># virtual machine crash logs, see</span><br>http:<span class="hljs-string">//www.java.com/en/download/help/error_hotspot.xml</span><br>hs_err_pid*<br> <br><span class="hljs-string">.classpath</span><br><span class="hljs-string">.project</span><br><span class="hljs-string">.settings</span><br>target<br><span class="hljs-string">.idea</span><br>*<span class="hljs-string">.iml</span><br></code></pre></div></td></tr></table></figure><p>2）在.gitconfig 文件中引用忽略配置文件（此文件在Windows 的家目录中） </p><figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript"><span class="hljs-string">[user]</span> <br> name = huanfenz <br> email = <span class="hljs-symbol">huanfenz@</span>atguigu.com <br><span class="hljs-string">[core]</span> <br> excludesfile = C:/Users/ asus / git .ignore <br>*** 注意：这里要使用“正斜线（/ ）”，不要使用“反斜线（\ ）” <br></code></pre></div></td></tr></table></figure><h3><span id="定位-git-程序">定位 Git 程序</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929142715.png" alt="image-20210929142715206"></p><p>初始化本地库</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929142759.png" alt="image-20210929142759566"></p><p>新版idea略有不痛，直接找Create Git Repository就行</p><p>选择要创建Git 本地仓库的工程，一般默认就指向了当前工程。</p><h3><span id="添加到暂存区">添加到暂存区</span></h3><p>右键点击项目选择Git -&gt; Add 将项目添加到暂存区。 </p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929142926.png" alt="image-20210929142926874"></p><h3><span id="提交到本地库">提交到本地库</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929142941.png" alt="image-20210929142940971"></p><p>在弹出的窗口中，填写描述信息，然后点击commit按钮</p><h3><span id="切换版本">切换版本</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929143158.png" alt="image-20210929143158239"></p><p>checkout会移动head指针，reset会移动分支指针</p><h3><span id="创建分支">创建分支</span></h3><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929143503.png" alt="image-20210929143503646" style="zoom:80%;"><p>或者在左下角GIt小窗口里new，填写分支名称，确定。</p><p>右下角可以查看当前head指向的分支或版本。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929143623.png" alt="image-20210929143623150"></p><h3><span id="切换分支">切换分支</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929143717.png" alt="image-20210929143717287"></p><h3><span id="合并分支">合并分支</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929143757.png" alt="image-20210929143757149"></p><h3><span id="解决冲突">解决冲突</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929143813.png" alt="image-20210929143813730"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929143818.png" alt="image-20210929143818629"></p><p>手动合并完代码以后，点击右下角的Apply 按钮。 </p><p>代码冲突解决，自动提交本地库。 </p><h2><span id="第8章-idea-集成github">第8章 IDEA 集成GitHub</span></h2><h3><span id="设置-github-账号">设置 GitHub 账号</span></h3><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929143954.png" alt="image-20210929143953963" style="zoom:50%;"><p>如果连接不上，也可以使用token方式连接。</p><p>点击github头像-settings-developer settings-</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929144319.png" alt="image-20210929144319471"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929144300.png" alt="image-20210929144300490"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929144346.png" alt="image-20210929144346350"></p><p>名字随便起</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929144408.png" alt="image-20210929144408553"></p><p>点击Generate token，生成token。 </p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929144432.png" alt="image-20210929144432584"></p><p><font color="red">注意一定要自己保存一下，否则页面关闭了，该字符串就找不到了。</font></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929144551.png" alt="image-20210929144551606"></p><h3><span id="分享工程到-github">分享工程到 GitHub</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929144621.png" alt="image-20210929144621672"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929144630.png" alt="image-20210929144630751"></p><p><font color="red">一般仓库名和远程别名就设成当前工程名</font></p><p>来到GitHub 中发现已经帮我们创建好了gitTest 的远程仓库。 </p><h3><span id="push-推送本地库到远程库">push 推送本地库到远程库</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929144727.png" alt="image-20210929144727634"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929144744.png" alt="image-20210929144744571"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929144747.png" alt="image-20210929144747878"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929144753.png" alt="image-20210929144753148"></p><p>注意：push 是将本地库代码推送到远程库，如果本地库代码跟远程库代码版本不一致，push 的操作是会被拒绝的。也就是说，要想push 成功，一定要保证本地库的版本要比远程库的版本高！</p><p><font color="red">因此一个成熟的程序员在动手改本地代码之前，一定会先检查下远程库跟本地代码的区别！如果本地的代码版本已经落后，切记要先pull 拉取一下远程库的代码，将本地代码更新到最新以后，然后再修改，提交，推送！ </font></p><h3><span id="pull-拉取远程库到本地库">pull 拉取远程库到本地库</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929144927.png" alt="image-20210929144926988"></p><h4><span id="update和pull-的区别">update和pull 的区别</span></h4><blockquote><p>git pull 是 git fetch + git merge FETCH_HEAD 的缩写。</p><p>git pull就是先fetch，然后执行merge 操作，如果加<em>—rebase</em>参数，就是使用git rebase 代替git merge。</p><p>Idea update project 就是你可以选择到底是merge 还是 rebase 的git pull</p></blockquote><p>pull是原生的，update project是idea做了一层封装，一般用update project…就可以了。</p><p>注意：pull 是拉取远端仓库代码到本地，如果远程库代码和本地库代码不一致，会自动<br>合并，如果自动合并失败，还会涉及到手动解决冲突的问题。 </p><h3><span id="clone-克隆远程库到本地">clone 克隆远程库到本地</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210929145321.png" alt="image-20210929145321705"></p><p>然后输入一下url，点击clone，做一些项目的配置就可以了.</p><h2><span id="第9章-国内代码托管中心-码云">第9章 国内代码托管中心-码云</span></h2><p>差不多。</p>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux学习笔记</title>
    <link href="/2021/09/25/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/09/25/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1><span id="linux">Linux</span></h1><!-- toc --><ul><li><a href="#%E7%AC%AC1%E7%AB%A0-%E8%AF%BE%E7%A8%8B%E7%AE%80%E4%BB%8B">第1章 课程简介</a></li><li><a href="#%E7%AC%AC2%E7%AB%A0-linux%E7%AE%80%E4%BB%8B">第2章 Linux简介</a></li><li><a href="#%E7%AC%AC3%E7%AB%A0-vm%E5%92%8Clinux%E5%AE%89%E8%A3%85">第3章 VM和Linux安装</a><ul><li><a href="#vm%E5%AE%89%E8%A3%85">VM安装</a></li><li><a href="#vm%E7%A0%B4%E8%A7%A3">VM破解</a></li><li><a href="#centos%E7%9A%84%E5%AE%89%E8%A3%85">CentOS的安装</a></li><li><a href="#%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C">虚拟机的相关操作</a><ul><li><a href="#%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%85%8B%E9%9A%86">虚拟机克隆</a></li><li><a href="#%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BF%AB%E7%85%A7">虚拟机快照</a></li><li><a href="#%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E8%BF%81%E7%A7%BB%E5%92%8C%E5%88%A0%E9%99%A4">虚拟机的迁移和删除</a></li></ul></li><li><a href="#%E5%AE%89%E8%A3%85vmtools">安装vmtools</a></li><li><a href="#%E8%AE%BE%E7%BD%AE%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9">设置共享文件夹</a></li></ul></li><li><a href="#%E7%AC%AC4%E7%AB%A0-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84">第4章 目录结构</a><ul><li><a href="#%E5%85%B7%E4%BD%93%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84">具体的目录结构</a></li></ul></li><li><a href="#%E7%AC%AC5%E7%AB%A0-%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95">第5章 远程登录</a><ul><li><a href="#xshell%E5%92%8Cxftp%E5%AE%89%E8%A3%85">Xshell和Xftp安装</a></li><li><a href="#xshell%E5%92%8Cxftp%E9%85%8D%E7%BD%AE">Xshell和Xftp配置</a></li><li><a href="#xftp%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98">Xftp中文乱码问题</a></li></ul></li><li><a href="#%E7%AC%AC6%E7%AB%A0-vi%E5%92%8Cvim%E7%BC%96%E8%BE%91%E5%99%A8">第6章 Vi和Vim编辑器</a><ul><li><a href="#%E4%B8%89%E7%A7%8D%E6%A8%A1%E5%BC%8F">三种模式</a><ul><li><a href="#%E6%AD%A3%E5%B8%B8%E6%A8%A1%E5%BC%8F">正常模式</a></li><li><a href="#%E6%8F%92%E5%85%A5%E6%A8%A1%E5%BC%8F">插入模式</a></li><li><a href="#%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%A8%A1%E5%BC%8F">命令行模式</a></li></ul></li><li><a href="#%E7%9B%B8%E4%BA%92%E5%88%87%E6%8D%A2">相互切换</a></li><li><a href="#vi-%E5%92%8C-vim-%E5%BF%AB%E6%8D%B7%E9%94%AE">vi 和 vim 快捷键</a></li></ul></li><li><a href="#%E7%AC%AC7%E7%AB%A0-%E5%BC%80%E6%9C%BA-%E9%87%8D%E5%90%AF%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%B3%A8%E9%94%80">第7章 开机、重启，用户登录注销</a><ul><li><a href="#%E5%85%B3%E6%9C%BA%E9%87%8D%E5%90%AF">关机&amp;重启</a></li><li><a href="#%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%92%8C%E6%B3%A8%E9%94%80">用户登录和注销</a></li></ul></li><li><a href="#%E7%AC%AC8%E7%AB%A0-%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86">第8章 用户管理</a><ul><li><a href="#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">常用命令</a></li><li><a href="#%E7%94%A8%E6%88%B7%E7%BB%84">用户组</a></li><li><a href="#%E4%B8%89%E4%B8%AA%E6%96%87%E4%BB%B6">三个文件</a></li></ul></li><li><a href="#%E7%AC%AC9%E7%AB%A0-%E5%AE%9E%E7%94%A8%E6%8C%87%E4%BB%A4">第9章 实用指令</a><ul><li><a href="#%E8%BF%90%E8%A1%8C%E7%BA%A7%E5%88%AB%E8%AF%B4%E6%98%8E">运行级别说明</a></li><li><a href="#centos7-%E5%90%8E%E8%BF%90%E8%A1%8C%E7%BA%A7%E5%88%AB%E8%AF%B4%E6%98%8E">CentOS7 后运行级别说明</a></li><li><a href="#%E6%89%BE%E5%9B%9E-root-%E5%AF%86%E7%A0%81">找回 root 密码</a></li><li><a href="#%E5%B8%AE%E5%8A%A9%E6%8C%87%E4%BB%A4">帮助指令</a></li><li><a href="#%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E7%B1%BB">文件目录类</a></li><li><a href="#%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F%E7%B1%BB">时间日期类</a></li><li><a href="#%E6%90%9C%E7%B4%A2%E6%9F%A5%E6%89%BE%E7%B1%BB">搜索查找类</a></li><li><a href="#%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B%E7%B1%BB">压缩和解压类</a></li></ul></li><li><a href="#%E7%AC%AC10%E7%AB%A0-%E7%BB%84%E7%AE%A1%E7%90%86%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86">第10章 组管理和权限管理</a><ul><li><a href="#%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95-%E6%89%80%E6%9C%89%E8%80%85">文件/目录 所有者</a></li><li><a href="#%E7%BB%84%E7%9A%84%E5%88%9B%E5%BB%BA">组的创建</a></li><li><a href="#%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95-%E6%89%80%E5%9C%A8%E7%BB%84">文件/目录 所在组</a></li><li><a href="#%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E6%89%80%E5%9C%A8%E7%9A%84%E7%BB%84">修改文件/目录所在的组</a></li><li><a href="#%E5%85%B6%E5%AE%83%E7%BB%84">其它组</a></li><li><a href="#%E6%94%B9%E5%8F%98%E7%94%A8%E6%88%B7%E6%89%80%E5%9C%A8%E7%BB%84">改变用户所在组</a></li><li><a href="#%E6%9D%83%E9%99%90%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D">权限的基本介绍</a></li><li><a href="#rwx-%E6%9D%83%E9%99%90%E8%AF%A6%E8%A7%A3%E9%9A%BE%E7%82%B9">rwx 权限详解，难点</a><ul><li><a href="#rwx-%E4%BD%9C%E7%94%A8%E5%88%B0%E6%96%87%E4%BB%B6">rwx 作用到文件</a></li><li><a href="#rwx-%E4%BD%9C%E7%94%A8%E5%88%B0%E7%9B%AE%E5%BD%95">rwx 作用到目录</a></li></ul></li><li><a href="#%E4%BF%AE%E6%94%B9%E6%9D%83%E9%99%90-chmod">修改权限-chmod</a><ul><li><a href="#%E7%AC%AC%E4%B8%80%E7%A7%8D%E6%96%B9%E5%BC%8F-%E5%8F%98%E6%9B%B4%E6%9D%83%E9%99%90">第一种方式：+ 、-、= 变更权限</a></li><li><a href="#%E7%AC%AC%E4%BA%8C%E7%A7%8D%E6%96%B9%E5%BC%8F%E9%80%9A%E8%BF%87%E6%95%B0%E5%AD%97%E5%8F%98%E6%9B%B4%E6%9D%83%E9%99%90">第二种方式：通过数字变更权限</a></li></ul></li><li><a href="#%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E6%89%80%E6%9C%89%E8%80%85-chown">修改文件所有者-chown</a></li><li><a href="#%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E6%89%80%E5%9C%A8%E7%BB%84-chgrp">修改文件/目录所在组-chgrp</a></li><li><a href="#%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-%E8%AD%A6%E5%AF%9F%E5%92%8C%E5%9C%9F%E5%8C%AA%E6%B8%B8%E6%88%8F">最佳实践-警察和土匪游戏</a></li><li><a href="#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0">课后练习</a></li><li><a href="#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A02">课后练习2</a></li></ul></li><li><a href="#%E7%AC%AC11%E7%AB%A0-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E6%AC%A1%E8%A6%81">第11章 定时任务调度（次要）</a><ul><li><a href="#crond-%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%AE%9A%E6%97%B6run">crond 任务调度（定时run）</a><ul><li><a href="#%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4">相关命令</a></li><li><a href="#%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8">快速入门</a></li><li><a href="#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E">参数说明</a></li><li><a href="#%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7%E7%9A%84%E8%AF%B4%E6%98%8E">特殊符号的说明</a></li><li><a href="#%E7%89%B9%E6%AE%8A%E6%97%B6%E9%97%B4%E6%89%A7%E8%A1%8C%E6%A1%88%E4%BE%8B">特殊时间执行案例</a></li><li><a href="#%E5%BA%94%E7%94%A8%E6%A1%88%E4%BE%8B">应用案例</a></li></ul></li><li><a href="#at-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E4%B8%80%E6%AC%A1%E5%AE%9A%E6%97%B6run">at 定时任务（一次定时run）</a><ul><li><a href="#%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4-1">相关命令</a></li><li><a href="#at-%E5%91%BD%E4%BB%A4%E9%80%89%E9%A1%B9">at 命令选项</a></li><li><a href="#at-%E6%97%B6%E9%97%B4%E5%AE%9A%E4%B9%89">at 时间定义</a></li><li><a href="#%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B">应用实例</a></li></ul></li></ul></li><li><a href="#%E7%AC%AC12%E7%AB%A0-linux-%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA-%E6%8C%82%E8%BD%BD%E6%AC%A1%E8%A6%81">第12章 Linux 磁盘分区、挂载（次要）</a><ul><li><a href="#%E7%A4%BA%E6%84%8F%E5%9B%BE">示意图</a></li><li><a href="#%E7%A1%AC%E7%9B%98%E8%AF%B4%E6%98%8E">硬盘说明</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E8%AE%BE%E5%A4%87%E6%8C%82%E8%BD%BD%E6%83%85%E5%86%B5">查看所有设备挂载情况</a></li><li><a href="#%E6%8C%82%E8%BD%BD%E7%9A%84%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B">挂载的经典案例</a><ul><li><a href="#%E5%A6%82%E4%BD%95%E5%A2%9E%E5%8A%A0%E4%B8%80%E5%9D%97%E7%A1%AC%E7%9B%98">如何增加一块硬盘</a></li><li><a href="#%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%A2%9E%E5%8A%A0%E7%A1%AC%E7%9B%98%E6%AD%A5%E9%AA%A41">虚拟机增加硬盘步骤1</a></li><li><a href="#%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%A2%9E%E5%8A%A0%E7%A1%AC%E7%9B%98%E6%AD%A5%E9%AA%A42">虚拟机增加硬盘步骤2</a></li><li><a href="#%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%A2%9E%E5%8A%A0%E7%A1%AC%E7%9B%98%E6%AD%A5%E9%AA%A43">虚拟机增加硬盘步骤3</a></li><li><a href="#%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%A2%9E%E5%8A%A0%E7%A1%AC%E7%9B%98%E6%AD%A5%E9%AA%A44">虚拟机增加硬盘步骤4</a></li><li><a href="#%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%A2%9E%E5%8A%A0%E7%A1%AC%E7%9B%98%E6%AD%A5%E9%AA%A45">虚拟机增加硬盘步骤5</a></li></ul></li><li><a href="#%E7%A3%81%E7%9B%98%E6%83%85%E5%86%B5%E6%9F%A5%E8%AF%A2">磁盘情况查询</a><ul><li><a href="#%E6%9F%A5%E8%AF%A2%E7%B3%BB%E7%BB%9F%E6%95%B4%E4%BD%93%E7%A3%81%E7%9B%98%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5">查询系统整体磁盘使用情况</a></li><li><a href="#%E6%9F%A5%E8%AF%A2%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95%E7%9A%84%E7%A3%81%E7%9B%98%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B5">查询指定目录的磁盘占用情况</a></li></ul></li><li><a href="#%E7%A3%81%E7%9B%98%E6%83%85%E5%86%B5-%E5%B7%A5%E4%BD%9C%E5%AE%9E%E7%94%A8%E6%8C%87%E4%BB%A4">磁盘情况-工作实用指令</a></li></ul></li><li><a href="#%E7%AC%AC13%E7%AB%A0-%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E9%87%8D%E8%A6%81">第13章 网络配置（重要）</a><ul><li><a href="#%E5%8E%9F%E7%90%86%E5%9B%BE">原理图</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E7%BD%91%E7%BB%9Cip-%E5%92%8C%E7%BD%91%E5%85%B3">查看网络IP 和网关</a><ul><li><a href="#%E6%9F%A5%E7%9C%8B%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E7%BC%96%E8%BE%91%E5%99%A8%E5%92%8C%E4%BF%AE%E6%94%B9ip-%E5%9C%B0%E5%9D%80">查看虚拟网络编辑器和修改IP 地址</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E7%BD%91%E5%85%B3">查看网关</a></li><li><a href="#%E6%9F%A5%E7%9C%8B-windows-%E7%8E%AF%E5%A2%83%E7%9A%84%E4%B8%AD-vmnet8-%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE-ipconfig-%E6%8C%87%E4%BB%A4">查看 windows 环境的中 VMnet8 网络配置 (ipconfig 指令)</a></li><li><a href="#%E6%9F%A5%E7%9C%8B-linux-%E7%9A%84%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE-ifconfig">查看 linux 的网络配置 ifconfig</a></li></ul></li><li><a href="#ping-%E6%B5%8B%E8%AF%95%E4%B8%BB%E6%9C%BA%E4%B9%8B%E9%97%B4%E7%BD%91%E7%BB%9C%E8%BF%9E%E9%80%9A%E6%80%A7">ping 测试主机之间网络连通性</a></li><li><a href="#linux-%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE">linux 网络环境配置</a><ul><li><a href="#%E7%AC%AC%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95%E8%87%AA%E5%8A%A8%E8%8E%B7%E5%8F%96dhcp">第一种方法(自动获取DHCP)</a></li><li><a href="#%E7%AC%AC%E4%BA%8C%E7%A7%8D%E6%96%B9%E6%B3%95%E6%8C%87%E5%AE%9Aip">第二种方法(指定ip)</a></li></ul></li><li><a href="#%E8%AE%BE%E7%BD%AE%E4%B8%BB%E6%9C%BA%E5%90%8D%E5%92%8Chosts-%E6%98%A0%E5%B0%84">设置主机名和hosts 映射</a><ul><li><a href="#%E8%AE%BE%E7%BD%AE%E4%B8%BB%E6%9C%BA%E5%90%8D">设置主机名</a></li><li><a href="#%E8%AE%BE%E7%BD%AEhosts-%E6%98%A0%E5%B0%84">设置hosts 映射</a></li><li><a href="#%E4%B8%BB%E6%9C%BA%E5%90%8D%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90hosts-dns">主机名解析过程分析(Hosts、DNS)</a></li><li><a href="#hosts-%E6%98%AF%E4%BB%80%E4%B9%88">Hosts 是什么</a></li><li><a href="#dns">DNS</a></li></ul></li></ul></li><li><a href="#%E7%AC%AC14%E7%AB%A0-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E9%87%8D%E8%A6%81">第14章 进程管理（重要）</a><ul><li><a href="#%E7%A4%BA%E6%84%8F%E5%9B%BE-1">示意图</a></li><li><a href="#%E6%98%BE%E7%A4%BA%E7%B3%BB%E7%BB%9F%E6%89%A7%E8%A1%8C%E7%9A%84%E8%BF%9B%E7%A8%8B">显示系统执行的进程</a><ul><li><a href="#ps-%E8%AF%A6%E8%A7%A3">ps 详解</a></li><li><a href="#%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B-1">应用实例</a></li></ul></li><li><a href="#%E7%BB%88%E6%AD%A2%E8%BF%9B%E7%A8%8Bkill-%E5%92%8C-killall">终止进程kill 和 killall</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95">基本语法</a></li><li><a href="#%E5%B8%B8%E7%94%A8%E9%80%89%E9%A1%B9">常用选项</a></li><li><a href="#%E6%A1%88%E4%BE%8B">案例</a></li></ul></li><li><a href="#%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%E6%A0%91-pstree">查看进程树 pstree</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95-1">基本语法</a></li><li><a href="#%E5%B8%B8%E7%94%A8%E9%80%89%E9%A1%B9-1">常用选项</a></li><li><a href="#%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B-2">应用实例</a></li></ul></li><li><a href="#%E6%9C%8D%E5%8A%A1service%E7%AE%A1%E7%90%86">服务(service)管理</a><ul><li><a href="#service-%E7%AE%A1%E7%90%86%E6%8C%87%E4%BB%A4">service 管理指令</a></li><li><a href="#service-%E7%AE%A1%E7%90%86%E6%8C%87%E4%BB%A4%E6%A1%88%E4%BE%8B">service 管理指令案例</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E6%9C%8D%E5%8A%A1%E5%90%8D">查看服务名</a></li><li><a href="#%E6%9C%8D%E5%8A%A1%E7%9A%84%E8%BF%90%E8%A1%8C%E7%BA%A7%E5%88%ABrunlevel">服务的运行级别(runlevel)</a></li><li><a href="#centos7-%E5%90%8E%E8%BF%90%E8%A1%8C%E7%BA%A7%E5%88%AB%E8%AF%B4%E6%98%8E-1">CentOS7 后运行级别说明</a></li><li><a href="#chkconfig-%E6%8C%87%E4%BB%A4">chkconfig 指令</a></li><li><a href="#chkconfig-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95">chkconfig 基本语法</a></li><li><a href="#systemctl-%E7%AE%A1%E7%90%86%E6%8C%87%E4%BB%A4">systemctl 管理指令</a></li><li><a href="#systemctl-%E8%AE%BE%E7%BD%AE%E6%9C%8D%E5%8A%A1%E7%9A%84%E8%87%AA%E5%90%AF%E5%8A%A8%E7%8A%B6%E6%80%81">systemctl 设置服务的自启动状态</a></li><li><a href="#%E5%BA%94%E7%94%A8%E6%A1%88%E4%BE%8B%E6%9F%A5%E7%9C%8B-%E5%85%B3%E9%97%AD-%E9%87%8D%E5%90%AF%E9%98%B2%E7%81%AB%E5%A2%99">应用案例（查看、关闭、重启防火墙）</a></li><li><a href="#%E7%BB%86%E8%8A%82%E8%AE%A8%E8%AE%BA%E9%98%B2%E7%81%AB%E5%A2%99">细节讨论（防火墙）</a></li><li><a href="#%E6%89%93%E5%BC%80%E6%88%96%E8%80%85%E5%85%B3%E9%97%AD%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%E9%87%8D%E8%A6%81">打开或者关闭指定端口（重要！！！）</a></li><li><a href="#firewall-%E6%8C%87%E4%BB%A4">firewall 指令</a></li><li><a href="#linux%E4%B8%8B%E9%98%B2%E7%81%AB%E5%A2%99%E5%BC%80%E6%94%BE3306%E7%AB%AF%E5%8F%A3">linux下防火墙开放3306端口</a></li><li><a href="#%E5%BA%94%E7%94%A8%E6%A1%88%E4%BE%8B%E9%98%B2%E7%81%AB%E5%A2%99">应用案例（防火墙）</a></li><li><a href="#%E5%8A%A8%E6%80%81%E7%9B%91%E6%8E%A7%E8%BF%9B%E7%A8%8B">动态监控进程</a></li><li><a href="#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95-2">基本语法</a></li><li><a href="#%E9%80%89%E9%A1%B9%E8%AF%B4%E6%98%8E">选项说明</a></li><li><a href="#%E4%BA%A4%E4%BA%92%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E">交互操作说明</a></li><li><a href="#%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B-3">应用实例</a></li></ul></li><li><a href="#%E7%9B%91%E6%8E%A7%E7%BD%91%E7%BB%9C%E7%8A%B6%E6%80%81">监控网络状态</a><ul><li><a href="#%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C%E6%83%85%E5%86%B5netstat">查看系统网络情况netstat</a></li></ul></li></ul></li><li><a href="#%E7%AC%AC15%E7%AB%A0-rpm%E4%B8%8Eyum">第15章 RPM与YUM</a><ul><li><a href="#rpm%E5%8C%85%E7%9A%84%E7%AE%A1%E7%90%86">rpm包的管理</a><ul><li><a href="#rpm-%E5%8C%85%E7%9A%84%E7%AE%80%E5%8D%95%E6%9F%A5%E8%AF%A2%E6%8C%87%E4%BB%A4">rpm 包的简单查询指令</a></li><li><a href="#rpm-%E5%8C%85%E5%90%8D%E5%9F%BA%E6%9C%AC%E6%A0%BC%E5%BC%8F">rpm 包名基本格式</a></li><li><a href="#rpm-%E5%8C%85%E7%9A%84%E5%85%B6%E5%AE%83%E6%9F%A5%E8%AF%A2%E6%8C%87%E4%BB%A4">rpm 包的其它查询指令</a></li><li><a href="#%E5%8D%B8%E8%BD%BDrpm-%E5%8C%85">卸载rpm 包</a></li><li><a href="#%E5%AE%89%E8%A3%85rpm-%E5%8C%85">安装rpm 包</a></li></ul></li><li><a href="#yum">yum</a><ul><li><a href="#yum-%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4">yum 的基本指令</a></li><li><a href="#%E5%AE%89%E8%A3%85%E6%8C%87%E5%AE%9A%E7%9A%84yum-%E5%8C%85">安装指定的yum 包</a></li><li><a href="#yum-%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B">yum 应用实例</a></li></ul></li></ul></li><li><a href="#%E7%AC%AC16%E7%AB%A0-%E6%90%AD%E5%BB%BAjavaee%E7%8E%AF%E5%A2%83">第16章 搭建JavaEE环境</a><ul><li><a href="#%E5%AE%89%E8%A3%85-jdk">安装 JDK</a><ul><li><a href="#%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4">安装步骤</a></li><li><a href="#%E6%B5%8B%E8%AF%95%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F">测试是否安装成功</a></li></ul></li><li><a href="#tomcat-%E7%9A%84%E5%AE%89%E8%A3%85">tomcat 的安装</a><ul><li><a href="#%E6%AD%A5%E9%AA%A4">步骤</a></li><li><a href="#%E6%B5%8B%E8%AF%95%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F-1">测试是否安装成功</a></li></ul></li><li><a href="#idea2020-%E7%9A%84%E5%AE%89%E8%A3%85">idea2020 的安装</a><ul><li><a href="#%E6%AD%A5%E9%AA%A4-1">步骤</a></li></ul></li><li><a href="#mysql57-%E7%9A%84%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F">mysql5.7 的安装（注意）</a><ul><li><a href="#%E6%AD%A5%E9%AA%A4-2">步骤</a></li></ul></li><li><a href="#%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E8%AE%BE%E7%BD%AE">远程访问设置</a></li></ul></li></ul><!-- tocstop --><h2><span id="第1章-课程简介">第1章 课程简介</span></h2><p>暂时就学习</p><ol><li>  <strong>基础篇</strong></li><li>  <strong>实际操作篇</strong></li><li>  <strong>JavaEE定制篇</strong></li></ol><h2><span id="第2章-linux简介">第2章 Linux简介</span></h2><p> linux 是一个开源、免费的操作系统，特点是稳定、安全。</p><h2><span id="第3章-vm和linux安装">第3章 VM和Linux安装</span></h2><h3><span id="vm安装">VM安装</span></h3><ol><li><p>  进入官网<a href="https://www.vmware.com/">VMware - Delivering a Digital Foundation For Businesses</a></p></li><li><p>  找到最新的workspace，然后安装</p></li><li><p>  安装过程比较简单，不赘述，改下安装目录的盘符就行。</p></li></ol><h3><span id="vm破解">VM破解</span></h3><ol><li>  在网上搜一下对应版本的密钥</li><li>  VMware pro 16的密钥</li></ol><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">ZF3R0</span>-FHED<span class="hljs-number">2</span>-M<span class="hljs-number">80</span>TY-<span class="hljs-number">8</span>QYGC-NPKYF<br><span class="hljs-attribute">YF390</span>-<span class="hljs-number">0</span>HF<span class="hljs-number">8</span>P-M<span class="hljs-number">81</span>RQ-<span class="hljs-number">2</span>DXQE-M<span class="hljs-number">2</span>UT<span class="hljs-number">6</span><br><span class="hljs-attribute">ZF71R</span>-DMX<span class="hljs-number">85</span>-<span class="hljs-number">08</span>DQY-<span class="hljs-number">8</span>YMNC-PPHV<span class="hljs-number">8</span><br></code></pre></div></td></tr></table></figure><h3><span id="centos的安装">CentOS的安装</span></h3><ol><li>  因为系统包比较大，所以需要找一个镜像网站下载CentOS7</li><li>  镜像网站参考</li></ol><blockquote><p><a href="http://man.linuxde.net/download/CentOS">http://man.linuxde.net/download/CentOS</a><br><a href="http://mirrors.cn99.com/centos/7/isos/x86_64/">http://mirrors.cn99.com/centos/7/isos/x86_64/</a><br><a href="http://mirrors.sohu.com/centos/7/isos/x86_64/">http://mirrors.sohu.com/centos/7/isos/x86_64/</a><br><a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/">http://mirrors.aliyun.com/centos/7/isos/x86_64/</a><br><a href="http://centos.ustc.edu.cn/centos/7/isos/x86_64/">http://centos.ustc.edu.cn/centos/7/isos/x86_64/</a><br><a href="http://mirrors.neusoft.edu.cn/centos/7/isos/x86_64/">http://mirrors.neusoft.edu.cn/centos/7/isos/x86_64/</a><br><a href="http://mirrors.163.com/centos/7/isos/x86_64/">http://mirrors.163.com/centos/7/isos/x86_64/</a><br><a href="http://ftp.sjtu.edu.cn/centos/7/isos/x86_64/">http://ftp.sjtu.edu.cn/centos/7/isos/x86_64/</a></p></blockquote><p>我就下载了CentOS7的最后一个版本2009</p><p><font color="red">具体安装步骤参考附件《韩顺平教育 安装CentOS7.6》</font></p><h3><span id="虚拟机的相关操作">虚拟机的相关操作</span></h3><h4><span id="虚拟机克隆">虚拟机克隆</span></h4><ul><li>  方法一：直接复制安装好的虚拟机的文件夹。</li><li>  方法二（推荐）： 在VMware中选中需要克隆的虚拟机，右键–管理–克隆</li></ul><p><font color="red">注意：克隆时需要关闭linux系统。</font></p><h4><span id="虚拟机快照">虚拟机快照</span></h4><p>如果你在使用虚拟机系统的时候(比如 linux)，你想回到原先的某一个状态，也就是说你担心可能有些误操作造成系统异常，需要回到原先某个正常运行的状态，vmware 也提供了这样的功能，就叫快照管理 。</p><p>比较类似于git，也有分支。</p><p>下图是快照管理页面</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210917175431.png" alt="image-20210917175424447"></p><p>虽然快照很方便，但也不要滥用，避免资源的浪费，在有需要保存状态的时候使用。</p><h4><span id="虚拟机的迁移和删除">虚拟机的迁移和删除</span></h4><p>虚拟系统安装好了，它的本质就是文件(放在文件夹的)。因此虚拟系统的迁移很方便，你可以把安装好的虚拟系统这个<strong>文件夹整体拷贝或者剪切</strong>到另外位置使用。删除也很简单，<strong>用 vmware 进行移除</strong>，再点击菜单-&gt;从磁盘删除即可，或者直接手动删除虚拟系统对应的文件夹。</p><h3><span id="安装vmtools">安装vmtools</span></h3><p><font color="blue">备注：先设一下共享文件夹试试，说不定默认安装好了。</font></p><p>安装步骤：</p><p>1)进入 centos（<font color="red">管理员账号进入</font>）</p><p>2)点击 vm 菜单的-&gt;install vmware tools</p><p>3)centos 会出现一个 vm 的安装包, xx.tar.gz</p><p>4)拷贝到 /opt</p><p>5)使用解压命令 tar, 得到一个安装文件</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> /<span class="hljs-keyword">opt</span> [进入到 <span class="hljs-keyword">opt</span> 目录]<br>tar -zxvf xx.tar.gz<br></code></pre></div></td></tr></table></figure><p>6)进入该 vm 解压的目录 , /opt 目录下</p><figure class="highlight gams"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">cd</span></span> vmware...<br></code></pre></div></td></tr></table></figure><p>7)安装 ./vmware-install.pl</p><p>8)全部使用默认设置即可, 就可以安装成功</p><p>9)注意：安装 vmtools 需要有 gcc.（gcc是安装系统时，安装的组建包）</p><p>查看gcc版本命令</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">gcc -v</span><br></code></pre></div></td></tr></table></figure><p><font color="red">注意安装的时候不要uninstalling了。看清楚最后一个填no</font></p><h3><span id="设置共享文件夹">设置共享文件夹</span></h3><p>为了方便，可以设置一个共享文件夹，比如 d:/myshare</p><p>在vmware的设置中，设置一下，比较简单，不赘述。</p><h2><span id="第4章-目录结构">第4章 目录结构</span></h2><p>linux 的文件系统是采用级层式的树状目录结构，在此结构中的<font color="red">最上层是根目录“/”</font>，然后在此目录下再创建其他的<br>目录。</p><p>记住一句话：“<font color="red">在LInux中，一切皆文件</font>”。</p><h3><span id="具体的目录结构">具体的目录结构</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926211538.png" alt="1"></p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">/bin [常用]<br><span class="hljs-code">是Binary，存放着常用命令</span><br><span class="hljs-code">/sbin</span><br><span class="hljs-code">s是super，存放管理员使用的程序</span><br><span class="hljs-code">/home [常用]</span><br><span class="hljs-code">普通用户的主目录，在Linux中每个用户都有一个自己的目录，该目录一般是用户的账号命名</span><br><span class="hljs-code">/root [常用]</span><br><span class="hljs-code">管理员的主目录</span><br><span class="hljs-code">/lib</span><br><span class="hljs-code">系统开机所需要的最基本的动态连接共享库，类似与Windows中的DLL文件。几乎所有的应用程序都需要用到它们。</span><br><span class="hljs-code">/lost+found</span><br><span class="hljs-code">一般为空，非法关机后，存放一些文件</span><br><span class="hljs-code">/etc [常用]</span><br><span class="hljs-code">系统管理所需要的配置文件和子目录，比如安装mysql数据库my.conf</span><br><span class="hljs-code">/usr [常用]</span><br><span class="hljs-code">应用程序和文件。类似于windows的program files目录。</span><br><span class="hljs-code">/boot [常用]</span><br><span class="hljs-code">存放启动Linux时的一些核心文件，包括一些连接文件和镜像文件</span><br><span class="hljs-code">/proc [不能动]</span><br><span class="hljs-code">虚拟的目录，是系统内存的映射，访问这个目录来获取系统信息</span><br><span class="hljs-code">/srv [不能动]</span><br><span class="hljs-code">service 缩写，该目录存放一些服务启动之后需要提取的数据</span><br><span class="hljs-code">/sys [不能动]</span><br><span class="hljs-code">这是 linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs =》【别动】</span><br><span class="hljs-code">/tmp</span><br><span class="hljs-code">存放临时文件</span><br><span class="hljs-code">/dev</span><br><span class="hljs-code">类似于 windows 的设备管理器，把所有的硬件用文件的形式存储</span><br><span class="hljs-code">/media [常用]</span><br><span class="hljs-code">linux 系统会自动识别一些设备，例如 U 盘、光驱等等，当识别后，linux 会把识别的设备挂载到这个目录下</span><br><span class="hljs-code">/mnt [常用]</span><br><span class="hljs-code">系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在/mnt/上，然后进入该目录就可以查看里的内容了。</span><br><span class="hljs-code">/opt</span><br><span class="hljs-code">这是给主机额外安装软件所存放的目录。如安装 ORACLE 数据库就可放到该目录下。默认为空</span><br><span class="hljs-code">/usr/local [常用]</span><br><span class="hljs-code">这是另一个给主机额外安装软件所安装的目录。一般是通过编译源码方式安装的程序</span><br><span class="hljs-code">/var [常用]</span><br><span class="hljs-code">这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件</span><br><span class="hljs-code">/selinux [security-enhanced linux]</span><br><span class="hljs-code">SELinux 是一种安全子系统,它能控制程序只能访问特定文件,有三种工作模式，可以自行设置.</span><br></code></pre></div></td></tr></table></figure><p>简单记忆一下</p><ol><li>  bin和sbin存放命令程序</li><li>  home和root是用户主目录，存放用户的信息</li><li>  usr，应用程序</li><li>  media，外部设备</li><li>  mnt，外部挂载</li><li>  etc，配置文件</li><li>  var，日志文件</li></ol><h2><span id="第5章-远程登录">第5章 远程登录</span></h2><h3><span id="xshell和xftp安装">Xshell和Xftp安装</span></h3><p>xshell和xftp的获取网址</p><p><a href="https://www.netsarang.com/zh/free-for-home-school/">家庭/学校免费 - NetSarang Website</a></p><p>安装都是无脑的。</p><h3><span id="xshell和xftp配置">Xshell和Xftp配置</span></h3><p>linux查看ip地址命令：<code>ifconfig</code></p><p>用目标设备的ip地址连接上就可以，名称可以随意（建议也是IP地址），主机填ip地址（名称填了ip地址会自动填）。</p><p>协议和端口号默认（SSH和22，SFTP和22）</p><h3><span id="xftp中文乱码问题">Xftp中文乱码问题</span></h3><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210919194600.png" alt="image-20210919194559923" style="zoom: 50%;"><h2><span id="第6章-vi和vim编辑器">第6章 Vi和Vim编辑器</span></h2><p>Linux 系统会内置 vi 文本编辑器</p><p>Vim 具有程序编辑的能力，可以看做是 Vi 的增强版本，可以主动的以字体颜色辨别语法的正确性，方便程序设计。<br>代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p><h3><span id="三种模式">三种模式</span></h3><h4><span id="正常模式">正常模式</span></h4><p>以 vim 打开一个档案就直接进入一般模式了(这是默认的模式)。在这个模式中， 你可以使用『上下左右』按键来<br>移动光标，你可以使用『删除字符』或『删除整行』来处理档案内容， 也可以使用『复制、粘贴』来处理你的文件数<br>据。</p><h4><span id="插入模式">插入模式</span></h4><p>按下 i, I, o, O, a, A,r,R 等任何一个字母之后才会进入编辑模式,一般来说<strong>按 i 即可</strong>.</p><h4><span id="命令行模式">命令行模式</span></h4><p>输入 esc 再输入：在这个模式当中， 可以提供你相关指令，完成读取、存盘、替换、离开vim、显示行号等的动作则是在此模式中达成的！</p><h3><span id="相互切换">相互切换</span></h3><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210922180946.png" alt="image-20210922180939000" style="zoom:80%;"><h3><span id="vi-和-vim-快捷键">vi 和 vim 快捷键</span></h3><p>键盘图</p><p><img src="https://img-blog.csdn.net/20170325161428570?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2luYXRfMzYxMDEzNTQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>梳理一下常用的：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">:wq保存退出<br>:q!不保存退出<br>yy,5yy复制<br>p粘贴<br>dd,5dd删除<br>:/[content]查询<br>n下一个<br>:set nu设置行号<br>G末行<br>gg首行<br>u撤销<br>:[location]定位行<br>location + G定位行<br></code></pre></div></td></tr></table></figure><h2><span id="第7章-开机-重启用户登录注销">第7章 开机、重启，用户登录注销</span></h2><h3><span id="关机amp重启">关机&amp;重启</span></h3><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-number">1</span>) <span class="hljs-keyword">shutdown </span>–h now 立该进行关机<br><span class="hljs-number">2</span>) <span class="hljs-keyword">shudown </span>-h <span class="hljs-number">1</span> <span class="hljs-string">&quot;hello, 1 分钟后会关机了&quot;</span><br><span class="hljs-number">3</span>) <span class="hljs-keyword">shutdown </span>–r now 现在重新启动计算机<br><span class="hljs-number">4</span>) halt 关机，作用和上面一样.<br><span class="hljs-number">5</span>) reboot 现在重新启动计算机<br><span class="hljs-number">6</span>) <span class="hljs-keyword">sync </span>把内存的数据同步到磁盘.<br></code></pre></div></td></tr></table></figure><p>shutdown默认是1分钟后关机，</p><p>注意一下</p><ol><li>不管是重启系统还是关闭系统，<font color="red">首先要运行 sync 命令，把内存中的数据写到磁盘中</font></li><li>目前的 shutdown/reboot/halt 等命令均已经在关机前进行了 sync </li></ol><h3><span id="用户登录和注销">用户登录和注销</span></h3><ol><li>登录时尽量少用 root 帐号登录，因为它是系统管理员，最大的权限，避免操作失误。可以利用普通用户登录，<font color="red">登录后再用<code>su - 用户名</code>命令来切换成系统管理员身份</font>。</li><li>在提示符下输入 logout 即可注销用户</li></ol><p>注意</p><ol><li>logout 注销指令在图形运行级别无效，在运行级别 3 （命令行模式）下有效。</li></ol><h2><span id="第8章-用户管理">第8章 用户管理</span></h2><h3><span id="常用命令">常用命令</span></h3><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">useradd 用户名添加用户<br>passwd 用户名修改密码<br>pwd显示当前用户所在的目录<br>userdel 用户名删除用户<br>id 用户名查询用户<br>su - 用户名切换用户<br>whoami / who am I查看当前用户/登录用户<br></code></pre></div></td></tr></table></figure><p>查询结果：</p><p>uid=0(root) gid=0(root) 组=0(root)</p><h3><span id="用户组">用户组</span></h3><p>没有给用户指定组，默认自己就是一组</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mark">groupadd 组名新增组<br>groupdel 组名删除组<br>useradd –g 用户组 用户名指定用户组添加用户<br>usermod –g 用户组 用户名修改用户的组<br></code></pre></div></td></tr></table></figure><p>例子</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">groupadd wudang</span><br><span class="hljs-attribute">useradd -g wudang zwj</span><br></code></pre></div></td></tr></table></figure><p><font color="red">注意是先组后名</font></p><h3><span id="三个文件">三个文件</span></h3><p><strong>/etc/passwd 文件</strong></p><p>用户（user）的配置文件，记录用户的各种信息</p><p>每行的含义：用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录 Shell</p><p><strong>/etc/shadow 文件</strong></p><p>口令的配置文件</p><p>每行的含义：登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</p><p><strong>/etc/group 文件</strong></p><p>组(group)的配置文件，记录 Linux 包含的组的信息</p><p>每行含义：组名:口令:组标识号:组内用户列表</p><h2><span id="第9章-实用指令">第9章 实用指令</span></h2><h3><span id="运行级别说明">运行级别说明</span></h3><p>0 ：关机</p><p>1 ：单用户【找回丢失密码】</p><p>2：多用户状态没有网络服务</p><p><strong>3：多用户状态有网络服务</strong></p><p>4：系统未使用保留给用户</p><p><strong>5：图形界面</strong></p><p>6：系统重启</p><p>常用运行级别是 3 和 5 ，也可以指定默认运行级别， 后面演示</p><p><font color="red">命令：<code>init [0123456]</code> 应用案例： 通过 init 来切换不同的运行级别，比如动 5-3 ， 然后关机。</font></p><h3><span id="centos7-后运行级别说明">CentOS7 后运行级别说明</span></h3><p>在 centos7 以前， /etc/inittab 文件中 .</p><p>进行了简化 ，如下:</p><figure class="highlight dsconfig"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dsconfig"><span class="hljs-string">multi-user</span>.<span class="hljs-string">target</span>: <span class="hljs-string">analogous</span> <span class="hljs-string">to</span> <span class="hljs-string">runlevel</span> <span class="hljs-string">3</span><br><span class="hljs-string">graphical</span>.<span class="hljs-string">target</span>: <span class="hljs-string">analogous</span> <span class="hljs-string">to</span> <span class="hljs-string">runlevel</span> <span class="hljs-string">5</span><br><span class="hljs-comment"># To view current default target, run:</span><br><span class="hljs-string">systemctl</span> <span class="hljs-built_in">get-default</span><br><span class="hljs-comment"># To set a default target, run:</span><br><span class="hljs-string">systemctl</span> <span class="hljs-built_in">set-default</span> <span class="hljs-string">TARGET</span>.<span class="hljs-string">target</span><br></code></pre></div></td></tr></table></figure><h3><span id="找回-root-密码">找回 root 密码</span></h3><p>暂时不学</p><h3><span id="帮助指令">帮助指令</span></h3><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata"><span class="hljs-keyword">man</span>获得帮助信息<span class="hljs-keyword">man</span> <span class="hljs-keyword">ls</span><br><span class="hljs-keyword">help</span>获得<span class="hljs-keyword">shell</span>内置命令的帮助信息<br></code></pre></div></td></tr></table></figure><p>如果英语不太好的，也可以直接百度靠谱。</p><h3><span id="文件目录类">文件目录类</span></h3><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-built_in">pwd</span> 指令显示当前工作目录的绝对路径<br><br><span class="hljs-built_in">ls</span> 指令显示文件<br><span class="hljs-literal">-a</span> 显示当前目录所有的文件和目录，包括隐藏的。<br><span class="hljs-literal">-l</span> 以列表的方式显示信息 等价于ll<br><br><span class="hljs-built_in">cd</span> 指令 切换到指定目录<br><br><span class="hljs-built_in">cd</span> ~ 或者 <span class="hljs-built_in">cd</span> : 回到自己的家目录, 比如 你是 root ， <span class="hljs-built_in">cd</span>~到/root<br><br><span class="hljs-built_in">cd</span> .. 回到当前目录的上一级目录<br><br>mkdir 指令创建目录<br><br><span class="hljs-built_in">rmdir</span> 指令删除空目录<br><br>touch 指令创建空文件<br><br><br><br><span class="hljs-built_in">cp</span> 指令拷贝文件到指定目录<br><br><span class="hljs-built_in">rm</span> 指令移除文件或目录<br><span class="hljs-literal">-r</span> 递归删除整个文件夹<br><span class="hljs-operator">-f</span> 强制删除不提示<br><br><span class="hljs-built_in">mv</span> 指令移动文件与目录或重命名<br><br><br><br><span class="hljs-built_in">cat</span> 指令查看文件内容<br><br>more 指令文本过滤器<br><br><span class="hljs-built_in">echo</span> 指令输出内容到控制台<br><br>head 指令显示文件的开头部分内容，默认情况下 head 指令显示文件的前 <span class="hljs-number">10</span> 行内容<br><br>tail 指令输出文件中尾部的内容，默认情况下 tail 指令显示文件的后 <span class="hljs-number">10</span> 行内容。<br><br>`&gt;`  指令 和 &gt;&gt; 指令&gt; 输出重定向和 &gt;&gt; 追加<br><br>ln <span class="hljs-literal">-s</span> [原文件或目录] [软链接名]软链接(符号链接)，类似于windows里的快捷方式<br><br><span class="hljs-built_in">rm</span> /home/myroot删除软连接<br><br><span class="hljs-built_in">history</span> 指令查看已经执行过历史命令,也可以执行历史指令<br></code></pre></div></td></tr></table></figure><p>more指令文本过滤器内置快捷键</p><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc">[space]向下翻页<br>enter向下翻一行<br>q立刻离开more，不再显示该文件内容<br>ctrl+F向下滚动一屏<br>ctrl+B返回上一屏<br><span class="hljs-section">=输出当前行号</span><br>:f输出文件名和当前行行号<br></code></pre></div></td></tr></table></figure><p>less 指令（根据显示需要加载内容，对于显示大型文件具有较高的效率）</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-attr">[space]</span>向下翻页<br><span class="hljs-selector-attr">[page down]</span>向下翻页<br><span class="hljs-selector-attr">[page up]</span>向上翻页<br>/<span class="hljs-selector-attr">[string]</span>向下寻找字串，n向下寻找，N向上寻找<br>?<span class="hljs-selector-attr">[string]</span>向上寻找字串，n向下寻找，N向上寻找<br><span class="hljs-selector-tag">q</span>离开程序<br></code></pre></div></td></tr></table></figure><h3><span id="时间日期类">时间日期类</span></h3><figure class="highlight perl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs perl"><span class="hljs-number">1</span>)date （功能描述：显示当前时间）<br><br><span class="hljs-number">2</span>)date +%Y （功能描述：显示当前年份）<br><br><span class="hljs-number">3</span>)date +%m（功能描述：显示当前月份）<br><br><span class="hljs-number">4</span>)date +%d （功能描述：显示当前是哪一天）<br><br><span class="hljs-number">5</span>)date <span class="hljs-string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span>（功能描述：显示年月日时分秒）<br></code></pre></div></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript"><span class="hljs-built_in">date</span> -s 字符串时间设置日期<br><br>cal 指令查看日历指令<br></code></pre></div></td></tr></table></figure><h3><span id="搜索查找类">搜索查找类</span></h3><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"><span class="hljs-keyword">find</span> [搜索范围.当前/所有] [选项][要找的内容，支持通配符]<br>-name按照指定的文件名寻找<br>-user寻找属于指定用户名的文件<br>-size按指定的文件大小寻找<br><br><span class="hljs-keyword">find</span> / -name “ins*” 查找文件名称是以ins开头的文件<br><span class="hljs-keyword">find</span> / -name “ins*” –<span class="hljs-keyword">ls</span><br><br><span class="hljs-keyword">find</span> / –user itcast –<span class="hljs-keyword">ls</span> 查找用户itcast的文件<br><span class="hljs-keyword">find</span> / –user itcast –<span class="hljs-built_in">type</span> d –<span class="hljs-keyword">ls</span> 查找用户itcast的目录<br><span class="hljs-keyword">find</span> / -perm -<span class="hljs-number">777</span> –<span class="hljs-built_in">type</span> d-<span class="hljs-keyword">ls</span> 查找权限是<span class="hljs-number">777</span>的文件<br><br>locate 指令可以快速定位文件路径。(通过数据库查找，比<span class="hljs-keyword">find</span>快)<br>第一次运行前，必须使用 updatedb 指令创建 locate 数据库。<br><br>which 指令可以查看某个指令在哪个目录下，比如 <span class="hljs-keyword">ls</span> 指令在哪个目录which <span class="hljs-keyword">ls</span><br><br>|管道,其作用是将一个命令的输出用作另一个命令的输入<br><br><span class="hljs-keyword">grep</span> [选项] 查找内容 源文件<br>-n显示匹配行及行号<br>-i忽略字母大小写<br><br><span class="hljs-keyword">ps</span> –ef | <span class="hljs-keyword">grep</span> java  查询名称中包含java的进程<br></code></pre></div></td></tr></table></figure><h3><span id="压缩和解压类">压缩和解压类</span></h3><figure class="highlight haml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haml">gzip/gunzip 指令gzip 用于压缩文件， gunzip 用于解压的<br><br>zip/unzip 指令zip 用于压缩文件， unzip 用于解压的，这个在项目打包发布中很有用的<br><br>tar 指令它能够将用户所指定的文件或目录打包成一个文件，但不做压缩。一般Linux上常用的压缩方式是选用tar将许多文件打包成一个文件，再以gzip压缩命令压缩成xxx.tar.gz(或称为xxx.tgz)的文件。<br>-<span class="ruby">c：创建一个新tar文件</span><br><span class="ruby"></span>    -<span class="ruby">v：显示运行过程的信息</span><br><span class="ruby"></span>    -<span class="ruby">f：指定文件名</span><br><span class="ruby"></span>    -<span class="ruby">z：调用gzip压缩命令进行压缩</span><br><span class="ruby"></span>    -<span class="ruby">t：查看压缩文件的内容</span><br><span class="ruby"></span>    -<span class="ruby">x：解开tar文件</span><br><span class="ruby"></span><br>打包：<br>tar –cvf xxx.tar ./*<br>打包并且压缩：<br>tar –zcvf xxx.tar.gz ./* <br><br>解压 <br>     tar –xvf xxx.tar<br>tar -zxvf xxx.tar.gz -C /usr/aaa<br></code></pre></div></td></tr></table></figure><h2><span id="第10章-组管理和权限管理">第10章 组管理和权限管理</span></h2><p>在Linux中，每个用户必须属于一个组，不能独立于组外。在Linux中，每个文件，有<strong>所有者、所在组、其他组</strong>三个概念。</p><h3><span id="文件目录-所有者">文件/目录 所有者</span></h3><p>一般为文件的创建者,谁创建了该文件，就自然的成为该文件的所有者。</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">ll</span>查看当前目录下文件的详细信息，就能看到所有者<br></code></pre></div></td></tr></table></figure><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210922185039.png" alt="image-20210922185039113" style="zoom:50%;"><figure class="highlight perl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs perl"><span class="hljs-keyword">chown</span> 用户名 文件名修改文件所有者<br></code></pre></div></td></tr></table></figure><h3><span id="组的创建">组的创建</span></h3><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">groupadd</span> 组名创建组<br><br>useradd -g monster fox创建一个用户 fox ，并放入到 monster 组中<br></code></pre></div></td></tr></table></figure><h3><span id="文件目录-所在组">文件/目录 所在组</span></h3><p>当某个用户创建了一个文件后，这个文件的所在组就是该用户所在的组(默认)。</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">ll</span>查看当前目录下文件的详细信息，就能看到所在组<br></code></pre></div></td></tr></table></figure><h3><span id="修改文件目录所在的组">修改文件/目录所在的组</span></h3><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">chgrp</span> 组名 文件名修改文件/目录所在的组<br></code></pre></div></td></tr></table></figure><h3><span id="其它组">其它组</span></h3><p>除文件的所有者和所在组的用户外，系统的其它用户都是文件的其它组</p><h3><span id="改变用户所在组">改变用户所在组</span></h3><p>在添加用户时，可以指定将该用户添加到哪个组中，同样的用 root 的管理权限可以改变某个用户所在的组。</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">usermod</span> –g 新组名 用户名<br>usermod –d 目录名 用户名改变该用户登陆的初始目录。特别说明：用户需要有进入到新目录的权限。<br></code></pre></div></td></tr></table></figure><h3><span id="权限的基本介绍">权限的基本介绍</span></h3><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">-rwxrw-r-- <span class="hljs-number">1</span> root root <span class="hljs-number">1213</span> Feb <span class="hljs-number">2</span> <span class="hljs-number">09</span>:<span class="hljs-number">39</span> abc<br><br><span class="hljs-number">0</span>-<span class="hljs-number">9</span> 位说明<br>第 <span class="hljs-number">0</span> 位确定文件类型(d, - , l , c , b)<br>l 是链接，相当于 windows 的快捷方式<br>d 是目录，相当于 windows 的文件夹<br>c 是字符设备文件，鼠标，键盘<br>b 是块设备，比如硬盘<br>第 <span class="hljs-number">1</span>-<span class="hljs-number">3</span> 位确定所有者（该文件的所有者）拥有该文件的权限。---<span class="hljs-keyword">User</span><br><span class="hljs-title">第 4-6</span> 位确定所属组（同用户组的）拥有该文件的权限，---<span class="hljs-keyword">Group</span><br><span class="hljs-title">第 7-9</span> 位确定其他用户拥有该文件的权限 ---Other<br></code></pre></div></td></tr></table></figure><h3><span id="rwx-权限详解难点">rwx 权限详解，难点</span></h3><h4><span id="rwx-作用到文件">rwx 作用到文件</span></h4><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-selector-tag">1</span>) <span class="hljs-selector-attr">[ r ]</span>代表可读(read): 可以读取,查看<br><br><span class="hljs-selector-tag">2</span>) <span class="hljs-selector-attr">[ w ]</span>代表可写(write): 可以修改,但是不代表可以删除该文件,删除一个文件的前提条件是对该文件所在的目录有写权<br>限，才能删除该文件.<br><br><span class="hljs-selector-tag">3</span>) <span class="hljs-selector-attr">[ x ]</span>代表可执行(execute):可以被执行<br></code></pre></div></td></tr></table></figure><h4><span id="rwx-作用到目录">rwx 作用到目录</span></h4><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-selector-tag">1</span>) <span class="hljs-selector-attr">[ r ]</span>代表可读(read): 可以读取，<span class="hljs-selector-tag">ls</span> 查看目录内容<br><br><span class="hljs-selector-tag">2</span>) <span class="hljs-selector-attr">[ w ]</span>代表可写(write): 可以修改, 对目录内创建+删除+重命名目录<br><br><span class="hljs-selector-tag">3</span>) <span class="hljs-selector-attr">[ x ]</span>代表可执行(execute):可以进入该目录<br></code></pre></div></td></tr></table></figure><h3><span id="修改权限-chmod">修改权限-chmod</span></h3><p>通过 chmod 指令，可以修改文件或者目录的权限。</p><h4><span id="第一种方式-变更权限">第一种方式：+ 、-、= 变更权限</span></h4><figure class="highlight perl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs perl">u:所有者 g:所有组 o:其他人 a:所有人(u、g、o 的总和)<br><br><span class="hljs-number">1</span>) <span class="hljs-keyword">chmod</span> u=rwx,g=rx,o=<span class="hljs-keyword">x</span> 文件/目录名<br><br><span class="hljs-number">2</span>) <span class="hljs-keyword">chmod</span> o+w 文件/目录名<br><br><span class="hljs-number">3</span>) <span class="hljs-keyword">chmod</span> a-<span class="hljs-keyword">x</span> 文件/目录名<br></code></pre></div></td></tr></table></figure><h4><span id="第二种方式通过数字变更权限">第二种方式：通过数字变更权限</span></h4><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros"><span class="hljs-attribute">r</span>=4 <span class="hljs-attribute">w</span>=2 <span class="hljs-attribute">x</span>=1 <span class="hljs-attribute">rwx</span>=4+2+1=7<br><br>chmod <span class="hljs-attribute">u</span>=rwx,g=rx,o=x 文件目录名<br><br>相当于 chmod 751 文件/目录名<br></code></pre></div></td></tr></table></figure><h3><span id="修改文件所有者-chown">修改文件所有者-chown</span></h3><figure class="highlight haxe"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haxe">chown <span class="hljs-keyword">new</span><span class="hljs-type">owner</span> 文件/目录 改变所有者<br><br>chown <span class="hljs-keyword">new</span><span class="hljs-type">owner</span>:<span class="hljs-keyword">new</span><span class="hljs-type">group</span> 文件/目录 改变所有者和所在组<br><br>-R 如果是目录 则使其下所有子文件或目录递归生效<br></code></pre></div></td></tr></table></figure><h3><span id="修改文件目录所在组-chgrp">修改文件/目录所在组-chgrp</span></h3><figure class="highlight haxe"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haxe">chgrp <span class="hljs-keyword">new</span><span class="hljs-type">group</span> 文件/目录 改变所在组<br></code></pre></div></td></tr></table></figure><h3><span id="最佳实践-警察和土匪游戏">最佳实践-警察和土匪游戏</span></h3><p>police ， bandit<br>jack, jerry: 警察<br>xh, xq: 土匪</p><ol><li>创建组 groupadd police ; groupadd bandit</li><li>创建用户<br>useradd -g police jack ; useradd -g police jerry<br>useradd -g bandit xh; useradd -g bandit xq</li><li>jack 创建一个文件，自己可以读 r 写 w，本组人可以读，其它组没人任何权限<br>首先 jack 登录 ； vim jack.txt ; chmod 640 jack.txt</li><li>jack 修改该文件，让其它组人可以读, 本组人可以读写<br>chmod o=r,g=r jack.txt</li><li>xh 投靠 警察，看看是否可以读写.<br>usermod -g police xh</li><li>测试，看看 xh 是否可以读写，xq 是否可以, 小结论，就是如果要对目录内的文件进行操作，需要要有对该目录的<br>相应权限</li></ol><h3><span id="课后练习">课后练习</span></h3><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-selector-tag">1</span>) 建立两个组（神仙(sx),妖怪(yg)）<br><br><span class="hljs-selector-tag">2</span>) 建立四个用户(唐僧,悟空，八戒，沙僧)<br><br><span class="hljs-selector-tag">3</span>) 设置密码<br><br><span class="hljs-selector-tag">4</span>) 把悟空，八戒放入妖怪，唐僧沙僧在神仙<br><br><span class="hljs-selector-tag">5</span>) 用悟空建立一个文件 （<span class="hljs-selector-tag">monkey</span><span class="hljs-selector-class">.java</span> 该文件要输出<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">am</span> <span class="hljs-selector-tag">monkey</span>）<br><br><span class="hljs-selector-tag">6</span>) 给八戒一个可以 <span class="hljs-selector-tag">r</span> <span class="hljs-selector-tag">w</span> 的权限<br><br><span class="hljs-selector-tag">7</span>) 八戒修改 <span class="hljs-selector-tag">monkey</span><span class="hljs-selector-class">.java</span> 加入一句话( i am pig)<br><br><span class="hljs-selector-tag">8</span>) 唐僧 沙僧 对该文件没有权限<br><br><span class="hljs-selector-tag">9</span>) 把 沙僧 放入妖怪组<br><br><span class="hljs-selector-tag">10</span>) 让沙僧 修改 该文件 <span class="hljs-selector-tag">monkey</span>, 加入一句话 (<span class="hljs-string">&quot;我是沙僧，我是妖怪!&quot;</span>);<br><br><span class="hljs-selector-tag">11</span>)<br>对文件夹 <span class="hljs-selector-tag">rwx</span> 的细节讨论和测试!!!<br><span class="hljs-selector-tag">x</span>: 表示可以进入到该目录, 比如 <span class="hljs-selector-tag">cd</span><br><span class="hljs-selector-tag">r</span>: 表示可以 <span class="hljs-selector-tag">ls</span> , 将目录的内容显示<br><span class="hljs-selector-tag">w</span>: 表示可以在该目录，删除或者创建文件<br></code></pre></div></td></tr></table></figure><h3><span id="课后练习2">课后练习2</span></h3><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>) 用 root 登录，建立用户 mycentos,自己设定密码<br><br><span class="hljs-attribute">2</span>) 用 mycentos 登录，在主目录下建立目录 test/t<span class="hljs-number">11</span>/t<span class="hljs-number">1</span><br><br><span class="hljs-attribute">3</span>) 在 t<span class="hljs-number">1</span> 中建立一个文本文件 aa,用 vi 编辑其内容为 ls –al<br><br><span class="hljs-attribute">4</span>) 改变 aa 的权限为可执行文件[可以将当前日期追加到一个文件],运行该文件./aa<br><br><span class="hljs-attribute">5</span>) 删除新建立的目录 test/t<span class="hljs-number">11</span>/t<span class="hljs-number">1</span><br><br><span class="hljs-attribute">6</span>) 删除用户 mycentos 及其主目录中的内容<br><br><span class="hljs-attribute">7</span>) 将 linux 设置成进入到图形界面的<br><br><span class="hljs-attribute">8</span>) 重新启动 linux 或关机<br></code></pre></div></td></tr></table></figure><h2><span id="第11章-定时任务调度次要">第11章 定时任务调度（次要）</span></h2><h3><span id="crond-任务调度定时run">crond 任务调度（定时run）</span></h3><h4><span id="相关命令">相关命令</span></h4><figure class="highlight haml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haml">crontab<br>-<span class="ruby">e编辑crontab定时任务</span><br><span class="ruby"></span>-<span class="ruby">l查询crontab任务</span><br><span class="ruby"></span>-<span class="ruby">r删除当前用户所有的crontab任务</span><br><span class="ruby"></span><br>service crond restart [重启任务调度]<br></code></pre></div></td></tr></table></figure><h4><span id="快速入门">快速入门</span></h4><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">设置任务调度文件（一般不用）：<span class="hljs-regexp">/etc/</span>crontab<br><br>设置个人任务调度。执行 crontab –e 命令。<br><br>接着输入任务到调度文件<br>如：*<span class="hljs-regexp">/1 * * * * ls –l /</span>etc<span class="hljs-regexp">/ &gt; /</span>tmp/to.txt<br>意思说每小时的每分钟执行 ls –l <span class="hljs-regexp">/etc/</span> &gt; <span class="hljs-regexp">/tmp/</span>to.txt 命令<br></code></pre></div></td></tr></table></figure><h4><span id="参数说明">参数说明</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926182742.png" alt="image-20210926182735851"></p><h4><span id="特殊符号的说明">特殊符号的说明</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926182748.png" alt="image-20210926182747954"></p><h4><span id="特殊时间执行案例">特殊时间执行案例</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926182822.png" alt="image-20210926182822569"></p><h4><span id="应用案例">应用案例</span></h4><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">案例 <span class="hljs-number">1</span>：每隔 <span class="hljs-number">1</span> 分钟，就将当前的日期信息，追加到 <span class="hljs-regexp">/tmp/my</span>date 文件中<br>*<span class="hljs-regexp">/1 * * * * date &gt;&gt; /</span>tmp/mydate<br><br>案例 <span class="hljs-number">2</span>：每隔 <span class="hljs-number">1</span> 分钟， 将当前日期和日历都追加到 <span class="hljs-regexp">/home/my</span>cal 文件中<br>步骤:<br>(<span class="hljs-number">1</span>) vim <span class="hljs-regexp">/home/my</span>.sh 写入内容 date &gt;&gt; <span class="hljs-regexp">/home/my</span>cal 和 cal &gt;&gt; <span class="hljs-regexp">/home/my</span>cal<br>(<span class="hljs-number">2</span>) 给 my.sh 增加执行权限，chmod u+x <span class="hljs-regexp">/home/my</span>.sh<br>(<span class="hljs-number">3</span>) crontab -e 增加 *<span class="hljs-regexp">/1 * * * * /</span>home/my.sh<br><br>案例 <span class="hljs-number">3</span>: 每天凌晨 <span class="hljs-number">2</span>:<span class="hljs-number">00</span> 将 mysql 数据库 testdb ，备份到文件中。提示:指令为<br>mysqldump -u root -p 密码 数据库 &gt; <span class="hljs-regexp">/home/</span>db.bak<br>步骤(<span class="hljs-number">1</span>) crontab -e<br>步骤(<span class="hljs-number">2</span>) <span class="hljs-number">0</span> <span class="hljs-number">2</span> * * * mysqldump -u root -proot testdb &gt; <span class="hljs-regexp">/home/</span>db.bak<br></code></pre></div></td></tr></table></figure><h3><span id="at-定时任务一次定时run">at 定时任务（一次定时run）</span></h3><h4><span id="相关命令">相关命令</span></h4><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada"><span class="hljs-keyword">at</span> [选项] [时间]<br><br>Ctrl + D 结束 <span class="hljs-keyword">at</span> 命令的输入，输出两次<br></code></pre></div></td></tr></table></figure><h4><span id="at-命令选项">at 命令选项</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926183340.png" alt="image-20210926183340444"></p><h4><span id="at-时间定义">at 时间定义</span></h4><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>）接受在当天的 hh:mm（小时:分钟）式的时间指定。假如该时间已过去，那么就放在第二天执行。 例如：<span class="hljs-number">04</span>:<span class="hljs-number">00</span><br><br><span class="hljs-attribute">2</span>）使用 midnight（深夜），noon（中午），teatime（饮茶时间，一般是下午 <span class="hljs-number">4</span> 点）等比较模糊的词语来指定时间。<br><br><span class="hljs-attribute">3</span>）采用 <span class="hljs-number">12</span> 小时计时制，即在时间后面加上 AM（上午）或 PM（下午）来说明是上午还是下午。 例如：<span class="hljs-number">12</span>pm<br><br><span class="hljs-attribute">4</span>）指定命令执行的具体日期，指定格式为 month day（月 日）或 mm/dd/yy（月/日/年）或 dd.mm.yy（日.月.年），指定的日期必须跟在指定时间的后面。 例如：<span class="hljs-number">04</span>:<span class="hljs-number">00</span> <span class="hljs-number">2021</span>-<span class="hljs-number">03</span>-<span class="hljs-number">1</span><br><br><span class="hljs-attribute">5</span>）使用相对计时法。指定格式为：now + count time-units ，now 就是当前时间，time-units 是时间单位，这里能够是 minutes（分钟）、hours（小时）、days（天）、weeks（星期）。count 是时间的数量，几天，几小时。 例如：now + <span class="hljs-number">5</span> minutes<br><br><span class="hljs-attribute">6</span>）直接使用 today（今天）、tomorrow（明天）来指定完成命令的时间。<br></code></pre></div></td></tr></table></figure><h4><span id="应用实例">应用实例</span></h4><p>案例 1：2 天后的下午 5 点执行 /bin/ls /home</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926183707.png" alt="image-20210926183707804"></p><p>案例 2：atq 命令来查看系统中没有执行的工作任务</p><p>案例 3：明天 17 点钟，输出时间到指定文件内 比如/root/date100.log</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926183724.png" alt="image-20210926183724925"></p><p>案例 4：2 分钟后，输出时间到指定文件内比如/root/date200.log</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926183736.png" alt="image-20210926183736358"></p><p>案例 5：删除已经设置的任务 , atrm 编号</p><p>atrm 4 //表示将 job 队列，编号为 4 的 job 删除.</p><h2><span id="第12章-linux-磁盘分区-挂载次要">第12章 Linux 磁盘分区、挂载（次要）</span></h2><h3><span id="示意图">示意图</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926183829.png" alt="image-20210926183829048"></p><h3><span id="硬盘说明">硬盘说明</span></h3><p>Linux 硬盘分 IDE 硬盘和 SCSI 硬盘，目前基本上是 SCSI 硬盘</p><p>对于 IDE 硬盘，驱动器标识符为“hdx~”</p><p>“hd”表明分区所在设备的类型，这里是指 IDE 硬盘了。</p><p>“x”为盘号（a 为基本盘，b 为基本从属盘，c 为辅助主盘，d 为辅助从属盘）</p><p>“~”代表分区，前四个分区用数字 1 到 4 表示，它们是主分区或扩展分区，从 5 开始就是逻辑分区。例，hda3 表示为第一个 IDE 硬盘上的第三个主分区或扩展分区,hdb2表示为第二个 IDE 硬盘上的第二个主分区或扩展分区。</p><p>对于 SCSI 硬盘则标识为“sdx~”，SCSI 硬盘是用“sd”来表示分区所在设备的类型的，其余则和 IDE 硬盘的表示方法一样</p><h3><span id="查看所有设备挂载情况">查看所有设备挂载情况</span></h3><p><font color="red">命令 ：lsblk 或者 lsblk -f</font></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926184024.png" alt="image-20210926184024603"></p><h3><span id="挂载的经典案例">挂载的经典案例</span></h3><p>下面我们以增加一块硬盘为例来熟悉下磁盘的相关指令和深入理解磁盘分区、挂载、卸载的概念。</p><h4><span id="如何增加一块硬盘">如何增加一块硬盘</span></h4><ol><li>虚拟机添加硬盘</li><li>分区</li><li>格式化</li><li>挂载</li><li>设置可以自动挂载</li></ol><h4><span id="虚拟机增加硬盘步骤1">虚拟机增加硬盘步骤1</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926184103.png" alt="image-20210926184102995"></p><h4><span id="虚拟机增加硬盘步骤2">虚拟机增加硬盘步骤2</span></h4><p><font color="red">分区命令 fdisk /dev/sdb</font></p><p>开始对/sdb 分区<br>m 显示命令列表<br>p 显示磁盘分区 同 fdisk –l<br>n 新增分区<br>d 删除分区<br>w 写入并退出</p><p>说明： 开始分区后输入 n，新增分区，然后选择 p，分区类型为主分区。两次回车默认剩余全部空间。最后输入 w写入分区并退出，若不保存退出输入 q。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926184140.png" alt="image-20210926184140266"></p><h4><span id="虚拟机增加硬盘步骤3">虚拟机增加硬盘步骤3</span></h4><p>格式化磁盘<br>分区命令:mkfs -t ext4 /dev/sdb1<br>其中 ext4 是分区类型</p><h4><span id="虚拟机增加硬盘步骤4">虚拟机增加硬盘步骤4</span></h4><p>挂载: 将一个分区与一个目录联系起来，</p><p><font color="red">mount 设备名称 挂载目录</font></p><p>例如： mount /dev/sdb1 /newdisk</p><p><font color="red">umount 设备名称 或者 挂载目录</font></p><p>umount /dev/sdb1 或者 umount /newdisk</p><p><font color="blue">注意：用命令行挂载,重启后会失效</font></p><h4><span id="虚拟机增加硬盘步骤5">虚拟机增加硬盘步骤5</span></h4><p>永久挂载: 通过修改/etc/fstab 实现挂载</p><p>添加完成后 执行 mount –a 即刻生效</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926184312.png" alt="image-20210926184312198"></p><h3><span id="磁盘情况查询">磁盘情况查询</span></h3><h4><span id="查询系统整体磁盘使用情况">查询系统整体磁盘使用情况</span></h4><p><font color="red">df -h</font></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926184332.png" alt="image-20210926184331938"></p><h4><span id="查询指定目录的磁盘占用情况">查询指定目录的磁盘占用情况</span></h4><figure class="highlight haml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haml">du -h<br>-<span class="ruby">s 指定目录占用大小汇总</span><br><span class="ruby"></span>-<span class="ruby">h 带计量单位</span><br><span class="ruby"></span>-<span class="ruby">a 含文件</span><br><span class="ruby"></span>-<span class="ruby">-max-depth=<span class="hljs-number">1</span> 子目录深度</span><br><span class="ruby"></span>-<span class="ruby">c 列出明细的同时，增加汇总值</span><br></code></pre></div></td></tr></table></figure><p>应用实例</p><p>查询 /opt 目录的磁盘占用情况，深度为 1</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926184401.png" alt="image-20210926184401742"></p><h3><span id="磁盘情况-工作实用指令">磁盘情况-工作实用指令</span></h3><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"><span class="hljs-number">1</span>) 统计/<span class="hljs-keyword">opt</span> 文件夹下文件的个数<br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span> /<span class="hljs-keyword">opt</span> | <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;^-&quot;</span> | wc -<span class="hljs-keyword">l</span><br><br><span class="hljs-number">2</span>) 统计/<span class="hljs-keyword">opt</span> 文件夹下目录的个数<br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span> /<span class="hljs-keyword">opt</span> | <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;^d&quot;</span> | wc -<span class="hljs-keyword">l</span><br><br><span class="hljs-number">3</span>) 统计/<span class="hljs-keyword">opt</span> 文件夹下文件的个数，包括子文件夹里的<br><span class="hljs-keyword">ls</span> -lR /<span class="hljs-keyword">opt</span> | <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;^-&quot;</span> | wc -<span class="hljs-keyword">l</span><br><br><span class="hljs-number">4</span>)统计/<span class="hljs-keyword">opt</span> 文件夹下目录的个数，包括子文件夹里的<br><span class="hljs-keyword">ls</span> -lR /<span class="hljs-keyword">opt</span> | <span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;^d&quot;</span> | wc -<span class="hljs-keyword">l</span><br><br><span class="hljs-number">5</span>)以树状显示目录结构 tree 目录 ， 注意，如果没有 tree ,则使用yum install tree安装<br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926184451.png" alt="image-20210926184451146"></p><h2><span id="第13章-网络配置重要">第13章 网络配置（重要）</span></h2><h3><span id="原理图">原理图</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926184549.png" alt="image-20210926184549104"></p><h3><span id="查看网络ip-和网关">查看网络IP 和网关</span></h3><h4><span id="查看虚拟网络编辑器和修改ip-地址">查看虚拟网络编辑器和修改IP 地址</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926184618.png" alt="image-20210926184618735"></p><h4><span id="查看网关">查看网关</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926184630.png" alt="image-20210926184630814"></p><h4><span id="查看-windows-环境的中-vmnet8-网络配置-ipconfig-指令">查看 windows 环境的中 VMnet8 网络配置 (ipconfig 指令)</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926184644.png" alt="image-20210926184644771"></p><h4><span id="查看-linux-的网络配置-ifconfig">查看 linux 的网络配置 ifconfig</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926184652.png" alt="image-20210926184652884"></p><h3><span id="ping-测试主机之间网络连通性">ping 测试主机之间网络连通性</span></h3><p><font color="red">ping 目的主机 （功能描述：测试当前服务器是否可以连接目的主机）</font></p><h3><span id="linux-网络环境配置">linux 网络环境配置</span></h3><h4><span id="第一种方法自动获取dhcp">第一种方法(自动获取DHCP)</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926184824.png" alt="image-20210926184823942"></p><h4><span id="第二种方法指定ip">第二种方法(指定ip)</span></h4><p>图形化界面的操作就不说了，下面说明一下命令行方式的设置ip（一般作为服务器都会固定一下ip地址）</p><p><font color="red">编辑 vi /etc/sysconfig/network-scripts/ifcfg-ens33</font></p><p>要求：将 ip 地址配置的静态的，比如: ip 地址为 192.168.200.130</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">ifcfg-ens33 文件说明<br><span class="hljs-attribute">DEVICE</span>=eth0 #接口名（设备,网卡）<br><span class="hljs-attribute">HWADDR</span>=00:0C:2x:6x:0x:xx #MAC 地址<br><span class="hljs-attribute">TYPE</span>=Ethernet #网络类型（通常是 Ethemet）<br><span class="hljs-attribute">UUID</span>=926a57ba-92c6-4231-bacb-f27e5e6a9f44 #随机 id<br><span class="hljs-comment">#系统启动的时候网络接口是否有效（yes/no）</span><br><span class="hljs-attribute">ONBOOT</span>=<span class="hljs-literal">yes</span><br><span class="hljs-comment"># IP 的配置方法[none|static|bootp|dhcp]（引导时不使用协议|静态分配 IP|BOOTP 协议|DHCP 协议）</span><br><span class="hljs-attribute">BOOTPROTO</span>=static<br><span class="hljs-comment">#IP 地址</span><br><span class="hljs-attribute">IPADDR</span>=192.168.200.130<br><span class="hljs-comment">#网关</span><br><span class="hljs-attribute">GATEWAY</span>=192.168.200.2<br><span class="hljs-comment">#域名解析器</span><br><span class="hljs-attribute">DNS1</span>=192.168.200.2<br><br>重启网络服务或者重启系统生效<span class="hljs-built_in"></span><br><span class="hljs-built_in">service network </span>restart 、reboot<br></code></pre></div></td></tr></table></figure><h3><span id="设置主机名和hosts-映射">设置主机名和hosts 映射</span></h3><h4><span id="设置主机名">设置主机名</span></h4><p>为了方便记忆，可以给 linux 系统设置主机名,也可以根据需要修改主机名</p><p><font color="red">指令 hostname ： 查看主机名</font></p><p><font color="red">修改文件在 /etc/hostname 指定</font></p><p>修改后，重启生效reboot</p><h4><span id="设置hosts-映射">设置hosts 映射</span></h4><p><strong>windows</strong></p><p>在 C:\Windows\System32\drivers\etc\hosts</p><p>文件指定即可</p><p>案例: 192.168.200.130 wp100</p><p><strong>linux</strong></p><p>在 /etc/hosts文件指定</p><p>案例: 192.168.200.1 ThinkPad-PC</p><h4><span id="主机名解析过程分析hosts-dns">主机名解析过程分析(Hosts、DNS)</span></h4><h4><span id="hosts-是什么">Hosts 是什么</span></h4><p>一个文本文件，用来记录 IP 和 Hostname(主机名)的映射关系</p><h4><span id="dns">DNS</span></h4><p>DNS，就是 Domain Name System 的缩写，翻译过来就是域名系统<br>是互联网上作为域名和 IP 地址相互映射的一个分布式数据库</p><h2><span id="第14章-进程管理重要">第14章 进程管理（重要）</span></h2><p>有空再学一遍</p><h3><span id="示意图">示意图</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926192305.png" alt="image-20210926192305205"></p><h3><span id="显示系统执行的进程">显示系统执行的进程</span></h3><p><font color="red">ps 命令</font>是用来查看目前系统中，有哪些正在执行，以及它们执行的状况。可以不加任何参数.</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926193648.png" alt="image-20210926193648127"></p><h4><span id="ps-详解">ps 详解</span></h4><ol><li>指令：ps –aux|grep xxx ，比如我看看有没有 sshd 服务</li><li>指令说明<br>System V 展示风格<br>USER：用户名称<br>PID：进程号<br>%CPU：进程占用 CPU 的百分比<br>%MEM：进程占用物理内存的百分比<br>VSZ：进程占用的虚拟内存大小（单位：KB）<br>RSS：进程占用的物理内存大小（单位：KB）<br>TT：终端名称,缩写 .<br>STAT：进程状态，其中 S-睡眠，s-表示该进程是会话的先导进程，N-表示进程拥有比普通优先级更低的优先级，R-<br>正在运行，D-短期等待，Z-僵死进程，T-被跟踪或者被停止等等<br>STARTED：进程的启动时间<br>TIME：CPU 时间，即进程使用 CPU 的总时间<br>COMMAND：启动进程所用的命令和参数，如果过长会被截断显示</li></ol><h4><span id="应用实例">应用实例</span></h4><p>要求：以全格式显示当前所有的进程，查看进程的父进程。 查看 sshd 的父进程信息<br>ps -ef 是以全格式显示当前所有的进程<br>-e 显示所有进程。-f 全格式<br>ps -ef|grep sshd</p><p>是 BSD 风格</p><p>UID：用户 ID<br>PID：进程 ID<br>PPID：父进程 ID</p><p>C：CPU 用于计算执行优先级的因子。数值越大，表明进程是 CPU 密集型运算，执行优先级会降低；数值越小，表明进程是 I/O 密集型运算，执行优先级会提高</p><p>STIME：进程启动的时间<br>TTY：完整的终端名称<br>TIME：CPU 时间<br>CMD：启动进程所用的命令和参数</p><h3><span id="终止进程kill-和-killall">终止进程kill 和 killall</span></h3><h4><span id="基本语法">基本语法</span></h4><p><font color="red">kill [选项] 进程号（功能描述：通过进程号杀死/终止进程）</font><br><font color="red">killall 进程名称 （功能描述：通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用）</font></p><h4><span id="常用选项">常用选项</span></h4><p>-9 :表示强迫进程立即停止</p><h4><span id="案例">案例</span></h4><ol><li>案例 1：踢掉某个非法登录用户<br>kill 进程号 , 比如 kill 11421</li><li>案例 2: 终止远程登录服务 sshd, 在适当时候再次重启 sshd 服务<br>kill sshd 对应的进程号; /bin/systemctl start sshd.service</li><li>案例 3: 终止多个 gedit , 演示 killall gedit</li><li>案例 4：强制杀掉一个终端, 指令 kill -9 bash 对应的进程号</li></ol><h3><span id="查看进程树-pstree">查看进程树 pstree</span></h3><h4><span id="基本语法">基本语法</span></h4><p>pstree [选项] ,可以更加直观的来看进程信息</p><h4><span id="常用选项">常用选项</span></h4><p>-p :显示进程的 PID<br>-u :显示进程的所属用户</p><h4><span id="应用实例">应用实例</span></h4><p>案例 1：请你树状的形式显示进程的 pid<br>pstree -p</p><p>案例 2：请你树状的形式进程的用户<br>pstree -u</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926205634.png" alt="image-20210926194714712"></p><h3><span id="服务service管理">服务(service)管理</span></h3><p>服务(service) 本质就是进程，但是是运行在后台的，通常都会监听某个端口，等待其它程序的请求，比如(mysqld,sshd防火墙等)，因此我们又称为守护进程，是 Linux 中非常重要的知识点。【原理图】</p><h4><span id="service-管理指令">service 管理指令</span></h4><p>1)service 服务名 [start | stop | restart | reload | status]</p><p>2)在 CentOS7.0 后 很多服务不再使用 service ,而是 systemctl (后面专门讲)</p><p>3)service 指令管理的服务在 /etc/init.d 查看</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926194804.png" alt="image-20210926194804882"></p><h4><span id="service-管理指令案例">service 管理指令案例</span></h4><p>请使用 service 指令，查看，关闭，启动network</p><p>[注意：在虚拟系统演示，因为网络连接会关闭]</p><p>指令:</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">service<span class="hljs-built_in"> network </span>status<span class="hljs-built_in"></span><br><span class="hljs-built_in">service network </span>stop<span class="hljs-built_in"></span><br><span class="hljs-built_in">service network </span>start<br></code></pre></div></td></tr></table></figure><h4><span id="查看服务名">查看服务名</span></h4><p>方式 1：使用 setup -&gt; 系统服务就可以看到全部。</p><p>setup</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926194856.png" alt="image-20210926194855919"></p><p>方式 2: /etc/init.d 看到 service 指令管理的服务<br>ls -l /etc/init.d</p><h4><span id="服务的运行级别runlevel">服务的运行级别(runlevel)</span></h4><p>Linux 系统有 7 种运行级别(runlevel)：常用的是级别 3 和 5<br>运行级别 0：系统停机状态，系统默认运行级别不能设为 0，否则不能正常启动<br>运行级别 1：单用户工作状态，root 权限，用于系统维护，禁止远程登陆<br>运行级别 2：多用户状态(没有 NFS)，不支持网络<br>运行级别 3：完全的多用户状态(有 NFS)，无界面，登陆后进入控制台命令行模式<br>运行级别 4：系统未使用，保留<br>运行级别 5：X11 控制台，登陆后进入图形 GUI 模式<br>运行级别 6：系统正常关闭并重启，默认运行级别不能设为 6，否则不能正常启动</p><p>开机的流程说明：</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926195049.png" alt="image-20210926195049474"></p><h4><span id="centos7-后运行级别说明">CentOS7 后运行级别说明</span></h4><figure class="highlight dsconfig"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dsconfig">在 /<span class="hljs-string">etc</span>/<span class="hljs-string">initab</span><br>进行了简化 ，如下:<br><span class="hljs-string">multi-user</span>.<span class="hljs-string">target</span>: <span class="hljs-string">analogous</span> <span class="hljs-string">to</span> <span class="hljs-string">runlevel</span> <span class="hljs-string">3</span><br><span class="hljs-string">graphical</span>.<span class="hljs-string">target</span>: <span class="hljs-string">analogous</span> <span class="hljs-string">to</span> <span class="hljs-string">runlevel</span> <span class="hljs-string">5</span><br><span class="hljs-string">init</span> <span class="hljs-string">0</span><br><span class="hljs-comment"># To view current default target, run:</span><br><span class="hljs-string">systemctl</span> <span class="hljs-built_in">get-default</span><br><br><span class="hljs-comment"># To set a default target, run:</span><br><span class="hljs-string">systemctl</span> <span class="hljs-built_in">set-default</span> <span class="hljs-string">TARGET</span>.<span class="hljs-string">target</span><br></code></pre></div></td></tr></table></figure><h4><span id="chkconfig-指令">chkconfig 指令</span></h4><p>介绍<br>通过 chkconfig 命令可以给服务的各个运行级别设置自 启动/关闭<br>chkconfig 指令管理的服务在 /etc/init.d 查看<br>注意: Centos7.0 后，很多服务使用 systemctl 管理 (后面马上讲)</p><h4><span id="chkconfig-基本语法">chkconfig 基本语法</span></h4><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>) 查看服务 chkconfig --list<span class="hljs-meta"> [| grep xxx]</span><br><br><span class="hljs-attribute">2</span>) chkconfig 服务名 --list<br><br><span class="hljs-attribute">3</span>)chkconfig --level <span class="hljs-number">5</span> 服务名 <span class="hljs-literal">on</span>/<span class="hljs-literal">off</span><br></code></pre></div></td></tr></table></figure><p>案例演示 : 对 network 服务 进行各种操作, 把 network 在 3 运行级别,关闭自启动</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">chkconfig</span> --level <span class="hljs-number">3</span> network <span class="hljs-literal">off</span><br><span class="hljs-attribute">chkconfig</span> --level <span class="hljs-number">3</span> network <span class="hljs-literal">on</span><br></code></pre></div></td></tr></table></figure><p>使用细节</p><p>chkconfig 重新设置服务后自启动或关闭，需要重启机器 reboot 生效.</p><h4><span id="systemctl-管理指令">systemctl 管理指令</span></h4><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">基本语法： systemctl [start | stop | restart | status] 服务名<br>systemctl 指令管理的服务在 <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/systemd/</span>system 查看<br></code></pre></div></td></tr></table></figure><h4><span id="systemctl-设置服务的自启动状态">systemctl 设置服务的自启动状态</span></h4><figure class="highlight dsconfig"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dsconfig"><span class="hljs-string">systemctl</span> <span class="hljs-built_in">list-unit-files</span> [ | <span class="hljs-string">grep</span> 服务名] (查看服务开机启动状态,<span class="hljs-string">grep</span>可以进行过滤)<br><br><span class="hljs-string">systemctl</span> <span class="hljs-string">enable</span> 服务名 (设置服务开机启动)<br><span class="hljs-string">systemctl</span> <span class="hljs-string">disable</span> 服务名 (关闭服务开机启动)<br><span class="hljs-string">systemctl</span> <span class="hljs-string">is-enabled</span> 服务名 (查询某个服务是否是自启动的)<br></code></pre></div></td></tr></table></figure><h4><span id="应用案例查看-关闭-重启防火墙">应用案例（查看、关闭、重启防火墙）</span></h4><figure class="highlight smali"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs smali">查看当前防火墙的状况，关闭防火墙和重启防火墙。=&gt; firewalld.service<span class="hljs-keyword"></span><br><span class="hljs-keyword">system</span>ctl status firewalld; <span class="hljs-keyword"></span><br><span class="hljs-keyword">system</span>ctl stop firewalld; <span class="hljs-keyword"></span><br><span class="hljs-keyword">system</span>ctl start firewalld<br></code></pre></div></td></tr></table></figure><h4><span id="细节讨论防火墙">细节讨论（防火墙）</span></h4><p>关闭或者启用防火墙后，立即生效。[telnet 测试 某个端口即可]<br>这种方式只是临时生效，当重启系统后，还是回归以前对服务的设置。<br>如果希望设置某个服务自启动或关闭永久生效，要使用 systemctl [enable|disable] 服务名 . [演示]</p><h4><span id="打开或者关闭指定端口重要">打开或者关闭指定端口（重要！！！）</span></h4><p>在真正的生产环境，往往需要将防火墙打开，但问题来了，如果我们把防火墙打开，那么外部请求数据包就不能跟服务器监听端口通讯。这时，需要打开指定的端口。比如 80、22、8080 等，这个又怎么做呢？</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926195401.png" alt="image-20210926195401704"></p><h4><span id="firewall-指令">firewall 指令</span></h4><figure class="highlight brainfuck"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs brainfuck"><span class="hljs-comment">打开端口:</span> <span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">permanent</span> --<span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=端口号/协议</span><br><br><span class="hljs-comment">关闭端口:</span> <span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">permanent</span> --<span class="hljs-comment">remove</span><span class="hljs-literal">-</span><span class="hljs-comment">port=端口号/协议</span><br><br><span class="hljs-comment">重新载入</span><span class="hljs-string">,</span><span class="hljs-comment">才能生效</span> <span class="hljs-comment">:</span> <span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">reload</span><br><br><span class="hljs-comment">查询端口是否开放:</span> <span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">query</span><span class="hljs-literal">-</span><span class="hljs-comment">port=端口/协议</span><br></code></pre></div></td></tr></table></figure><h4><span id="linux下防火墙开放3306端口">linux下防火墙开放3306端口</span></h4><p>1、防火墙开放3306端口</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">firewall-cmd <span class="hljs-attribute">--zone</span>=public <span class="hljs-attribute">--add-port</span>=3306/tcp --permanent<br></code></pre></div></td></tr></table></figure><p>2、关闭防火墙</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs arduino">service iptables stop<br></code></pre></div></td></tr></table></figure><p>3、开启防火墙</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">service iptables <span class="hljs-literal">start</span><br></code></pre></div></td></tr></table></figure><p>4、开机不自启防火墙</p><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">chkconfig <span class="hljs-comment">--del iptables</span><br></code></pre></div></td></tr></table></figure><p>5、重启防火墙</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">chkconfig iptables <span class="hljs-keyword">on</span><br>或者<br>firewall-cmd <span class="hljs-comment">--reload</span><br></code></pre></div></td></tr></table></figure><p>   重新关闭</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">chkconfig</span> iptables <span class="hljs-literal">off</span><br></code></pre></div></td></tr></table></figure><p>6、查看防火墙状态</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">ervice iptables status</span>  <br></code></pre></div></td></tr></table></figure><p>7、查看已开启的端口</p><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">firewall-cmd <span class="hljs-comment">--list-ports</span><br></code></pre></div></td></tr></table></figure><h4><span id="应用案例防火墙">应用案例（防火墙）</span></h4><figure class="highlight brainfuck"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs brainfuck"><span class="hljs-comment">启用防火墙，</span> <span class="hljs-comment">测试</span> <span class="hljs-comment">111</span> <span class="hljs-comment">端口是否能</span> <span class="hljs-comment">telnet</span> <span class="hljs-string">,</span> <span class="hljs-comment">不行</span><br><br><span class="hljs-comment">开放</span> <span class="hljs-comment">111</span> <span class="hljs-comment">端口</span><br><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">permanent</span> --<span class="hljs-comment">add</span><span class="hljs-literal">-</span><span class="hljs-comment">port=111/tcp</span> <span class="hljs-comment">;</span> <span class="hljs-comment">需要</span> <span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">reload</span><br><br><span class="hljs-comment">再次关闭</span> <span class="hljs-comment">111</span> <span class="hljs-comment">端口</span><br><span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">permanent</span> --<span class="hljs-comment">remove</span><span class="hljs-literal">-</span><span class="hljs-comment">port=111/tcp</span> <span class="hljs-comment">;</span> <span class="hljs-comment">需要</span> <span class="hljs-comment">firewall</span><span class="hljs-literal">-</span><span class="hljs-comment">cmd</span> --<span class="hljs-comment">reload</span><br></code></pre></div></td></tr></table></figure><h4><span id="动态监控进程">动态监控进程</span></h4><p>top 与 ps 命令很相似。它们都用来显示正在执行的进程。Top 与 ps 最大的不同之处，在于 top 在执行一段时间可以更新正在运行的的进程。</p><h4><span id="基本语法">基本语法</span></h4><p>top [选项]</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926195554.png" alt="image-20210926195554403"></p><h4><span id="选项说明">选项说明</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926195603.png" alt="image-20210926195603026"></p><h4><span id="交互操作说明">交互操作说明</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926195614.png" alt="image-20210926195610667"></p><h4><span id="应用实例">应用实例</span></h4><figure class="highlight coq"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coq">案例 <span class="hljs-number">1.</span>监视特定用户, 比如我们监控 tom 用户<br><span class="hljs-built_in">top</span>：输入此命令，按回车键，查看执行的进程。<br>u：然后输入“u”回车，再输入用户名，即可,<br><br>案例 <span class="hljs-number">2</span>：终止指定的进程, 比如我们要结束 tom 登录<br><span class="hljs-built_in">top</span>：输入此命令，按回车键，查看执行的进程。<br>k：然后输入“k”回车，再输入要结束的进程 ID 号<br>案例 <span class="hljs-number">3</span>:指定系统状态更新的时间(每隔 <span class="hljs-number">10</span> 秒自动更新),默认是<span class="hljs-number">3</span> 秒<br><span class="hljs-built_in">top</span> -d <span class="hljs-number">10</span><br></code></pre></div></td></tr></table></figure><h3><span id="监控网络状态">监控网络状态</span></h3><h4><span id="查看系统网络情况netstat">查看系统网络情况netstat</span></h4><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff">基本语法<br>netstat [选项]<br><br>选项说明<br><span class="hljs-deletion">-an 按一定顺序排列输出</span><br><span class="hljs-deletion">-p 显示哪个进程在调用</span><br><br>应用案例<br>请查看服务名为 sshd 的服务的信息。<br>netstat -anp | grep sshd<br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926195719.png" alt="image-20210926195719294"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926195723.png" alt="image-20210926195723869"></p><h2><span id="第15章-rpm与yum">第15章 RPM与YUM</span></h2><h3><span id="rpm包的管理">rpm包的管理</span></h3><p>rpm 用于互联网下载包的打包及安装工具，它包含在某些 Linux 分发版中。它生成具有.RPM 扩展名的文件。RPM<br>是 RedHat Package Manager（RedHat 软件包管理工具）的缩写，类似 windows 的 setup.exe，这一文件格式名称虽然打上<br>了 RedHat 的标志，但理念是通用的。</p><h4><span id="rpm-包的简单查询指令">rpm 包的简单查询指令</span></h4><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">查询已安装的 rpm 列表 rpm –<span class="hljs-keyword">qa</span>|<span class="hljs-keyword">grep</span> xx<br>举例： 看看当前系统，是否安装了 firefox<br>指令: rpm -<span class="hljs-keyword">qa</span> | <span class="hljs-keyword">grep</span> firefox<br></code></pre></div></td></tr></table></figure><h4><span id="rpm-包名基本格式">rpm 包名基本格式</span></h4><p>一个 rpm 包名：firefox-60.2.2-1.el7.centos.x86_64<br>名称:firefox<br>版本号：60.2.2-1<br>适用操作系统: el7.centos.x86_64<br>表示 centos7.x 的 64 位系统<br>如果是 i686、i386 表示 32 位系统，noarch 表示通用</p><h4><span id="rpm-包的其它查询指令">rpm 包的其它查询指令</span></h4><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">rpm -<span class="hljs-keyword">qa</span>查询所安装的所有 rpm 软件包<br>rpm -<span class="hljs-keyword">qa</span> | more<br>rpm -<span class="hljs-keyword">qa</span> | <span class="hljs-keyword">grep</span> <span class="hljs-keyword">X</span> [rpm -<span class="hljs-keyword">qa</span> | <span class="hljs-keyword">grep</span> firefox ]<br><br>rpm -q 软件包名 :查询软件包是否安装<br>案例：rpm -q firefox<br><br>rpm -qi 软件包名 ：查询软件包信息<br>案例: rpm -qi firefox<br>rpm -ql 软件包名 :查询软件包中的文件<br>比如： rpm -ql firefox<br><br>rpm -qf 文件全路径名 查询文件所属的软件包<br>rpm -qf /etc/passwd<br>rpm -qf /root/install.<span class="hljs-built_in">log</span><br></code></pre></div></td></tr></table></figure><h4><span id="卸载rpm-包">卸载rpm 包</span></h4><figure class="highlight stan"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stan">基本语法<br><br>rpm -<span class="hljs-built_in">e</span> RPM 包的名称 <span class="hljs-comment">//erase</span><br><br>应用案例<br><br>删除 firefox 软件包<br><br>rpm -<span class="hljs-built_in">e</span> firefox<br></code></pre></div></td></tr></table></figure><p>细节讨论</p><p>如果其它软件包依赖于您要卸载的软件包，卸载时则会产生错误信息。<br>如： $ rpm -e foo<br>removing these packages would break dependencies:foo is needed by bar-1.0-1</p><p>如果我们就是要删除 foo 这个 rpm 包，可以增加参数 –nodeps ,就可以强制删除，但是一般不推荐这样做，因为依<br>赖于该软件包的程序可能无法运行<br>如：$ rpm -e –nodeps foo</p><h4><span id="安装rpm-包">安装rpm 包</span></h4><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">基本语法<br>rpm -ivh RPM 包全路径名称<br><br>参数说明<br><span class="hljs-attribute">i</span>=install 安装<br><span class="hljs-attribute">v</span>=verbose 提示<br><span class="hljs-attribute">h</span>=hash 进度条<br><br>应用实例<br>演示卸载和安装 firefox 浏览器<br>rpm -e firefox<br>rpm -ivh firefox<br></code></pre></div></td></tr></table></figure><h3><span id="yum">yum</span></h3><p>Yum 是一个 Shell 前端软件包管理器。基于 RPM 包管理，能够从指定的服务器自动下载 RPM 包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包。</p><h4><span id="yum-的基本指令">yum 的基本指令</span></h4><p>查询 yum 服务器是否有需要安装的软件<br><font color="red">yum list|grep xx 软件列表</font></p><h4><span id="安装指定的yum-包">安装指定的yum 包</span></h4><p>yum install xxx 下载安装</p><h4><span id="yum-应用实例">yum 应用实例</span></h4><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c">案例：请使用 yum 的方式来安装 firefox<br>rpm -e firefox<br>yum list <span class="hljs-string">| grep firefox</span><br>yum install firefox<br></code></pre></div></td></tr></table></figure><h2><span id="第16章-搭建javaee环境">第16章 搭建JavaEE环境</span></h2><p>如果需要在 Linux 下进行 JavaEE 的开发，我们需要安装如下软件</p><ol><li>  jdk 1.8</li><li>  tomcat 8.5</li><li>  mysql 5.7</li><li>  idea 2021</li></ol><h3><span id="安装-jdk">安装 JDK</span></h3><h4><span id="安装步骤">安装步骤</span></h4><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-number">1</span>) mkdir <span class="hljs-regexp">/opt/</span>jdk<br><span class="hljs-number">2</span>) 通过 xftp6 上传到 <span class="hljs-regexp">/opt/</span>jdk 下<br><span class="hljs-number">3</span>) cd <span class="hljs-regexp">/opt/</span>jdk<br><span class="hljs-number">4</span>) 解压 tar -zxvf jdk-<span class="hljs-number">8</span>u261-linux-x64.tar.gz<br><span class="hljs-number">5</span>) mkdir <span class="hljs-regexp">/usr/</span>local/java<br><span class="hljs-number">6</span>) mv <span class="hljs-regexp">/opt/</span>jdk<span class="hljs-regexp">/jdk1.8.0_261 /u</span>sr<span class="hljs-regexp">/local/</span>java<br><span class="hljs-number">7</span>) 配置环境变量的配置文件 vim <span class="hljs-regexp">/etc/</span>profile<br><span class="hljs-number">8</span>) export JAVA_HOME=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/java/</span>jdk1.<span class="hljs-number">8.0</span>_261<br><span class="hljs-number">9</span>) export PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-number">10</span>) source <span class="hljs-regexp">/etc/</span>profile [让新的环境变量生效]<br></code></pre></div></td></tr></table></figure><h4><span id="测试是否安装成功">测试是否安装成功</span></h4><p>编写一个简单的 Hello.java 输出”hello,world!”</p><h3><span id="tomcat-的安装">tomcat 的安装</span></h3><h4><span id="步骤">步骤</span></h4><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-number">1</span>) 上传安装文件，并解压缩到<span class="hljs-regexp">/opt/</span>tomcat<br><br><span class="hljs-number">2</span>) 进入解压目录<span class="hljs-regexp">/bin , 启动 tomcat ./</span>startup.sh<br><br><span class="hljs-number">3</span>) 开放端口 <span class="hljs-number">8080</span> , 回顾 firewall-cmd<br></code></pre></div></td></tr></table></figure><h4><span id="测试是否安装成功">测试是否安装成功</span></h4><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">在 windows、Linux 下 访问 http:<span class="hljs-regexp">//</span>linuxip:<span class="hljs-number">8080</span><br></code></pre></div></td></tr></table></figure><h3><span id="idea2020-的安装">idea2020 的安装</span></h3><h4><span id="步骤">步骤</span></h4><ol><li>下载地址: <a href="https://www.jetbrains.com/idea/download/#section=windows">https://www.jetbrains.com/idea/download/#section=windows</a></li><li>解压缩到/opt/idea</li><li>启动 idea bin 目录下 ./idea.sh，配置 jdk</li><li>编写 Hello world 程序并测试成功！</li></ol><h3><span id="mysql57-的安装注意">mysql5.7 的安装（注意）</span></h3><h4><span id="步骤">步骤</span></h4><ol><li><p>  新建文件夹/opt/mysql，并cd进去</p></li><li><p>  运行wget <a href="http://dev.mysql.com/get/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar%EF%BC%8C%E4%B8%8B%E8%BD%BDmysql%E5%AE%89%E8%A3%85%E5%8C%85">http://dev.mysql.com/get/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar，下载mysql安装包</a></p></li><li><p>  运行tar -xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</p></li><li><p>  运行rpm -qa|grep mari，查询mariadb相关安装包（因为系统自带的mariadb与mysql冲突，所以要卸载）</p></li><li><p>  运行rpm -e –nodeps mariadb-libs，卸载</p></li><li><p>然后开始真正安装mysql，依次运行以下几条</p><ol><li>  rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm</li><li>  rpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpm</li><li>  rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm</li><li>  rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm</li></ol></li><li><p>  运行systemctl start mysqld.service，启动mysql</p></li><li><p>然后开始设置root用户密码</p><ol><li><p>Mysql自动给root用户设置随机密码，运行grep “password” /var/log/mysqld.log可看到当前密码</p><p>  <img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926205025.png" alt="image-20210926205025123"></p></li></ol></li><li><p>  运行mysql -u root -p，用root用户登录，提示输入密码可用上述的，可以成功登陆进入mysql命令行</p></li><li><p>设置root密码，对于个人开发环境，如果要设比较简单的密码（<strong>生产环境服务器要设复杂密码</strong>），可以运行set global validate_password_policy=0; 提示密码设置策略。（validate_password_policy默认值1，）</p><p>  <img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926205123.png" alt="image-20210926205123758"></p></li><li><p>  设置密码 set password for ‘root‘@’localhost’ =password(‘wangpeng100’); 或者set password=password(‘wangpeng100’);</p></li><li><p>  运行flush privileges;使密码设置生效</p></li></ol><h3><span id="远程访问设置">远程访问设置</span></h3><ol><li>  防火墙打开3306端口firewall-cmd –zone=public –add-port=3306/tcp –permanent</li><li>  重启防火墙 firewall-cmd –reload</li><li>  查看是否开启 firewall-cmd –query-port=3306/tcp</li><li>  使用SQLyog，new一个连接，配置信息，连接上。</li></ol><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210926205601.png" alt="image-20210926205601618" style="zoom:50%;">]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端框架-LayUI</title>
    <link href="/2021/09/01/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6-LayUI/"/>
    <url>/2021/09/01/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6-LayUI/</url>
    
    <content type="html"><![CDATA[<h1><span id="layui">LayUI</span></h1><!-- toc --><ul><li><a href="#%E7%AC%AC%E4%B8%80%E7%AB%A0-layui%E6%A6%82%E8%BF%B0">第一章 LayUI概述</a><ul><li><a href="#1-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B">1、快速上手</a><ul><li><a href="#11-%E5%A4%8D%E5%88%B6layui%E6%96%87%E4%BB%B6%E5%A4%B9%E5%88%B0%E9%A1%B9%E7%9B%AE%E4%B8%AD">1.1 复制layui文件夹到项目中</a></li><li><a href="#12-%E5%86%99%E4%BB%A3%E7%A0%81">1.2 写代码</a></li></ul></li></ul></li><li><a href="#%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%AE%B9%E5%99%A8%E5%B8%83%E5%B1%80%E4%B8%8E%E6%A0%85%E6%A0%BC%E7%B3%BB%E7%BB%9F">第二章 容器布局与栅格系统</a><ul><li><a href="#2-%E6%A0%85%E6%A0%BC%E7%B3%BB%E7%BB%9F">2、栅格系统</a><ul><li><a href="#21-%E6%A0%85%E6%A0%BC%E5%B8%83%E5%B1%80%E8%A7%84%E5%88%99">2.1 栅格布局规则</a></li><li><a href="#22-%E5%93%8D%E5%BA%94%E5%BC%8F%E8%A7%84%E5%88%99">2.2 响应式规则</a></li><li><a href="#23-%E5%88%97%E9%97%B4%E8%B7%9D">2.3 列间距</a></li><li><a href="#24-%E5%88%97%E5%81%8F%E7%A7%BB">2.4 列偏移</a></li><li><a href="#25-%E5%88%97%E5%B5%8C%E5%A5%97">2.5 列嵌套</a></li></ul></li></ul></li><li><a href="#%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%8C%89%E9%92%AE">第三章 按钮</a><ul><li><a href="#1-%E6%8C%89%E9%92%AE%E9%A3%8E%E6%A0%BC">1、按钮风格</a></li><li><a href="#2-%E6%8C%89%E9%92%AE%E5%B0%BA%E5%AF%B8">2、按钮尺寸</a></li><li><a href="#3-%E5%9C%86%E8%A7%92%E6%8C%89%E9%92%AE">3、圆角按钮</a></li><li><a href="#4-%E5%9B%BE%E6%A0%87%E6%8C%89%E9%92%AE">4、图标按钮</a></li></ul></li><li><a href="#%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E5%AF%BC%E8%88%AA">第四章 导航</a><ul><li><a href="#1-%E6%B0%B4%E5%B9%B3%E5%AF%BC%E8%88%AA">1、水平导航</a></li><li><a href="#2-%E5%9B%BE%E7%89%87%E4%B8%8E%E5%BE%BD%E7%AB%A0">2、图片与徽章</a></li><li><a href="#3-%E8%AE%BE%E7%BD%AE%E5%AF%BC%E8%88%AA%E7%9A%84%E4%B8%BB%E9%A2%98%E9%A2%9C%E8%89%B2">3、设置导航的主题颜色</a></li><li><a href="#4-%E5%9E%82%E7%9B%B4%E5%AF%BC%E8%88%AA%E6%AF%94%E8%BE%83%E5%B0%91%E7%94%A8">4、垂直导航（比较少用）</a></li><li><a href="#5-%E4%BE%A7%E8%BE%B9%E5%AF%BC%E8%88%AA%E5%B8%B8%E7%94%A8">5、侧边导航（常用）</a></li><li><a href="#6-%E9%9D%A2%E5%8C%85%E5%B1%91">6、面包屑</a><ul><li><a href="#%E9%BB%98%E8%AE%A4%E6%A0%B7%E5%BC%8F">默认样式</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E9%9A%94%E7%AC%A6">自定义分隔符</a></li></ul></li></ul></li><li><a href="#%E7%AC%AC%E4%BA%94%E7%AB%A0-%E9%80%89%E9%A1%B9%E5%8D%A1">第五章 选项卡</a><ul><li><a href="#1-%E4%B8%89%E4%B8%AA%E6%A0%B7%E5%BC%8F">1、三个样式</a></li><li><a href="#2-%E8%AE%BE%E7%BD%AE%E5%8F%AF%E4%BB%A5%E5%88%A0%E9%99%A4">2、设置可以删除</a></li></ul></li><li><a href="#%E7%AC%AC%E5%85%AD%E7%AB%A0-%E9%9D%99%E6%80%81%E8%A1%A8%E6%A0%BC">第六章 静态表格</a><ul><li><a href="#1-%E5%B8%B8%E8%A7%84%E7%94%A8%E6%B3%95">1、常规用法</a></li><li><a href="#2-%E5%9F%BA%E7%A1%80%E5%B1%9E%E6%80%A7">2、基础属性</a></li></ul></li><li><a href="#%E7%AC%AC%E4%B8%83%E7%AB%A0-%E8%A1%A8%E5%8D%95">第七章 表单</a><ul><li><a href="#1-%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7">1、常用属性</a></li><li><a href="#2-%E8%A1%8C%E5%8C%BA%E5%9D%97%E7%BB%93%E6%9E%84">2、行区块结构</a></li><li><a href="#3-%E8%BE%93%E5%85%A5%E6%A1%86">3、输入框</a></li><li><a href="#4-%E5%AF%86%E7%A0%81%E6%A1%86">4、密码框</a></li><li><a href="#5-%E4%B8%8B%E6%8B%89%E9%80%89%E6%8B%A9%E6%A1%86">5、下拉选择框</a></li><li><a href="#6-%E5%A4%8D%E9%80%89%E6%A1%86">6、复选框</a></li><li><a href="#7-%E5%BC%80%E5%85%B3">7、开关</a></li><li><a href="#8-%E5%8D%95%E9%80%89%E6%A1%86">8、单选框</a></li><li><a href="#9-%E6%96%87%E6%9C%AC%E5%9F%9F">9、文本域</a></li><li><a href="#10-%E6%8F%90%E4%BA%A4%E9%87%8D%E7%BD%AE%E6%8C%89%E9%92%AE">10、提交重置按钮</a></li><li><a href="#11-%E7%BB%84%E8%A3%85%E8%A1%8C%E5%86%85%E8%A1%A8%E5%8D%95">11、组装行内表单</a></li><li><a href="#12-%E8%A1%A8%E5%8D%95%E6%96%B9%E5%9D%97%E9%A3%8E%E6%A0%BC">12、表单方块风格</a></li></ul></li><li><a href="#%E7%AC%AC%E5%85%AB%E7%AB%A0-layer%E5%BC%B9%E5%87%BA%E5%B1%82">第八章 layer弹出层</a><ul><li><a href="#%E7%AC%AC%E4%B8%80%E7%A7%8D%E6%96%B9%E5%BC%8F">第一种方式</a></li><li><a href="#%E7%AC%AC%E4%BA%8C%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%B8%B8%E7%94%A8">第二种方式（常用）</a></li><li><a href="#%E5%9F%BA%E7%A1%80%E5%8F%82%E6%95%B0">基础参数</a><ul><li><a href="#1-type-%E5%9F%BA%E6%9C%AC%E5%B1%82%E7%B1%BB%E5%9E%8B">1. type 基本层类型</a></li><li><a href="#2-title-%E6%A0%87%E9%A2%98">2. title 标题</a></li><li><a href="#3-area%E5%AE%BD%E9%AB%98">3. area宽高</a></li><li><a href="#4-%E6%8C%89%E9%92%AE">4. 按钮</a></li><li><a href="#5-time%E8%87%AA%E5%8A%A8%E5%85%B3%E9%97%AD">5. time自动关闭</a></li><li><a href="#6-content%E5%86%85%E5%AE%B9">6. content内容</a></li><li><a href="#7-icon%E5%9B%BE%E6%A0%87">7. icon图标</a></li><li><a href="#8-%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95%E4%B8%8D%E5%A4%9A%E4%BB%8B%E7%BB%8D%E5%A4%9A%E7%9C%8B%E6%96%87%E6%A1%A3">8. 内置方法（不多介绍，多看文档）</a></li></ul></li></ul></li><li><a href="#%E7%AC%AC%E4%B9%9D%E7%AB%A0-laydate%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E9%80%89%E6%8B%A9">第九章 laydate日期和时间选择</a><ul><li><a href="#%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B">快速上手</a></li><li><a href="#%E5%9F%BA%E7%A1%80%E5%8F%82%E6%95%B0-1">基础参数</a></li></ul></li><li><a href="#%E7%AC%AC%E5%8D%81%E7%AB%A0-laypage-%E5%88%86%E9%A1%B5">第十章 laypage 分页</a><ul><li><a href="#%E6%BC%94%E7%A4%BA">演示</a></li><li><a href="#%E5%88%86%E9%A1%B5%E7%9A%84%E5%9B%9E%E8%B0%83">分页的回调</a></li></ul></li><li><a href="#%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0-%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%A0%BC">第十一章 数据表格</a><ul><li><a href="#%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B-1">快速上手</a></li><li><a href="#%E4%B8%89%E7%A7%8D%E6%B8%B2%E6%9F%93%E6%96%B9%E5%BC%8F">三种渲染方式</a><ul><li><a href="#%E6%96%B9%E6%B3%95%E6%B8%B2%E6%9F%93">方法渲染</a></li><li><a href="#%E8%87%AA%E5%8A%A8%E6%B8%B2%E6%9F%93">自动渲染</a></li><li><a href="#%E8%BD%AC%E6%8D%A2%E9%9D%99%E6%80%81%E8%A1%A8%E6%A0%BC">转换静态表格</a></li></ul></li><li><a href="#%E5%9F%BA%E7%A1%80%E5%8F%82%E6%95%B0-2">基础参数</a></li><li><a href="#%E5%BC%80%E5%90%AF%E5%88%86%E9%A1%B5%E8%A1%A8%E6%A0%BC%E5%B7%A5%E5%85%B7%E6%A0%8F%E8%A1%A8%E5%A4%B4%E5%B7%A5%E5%85%B7%E6%A0%8F">开启分页/表格工具栏/表头工具栏</a></li><li><a href="#%E7%9B%91%E5%90%AC%E5%A4%B4%E9%83%A8%E5%B7%A5%E5%85%B7%E6%A0%8F">监听头部工具栏</a></li><li><a href="#%E7%9B%91%E5%90%AC%E8%A1%8C%E5%B7%A5%E5%85%B7%E6%A0%8F">监听行工具栏</a></li><li><a href="#%E5%BC%80%E5%90%AF%E5%8D%95%E5%85%83%E6%A0%BC%E7%BC%96%E8%BE%91">开启单元格编辑</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%A0%BC%E7%9A%84%E9%87%8D%E8%BD%BD%E5%88%B7%E6%96%B0">数据表格的重载（刷新）</a></li></ul></li><li><a href="#%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0-layuimini">第十二章 LayUIMIni</a></li></ul><!-- tocstop --><h2><span id="第一章-layui概述">第一章 LayUI概述</span></h2><p>官网：<a href="https://www.layui.com/">Layui - 经典开源模块化前端 UI 框架</a></p><p>直接在官网下载最新版即可</p><p>目录结构：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">├─css <span class="hljs-regexp">//</span>css目录<br>│  │─modules <span class="hljs-regexp">//</span>模块 css 目录（一般如果模块相对较大，我们会单独提取，如下：）<br>│  │  ├─laydate<br>│  │  └─layer<br>│  └─layui.css <span class="hljs-regexp">//</span>核心样式文件<br>├─font  <span class="hljs-regexp">//</span>字体图标目录<br>└─layui.js <span class="hljs-regexp">//</span>核心库<br></code></pre></div></td></tr></table></figure><h3><span id="1-快速上手">1、快速上手</span></h3><h4><span id="11-复制layui文件夹到项目中">1.1 复制layui文件夹到项目中</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210908132833.png" alt="image-20210908132826651"></p><h4><span id="12-写代码">1.2 写代码</span></h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>01-layui的使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--LayUI的核心CSS文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;layui/css/layui.css&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--LayUI的JS文件（采用模块化引入）--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;layui/layui.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">// 加载layer、form魔魁啊</span></span><br><span class="javascript">            layui.use([<span class="hljs-string">&#x27;layer&#x27;</span>, <span class="hljs-string">&#x27;form&#x27;</span>], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> layer = layui.layer</span><br><span class="javascript">                        ,form = layui.form;</span><br><span class="javascript">                layer.msg(<span class="hljs-string">&#x27;你好世界&#x27;</span>);</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>模板</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    layui.use(<span class="hljs-string">&#x27;element&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> element = layui.element；</span><br><span class="javascript">        <span class="hljs-comment">//...</span></span><br><span class="javascript">    &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>一个模块用字符串，多个模块用数组。</p><p>两个导入非常关键</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--LayUI的核心CSS文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;layui/css/layui.css&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!--LayUI的JS文件（采用模块化引入）--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;layui/layui.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2><span id="第二章-容器布局与栅格系统">第二章 容器布局与栅格系统</span></h2><h3><span id="1-布局容器">1、布局容器</span></h3><p>固定宽度：两侧有留白效果</p><p>完整宽度：占据屏幕宽度的100%</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-container&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: pink;height: 300px;&quot;</span>&gt;</span><br>        固定宽度（两侧有留白效果）<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-fluid&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: cyan;height: 300px;&quot;</span>&gt;</span><br> 完整宽度(占据屏幕宽度的100%)<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210908220204.png" alt="image-20210908220157084"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210908220216.png" alt="image-20210908220216431"></p><h3><span id="2-栅格系统">2、栅格系统</span></h3><p>我们将容器进行了 <strong>12 等分</strong>，预设了 4*12 种 CSS 排列类，它们在移动设备、平板、桌面中/大尺寸四种不同的屏幕下发挥着各自的作用。</p><h4><span id="21-栅格布局规则">2.1 栅格布局规则</span></h4><ul><li>   <code>.layui-row</code>定义行</li></ul><ul><li><code>.layui-col-md*</code> 定义列，放在行中<ul><li>  变量 <code>md</code> ：屏幕尺寸</li><li>  变量 <code>*</code> ：占几列（共12列）</li><li>  <code>*</code>如果大于12，<strong>多余的列将自动另起一行</strong>。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-container&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--定义行--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-md5&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: deepskyblue;&quot;</span>&gt;</span><br>                内容5/12<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-md7&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: bisque;&quot;</span>&gt;</span><br>                内容7/12<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--定义行--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-row&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-md4&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: powderblue;&quot;</span>&gt;</span><br>                内容4/12<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-md4&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: mediumaquamarine;&quot;</span>&gt;</span><br>                内容4/12<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-md6&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: grey;&quot;</span>&gt;</span><br>                内容6/12<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>效果：</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210908220420.png" alt="image-20210908220420071"></p><h4><span id="22-响应式规则">2.2 响应式规则</span></h4><p>简单来说，就是会针对四类不同尺寸的屏幕，进行响应式适配处理。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>平板、桌面端的不同表现：<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-row&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 小屏幕占6列，中屏幕占4列 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-sm6 layui-col-md4&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: thistle&quot;</span>&gt;</span><br>            平板≥768px：6/12 | 桌面端≥992px：4/12<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-row&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 小屏幕占4列，中屏幕占6列 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-sm4 layui-col-md6&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: mediumaquamarine;&quot;</span>&gt;</span><br>            平板≥768px：4/12 | 桌面端≥992px：6/12<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-row&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 小屏幕占12列，中屏幕占8列 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-sm12 layui-col-md8&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: coral&quot;</span>&gt;</span><br>            平板≥768px：12/12 | 桌面端≥992px：8/12<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210908141043.png" alt="image-20210908141043138"></p><p>我们将屏幕尺寸切换为小屏幕平板尺寸</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210908141052.png" alt="image-20210908141052239"></p><h4><span id="23-列间距">2.3 列间距</span></h4><p>给容器添加<code>class=&quot;layui-col-space*&quot;</code></p><p>​    <code>*</code> 支持1px-30px区间的所有双数间隔，以及 1px、5px、15px、25px 的单数间隔</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 列边距 .layui-col-space*  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>列边距<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-row layui-col-space20&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-md4&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 给具体的内容设置背景颜色 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: hotpink&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-md4&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: indianred&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-md4&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: powderblue&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210908222600.png" alt="image-20210908222600119"></p><p>注意：</p><ul><li>  <code>layui-col-space</code> 设置后不起作用主要是因为设置的是 padding，也就是说向内缩，所以设置背景色 padding 也是会添上颜色，看起来好像没有间距一样。<strong>可以在里面加一个 div 来达到目的</strong></li><li>  如果需要的间距高于30px（一般不常见），我们需要采用列偏移</li></ul><h4><span id="24-列偏移">2.4 列偏移</span></h4><p>对列追加类似 <code>layui-col-md-offset*</code> 的预设类，从而让列向右偏移</p><ul><li>  其中 <code>*</code> 号代表的是偏移占据的列数，可选中为 1 - 12</li><li>  如 <code>layui-col-md-offset3</code> ，即代表在 中型桌面屏幕下，让该列向右偏移3个列宽度。</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>列偏移<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-row&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-md4&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: red&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <br>       <span class="hljs-comment">&lt;!--向右移动4列--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-md4 layui-col-md-offset4&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: skyblue&quot;</span>&gt;</span><br>               向右移动4列<br>           <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="25-列嵌套">2.5 列嵌套</span></h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-row&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 大的盒子占6列 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-md6&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: red&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-row&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 嵌套列 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-md3&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: burlywood;&quot;</span>&gt;</span><br>                    内部列<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-md5&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: indianred;&quot;</span>&gt;</span><br>                    内部列<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-col-md2&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: mediumaquamarine;&quot;</span>&gt;</span><br>                    内部列<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210908222811.png" alt="image-20210908222811775"></p><h2><span id="第三章-按钮">第三章 按钮</span></h2><h3><span id="1-按钮风格">1、按钮风格</span></h3><ul><li>  向任意 HTML 元素设定 <code>class=&quot;layui-btn&quot;</code> ，建立一个基础按钮。</li><li>  button、a、div都可以变成按钮</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn&quot;</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn&quot;</span>&gt;</span>超链接按钮<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn&quot;</span>&gt;</span>div按钮<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210908223205.png" alt="image-20210908223205314"></p><ul><li>  通过<strong>追加样式</strong>为 <code>class=&quot;layui-btn-&#123;type&#125;&quot;</code> 来定义其他按钮风格</li></ul><table><thead><tr><th align="center">名称</th><th align="center">组合</th></tr></thead><tbody><tr><td align="center">默认</td><td align="center"><code>class=&quot;layui-btn&quot;</code></td></tr><tr><td align="center">原始</td><td align="center"><code>class=&quot;layui-btn layui-btn-primary&quot;</code></td></tr><tr><td align="center">百搭</td><td align="center"><code>class=&quot;layui-btn layui-btn-normal&quot;</code></td></tr><tr><td align="center">暖色</td><td align="center"><code>class=&quot;layui-btn layui-btn-warm&quot;</code></td></tr><tr><td align="center">警告</td><td align="center"><code>class=&quot;layui-btn layui-btn-danger&quot;</code></td></tr><tr><td align="center">禁用</td><td align="center"><code>class=&quot;layui-btn layui-btn-disabled&quot;</code></td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn&quot;</span>&gt;</span>默认按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-primary&quot;</span>&gt;</span>原始按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-normal&quot;</span>&gt;</span>百搭按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-warm&quot;</span>&gt;</span>暖色按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-danger&quot;</span>&gt;</span>警告按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-disabled&quot;</span>&gt;</span>禁用按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210908223636.png" alt="image-20210908223636270"></p><h3><span id="2-按钮尺寸">2、按钮尺寸</span></h3><table><thead><tr><th align="center">尺寸</th><th align="center">组合</th></tr></thead><tbody><tr><td align="center">大型</td><td align="center"><code>class=&quot;layui-btn layui-btn-lg&quot;</code></td></tr><tr><td align="center">默认</td><td align="center"><code>class=&quot;layui-btn&quot;</code></td></tr><tr><td align="center">小型</td><td align="center"><code>class=&quot;layui-btn layui-btn-sm&quot;</code></td></tr><tr><td align="center">迷你</td><td align="center"><code>class=&quot;layui-btn layui-btn-xs&quot;</code></td></tr><tr><td align="center">流体按钮(最大化适应)</td><td align="center"><code>class=&quot;layui-btn layui-btn-fluid&quot;</code></td></tr></tbody></table><p>还是在class里追加样式</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210908223856.png" alt="image-20210908223856737"></p><h3><span id="3-圆角按钮">3、圆角按钮</span></h3><table><thead><tr><th align="center">主题</th><th align="center">组合</th></tr></thead><tbody><tr><td align="center">原始</td><td align="center"><code>class=&quot;layui-btn layui-btn-radius layui-btn-primary&quot;s</code></td></tr><tr><td align="center">默认</td><td align="center"><code>class=&quot;layui-btn layui-btn-radius&quot;</code></td></tr><tr><td align="center">百搭</td><td align="center"><code>class=&quot;layui-btn layui-btn-radius layui-btn-normal&quot;</code></td></tr><tr><td align="center">暖色</td><td align="center"><code>class=&quot;layui-btn layui-btn-radius layui-btn-warm&quot;</code></td></tr><tr><td align="center">警告</td><td align="center"><code>class=&quot;layui-btn layui-btn-radius layui-btn-danger&quot;</code></td></tr><tr><td align="center">禁用</td><td align="center"><code>class=&quot;layui-btn layui-btn-radius layui-btn-disabled&quot;</code></td></tr></tbody></table><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210908224026.png" alt="image-20210908224026414"></p><h3><span id="4-图标按钮">4、图标按钮</span></h3><ul><li>  对 i 标签 设定 <code>class=&quot;layui-icon&quot;</code></li><li>  然后对元素加上图标对应的 <code>font-class</code></li><li>  内置图标一览表：<a href="https://www.layui.com/doc/element/icon.html">https://www.layui.com/doc/element/icon.html</a></li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-lg&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-icon layui-icon-addition layui-font-12&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 添加<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-sm layui-btn-primary&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-icon layui-icon-delete&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 删除<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn layui-btn-warm&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-icon layui-icon-heart&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span> 关注<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210908224647.png" alt="image-20210908224647824"></p><h2><span id="第四章-导航">第四章 导航</span></h2><ul><li>  导航一般应用于头部和侧边，是整个网页画龙点晴般的存在</li><li>  <strong>依赖加载模块：<code>element</code></strong></li></ul><p>导入资源</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--导入css--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>  <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;layui/css/layui.css&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--导入js--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;layui/layui.js&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>加载element模块</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    layui.use(<span class="hljs-string">&#x27;element&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> element = layui.element;</span><br><span class="javascript"></span><br><span class="javascript">    &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>然后就可以写代码了</p><h3><span id="1-水平导航">1、水平导航</span></h3><p>一个无序列表，里面是列表选项，再包裹一个超链接，方便跳转。</p><ul><li>  给一个无序列表 ul 添加 <code>class=&quot;layui-nav&quot;</code></li><li>  给 li 添加 <code>class=&quot;layui-nav-ithm&quot;</code> 表示的是导航的子项</li><li>  <strong>给 li 添加 <code>class=&quot;layui-this&quot;</code> 表示当前被选中的项</strong></li><li>  <strong>给 li 里面容器添加 <code>class=&quot;layui-nav-child&quot;</code> 表示的是二级菜单</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--水平导航 layui-nav--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-item&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>最新活动<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-item&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>产品<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-item layui-this&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>大数据<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-item&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>解决方案<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dl</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-child&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>移动模块<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>后台模块<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>电商平台<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="2-图片与徽章">2、图片与徽章</span></h3><p>在合适的位置加一个span标签，声明样式就可以了<code>&lt;span class=&quot;layui-badge&quot;&gt;9</code></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 水平导航 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 导航的子项 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-item&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>控制台<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-badge&quot;</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 导航的子项 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-item&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>个人中心<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-badge-dot&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 导航的子项 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-item&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//t.cn/RCzsdCq&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-img&quot;</span>&gt;</span>我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dl</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-child&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>修改信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>安全管理<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>退出<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// 导航 依赖element模块</span></span><br><span class="javascript">        layui.use(<span class="hljs-string">&#x27;element&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> element = layui.element;</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>更多徽章<a href="https://www.layui.com/doc/element/badge.html">Layui 徽章文档</a></p><h3><span id="3-设置导航的主题颜色">3、设置导航的主题颜色</span></h3><p>ul的class追加<code>layui-nav-颜色</code></p><p>通过对导航追加CSS背景类，让导航呈现不同的主题色</p><ul><li>  给无序列表 ul 添加 <code>class=&quot;layui-nav layui-bg-green&quot;</code> 可设置墨绿色背景的导航</li><li>  水平导航支持其他的背景主题有：<code>layui-bg-cyan</code>(藏青)、<code>layui-bg-molv</code>(墨绿)、<code>layui-bg-blue</code>(艳蓝)</li><li>  垂直导航支持的其他背景颜色有：<code>layui-bg-cyan</code> (藏青)</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav layui-nav-tree layui-nav-side layui-bg-blue&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-item&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>默认展开<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dl</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-child&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>选项1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>选项2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>选项3<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-item&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>最新活动<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-item&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>产品<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-badge&quot;</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-item layui-this&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>大数据<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-item&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>解决方案<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dl</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-child&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>移动模块<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>后台模块<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>电商平台<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="4-垂直导航比较少用">4、垂直导航（比较少用）</span></h3><ul><li>  给无序列表 ul 添加 <code>class=&quot;layui-nav layui-nav-tree&quot;</code></li><li>  给 li 添加 <code>class=&quot;layui-nav-item layui-nav-itemed&quot;</code> 表示此子项目是默认展开的</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--垂直导航 layui-nav layui-nav-tree--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav layui-nav-tree&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-item&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>最新活动<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-item&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>产品<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-item layui-this&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>大数据<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-item&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>解决方案<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dl</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-child&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>移动模块<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>后台模块<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>电商平台<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>注意需要展开的item中的a中的href需要写<code>javascript:;</code></p><h3><span id="5-侧边导航常用">5、侧边导航（常用）</span></h3><ul><li>  给无序列表 ul 添加 <code>class=&quot;layui-nav layui-nav-tree layui-nav-side&quot;</code></li><li>  设定<code>layui-this</code>来指向当前页面分类。</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--侧边导航 layui-nav layui-nav-tree layui-nav-side--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav layui-nav-tree layui-nav-side&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-item&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>最新活动<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-item&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>产品<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-item layui-this&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>大数据<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-item&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>解决方案<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dl</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-nav-child&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>移动模块<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>后台模块<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>电商平台<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="6-面包屑">6、面包屑</span></h3><h4><span id="默认样式">默认样式</span></h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--面包屑导航 默认斜杠分割--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-breadcrumb&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>国际新闻<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>亚太地区<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">cite</span>&gt;</span>正文<span class="hljs-tag">&lt;/<span class="hljs-name">cite</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="自定义分隔符">自定义分隔符</span></h4><p><code>lay-separator=&quot;分隔符&quot;</code></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--面包屑导航-横杠分割--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-breadcrumb&quot;</span> <span class="hljs-attr">lay-separator</span>=<span class="hljs-string">&quot;-&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>国际新闻<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>亚太地区<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">cite</span>&gt;</span>正文<span class="hljs-tag">&lt;/<span class="hljs-name">cite</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2><span id="第五章-选项卡">第五章 选项卡</span></h2><ul><li>  导航菜单可应用于头部和侧边，Tab选项卡提供多套风格，支持响应式，支持删除选项卡等功能。</li><li>  <strong>依赖加载模块：<code>element</code></strong></li></ul><h3><span id="1-三个样式">1、三个样式</span></h3><ul><li><p>  默认风格给容器添加 ：<code>class=&quot;layui-tab&quot;</code></p></li><li><p>  简洁风格给容器追加：<code>class=&quot;layui-tab-brief&quot;</code></p></li><li><p>  卡片风格给容器需要追加：<code>class=layui-tab-card</code></p></li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 默认风格 .layui-tab--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 设置选项卡标题 .layui-tab-title --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-title&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>网站设置<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>用户管理<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-this&quot;</span>&gt;</span>权限分配<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>商品管理<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>订单管理<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 设置选项卡的内容 .layui-tab-content --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-content&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-item&quot;</span>&gt;</span>内容1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-item&quot;</span>&gt;</span>内容2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 默认显示此内容 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-item layui-show&quot;</span>&gt;</span>内容3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-item&quot;</span>&gt;</span>内容4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-item&quot;</span>&gt;</span>内容5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 简洁风格 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab layui-tab-brief&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-title&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-this&quot;</span>&gt;</span>网站设置<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>用户管理<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>权限分配<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>商品管理<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>订单管理<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-content&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-item layui-show&quot;</span>&gt;</span>内容1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-item&quot;</span>&gt;</span>内容2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-item&quot;</span>&gt;</span>内容3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-item&quot;</span>&gt;</span>内容4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-item&quot;</span>&gt;</span>内容5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 卡片风格 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab layui-tab-card&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-title&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-this&quot;</span>&gt;</span>网站设置<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>用户管理<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>权限分配<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>商品管理<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>订单管理<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-content&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-item layui-show&quot;</span>&gt;</span>内容1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-item&quot;</span>&gt;</span>内容2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-item&quot;</span>&gt;</span>内容3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-item&quot;</span>&gt;</span>内容4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-item&quot;</span>&gt;</span>内容5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// 导航 依赖element模块</span></span><br><span class="javascript">        layui.use(<span class="hljs-string">&#x27;element&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> element = layui.element;</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="2-设置可以删除">2、设置可以删除</span></h3><p>对父层容器设置属性 <em>lay-allowClose=”true”</em> 来允许Tab选项卡被删除</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab&quot;</span> <span class="hljs-attr">lay-allowClose</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-title&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-this&quot;</span>&gt;</span>网站设置<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>用户基本管理<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>权限分配<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>全部历史商品管理文字长一点试试<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>订单管理<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-item layui-show&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-item&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-item&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-item&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-item&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-tab-item&quot;</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2><span id="第六章-静态表格">第六章 静态表格</span></h2><h3><span id="1-常规用法">1、常规用法</span></h3><p>table加个样式</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-table&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">colgroup</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">col</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;150&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">col</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">col</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">colgroup</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>昵称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>加入时间<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>签名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span> <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>贤心<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2016-11-29<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>人生就像是一场修行<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>许闲心<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2016-11-28<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>于千万人之中遇见你所遇见的人，于千万年之中，时间的无涯的荒野里…<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="2-基础属性">2、基础属性</span></h3><p>静态表格支持以下基础属性，可定义不同风格/尺寸的表格样式：</p><table><thead><tr><th align="left">属性名</th><th align="left">属性值</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">lay-even</td><td align="left">无</td><td align="left">用于开启 <em>隔行</em> 背景，可与其它属性一起使用</td></tr><tr><td align="left">lay-skin=”属性值”</td><td align="left">line （行边框风格） row （列边框风格） nob （无边框风格）</td><td align="left">若使用默认风格不设置该属性即可</td></tr><tr><td align="left">lay-size=”属性值”</td><td align="left">sm （小尺寸） lg （大尺寸）</td><td align="left">若使用默认尺寸不设置该属性即可</td></tr></tbody></table><p>将你所需要的基础属性写在table标签上即可，如（一个带有隔行背景，且行边框风格的大尺寸表格）：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">lay-even</span> <span class="hljs-attr">lay-skin</span>=<span class="hljs-string">&quot;line&quot;</span> <span class="hljs-attr">lay-size</span>=<span class="hljs-string">&quot;lg&quot;</span>&gt;</span><br>…<br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2><span id="第七章-表单">第七章 表单</span></h2><p><strong>依赖加载模块：<code>form</code></strong></p><h3><span id="1-常用属性">1、常用属性</span></h3><table><thead><tr><th>required</th><th>浏览器固定的必填字段</th></tr></thead><tbody><tr><td>lay-verify</td><td>需要验证的类型(值为 required 的话表示必填项)</td></tr><tr><td><code>class=&quot;layui-input&quot;</code></td><td>提供的通用的样式</td></tr><tr><td><code>class=&quot;layui-input-block&quot;</code></td><td>占据全部宽度</td></tr><tr><td><code>class=&quot;layui-input-inline&quot;</code></td><td>占据部分宽度</td></tr><tr><td>placeholder</td><td>当文本框为空时，默认显示的文本信息</td></tr><tr><td>autocomplete</td><td>表单元素是否自动填充(当浏览器中缓存中存在相同name属性的值时，会填充)</td></tr></tbody></table><h3><span id="2-行区块结构">2、行区块结构</span></h3><p>基本的行区块结构，它提供了响应式的支持。</p><ul><li>  给 div 添加 <code>class=&quot;layui-form-item&quot;</code> 代表”行“</li><li>  给 label 添加 <code>class=&quot;layui-form-label&quot;</code> 代表”区“</li><li>  给 div 添加 <code>class=&quot;layui-input-inline&quot;</code> 代表”块“</li></ul><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210908231954.png" alt="image-20210908231954902"></p><h3><span id="3-输入框">3、输入框</span></h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-label&quot;</span>&gt;</span>输入框<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-block&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">required</span>  <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">&quot;required&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入标题&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>  required：<strong>注册</strong>浏览器所规定的<strong>必填字段</strong></li><li>  <code>lay-verify=&quot;required&quot;</code> ：注册 form 模块需要验证的类型</li><li>  <code>class=&quot;layui-input&quot;</code>：layui.css 提供的通用 CSS 类</li></ul><h3><span id="4-密码框">4、密码框</span></h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-label&quot;</span>&gt;</span>密码框<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-inline&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">required</span> <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">&quot;required&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入密码&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-mid layui-word-aux&quot;</span>&gt;</span>辅助文字<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="5-下拉选择框">5、下拉选择框</span></h3><ul><li>  通过 <code>selected</code> 属性设置默认选中项</li><li>  通过 <code>disabled</code> 属性开启禁用，可以设置 select 和 option 标签(表示禁用下拉框和禁用下拉选项)</li><li>  通过 <code>optgroup</code> 标签给 select 分组</li><li>  通过设置 <code>lay-search</code> 属性开启搜索匹配功能</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-label&quot;</span>&gt;</span>选择框<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-block&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;city&quot;</span> <span class="hljs-attr">lay-verify</span>=<span class="hljs-string">&quot;required&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>深圳<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span>杭州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>还有分组和搜索匹配的特色功能详见官网<a href="https://www.layui.com/doc/element/form.html#select">表单 - 页面元素 - Layui</a></strong></p><h3><span id="6-复选框">6、复选框</span></h3><ul><li>  通过设置 <code>title</code> 属性设置自定义文本(如果不需要显示文本，则不设置 title 属性)</li><li>  通过 <code>checked</code> 属性设置被选中的项</li><li>  通过·<code>lay-skin</code> 属性设置复选框的样式效果(<code>lay-skin=&quot;primary&quot;</code> 表示原始效果)</li><li>  通过 <code>disabled</code> 属性禁用元素</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-label&quot;</span>&gt;</span>复选框<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-block&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;like[write]&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;写作&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;like[read]&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;阅读&quot;</span> <span class="hljs-attr">checked</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;like[dai]&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;发呆&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="7-开关">7、开关</span></h3><ul><li>  将复选框，设置 <code>lay-skin=&quot;switch&quot;</code> 形成开关风格</li><li>  通过 <code>lay-text=&quot;打开的值|关闭的值&quot;</code> 来<strong>设定开关的两种状态</strong>的文本，通过<code>|</code> 分隔</li><li>  通过 <code>checked</code> 属性设置默认打开状态</li><li>  通过 <code>disabled</code> 属性禁用开关</li><li>  通过 <code>value</code> 属性设置选中的值</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-label&quot;</span>&gt;</span>开关<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-block&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;switch&quot;</span> <span class="hljs-attr">lay-skin</span>=<span class="hljs-string">&quot;switch&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="8-单选框">8、单选框</span></h3><ul><li>  通过 <code>checked</code> 设置默认选中项</li><li>  通过 <code>disabled</code> 属性禁用单选框</li><li>  通过 <code>value</code> 属性设置选中的值</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-label&quot;</span>&gt;</span>单选框<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-block&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;男&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;女&quot;</span> <span class="hljs-attr">checked</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="9-文本域">9、文本域</span></h3><p>给 textarea 标签添加<code>class=&quot;layui-textarea&quot;</code></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item layui-form-text&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-label&quot;</span>&gt;</span>文本域<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-block&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;desc&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入内容&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-textarea&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="10-提交重置按钮">10、提交重置按钮</span></h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-label&quot;</span>&gt;</span>按钮们<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-block&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn&quot;</span> <span class="hljs-attr">lay-submit</span> <span class="hljs-attr">lay-filter</span>=<span class="hljs-string">&quot;formDemo&quot;</span>&gt;</span>立即提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-primary&quot;</span>&gt;</span>重置<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="11-组装行内表单">11、组装行内表单</span></h3><p>行内表单：表单元素在一行显示（div 盒子也不会全部占完宽度）</p><ul><li>  给 div 设置 <code>class=&quot;layui-inline&quot;</code> ： 定义外层行内</li><li>  给 div 设置 <code>class=&quot;layui-input-inline&quot;</code> ：定义内层行内</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 定义外层行内 .layui-inline  --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-inline&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-label&quot;</span>&gt;</span>范围<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 定义内层行内 .layui-input-inline --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-inline&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100px;&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;price_min&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;￥&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-mid&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-inline&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100px;&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;price_max&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;￥&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 定义外层行内 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-inline&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-label&quot;</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 定义内层行内 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-inline&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100px;&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210908232653.png" alt="image-20210908232653785"></p><h3><span id="12-表单方块风格">12、表单方块风格</span></h3><ul><li>  给 form 标签追加 <code>class=&quot;layui-form-pane &quot;</code>，来设定表单的方框风格。</li><li>  内部结构不变，值得注意的是：复选框/开关/单选框 这些组合在该风格下需要额外添加 <code>pane</code>属性</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 通过追加 layui-form-pane 的class，来设定表单的方框风格。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form  layui-form-pane&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">      内部结构都一样，值得注意的是 复选框/开关/单选框 这些组合在该风格下需要额外添加 pane属性 </span><br><span class="hljs-comment">  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-item&quot;</span> <span class="hljs-attr">pane</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-form-label&quot;</span>&gt;</span>单选框<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input-block&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;男&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;女&quot;</span> <span class="hljs-attr">checked</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2><span id="第八章-layer弹出层">第八章 layer弹出层</span></h2><p>弹出层官方文档：<a href="https://www.layui.com/doc/modules/layer.html#use">https://www.layui.com/doc/modules/layer.html#use</a></p><p>layer可以独立使用，也可以通过Layui模块化使用</p><h3><span id="第一种方式">第一种方式</span></h3><ol><li>  独立使用，在官网下载，将layer.css和layer.js拷贝到项目中</li></ol><p>注意还需要导入Jquery。</p><ol start="2"><li><p>  然后在页面中导入下面三项</p></li><li><p>  layer.css</p></li><li><p>  layer.js</p></li><li><p>  jquery.js</p></li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 引入layer.css --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;layer/layer.css&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!-- 引入jquery.js --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery-3.4.1.js&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入layer.js --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;layer/layer.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ol start="3"><li>  使用</li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">layer.msg(<span class="hljs-string">&quot;Hello&quot;</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="第二种方式常用">第二种方式（常用）</span></h3><ol><li><p>  只需要引入layui的css和js文件，在layui.use()中加载模块</p></li><li><p>  加载模块并弹出个消息（依赖模块：layer）</p></li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//加载模块</span></span><br><span class="javascript">layui.use(<span class="hljs-string">&#x27;layer&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">var</span> layer = layui.layer;</span><br><span class="javascript"></span><br><span class="javascript">layer.msg(<span class="hljs-string">&quot;Hello World!&quot;</span>);</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="基础参数">基础参数</span></h3><h4><span id="1-type-基本层类型">1.   type 基本层类型</span></h4><ul><li>  0 ➡ 信息框，默认</li><li>  1 ➡ 页面层</li><li>  2 ➡ iframe层</li><li>  3 ➡ 加载层</li><li>  4 ➡ tips层</li></ul><p>0 信息框（普通的信息框）</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//信息框</span><br>layer.open(&#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-number">0</span>,  <span class="hljs-comment">//信息框</span><br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;我是标题&#x27;</span>,   <span class="hljs-comment">//标题</span><br>    <span class="hljs-attr">content</span>:<span class="hljs-string">&#x27;我是消息内容&#x27;</span><br>&#125;);<br></code></pre></div></td></tr></table></figure><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210909183637.png" alt="image-20210909183637774" style="zoom:50%;"><p>1 页面层（内容可以包含html）</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//页面层</span><br>layer.open(&#123;<br>    <span class="hljs-attr">type</span>:<span class="hljs-number">1</span>,<br>    <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;系统消息&#x27;</span>,<br>    <span class="hljs-attr">content</span>:<span class="hljs-string">&#x27;&lt;div style=&quot;color: red&quot;&gt;我是内容&lt;/div&gt;&#x27;</span><br>&#125;);<br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210909184004.png" alt="image-20210909184004509"></p><p>2 iframe层（内容可以包含一个链接，显示网页）</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//iframe层</span><br>layer.open(&#123;<br>    <span class="hljs-attr">type</span>:<span class="hljs-number">2</span>,<br>    <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;系统消息&#x27;</span>,<br>    <span class="hljs-attr">content</span>:[<span class="hljs-string">&quot;https://www.bilibili.com/&quot;</span>,<span class="hljs-string">&#x27;no&#x27;</span>]   <span class="hljs-comment">//0表示没有滚动条</span><br>&#125;);<br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210909184401.png" alt="image-20210909184401449"></p><p>tips层</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//tips层</span><br>layer.open(&#123;<br>    <span class="hljs-attr">type</span>:<span class="hljs-number">4</span>,<br>    <span class="hljs-attr">content</span>:[<span class="hljs-string">&#x27;内容&#x27;</span>,<span class="hljs-string">&#x27;#sp&#x27;</span>]    <span class="hljs-comment">//数组第二项即吸附元素选择器或者DOM</span><br>&#125;);<br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210909184645.png" alt="image-20210909184645360"></p><h4><span id="2-title-标题">2. title 标题</span></h4><ol><li>  传入普通字符串</li></ol><figure class="highlight hsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs hsp"><span class="hljs-keyword">title</span>:<span class="hljs-string">&#x27;我是标题&#x27;</span><br></code></pre></div></td></tr></table></figure><ol start="2"><li>  带自定义css样式</li></ol><figure class="highlight prolog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs prolog">title:[<span class="hljs-string">`文本`</span>,<span class="hljs-string">`font-size:18px;`</span>]<br></code></pre></div></td></tr></table></figure><ol start="3"><li>  不想显示标题栏</li></ol><figure class="highlight maxima"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs maxima"><span class="hljs-built_in">title</span>:<span class="hljs-literal">false</span>;<br></code></pre></div></td></tr></table></figure><h4><span id="3-area宽高">3. area宽高</span></h4><ul><li>  类型： String/Array，默认为<code>auto</code></li><li>  在默认状态下，layer是宽高都自适应的</li><li>  但当你只想定义宽度时，你可以 <code>area: &#39;500px&#39;</code>，高度仍然是自适应的</li><li>  当你宽高都要定义时，你可以 <code>area: [&#39;500px&#39;, &#39;300px&#39;]</code></li></ul><h4><span id="4-按钮">4. 按钮</span></h4><ul><li><p>  类型：String/Array，默认 ‘确认’</p></li><li><p>  信息框(type = 0)模式时，btn默认是一个确认按钮，其它层类型则默认不显示，加载层和tips层则无效。</p></li><li><p>  当您只想自定义一个按钮时，你可以 btn: ‘我知道了’，当你要定义两个按钮时，你可以btn: [‘yes’, ‘no’]</p></li><li><p>  当然，你也可以定义更多按钮，比如：btn: [‘按钮1’, ‘按钮2’, ‘按钮3’, …]，<strong>按钮1的回调是yes，而从按钮2开始，则回调为btn2: function(){}，以此类推</strong></p></li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        layui.use(<span class="hljs-string">&#x27;layer&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> layer = layui.layer;</span><br><span class="javascript"></span><br><span class="javascript">            layer.msg(<span class="hljs-string">&#x27;你愿意和我做朋友么？&#x27;</span>, &#123;</span><br><span class="javascript">                <span class="hljs-attr">time</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">//不自动关闭</span></span><br><span class="javascript">                <span class="hljs-attr">btn</span>: [<span class="hljs-string">&#x27;当然愿意&#x27;</span>, <span class="hljs-string">&#x27;狠心拒绝&#x27;</span>], <span class="hljs-comment">// [按钮1,按钮2]</span></span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-comment">// 按钮1的回调函数</span></span><br><span class="javascript">                <span class="hljs-attr">yes</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>) </span>&#123;</span><br><span class="javascript">                    layer.close(index); <span class="hljs-comment">// 关闭当前弹出框</span></span><br><span class="javascript">                    layer.msg(<span class="hljs-string">&#x27;新朋友，你好！&#x27;</span>, &#123;</span><br><span class="javascript">                        <span class="hljs-attr">icon</span>: <span class="hljs-number">6</span>, <span class="hljs-comment">// 图标</span></span><br><span class="javascript">                        <span class="hljs-attr">btn</span>: [<span class="hljs-string">&#x27;开心&#x27;</span>, <span class="hljs-string">&#x27;快乐&#x27;</span>]</span><br><span class="javascript">                    &#125;);</span><br><span class="javascript">                &#125;,</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-comment">// 按钮2的回调函数</span></span><br><span class="javascript">                <span class="hljs-attr">btn2</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>) </span>&#123;</span><br><span class="javascript">                    layer.close(index); <span class="hljs-comment">// 关闭当前弹出框</span></span><br><span class="javascript">                    layer.msg(<span class="hljs-string">&#x27;好吧,再见!&#x27;</span>, &#123;</span><br><span class="javascript">                        <span class="hljs-attr">icon</span>: <span class="hljs-number">5</span>,</span><br><span class="javascript">                        <span class="hljs-attr">btn</span>: <span class="hljs-string">&#x27;88&#x27;</span></span><br><span class="javascript">                    &#125;)</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;);</span><br><span class="javascript"></span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210909182228.png" alt="在这里插入图片描述"></p><h4><span id="5-time自动关闭">5. time自动关闭</span></h4><ul><li>  类型：Number，默认为0</li><li>  默认不会关闭。<strong>当你想关闭时，可以 <code>time:5000</code> ，即代表 5 s 后自动关闭</strong></li></ul><h4><span id="6-content内容">6. content内容</span></h4><ul><li>  类型：String/DOM/Array，默认 : “ “</li><li>  content 可传入的值是灵活多变的，不仅可以传入普通的 html 内容，还可以指定DOM，更可以随着 type 的不同而不同</li><li>  页面层 ,就是信息提示</li><li>  iframe 弹出来的是页面,例如百度页面</li><li>  tips 就是一个信息提示小框</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">//加载模块</span></span><br><span class="javascript">    layui.use(<span class="hljs-string">&#x27;layer&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> layer = layui.layer;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">/* 页面层 */</span></span><br><span class="javascript">        layer.open(&#123;</span><br><span class="javascript">            <span class="hljs-attr">type</span>: <span class="hljs-number">1</span>,</span><br><span class="javascript">            <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;系统消息&quot;</span>,</span><br><span class="javascript">            <span class="hljs-comment">// content可以传入任意的文本或html</span></span><br><span class="javascript">            <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;&lt;div style=&#x27;height:200px;width:400px&#x27;&gt;Hello&lt;/div&gt;&quot;</span></span><br><span class="javascript">        &#125;);</span><br><span class="javascript">        </span><br><span class="javascript">        <span class="hljs-comment">/* iframe层 */</span></span><br><span class="javascript">        layer.open(&#123;</span><br><span class="javascript">            <span class="hljs-attr">type</span>: <span class="hljs-number">2</span>,</span><br><span class="javascript">            <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;系统消息&quot;</span>,</span><br><span class="javascript">            <span class="hljs-comment">// content是一个URL，如果你不想让iframe出现滚动条，你还可以content: [&#x27;url&#x27;, &#x27;no&#x27;]</span></span><br><span class="javascript">            <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;http://www.baidu.com&quot;</span>,</span><br><span class="javascript">            <span class="hljs-comment">// content:[&quot;http://www.baidu.com&quot;,&#x27;no&#x27;],</span></span><br><span class="javascript">            <span class="hljs-comment">// area: &#x27;500px&#x27; ,// 设置宽度，高度自适应</span></span><br><span class="javascript">            <span class="hljs-attr">area</span>: [<span class="hljs-string">&#x27;800px&#x27;</span>, <span class="hljs-string">&#x27;400px&#x27;</span>] <span class="hljs-comment">// 设置宽高   </span></span><br><span class="javascript">        &#125;);</span><br><span class="javascript">        </span><br><span class="javascript">        </span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>内容1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>内容2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>内容3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sp&quot;</span>&gt;</span>内容4<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        layui.use(<span class="hljs-string">&#x27;layer&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> layer = layui.layer;</span><br><span class="javascript">            <span class="hljs-comment">/* tips层 */</span></span><br><span class="javascript">            layer.open(&#123;</span><br><span class="javascript">                <span class="hljs-attr">type</span>: <span class="hljs-number">4</span>,</span><br><span class="javascript">                <span class="hljs-attr">content</span>: [<span class="hljs-string">&#x27;内容&#x27;</span>, <span class="hljs-string">&#x27;#sp&#x27;</span>] <span class="hljs-comment">//数组第二项即吸附元素选择器或者DOM</span></span><br><span class="javascript">            &#125;);</span><br><span class="javascript"></span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210909182941.png" alt="在这里插入图片描述"></p><h4><span id="7-icon图标">7. icon图标</span></h4><ul><li>  类型：Number，默认：-1(信息框) / 0(加载层)</li><li>  信息框默认不显示图标。当你想显示图标时，默认皮肤可以传入<em>0-6</em></li><li>  如果是加载层，可以传入<em>0-2</em></li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        layui.use(<span class="hljs-string">&#x27;layer&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> layer = layui.layer;</span><br><span class="javascript">            <span class="hljs-comment">//加载层</span></span><br><span class="javascript">            layer.alert(<span class="hljs-string">&#x27;酷毙了&#x27;</span>, &#123;</span><br><span class="javascript">                <span class="hljs-attr">icon</span>: <span class="hljs-number">1</span><span class="hljs-comment">// 0 ~ 6 均可填</span></span><br><span class="javascript">            &#125;);</span><br><span class="javascript"></span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210909182917.png" alt="在这里插入图片描述"></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        layui.use(<span class="hljs-string">&#x27;layer&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> layer = layui.layer;</span><br><span class="javascript">            <span class="hljs-comment">//信息层</span></span><br><span class="javascript">            layer.msg(<span class="hljs-string">&#x27;不开心。。&#x27;</span>, &#123;</span><br><span class="javascript">                <span class="hljs-attr">icon</span>: <span class="hljs-number">5</span><span class="hljs-comment">// -1 ~ 6 均可填</span></span><br><span class="javascript">            &#125;);</span><br><span class="javascript"></span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210909183039.png" alt="在这里插入图片描述"></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        layui.use(<span class="hljs-string">&#x27;layer&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> layer = layui.layer;</span><br><span class="javascript"><span class="hljs-comment">// 加载层</span></span><br><span class="javascript">            layer.load(<span class="hljs-number">1</span>); <span class="hljs-comment">// 0 ~ 2 均可填</span></span><br><span class="javascript"></span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210909183115.png" alt="image-20210909183115324"></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        layui.use(<span class="hljs-string">&#x27;layer&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> layer = layui.layer;</span><br><span class="javascript">            layer.msg(<span class="hljs-string">&#x27;你愿意和我做朋友么？&#x27;</span>, &#123;</span><br><span class="javascript">                <span class="hljs-attr">time</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">//第一个弹出层不自动关闭(因为默认弹出层会5s自动关闭)</span></span><br><span class="javascript">                <span class="hljs-attr">btn</span>: [<span class="hljs-string">&#x27;当然愿意&#x27;</span>, <span class="hljs-string">&#x27;狠心拒绝&#x27;</span>], <span class="hljs-comment">// 按钮</span></span><br><span class="javascript">                <span class="hljs-attr">yes</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>) </span>&#123;</span><br><span class="javascript">                    layer.close(index); <span class="hljs-comment">// 关闭当前弹出框</span></span><br><span class="javascript">                    layer.msg(<span class="hljs-string">&#x27;新朋友，你好！&#x27;</span>, &#123;</span><br><span class="javascript">                        <span class="hljs-attr">icon</span>: <span class="hljs-number">6</span>, <span class="hljs-comment">// 图标</span></span><br><span class="javascript">                        <span class="hljs-attr">btn</span>: [<span class="hljs-string">&#x27;开心&#x27;</span>, <span class="hljs-string">&#x27;快乐&#x27;</span>]</span><br><span class="javascript">                    &#125;);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;);</span><br><span class="javascript"></span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210909183131.png" alt="在这里插入图片描述"></p><h4><span id="8-内置方法不多介绍多看文档">8. 内置方法（不多介绍，多看文档）</span></h4><p>layer.msg，提示框</p><p>layer.alert，普通信息科</p><p>layer.load，加载</p><h2><span id="第九章-laydate日期和时间选择">第九章 laydate日期和时间选择</span></h2><p>网站：<a href="https://www.layui.com/laydate/?alone">layDate - JS日期与时间组件/日历插件 (layui.com)</a></p><p>文档：<a href="https://www.layui.com/doc/modules/laydate.html">日期和时间组件文档 - Layui</a></p><h3><span id="快速上手">快速上手</span></h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>10-日期与时间选择<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--导入css--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>  <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;layui/css/layui.css&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--导入js--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;layui/layui.js&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-inline&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;date1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        layui.use(<span class="hljs-string">&#x27;laydate&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">           <span class="hljs-keyword">var</span> laydate =  layui.laydate;</span><br><span class="javascript">           <span class="hljs-comment">//加载laydate实例</span></span><br><span class="javascript">           laydate.render(&#123;</span><br><span class="javascript">                <span class="hljs-attr">elem</span>:<span class="hljs-string">&quot;#date1&quot;</span>   <span class="hljs-comment">//绑定id</span></span><br><span class="javascript">           &#125;);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="基础参数">基础参数</span></h3><ol><li><p>  <strong>elem - 绑定元素</strong></p></li><li><p><strong>type - 控件选择类型</strong></p><table><thead><tr><th align="left">type可选值</th><th align="left">名称</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">year</td><td align="left">年选择器</td><td align="left">只提供年列表选择</td></tr><tr><td align="left">month</td><td align="left">年月选择器</td><td align="left">只提供年、月选择</td></tr><tr><td align="left">date</td><td align="left">日期选择器</td><td align="left">可选择：年、月、日。type默认值，一般可不填</td></tr><tr><td align="left">time</td><td align="left">时间选择器</td><td align="left">只提供时、分、秒选择</td></tr><tr><td align="left">datetime</td><td align="left">日期时间选择器</td><td align="left">可选择：年、月、日、时、分、秒</td></tr></tbody></table></li><li><p><strong>format - 自定义格式</strong></p><table><thead><tr><th align="left">格式符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">yyyy</td><td align="left">年份，至少四位数。如果不足四位，则前面补零</td></tr><tr><td align="left">y</td><td align="left">年份，不限制位数，即不管年份多少位，前面均不补零</td></tr><tr><td align="left">MM</td><td align="left">月份，至少两位数。如果不足两位，则前面补零。</td></tr><tr><td align="left">M</td><td align="left">月份，允许一位数。</td></tr><tr><td align="left">dd</td><td align="left">日期，至少两位数。如果不足两位，则前面补零。</td></tr><tr><td align="left">d</td><td align="left">日期，允许一位数。</td></tr><tr><td align="left">HH</td><td align="left">小时，至少两位数。如果不足两位，则前面补零。</td></tr><tr><td align="left">H</td><td align="left">小时，允许一位数。</td></tr><tr><td align="left">mm</td><td align="left">分钟，至少两位数。如果不足两位，则前面补零。</td></tr><tr><td align="left">m</td><td align="left">分钟，允许一位数。</td></tr><tr><td align="left">ss</td><td align="left">秒数，至少两位数。如果不足两位，则前面补零。</td></tr><tr><td align="left">s</td><td align="left">秒数，允许一位数。</td></tr></tbody></table><table><thead><tr><th align="left">格式</th><th align="left">示例值</th></tr></thead><tbody><tr><td align="left">yyyy-MM-dd HH:mm:ss</td><td align="left">2017-08-18 20:08:08</td></tr><tr><td align="left">yyyy年MM月dd日 HH时mm分ss秒</td><td align="left">2017年08月18日 20时08分08秒</td></tr><tr><td align="left">yyyyMMdd</td><td align="left">20170818</td></tr><tr><td align="left">dd/MM/yyyy</td><td align="left">18/08/2017</td></tr><tr><td align="left">yyyy年M月</td><td align="left">2017年8月</td></tr><tr><td align="left">M月d日</td><td align="left">8月18日</td></tr><tr><td align="left">北京时间：HH点mm分</td><td align="left">北京时间：20点08分</td></tr><tr><td align="left">yyyy年的M月某天晚上，大概H点</td><td align="left">2017年的8月某天晚上，大概20点</td></tr></tbody></table></li><li><p><strong>value - 初始值</strong></p><p>  类型：<em>String</em>，默认值：<em>new Date()</em></p><p>  支持传入符合format参数设定的日期格式字符，或者 new Date()</p></li></ol><h2><span id="第十章-laypage-分页">第十章 laypage 分页</span></h2><p>依赖laypage模块</p><p>文档：<a href="https://www.layui.com/doc/modules/laypage.html">分页组件文档 - Layui</a></p><h3><span id="演示">演示</span></h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>11-分页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--导入css--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>  <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;layui/css/layui.css&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--导入js--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;layui/layui.js&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;page&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">//加载laypage模块</span></span><br><span class="javascript">        layui.use(<span class="hljs-string">&#x27;laypage&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> laypage = layui.laypage;</span><br><span class="javascript">           <span class="hljs-comment">//加载laypage实例</span></span><br><span class="javascript">            laypage.render(&#123;</span><br><span class="javascript">                <span class="hljs-attr">elem</span>: <span class="hljs-string">&quot;page&quot;</span>, <span class="hljs-comment">//绑定id，不需要加#</span></span><br><span class="javascript">                <span class="hljs-attr">count</span>: <span class="hljs-number">100</span>, <span class="hljs-comment">//总数，一般从服务器获取</span></span><br><span class="javascript">                <span class="hljs-attr">limit</span>: <span class="hljs-number">5</span>,    <span class="hljs-comment">//每页显示的数量</span></span><br><span class="javascript">                <span class="hljs-attr">limits</span>: [<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>], <span class="hljs-comment">//每页条数选择框</span></span><br><span class="javascript">                <span class="hljs-attr">layout</span>: [<span class="hljs-string">&#x27;prev&#x27;</span>,<span class="hljs-string">&#x27;page&#x27;</span>,<span class="hljs-string">&#x27;next&#x27;</span>,<span class="hljs-string">&#x27;limit&#x27;</span>],  <span class="hljs-comment">//自定义排版</span></span><br><span class="javascript">                <span class="hljs-attr">groups</span>:<span class="hljs-number">10</span>  <span class="hljs-comment">//连续显示的页码数</span></span><br><span class="javascript">            &#125;);</span><br><span class="javascript"></span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="分页的回调">分页的回调</span></h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>11-分页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--导入css--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>  <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;layui/css/layui.css&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--导入js--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;layui/layui.js&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;page&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">//加载laypage模块</span></span><br><span class="javascript">        layui.use(<span class="hljs-string">&#x27;laypage&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> laypage = layui.laypage;</span><br><span class="javascript">            <span class="hljs-comment">//切换分页的回调</span></span><br><span class="javascript">            laypage.render(&#123;</span><br><span class="javascript">                <span class="hljs-attr">elem</span>: <span class="hljs-string">&#x27;page&#x27;</span></span><br><span class="javascript">                ,<span class="hljs-attr">count</span>: <span class="hljs-number">70</span> <span class="hljs-comment">//数据总数，从服务端得到</span></span><br><span class="javascript">                ,<span class="hljs-attr">jump</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">obj, first</span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-comment">//obj包含了当前分页的所有参数，比如：</span></span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(obj.curr); <span class="hljs-comment">//得到当前页，以便向服务端请求对应页的数据。</span></span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(obj.limit); <span class="hljs-comment">//得到每页显示的条数</span></span><br><span class="javascript"></span><br><span class="javascript">                    <span class="hljs-comment">//首次不执行</span></span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(!first)&#123;</span><br><span class="javascript">                        <span class="hljs-comment">//do something</span></span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2><span id="第十一章-数据表格">第十一章 数据表格</span></h2><h3><span id="快速上手">快速上手</span></h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>12-数据表格<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--导入css--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>  <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;layui/css/layui.css&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--导入js--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;layui/layui.js&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        layui.use(<span class="hljs-string">&#x27;table&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> table = layui.table;</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//加载table实例</span></span><br><span class="javascript">            table.render(&#123;</span><br><span class="javascript">                <span class="hljs-attr">elem</span>: <span class="hljs-string">&quot;#demo&quot;</span>,   <span class="hljs-comment">//绑定id</span></span><br><span class="javascript">                <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;user.json&quot;</span>,    <span class="hljs-comment">//数据接口</span></span><br><span class="javascript">                <span class="hljs-attr">cols</span>:[[</span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;用户编号&#x27;</span>, <span class="hljs-attr">sort</span>:<span class="hljs-literal">true</span>, <span class="hljs-attr">width</span>:<span class="hljs-number">120</span>&#125;,</span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;用户姓名&#x27;</span>, <span class="hljs-attr">width</span>:<span class="hljs-number">80</span>&#125;,</span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;sex&#x27;</span>, <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;性别&#x27;</span>, <span class="hljs-attr">width</span>:<span class="hljs-number">80</span>,<span class="hljs-attr">sort</span>:<span class="hljs-literal">true</span>&#125;,</span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;city&#x27;</span>, <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;城市&#x27;</span>, <span class="hljs-attr">width</span>:<span class="hljs-number">80</span>&#125;,</span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;sign&#x27;</span>, <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;性别&#x27;</span>&#125;,</span><br><span class="javascript">                ]]</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>json数据：</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">&quot;msg&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-attr">&quot;count&quot;</span>: <span class="hljs-number">50</span>,<br>  <span class="hljs-attr">&quot;data&quot;</span>: [&#123;<br>    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">10000</span>,<br>    <span class="hljs-attr">&quot;username&quot;</span>: <span class="hljs-string">&quot;user-0&quot;</span>,<br>    <span class="hljs-attr">&quot;sex&quot;</span>: <span class="hljs-string">&quot;女&quot;</span>,<br>    <span class="hljs-attr">&quot;city&quot;</span>: <span class="hljs-string">&quot;城市-0&quot;</span>,<br>    <span class="hljs-attr">&quot;sign&quot;</span>: <span class="hljs-string">&quot;签名-0&quot;</span><br>  &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">10001</span>,<br>      <span class="hljs-attr">&quot;username&quot;</span>: <span class="hljs-string">&quot;user-1&quot;</span>,<br>      <span class="hljs-attr">&quot;sex&quot;</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>      <span class="hljs-attr">&quot;city&quot;</span>: <span class="hljs-string">&quot;城市-1&quot;</span>,<br>      <span class="hljs-attr">&quot;sign&quot;</span>: <span class="hljs-string">&quot;签名-1&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">10002</span>,<br>      <span class="hljs-attr">&quot;username&quot;</span>: <span class="hljs-string">&quot;user-2&quot;</span>,<br>      <span class="hljs-attr">&quot;sex&quot;</span>: <span class="hljs-string">&quot;女&quot;</span>,<br>      <span class="hljs-attr">&quot;city&quot;</span>: <span class="hljs-string">&quot;城市-2&quot;</span>,<br>      <span class="hljs-attr">&quot;sign&quot;</span>: <span class="hljs-string">&quot;签名-2&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">10003</span>,<br>      <span class="hljs-attr">&quot;username&quot;</span>: <span class="hljs-string">&quot;user-3&quot;</span>,<br>      <span class="hljs-attr">&quot;sex&quot;</span>: <span class="hljs-string">&quot;女&quot;</span>,<br>      <span class="hljs-attr">&quot;city&quot;</span>: <span class="hljs-string">&quot;城市-3&quot;</span>,<br>      <span class="hljs-attr">&quot;sign&quot;</span>: <span class="hljs-string">&quot;签名-3&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">10004</span>,<br>      <span class="hljs-attr">&quot;username&quot;</span>: <span class="hljs-string">&quot;user-4&quot;</span>,<br>      <span class="hljs-attr">&quot;sex&quot;</span>: <span class="hljs-string">&quot;男&quot;</span>,<br>      <span class="hljs-attr">&quot;city&quot;</span>: <span class="hljs-string">&quot;城市-4&quot;</span>,<br>      <span class="hljs-attr">&quot;sign&quot;</span>: <span class="hljs-string">&quot;签名-4&quot;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></div></td></tr></table></figure><h3><span id="三种渲染方式">三种渲染方式</span></h3><table><thead><tr><th align="left"></th><th align="left">方式</th><th align="left">机制</th><th>适用场景</th></tr></thead><tbody><tr><td align="left">01.</td><td align="left"><a href="https://www.layui.com/doc/modules/table.html#methodRender">方法渲染</a></td><td align="left">用JS方法的配置完成渲染</td><td>（推荐）无需写过多的 HTML，在 JS 中指定原始元素，再设定各项参数即可。</td></tr><tr><td align="left">02.</td><td align="left"><a href="https://www.layui.com/doc/modules/table.html#autoRender">自动渲染</a></td><td align="left">HTML配置，自动渲染</td><td>无需写过多 JS，可专注于 HTML 表头部分</td></tr><tr><td align="left">03.</td><td align="left"><a href="https://www.layui.com/doc/modules/table.html#parseTable">转换静态表格</a></td><td align="left">转化一段已有的表格元素</td><td>无需配置数据接口，在JS中指定表格元素，并简单地给表头加上自定义属性即可</td></tr></tbody></table><h4><span id="方法渲染">方法渲染</span></h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span> <span class="hljs-attr">lay-filter</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> table = layui.table;<br><br><span class="hljs-comment">//执行渲染</span><br>table.render(&#123;<br>    <span class="hljs-attr">elem</span>: <span class="hljs-string">&#x27;#demo&#x27;</span> <span class="hljs-comment">//指定原始表格元素选择器（推荐id选择器）</span><br>    ,<span class="hljs-attr">height</span>: <span class="hljs-number">315</span> <span class="hljs-comment">//容器高度</span><br>    ,<span class="hljs-attr">cols</span>: [&#123;&#125;] <span class="hljs-comment">//设置表头</span><br>    <span class="hljs-comment">//,…… //更多参数参考右侧目录：基本参数选项</span><br>&#125;);<br></code></pre></div></td></tr></table></figure><h4><span id="自动渲染">自动渲染</span></h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-table&quot;</span> <span class="hljs-attr">lay-data</span>=<span class="hljs-string">&quot;&#123;url:&#x27;user.json&#x27;&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">lay-data</span>=<span class="hljs-string">&quot;&#123;field:&#x27;id&#x27;&#125;&quot;</span>&gt;</span>ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">lay-data</span>=<span class="hljs-string">&quot;&#123;field:&#x27;username&#x27;&#125;&quot;</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">lay-data</span>=<span class="hljs-string">&quot;&#123;field:&#x27;sex&#x27;, sort: true&#125;&quot;</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="转换静态表格">转换静态表格</span></h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">lay-filter</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">lay-data</span>=<span class="hljs-string">&quot;&#123;field:&#x27;username&#x27;, width:100&#125;&quot;</span>&gt;</span>昵称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">lay-data</span>=<span class="hljs-string">&quot;&#123;field:&#x27;experience&#x27;, width:80, sort:true&#125;&quot;</span>&gt;</span>积分<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">lay-data</span>=<span class="hljs-string">&quot;&#123;field:&#x27;sign&#x27;&#125;&quot;</span>&gt;</span>签名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span> <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>贤心1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>66<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>人生就像是一场修行a<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>贤心2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>88<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>人生就像是一场修行b<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>贤心3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>33<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>人生就像是一场修行c<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//转换静态表格</span><br>table.init(<span class="hljs-string">&#x27;demo&#x27;</span>, &#123;<br>  <span class="hljs-attr">height</span>: <span class="hljs-number">315</span> <span class="hljs-comment">//设置高度</span><br>  ,<span class="hljs-attr">limit</span>: <span class="hljs-number">10</span> <span class="hljs-comment">//注意：请务必确保 limit 参数（默认：10）是与你服务端限定的数据条数一致</span><br>  <span class="hljs-comment">//支持所有基础参数</span><br>&#125;); <br></code></pre></div></td></tr></table></figure><h3><span id="基础参数">基础参数</span></h3><p>看文档：<a href="https://www.layui.com/doc/modules/table.html#options">table 数据表格文档 - Layui</a></p><h3><span id="开启分页表格工具栏表头工具栏">开启分页/表格工具栏/表头工具栏</span></h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>数据表格<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--导入css--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>  <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;layui/css/layui.css&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--导入js--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;layui/layui.js&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--容器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-hide&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--头部工具栏--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/html&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;toolbarDemo&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn-container&quot;</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-sm&quot;</span> <span class="hljs-attr">lay-event</span>=<span class="hljs-string">&quot;getCheckData&quot;</span>&gt;</span>获取选中行数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-sm&quot;</span> <span class="hljs-attr">lay-event</span>=<span class="hljs-string">&quot;getCheckLength&quot;</span>&gt;</span>获取选中数目<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-sm&quot;</span> <span class="hljs-attr">lay-event</span>=<span class="hljs-string">&quot;isAll&quot;</span>&gt;</span>验证是否全选<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">    </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 行工具栏 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/html&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;barDemo&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-xs&quot;</span> <span class="hljs-attr">lay-event</span>=<span class="hljs-string">&quot;edit&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-danger layui-btn-xs&quot;</span> <span class="hljs-attr">lay-event</span>=<span class="hljs-string">&quot;del&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">    </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        layui.use(<span class="hljs-string">&#x27;table&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> table = layui.table;</span><br><span class="javascript"></span><br><span class="javascript">            table.render(&#123;</span><br><span class="javascript">                <span class="hljs-attr">elem</span>: <span class="hljs-string">&#x27;#demo&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;user.json&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">cols</span>: [[</span><br><span class="javascript">                    <span class="hljs-comment">// 设置序列号列</span></span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;aa&#x27;</span>,<span class="hljs-attr">type</span>:<span class="hljs-string">&quot;numbers&quot;</span>&#125;,</span><br><span class="javascript">                    <span class="hljs-comment">// 设置复选框列</span></span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;aa&#x27;</span>,<span class="hljs-attr">type</span>:<span class="hljs-string">&quot;checkbox&quot;</span>&#125;,</span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;用户编号&#x27;</span>,<span class="hljs-attr">sort</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">width</span>:<span class="hljs-number">120</span>,<span class="hljs-attr">hide</span>:<span class="hljs-literal">true</span>&#125;,</span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;username&#x27;</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;用户姓名&#x27;</span>,<span class="hljs-attr">width</span>:<span class="hljs-number">100</span>,<span class="hljs-attr">edit</span>:<span class="hljs-string">&#x27;text&#x27;</span>&#125;,</span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;sex&#x27;</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;性别&#x27;</span>,<span class="hljs-attr">width</span>:<span class="hljs-number">100</span>,<span class="hljs-attr">sort</span>:<span class="hljs-literal">true</span>&#125;,</span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;city&#x27;</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;城市&#x27;</span>,<span class="hljs-attr">width</span>:<span class="hljs-number">100</span>&#125;,</span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;sign&#x27;</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;签名&#x27;</span>,<span class="hljs-attr">edit</span>:<span class="hljs-string">&#x27;text&#x27;</span>&#125;,</span><br><span class="javascript">                    <span class="hljs-comment">// 设置行工具栏</span></span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&quot;操作&quot;</span>,<span class="hljs-attr">toolbar</span>:<span class="hljs-string">&quot;#barDemo&quot;</span>&#125;,</span><br><span class="javascript">                ]],</span><br><span class="javascript">                <span class="hljs-comment">//开启分页</span></span><br><span class="javascript">                <span class="hljs-attr">page</span>: <span class="hljs-literal">true</span>,</span><br><span class="javascript">                <span class="hljs-comment">//设置头工具栏</span></span><br><span class="javascript">                <span class="hljs-attr">toolbar</span>:<span class="hljs-string">&quot;#toolbarDemo&quot;</span></span><br><span class="javascript">            &#125;);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="监听头部工具栏">监听头部工具栏</span></h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>数据表格<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--导入css--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>  <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;layui/css/layui.css&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--导入js--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;layui/layui.js&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--容器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span> <span class="hljs-attr">lay-filter</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--表格工具栏--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/html&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;toolbarDemo&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn-container&quot;</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-sm&quot;</span> <span class="hljs-attr">lay-event</span>=<span class="hljs-string">&quot;getCheckData&quot;</span>&gt;</span>获取选中行数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-sm&quot;</span> <span class="hljs-attr">lay-event</span>=<span class="hljs-string">&quot;getCheckLength&quot;</span>&gt;</span>获取选中数目<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-sm&quot;</span> <span class="hljs-attr">lay-event</span>=<span class="hljs-string">&quot;isAll&quot;</span>&gt;</span>验证是否全选<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">    </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 表头工具栏 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/html&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;barDemo&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-xs&quot;</span> <span class="hljs-attr">lay-event</span>=<span class="hljs-string">&quot;edit&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-danger layui-btn-xs&quot;</span> <span class="hljs-attr">lay-event</span>=<span class="hljs-string">&quot;del&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">    </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        layui.use(<span class="hljs-string">&#x27;table&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> table = layui.table;</span><br><span class="javascript"></span><br><span class="javascript">            table.render(&#123;</span><br><span class="javascript">                <span class="hljs-attr">elem</span>: <span class="hljs-string">&#x27;#demo&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;user.json&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">cols</span>: [[</span><br><span class="javascript">                    <span class="hljs-comment">// 设置序列号列</span></span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;aa&#x27;</span>,<span class="hljs-attr">type</span>:<span class="hljs-string">&quot;numbers&quot;</span>&#125;,</span><br><span class="javascript">                    <span class="hljs-comment">// 设置复选框列</span></span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;aa&#x27;</span>,<span class="hljs-attr">type</span>:<span class="hljs-string">&quot;checkbox&quot;</span>&#125;,</span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;用户编号&#x27;</span>,<span class="hljs-attr">sort</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">width</span>:<span class="hljs-number">120</span>,<span class="hljs-attr">hide</span>:<span class="hljs-literal">true</span>&#125;,</span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;username&#x27;</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;用户姓名&#x27;</span>,<span class="hljs-attr">width</span>:<span class="hljs-number">100</span>,<span class="hljs-attr">edit</span>:<span class="hljs-string">&#x27;text&#x27;</span>&#125;,</span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;sex&#x27;</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;性别&#x27;</span>,<span class="hljs-attr">width</span>:<span class="hljs-number">100</span>,<span class="hljs-attr">sort</span>:<span class="hljs-literal">true</span>&#125;,</span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;city&#x27;</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;城市&#x27;</span>,<span class="hljs-attr">width</span>:<span class="hljs-number">100</span>&#125;,</span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;sign&#x27;</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;签名&#x27;</span>,<span class="hljs-attr">edit</span>:<span class="hljs-string">&#x27;text&#x27;</span>&#125;,</span><br><span class="javascript">                    <span class="hljs-comment">// 设置表头工具栏</span></span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&quot;操作&quot;</span>,<span class="hljs-attr">toolbar</span>:<span class="hljs-string">&quot;#barDemo&quot;</span>&#125;,</span><br><span class="javascript">                ]],</span><br><span class="javascript">                <span class="hljs-comment">//开启分页</span></span><br><span class="javascript">                <span class="hljs-attr">page</span>: <span class="hljs-literal">true</span>,</span><br><span class="javascript">                <span class="hljs-comment">//设置表格工具栏</span></span><br><span class="javascript">                <span class="hljs-attr">toolbar</span>:<span class="hljs-string">&quot;#toolbarDemo&quot;</span></span><br><span class="javascript">            &#125;);</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//监听头事件</span></span><br><span class="javascript">            table.on(<span class="hljs-string">&#x27;toolbar(test)&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(obj);</span><br><span class="javascript">                <span class="hljs-comment">//obj.config对象中可以获取id属性值，表示当前容器的ID属性值，也就是demo</span></span><br><span class="javascript">                <span class="hljs-comment">//获取当前表格被选中记录对象，返回数据</span></span><br><span class="javascript">                <span class="hljs-keyword">var</span> checkStatus = table.checkStatus(obj.config.id);</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(checkStatus);</span><br><span class="javascript">                <span class="hljs-comment">//获取事件名</span></span><br><span class="javascript">                <span class="hljs-keyword">var</span> eventName = obj.event;</span><br><span class="javascript">                <span class="hljs-keyword">switch</span> (eventName) &#123;</span><br><span class="javascript">                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;getCheckData&quot;</span> :</span><br><span class="javascript">                        <span class="hljs-comment">//获取被选中的记录的数组</span></span><br><span class="javascript">                        <span class="hljs-keyword">var</span> arr = checkStatus.data;</span><br><span class="javascript">                        layer.alert(<span class="hljs-built_in">JSON</span>.stringify(arr));</span><br><span class="javascript">                        <span class="hljs-keyword">break</span>;</span><br><span class="javascript">                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;getCheckLength&quot;</span> :</span><br><span class="javascript">                        <span class="hljs-keyword">var</span> arr = checkStatus.data;</span><br><span class="javascript">                        layer.alert(<span class="hljs-string">&quot;选中了&quot;</span>+arr.length+<span class="hljs-string">&quot;条记录&quot;</span>);</span><br><span class="javascript">                        <span class="hljs-keyword">break</span>;</span><br><span class="javascript">                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;isAll&quot;</span> :</span><br><span class="javascript">                        <span class="hljs-comment">//通过isAll属性判断是否全选</span></span><br><span class="javascript">                        <span class="hljs-keyword">var</span> flag = checkStatus.isAll;</span><br><span class="javascript">                        <span class="hljs-keyword">var</span> str = flag ? <span class="hljs-string">&quot;全选&quot;</span> : <span class="hljs-string">&quot;没有全选&quot;</span>;</span><br><span class="javascript">                        layer.msg(str)</span><br><span class="javascript">                        <span class="hljs-keyword">break</span>;</span><br><span class="javascript"></span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;);</span><br><span class="javascript"></span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="监听行工具栏">监听行工具栏</span></h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>数据表格<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--导入css--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>  <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;layui/css/layui.css&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--导入js--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;layui/layui.js&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--容器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span> <span class="hljs-attr">lay-filter</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--表格工具栏--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/html&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;toolbarDemo&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn-container&quot;</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-sm&quot;</span> <span class="hljs-attr">lay-event</span>=<span class="hljs-string">&quot;getCheckData&quot;</span>&gt;</span>获取选中行数据<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-sm&quot;</span> <span class="hljs-attr">lay-event</span>=<span class="hljs-string">&quot;getCheckLength&quot;</span>&gt;</span>获取选中数目<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-sm&quot;</span> <span class="hljs-attr">lay-event</span>=<span class="hljs-string">&quot;isAll&quot;</span>&gt;</span>验证是否全选<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">    </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 表头工具栏 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/html&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;barDemo&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-xs&quot;</span> <span class="hljs-attr">lay-event</span>=<span class="hljs-string">&quot;edit&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-danger layui-btn-xs&quot;</span> <span class="hljs-attr">lay-event</span>=<span class="hljs-string">&quot;del&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">    </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        layui.use(<span class="hljs-string">&#x27;table&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> table = layui.table;</span><br><span class="javascript"></span><br><span class="javascript">            table.render(&#123;</span><br><span class="javascript">                <span class="hljs-attr">elem</span>: <span class="hljs-string">&#x27;#demo&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;user.json&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">cols</span>: [[</span><br><span class="javascript">                    <span class="hljs-comment">// 设置序列号列</span></span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;aa&#x27;</span>,<span class="hljs-attr">type</span>:<span class="hljs-string">&quot;numbers&quot;</span>&#125;,</span><br><span class="javascript">                    <span class="hljs-comment">// 设置复选框列</span></span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;aa&#x27;</span>,<span class="hljs-attr">type</span>:<span class="hljs-string">&quot;checkbox&quot;</span>&#125;,</span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;用户编号&#x27;</span>,<span class="hljs-attr">sort</span>:<span class="hljs-literal">true</span>,<span class="hljs-attr">width</span>:<span class="hljs-number">120</span>,<span class="hljs-attr">hide</span>:<span class="hljs-literal">true</span>&#125;,</span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;username&#x27;</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;用户姓名&#x27;</span>,<span class="hljs-attr">width</span>:<span class="hljs-number">100</span>,<span class="hljs-attr">edit</span>:<span class="hljs-string">&#x27;text&#x27;</span>&#125;,</span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;sex&#x27;</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;性别&#x27;</span>,<span class="hljs-attr">width</span>:<span class="hljs-number">100</span>,<span class="hljs-attr">sort</span>:<span class="hljs-literal">true</span>&#125;,</span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;city&#x27;</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;城市&#x27;</span>,<span class="hljs-attr">width</span>:<span class="hljs-number">100</span>&#125;,</span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;sign&#x27;</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;签名&#x27;</span>,<span class="hljs-attr">edit</span>:<span class="hljs-string">&#x27;text&#x27;</span>&#125;,</span><br><span class="javascript">                    <span class="hljs-comment">// 设置表头工具栏</span></span><br><span class="javascript">                    &#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&quot;操作&quot;</span>,<span class="hljs-attr">toolbar</span>:<span class="hljs-string">&quot;#barDemo&quot;</span>&#125;,</span><br><span class="javascript">                ]],</span><br><span class="javascript">                <span class="hljs-comment">//开启分页</span></span><br><span class="javascript">                <span class="hljs-attr">page</span>: <span class="hljs-literal">true</span>,</span><br><span class="javascript">                <span class="hljs-comment">//设置表格工具栏</span></span><br><span class="javascript">                <span class="hljs-attr">toolbar</span>:<span class="hljs-string">&quot;#toolbarDemo&quot;</span></span><br><span class="javascript">            &#125;);</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//监听头事件</span></span><br><span class="javascript">            table.on(<span class="hljs-string">&#x27;toolbar(test)&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(obj);</span><br><span class="javascript">                <span class="hljs-comment">//obj.config对象中可以获取id属性值，表示当前容器的ID属性值，也就是demo</span></span><br><span class="javascript">                <span class="hljs-comment">//获取当前表格被选中记录对象，返回数据</span></span><br><span class="javascript">                <span class="hljs-keyword">var</span> checkStatus = table.checkStatus(obj.config.id);</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(checkStatus);</span><br><span class="javascript">                <span class="hljs-comment">//获取事件名</span></span><br><span class="javascript">                <span class="hljs-keyword">var</span> eventName = obj.event;</span><br><span class="javascript">                <span class="hljs-keyword">switch</span> (eventName) &#123;</span><br><span class="javascript">                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;getCheckData&quot;</span> :</span><br><span class="javascript">                        <span class="hljs-comment">//获取被选中的记录的数组</span></span><br><span class="javascript">                        <span class="hljs-keyword">var</span> arr = checkStatus.data;</span><br><span class="javascript">                        layer.alert(<span class="hljs-built_in">JSON</span>.stringify(arr));</span><br><span class="javascript">                        <span class="hljs-keyword">break</span>;</span><br><span class="javascript">                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;getCheckLength&quot;</span> :</span><br><span class="javascript">                        <span class="hljs-keyword">var</span> arr = checkStatus.data;</span><br><span class="javascript">                        layer.alert(<span class="hljs-string">&quot;选中了&quot;</span>+arr.length+<span class="hljs-string">&quot;条记录&quot;</span>);</span><br><span class="javascript">                        <span class="hljs-keyword">break</span>;</span><br><span class="javascript">                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;isAll&quot;</span> :</span><br><span class="javascript">                        <span class="hljs-comment">//通过isAll属性判断是否全选</span></span><br><span class="javascript">                        <span class="hljs-keyword">var</span> flag = checkStatus.isAll;</span><br><span class="javascript">                        <span class="hljs-keyword">var</span> str = flag ? <span class="hljs-string">&quot;全选&quot;</span> : <span class="hljs-string">&quot;没有全选&quot;</span>;</span><br><span class="javascript">                        layer.msg(str)</span><br><span class="javascript">                        <span class="hljs-keyword">break</span>;</span><br><span class="javascript"></span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;);</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">// 监听行工具栏时间</span></span><br><span class="javascript">            table.on(<span class="hljs-string">&#x27;tool(test)&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-comment">//得到当前操作航的相关信息</span></span><br><span class="javascript">                <span class="hljs-keyword">var</span> tr = obj.data;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(tr);</span><br><span class="javascript">                <span class="hljs-comment">// 得到时间名</span></span><br><span class="javascript">                <span class="hljs-keyword">var</span> eventName = obj.event;</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-comment">//判断事件名</span></span><br><span class="javascript">                <span class="hljs-keyword">if</span>(eventName == <span class="hljs-string">&#x27;del&#x27;</span>) &#123;    <span class="hljs-comment">//删除</span></span><br><span class="javascript">                    <span class="hljs-comment">//确认框</span></span><br><span class="javascript">                    layer.confirm(<span class="hljs-string">&quot;您确认要删除吗？&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>) </span>&#123;</span><br><span class="javascript">                        <span class="hljs-comment">// 删除指定的tr del()</span></span><br><span class="javascript">                        obj.del();</span><br><span class="javascript">                        <span class="hljs-comment">// 关闭弹出层(index 是当前弹出层的下标)</span></span><br><span class="javascript">                        layer.close(index);</span><br><span class="javascript">                    &#125;);</span><br><span class="javascript">                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(eventName == <span class="hljs-string">&#x27;edit&#x27;</span>) &#123;   <span class="hljs-comment">//编辑</span></span><br><span class="javascript">                    <span class="hljs-comment">//输入框</span></span><br><span class="javascript">                    layer.prompt(&#123;</span><br><span class="javascript">                        <span class="hljs-comment">//表单元素的类型 0=文本框，1=密码框，2=文本域</span></span><br><span class="javascript">                        <span class="hljs-attr">formType</span>:<span class="hljs-number">0</span>,</span><br><span class="javascript">                        <span class="hljs-attr">value</span>:tr.username   <span class="hljs-comment">//设置输入框的值</span></span><br><span class="javascript">                    &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value, index</span>) </span>&#123;</span><br><span class="javascript">                        <span class="hljs-comment">//修改指定单元格的值</span></span><br><span class="javascript">                        <span class="hljs-comment">// value表示输入的值</span></span><br><span class="javascript">                        obj.update(&#123;</span><br><span class="javascript">                           <span class="hljs-attr">username</span>:value</span><br><span class="javascript">                        &#125;);</span><br><span class="javascript">                        <span class="hljs-comment">//关闭弹出层</span></span><br><span class="javascript">                        layer.close(index);</span><br><span class="javascript">                    &#125;);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;);</span><br><span class="javascript"></span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="开启单元格编辑">开启单元格编辑</span></h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&#123;<span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;sign&#x27;</span>,<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;签名&#x27;</span>,<span class="hljs-attr">edit</span>:<span class="hljs-string">&#x27;text&#x27;</span>&#125;,<br></code></pre></div></td></tr></table></figure><p>edit:’text’;</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//监听单元格编辑时间</span><br>table.on(<span class="hljs-string">&#x27;edit(test)&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(obj);<br>    <span class="hljs-comment">//获取修改后的值</span><br>    <span class="hljs-keyword">var</span> value = obj.value;<br>    <span class="hljs-comment">//得到当前修改的tr对象</span><br>    <span class="hljs-keyword">var</span> data = obj.data;<br>    <span class="hljs-comment">//得到修改的字段名</span><br>    <span class="hljs-keyword">var</span> field = obj.field;<br>    layer.msg(<span class="hljs-string">&quot;【ID：&quot;</span>+data.id+<span class="hljs-string">&quot;】的&quot;</span>+field+<span class="hljs-string">&quot;字段的值修改为：&quot;</span>+value);<br>&#125;);<br></code></pre></div></td></tr></table></figure><h3><span id="数据表格的重载刷新">数据表格的重载（刷新）</span></h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demoTable&quot;</span>&gt;</span><br>        搜索ID：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-inline&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-input&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demoReload&quot;</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">&quot;off&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;searchBtn&quot;</span>&gt;</span>搜索<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!-- 准备一个容器,设置id属性值 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 表格工具栏 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/html&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;toolbarDemo&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn-container&quot;</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-comment">&lt;!-- lay-event 给元素绑定事件名 --&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-sm&quot;</span> <span class="hljs-attr">lay-event</span>=<span class="hljs-string">&quot;getCheckData&quot;</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">获取选中行数据</span></span><br><span class="xml"><span class="handlebars">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-sm&quot;</span> <span class="hljs-attr">lay-event</span>=<span class="hljs-string">&quot;getCheckLength&quot;</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">获取选中数目</span></span><br><span class="xml"><span class="handlebars">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-sm&quot;</span> <span class="hljs-attr">lay-event</span>=<span class="hljs-string">&quot;isAll&quot;</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">验证是否全选</span></span><br><span class="xml"><span class="handlebars">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">    </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 表头工具栏 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/html&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;barDemo&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-xs&quot;</span> <span class="hljs-attr">lay-event</span>=<span class="hljs-string">&quot;edit&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-btn layui-btn-danger layui-btn-xs&quot;</span> <span class="hljs-attr">lay-event</span>=<span class="hljs-string">&quot;del&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span></span><br><span class="xml"><span class="handlebars">    </span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// 加载 table 模块</span></span><br><span class="javascript">        layui.use(<span class="hljs-string">&#x27;table&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> table = layui.table;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> $ = layui.jquery; <span class="hljs-comment">// 获取jquery对象</span></span><br><span class="javascript">            <span class="hljs-comment">// 加载table 实例</span></span><br><span class="javascript">            table.render(&#123;</span><br><span class="javascript">                    <span class="hljs-attr">elem</span>: <span class="hljs-string">&quot;#demo&quot;</span>, <span class="hljs-comment">// elem属性用来绑定容器的 id 属性值</span></span><br><span class="javascript">                    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;js/user.json&quot;</span>, <span class="hljs-comment">// 数据接口</span></span><br><span class="javascript">                    <span class="hljs-attr">cols</span>: [</span><br><span class="javascript">                        [</span><br><span class="javascript">                            <span class="hljs-comment">// 设置序列号列</span></span><br><span class="javascript">                            &#123;</span><br><span class="javascript">                                <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;aa&#x27;</span>,</span><br><span class="javascript">                                <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;numbers&quot;</span></span><br><span class="javascript">                            &#125;,</span><br><span class="javascript">                            <span class="hljs-comment">// 设置复选框列</span></span><br><span class="javascript">                            &#123;</span><br><span class="javascript">                                <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;aa&#x27;</span>,</span><br><span class="javascript">                                <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;checkbox&quot;</span></span><br><span class="javascript">                            &#125;, &#123;</span><br><span class="javascript">                                <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;id&#x27;</span>,</span><br><span class="javascript">                                <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;用户编号&#x27;</span>,</span><br><span class="javascript">                                <span class="hljs-attr">sort</span>: <span class="hljs-literal">true</span>,</span><br><span class="javascript">                                <span class="hljs-attr">width</span>: <span class="hljs-number">120</span>,</span><br><span class="javascript">                                <span class="hljs-attr">hide</span>: <span class="hljs-literal">true</span></span><br><span class="javascript">                            &#125;, &#123;</span><br><span class="javascript">                                <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;username&#x27;</span>,</span><br><span class="javascript">                                <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;用户姓名&#x27;</span>,</span><br><span class="javascript">                                <span class="hljs-attr">width</span>: <span class="hljs-number">100</span>,</span><br><span class="javascript">                                <span class="hljs-attr">edit</span>: <span class="hljs-string">&#x27;text&#x27;</span></span><br><span class="javascript">                            &#125;, &#123;</span><br><span class="javascript">                                <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;sex&#x27;</span>,</span><br><span class="javascript">                                <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;性别&#x27;</span>,</span><br><span class="javascript">                                <span class="hljs-attr">width</span>: <span class="hljs-number">100</span>,</span><br><span class="javascript">                                <span class="hljs-attr">sort</span>: <span class="hljs-literal">true</span></span><br><span class="javascript">                            &#125;, &#123;</span><br><span class="javascript">                                <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;city&#x27;</span>,</span><br><span class="javascript">                                <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;城市&#x27;</span>,</span><br><span class="javascript">                                <span class="hljs-attr">width</span>: <span class="hljs-number">100</span></span><br><span class="javascript">                            &#125;, &#123;</span><br><span class="javascript">                                <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;sign&#x27;</span>,</span><br><span class="javascript">                                <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;签名&#x27;</span>,</span><br><span class="javascript">                                <span class="hljs-attr">edit</span>: <span class="hljs-string">&#x27;text&#x27;</span></span><br><span class="javascript">                            &#125;,</span><br><span class="javascript">                            <span class="hljs-comment">// 设置表头工具栏</span></span><br><span class="javascript">                            &#123;</span><br><span class="javascript">                                <span class="hljs-attr">field</span>: <span class="hljs-string">&quot;操作&quot;</span>,</span><br><span class="javascript">                                <span class="hljs-attr">toolbar</span>: <span class="hljs-string">&quot;#barDemo&quot;</span></span><br><span class="javascript">                            &#125;</span><br><span class="javascript">                        ]</span><br><span class="javascript">                    ],</span><br><span class="javascript">                    <span class="hljs-comment">// 开启分页</span></span><br><span class="javascript">                    <span class="hljs-attr">page</span>: <span class="hljs-literal">true</span>,</span><br><span class="javascript">                    <span class="hljs-comment">// 设置表格工具栏</span></span><br><span class="javascript">                    <span class="hljs-attr">toolbar</span>: <span class="hljs-string">&quot;#toolbarDemo&quot;</span></span><br><span class="javascript"></span><br><span class="javascript">                &#125;)</span><br><span class="javascript">                <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="javascript">                 * 监听单元格编辑事件</span></span><br><span class="hljs-comment"><span class="javascript">                 * 表头设置edit属性， 单元格编辑类型（默认不开启）目前只支持：text（输入框）</span></span><br><span class="hljs-comment"><span class="javascript">                 */</span></span><br><span class="javascript">            table.on(<span class="hljs-string">&#x27;edit(test)&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(obj);</span><br><span class="javascript">                <span class="hljs-comment">// 获取修改后的值</span></span><br><span class="javascript">                <span class="hljs-keyword">var</span> value = obj.value;</span><br><span class="javascript">                <span class="hljs-comment">// 得到当前修改的tr对象</span></span><br><span class="javascript">                <span class="hljs-keyword">var</span> data = obj.data;</span><br><span class="javascript">                <span class="hljs-comment">// 得到修改的字段名</span></span><br><span class="javascript">                <span class="hljs-keyword">var</span> field = obj.field;</span><br><span class="javascript"></span><br><span class="javascript">                layer.msg(<span class="hljs-string">&quot;【ID:&quot;</span> + data.id + <span class="hljs-string">&quot;】的&quot;</span> + field + <span class="hljs-string">&quot;字段的值修改为：&quot;</span> + value);</span><br><span class="javascript">            &#125;);</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="javascript">             * 给指定元素绑定事件</span></span><br><span class="hljs-comment"><span class="javascript">             */</span></span><br><span class="javascript">            $(<span class="hljs-built_in">document</span>).on(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;#searchBtn&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-comment">// 获取搜索文本框对象</span></span><br><span class="javascript">                <span class="hljs-keyword">var</span> sreach = $(<span class="hljs-string">&quot;#demoReload&quot;</span>);</span><br><span class="javascript">                <span class="hljs-comment">// 调用数据表格的重载方法  table.reload(ID, options)</span></span><br><span class="javascript">                table.reload(<span class="hljs-string">&#x27;demo&#x27;</span>, &#123;</span><br><span class="javascript">                    <span class="hljs-attr">where</span>: &#123; <span class="hljs-comment">// 设置需要传递的参数</span></span><br><span class="javascript">                        <span class="hljs-attr">id</span>: sreach.val(),</span><br><span class="javascript">                        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;zhangsan&quot;</span></span><br><span class="javascript">                    &#125;,</span><br><span class="javascript">                    <span class="hljs-attr">page</span>: &#123;</span><br><span class="javascript">                        <span class="hljs-comment">// 表示让条件查询从第一页开始；如果未设置则从当前页开始查询，此页前面的所有数据不纳入条件筛选</span></span><br><span class="javascript">                        <span class="hljs-attr">curr</span>: <span class="hljs-number">1</span> <span class="hljs-comment">// 从第一页开始</span></span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;);</span><br><span class="javascript">            &#125;);</span><br><span class="javascript"></span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2><span id="第十二章-layuimini">第十二章 LayUIMIni</span></h2><p>上官网下载，直接用。</p><p><a href="http://layuimini.99php.cn/">layuimini - 基于Layui的后台管理系统前端模板 (99php.cn)</a></p>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>前端框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jquery</tag>
      
      <tag>LayUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM框架-05-SpringMVC</title>
    <link href="/2021/08/01/SSM%E6%A1%86%E6%9E%B6-05-SpringMVC/"/>
    <url>/2021/08/01/SSM%E6%A1%86%E6%9E%B6-05-SpringMVC/</url>
    
    <content type="html"><![CDATA[<h1><span id="srpingmvc">SrpingMVC</span></h1><!-- toc --><ul><li><a href="#%E7%AC%AC1%E7%AB%A0-springmvc%E6%A6%82%E8%BF%B0">第1章 SpringMVC概述</a><ul><li><a href="#11-%E7%AE%80%E4%BB%8B">1.1 简介</a></li><li><a href="#12-%E4%BC%98%E7%82%B9">1.2 优点</a></li><li><a href="#13-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B">1.3 快速上手</a><ul><li><a href="#1-%E6%96%B0%E5%BB%BAmaven%E9%A1%B9%E7%9B%AEweb%E9%AA%A8%E6%9E%B6">1. 新建maven项目，web骨架。</a></li><li><a href="#2-%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96">2. 添加依赖</a></li><li><a href="#3-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%A4%AE%E8%B0%83%E5%BA%A6%E5%99%A8">3. 注册中央调度器</a></li><li><a href="#4-%E5%88%9B%E5%BB%BAspringmvc%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">4. 创建springmvc的配置文件</a></li><li><a href="#5-%E5%88%9B%E5%BB%BA%E5%A4%84%E7%90%86%E5%99%A8%E7%B1%BB">5. 创建处理器类</a></li><li><a href="#6-%E8%AF%B7%E6%B1%82%E9%A1%B5%E9%9D%A2">6. 请求页面</a></li><li><a href="#7-%E5%93%8D%E5%BA%94%E9%A1%B5%E9%9D%A2">7. 响应页面</a></li></ul></li><li><a href="#14-springmvc%E6%A1%86%E6%9E%B6web%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B">1.4 springmvc框架web请求处理流程</a><ul><li><a href="#%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90">执行流程简单分析</a></li></ul></li></ul></li><li><a href="#%E7%AC%AC2%E7%AB%A0-%E6%B3%A8%E8%A7%A3%E5%BC%8F%E5%BC%80%E5%8F%91">第2章 注解式开发</a><ul><li><a href="#1-controller">1. @Controller</a></li><li><a href="#2-requestmapping">2. @RequestMapping</a></li><li><a href="#3-%E5%A4%84%E7%90%86%E5%99%A8%E6%96%B9%E6%B3%95%E7%9A%84%E5%8F%82%E6%95%B0">3. 处理器方法的参数</a><ul><li><a href="#1-%E9%80%90%E4%B8%AA%E6%8E%A5%E6%94%B6">1. 逐个接收</a></li><li><a href="#2-java%E5%AF%B9%E8%B1%A1%E6%8E%A5%E6%94%B6">2. java对象接收</a></li><li><a href="#3-%E6%8F%90%E4%BA%A4%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E6%9C%89%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81">3. 提交请求参数有中文乱码</a></li></ul></li><li><a href="#4-%E5%A4%84%E7%90%86%E5%99%A8%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC">4. 处理器方法的返回值</a><ul><li><a href="#1-modelandview">1. ModelAndView</a></li><li><a href="#2-string%E8%BF%94%E5%9B%9Eview">2. String（返回View）</a></li><li><a href="#3-void">3. void</a></li><li><a href="#4-object">4. Object</a></li><li><a href="#5-listobject">5. <code>List&lt;Object&gt;</code></a></li><li><a href="#6-string%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE">6. String（返回数据）</a></li></ul></li><li><a href="#%E8%A7%A3%E8%AF%BBurl-pattern">解读<code>&lt;url-pattern/&gt;</code></a><ul><li><a href="#do-%E5%8C%B9%E9%85%8D">*.do 匹配</a></li><li><a href="#%E5%8C%B9%E9%85%8D">/ 匹配</a></li></ul></li></ul></li><li><a href="#%E7%AC%AC3%E7%AB%A0-ssm%E6%95%B4%E5%90%88%E5%BC%80%E5%8F%91">第3章 SSM整合开发</a><ul><li><a href="#1-%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83">1. 搭建开发环境</a><ul><li><a href="#1-%E6%96%B0%E5%BB%BAmaven-web%E5%B7%A5%E7%A8%8B%E5%AF%BC%E5%85%A5%E7%9B%B8%E5%85%B3%E4%BE%9D%E8%B5%96%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%A4%8D%E5%88%B6">1. 新建maven web工程，导入相关依赖（可以直接复制）</a></li><li><a href="#2-%E9%85%8D%E7%BD%AEwebxml%E7%9A%84%E4%B8%AD%E5%A4%AE%E8%B0%83%E5%BA%A6%E5%99%A8-spring%E7%9B%91%E5%90%AC%E5%99%A8-%E5%AD%97%E7%AC%A6%E9%9B%86%E8%BF%87%E6%BB%A4%E5%99%A8%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%A4%8D%E5%88%B6">2. 配置web.xml的中央调度器、spring监听器、字符集过滤器（可以直接复制）</a></li></ul></li><li><a href="#2-%E6%95%B4%E5%90%88%E5%BC%80%E5%8F%91%E4%BE%8B%E5%AD%90">2. 整合开发例子</a><ul><li><a href="#1-%E5%BB%BA%E8%A1%A8">1. 建表</a></li><li><a href="#2-%E6%96%B0%E5%BB%BA%E5%B7%A5%E7%A8%8B%E5%AF%BC%E5%85%A5%E4%BE%9D%E8%B5%96">2. 新建工程，导入依赖</a></li><li><a href="#3-%E5%AE%9A%E4%B9%89%E5%8C%85%E7%BB%93%E6%9E%84-%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84">3. 定义包结构、组织结构</a></li><li><a href="#4-%E7%BC%96%E5%86%99%E4%B8%80%E5%A0%86%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">4. 编写一堆配置文件</a><ul><li><a href="#jdbcproperties">jdbc.properties</a></li><li><a href="#spring%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-applicationcontextxml">Spring配置文件 applicationContext.xml</a></li><li><a href="#springmvc%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6dispatcherservletxml">Springmvc配置文件：dispatcherServlet.xml</a></li><li><a href="#mybatis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6mybatisxml">Mybatis配置文件：mybatis.xml</a></li></ul></li><li><a href="#5-%E5%AE%9A%E4%B9%89webxml">5. 定义web.xml</a></li><li><a href="#6-%E5%AE%9E%E4%BD%93%E7%B1%BB">6. 实体类</a></li><li><a href="#7-dao%E6%8E%A5%E5%8F%A3%E5%92%8Csql%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6">7. Dao接口和sql映射文件</a></li><li><a href="#8-service%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%AE%9E%E7%8E%B0%E7%B1%BB">8. Service接口和实现类</a></li><li><a href="#9-controller%E5%AE%9A%E4%B9%89">9. Controller定义</a></li><li><a href="#10-%E9%A6%96%E9%A1%B5indexjsp">10. 首页index.jsp</a></li><li><a href="#11-%E6%B3%A8%E5%86%8C%E5%AD%A6%E7%94%9F%E7%9A%84%E9%A1%B5%E9%9D%A2-addstudentjsp">11. 注册学生的页面 addStudent.jsp</a></li><li><a href="#12-%E6%B5%8F%E8%A7%88%E5%AD%A6%E7%94%9F%E7%9A%84jsp%E9%A1%B5%E9%9D%A2">12. 浏览学生的jsp页面</a></li><li><a href="#13-%E6%B3%A8%E5%86%8C%E7%BB%93%E6%9E%9C%E9%A1%B5%E9%9D%A2">13. 注册结果页面</a></li></ul></li></ul></li><li><a href="#%E7%AC%AC4%E7%AB%A0-springmvc%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF">第4章 SpringMVC核心技术</a><ul><li><a href="#1-%E8%AF%B7%E6%B1%82%E9%87%8D%E5%AE%9A%E5%90%91%E5%92%8C%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91">1. 请求重定向和请求转发</a><ul><li><a href="#1-%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91">1. 请求转发</a></li><li><a href="#2-%E8%AF%B7%E6%B1%82%E9%87%8D%E5%AE%9A%E5%90%91">2. 请求重定向</a></li></ul></li><li><a href="#2-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">2. 异常处理</a><ul><li><a href="#1-exceptionhandler-%E6%B3%A8%E8%A7%A3">1. @ExceptionHandler 注解</a></li></ul></li><li><a href="#3-%E6%8B%A6%E6%88%AA%E5%99%A8">3. 拦截器</a><ul><li><a href="#%E4%B8%80%E4%B8%AA%E6%8B%A6%E6%88%AA%E5%99%A8%E7%9A%84%E6%89%A7%E8%A1%8C">一个拦截器的执行</a></li><li><a href="#%E5%A4%9A%E4%B8%AA%E6%8B%A6%E6%88%AA%E5%99%A8%E7%9A%84%E6%89%A7%E8%A1%8C">多个拦截器的执行</a></li><li><a href="#%E6%9D%83%E9%99%90%E6%8B%A6%E6%88%AA%E5%99%A8%E4%B8%BE%E4%BE%8B">权限拦截器举例</a></li></ul></li></ul></li></ul><!-- tocstop --><h2><span id="第1章-springmvc概述">第1章 SpringMVC概述</span></h2><h3><span id="11-简介">1.1 简介</span></h3><p>SpringMVC 也叫Spring web mvc。是Spring提供的基于MVC设计模式的轻量级Web开发框架，本质上相当于Servlet。</p><h3><span id="12-优点">1.2 优点</span></h3><ol><li>基于MVC架构：分工明确，耦合度低。</li><li>容易理解，操作简单。</li><li>方便与其他框架进行整合。</li><li>强化注解的使用。  使用@Controller 创建处理器对象,@Service 创建业务对象，@Autowired 或者@Resource<br>  在控制器类中注入Service, Service 类中注入Dao。</li></ol><h3><span id="13-快速上手">1.3 快速上手</span></h3><h4><span id="1-新建maven项目web骨架">1.   新建maven项目，web骨架。</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210901110655.png" alt="image-20210901110648278"></p><h4><span id="2-添加依赖">2.   添加依赖</span></h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--servlet依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--springmvc的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>properties中1.7改1.8</p><h4><span id="3-注册中央调度器">3.   注册中央调度器</span></h4><p>（在web.xml中）</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注册springmvc的核心对象DispatcherServlet--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>myweb<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--自定义springmvc读取的配置文件的位置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--springmvc的配置文件的位置的属性--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--自定义文件的位置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--在tomcat启动后，创建Servlet对象，load-on-startup的值表示创建对象的顺序--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>myweb<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="4-创建springmvc的配置文件">4.   创建springmvc的配置文件</span></h4><p>（在resources下新建springmvc.xml文件(spring-config-xml)）</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--声明组件扫描器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wangpeng.controller&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--声明视图解析器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--前缀：视图文件的路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/view/&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--后缀：视图文件的扩展名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="5-创建处理器类">5.  创建处理器类</span></h4><p>（java下组织名下controller下new MyController）</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.controller;<br> <br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@Controller</span>：创建处理器对象，对象放在springmvc容器中。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyController</span> </span>&#123;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@RequestMapping</span>：请求映射，把一个请求地址与一个方法绑定在一起。</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/some.do&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">doSome</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//处理请求，调用Service层的方法，得到要返回的数据。这里假设已经得到数据了。</span><br>        ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();<br>        <span class="hljs-comment">//添加数据</span><br>        <span class="hljs-comment">// 框架在请求的最后把数据放入到request作用域中。</span><br>        mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;欢迎使用SpringMVC&quot;</span>);<br>        mv.addObject(<span class="hljs-string">&quot;fun&quot;</span>,<span class="hljs-string">&quot;执行的是doSome方法&quot;</span>);<br>        <span class="hljs-comment">//指定视图</span><br>        <span class="hljs-comment">//框架对视图执行的forward操作。</span><br>        <span class="hljs-comment">//mv.setViewName(&quot;/WEB-INF/view/show.jsp&quot;);</span><br>        mv.setViewName(<span class="hljs-string">&quot;show&quot;</span>); <span class="hljs-comment">//配置了视图解析器</span><br>        <span class="hljs-comment">//返回mv</span><br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="6-请求页面">6.   请求页面</span></h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;some.do&quot;</span>&gt;</span>发起some.do的请求<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="7-响应页面">7.   响应页面</span></h4><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>/WEB-INF/view/other.jsp从request作用域获取数据<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>msg数据：$&#123;msg&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>fun数据：$&#123;fun&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="14-springmvc框架web请求处理流程">1.4 springmvc框架web请求处理流程</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210901122203.png" alt="image-20210901122203093"></p><h4><span id="执行流程简单分析">执行流程简单分析</span></h4><p>（1）浏览器提交请求到中央调度器</p><p>（2）中央调度器直接将请求转给处理器映射器。</p><p>（3）处理器映射器会根据请求，找到处理该请求的处理器，并将其封装为处理器执行链后<br>返回给中央调度器。</p><p>（4）中央调度器根据处理器执行链中的处理器，找到能够执行该处理器的处理器适配器。</p><p>（5）处理器适配器调用执行处理器。</p><p>（6）处理器将处理结果及要跳转的视图封装到一个对象 ModelAndView 中，并将其返回给<br>处理器适配器。</p><p>（7）处理器适配器直接将结果返回给中央调度器。</p><p>（8）中央调度器调用视图解析器，将 ModelAndView 中的视图名称封装为视图对象。</p><p>（9）视图解析器将封装了的视图对象返回给中央调度器</p><p>（10）中央调度器调用视图对象，让其自己进行渲染，即进行数据填充，形成响应对象。</p><p>（11）中央调度器响应浏览器。</p><h2><span id="第2章-注解式开发">第2章 注解式开发</span></h2><h3><span id="1-controller">1. @Controller</span></h3><p><strong>创建控制器对象</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyController</span> </span>&#123;<br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure><p>创建Controller对象</p><h3><span id="2-requestmapping">2. @RequestMapping</span></h3><p><strong>请求映射，把请求指定给某个处理器方法处理</strong></p><p>两个参数</p><ol><li>  value：请求的uri地址，唯一值</li><li>  method：表示请求的方式，get，post。 ==RequestMethod枚举值==</li></ol><p>method可以省略，默认是都接收，所以一般不写。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;some.do&quot;, method = RequestMethod.POST)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">doSome</span><span class="hljs-params">()</span> </span>&#123;<br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure><p><font color="red">类上也可以添加该注解</font>。</p><p>相同的URI，可以被抽取到注解在类之上的@RequestMapping 的 value 属性中</p><h3><span id="3-处理器方法的参数">3. 处理器方法的参数</span></h3><p>➢ HttpServletRequest<br>➢ HttpServletResponse<br>➢ HttpSession<br>➢ 请求中所携带的请求参数</p><p>想要接收请求，可以使用参数中的request。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;some.do&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">doSome</span><span class="hljs-params">(HttpServletRequest req)</span> </span>&#123;<br>        req.getParameter(<span class="hljs-string">&quot;参数名&quot;</span>);<br>        ...<br>    &#125;<br></code></pre></div></td></tr></table></figure><p>同时，springmvc还提供了更便捷的方法。</p><h4><span id="1-逐个接收">1.   逐个接收</span></h4><p>请求中参数名需要和控制器方法的形参名一样</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;some.do&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">doSome</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name)</span> </span>&#123;<br>        <span class="hljs-comment">// 就可以使用传过来的id和name了</span><br>    &#125;<br></code></pre></div></td></tr></table></figure><p>逐个接收中，如果名称不一样使用@RequestParam，比如说我们前端jsp使用的是mid和mname。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">doSome</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;mid&quot;)</span> <span class="hljs-keyword">int</span> id, <span class="hljs-meta">@RequestParam(&quot;mname&quot;)</span> String name)</span> </span>&#123;<br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="2-java对象接收">2.   java对象接收</span></h4><p>要求属性名和请求中参数名一样</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">doSome</span><span class="hljs-params">(Student student)</span> </span>&#123;<br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure><p><font color="red">注意，前端jsp中，表单中input的name，必须和Student的属性名一致。</font></p><h4><span id="3-提交请求参数有中文乱码">3.   提交请求参数有中文乱码</span></h4><p>使用字符集的过滤器， CharacterEncodingFilter</p><p>在 web.xml 中注册字符集过滤器</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--指定字符集--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--强制request使用字符集encoding--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceRequestEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--强制response使用字符集encoding--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceResponseEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="4-处理器方法的返回值">4. 处理器方法的返回值</span></h3><h4><span id="1-modelandview">1.   ModelAndView</span></h4><p><strong>返回数据和视图</strong></p><p>若处理器方法处理完后，需要跳转到其它资源，且又要在跳转的资源间传递数据，此时处理器方法返回 ModelAndView 比较好。</p><p>这个看快速上手的例子就行。</p><h4><span id="2-string返回view">2.   String（返回View）</span></h4><p><strong>返回视图</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;test.do&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">doTest</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;show&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>因为设置了视图解析器，所以没有写视图的完整路径。如果没有视图解析器，则如下。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;test.do&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">doTest</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/WEB-INF/jsp/welcome.jsp&quot;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="3-void">3.   void</span></h4><p><strong>可以响应ajax请求（了解）</strong></p><p>这里服务器需要想浏览器返回JSON数据，所以需要一个工具类将字符串包装为JSON格式。</p><p>先导入JSON的依赖。这里用jackson，用gson也可以。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>引入jQuery 库，是个js文件，直接复制到项目中即可。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210901210751.png" alt="image-20210901210751950"></p><p>index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;首页&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;js/jquery-3.4.1.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br> <br>        $(function () &#123;<br> <br>            $(<span class="hljs-string">&quot;#bt1&quot;</span>).click(function () &#123;<br>                $.ajax(&#123;<br>                    url:<span class="hljs-string">&quot;myajax.do&quot;</span>,<br>                    data:&#123;<br>                        name:<span class="hljs-string">&quot;zs&quot;</span>,<br>                        age:<span class="hljs-string">&quot;24&quot;</span><br>                    &#125;,<br>                    type:<span class="hljs-string">&quot;post&quot;</span>,<br>                    dataType:<span class="hljs-string">&quot;json&quot;</span>,<br>                    success:function (resp) &#123;<br>                        alert(<span class="hljs-string">&quot;姓名：&quot;</span>+resp.name+<span class="hljs-string">&quot;\n年龄：&quot;</span>+resp.age);<br>                    &#125;<br>                &#125;)<br>            &#125;);<br> <br>        &#125;);<br> <br>    &lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    这是首页&lt;br/&gt;&lt;br/&gt;<br>    &lt;button id=<span class="hljs-string">&quot;bt1&quot;</span>&gt;发起ajax请求&lt;/button&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p>定义对象Student</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure><p>写控制器方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/myajax.do&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doMyAjax</span><span class="hljs-params">(String name, Integer age, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br> <br>    <span class="hljs-comment">//处理数据</span><br>    Student student = <span class="hljs-keyword">new</span> Student();<br>    student.setName(name + <span class="hljs-string">&quot;_son&quot;</span>);<br>    student.setAge(age - <span class="hljs-number">10</span>);<br> <br>    <span class="hljs-comment">//把Student对象转为json</span><br>    String json = <span class="hljs-keyword">new</span> ObjectMapper().writeValueAsString(student);<br>    System.out.println(json);<br> <br>    <span class="hljs-comment">//返回给客户端</span><br>    PrintWriter pw = resp.getWriter();<br>    pw.print(json);<br>    pw.flush();<br>    pw.close();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>返回的json</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;name&quot;</span>:<span class="hljs-string">&quot;zs&#x27;s son&quot;</span>,<span class="hljs-attr">&quot;age&quot;</span>:<span class="hljs-number">14</span>&#125;<br></code></pre></div></td></tr></table></figure><p>为什么用得少，当然是可以简化啦。</p><h4><span id="4-object">4.   Object</span></h4><p>首先还是引用一下jackson依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>声明注解驱动</p><p>将Object 数据转化为 JSON 数据，需要由消息转换器 HttpMessageConverter 完成。而转<br>换器的开启，需要由<code>&lt;mvc:annotation-driven/&gt;</code>来完成。</p><p>在springmvc配置文件中加入《注册mvc的注解驱动》</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注册mvc的注解驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br></code></pre></div></td></tr></table></figure><p><font color="red">注意一定要选后缀是mvc的这个</font></p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210901211645.png" alt="image-20210901211645874" style="zoom: 67%;"> <p>然后就可以用HttpMessageConverter 接口的很多方法来实现功能。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210901211840.png" alt="image-20210901211840571"></p><p>然后我们就可以在处理器方法中返回自定义对象，框架会转换成json返回给客户端。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/myajax.do&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Student <span class="hljs-title">doMyAjax</span><span class="hljs-params">(String name, Integer age)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br> <br>    <span class="hljs-comment">//处理数据</span><br>    Student student = <span class="hljs-keyword">new</span> Student();<br>    student.setName(name + <span class="hljs-string">&quot;_son&quot;</span>);<br>    student.setAge(age - <span class="hljs-number">10</span>);<br> <br>    <span class="hljs-keyword">return</span> student;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>@ResponseBody 这个注解别忘记写，表示响应的是一个Object。</p><p>这样就简单的实现了功能。</p><h4><span id="5-listltobjectgt">5. <code>List&lt;Object&gt;</code></span></h4><p>和返回Object区别不大小，小改一下</p><p>控制器方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/myajax.do&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title">doMyAjax</span><span class="hljs-params">(String name, Integer age)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    List&lt;Student&gt; students = <span class="hljs-keyword">new</span> ArrayList&lt;Student&gt;();<br>    students.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">22</span>));<br>    students.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">25</span>));<br>    <span class="hljs-keyword">return</span> students;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>jsp部分</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#bt1&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    $.ajax(&#123;<br>        <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;myajax.do&quot;</span>,<br>        <span class="hljs-attr">dataType</span>:<span class="hljs-string">&quot;json&quot;</span>,<br>        <span class="hljs-attr">success</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resp</span>) </span>&#123;<br>            $.each(resp,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">i,stu</span>) </span>&#123;<br>                alert(<span class="hljs-string">&quot;姓名：&quot;</span>+stu.name+<span class="hljs-string">&quot;\n年龄：&quot;</span>+stu.age);<br>            &#125;)<br>        &#125;<br>    &#125;)<br>&#125;);<br></code></pre></div></td></tr></table></figure><h4><span id="6-string返回数据">6. String（返回数据）</span></h4><p>带上@ResponseBody 注解即可</p><p>如果返回中文字符串，注意乱码问题。此时需要使用@RequestMapping 的 produces 属性指定字符集。</p><p>produces，产品，结果，即该属性用于设置输出结果类型。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210901214345.png" alt="image-20210901214345363"></p><h3><span id="解读lturl-patterngt">解读<code>&lt;url-pattern/&gt;</code></span></h3><h4><span id="do-匹配">*.do 匹配</span></h4><p>在没有特殊要求的情况下，SpringMVC 的中央调度器 DispatcherServlet 的<code>&lt;url-pattern/&gt;</code><br>常使用后辍匹配方式，如写为*.do 或者 *.action, *.mvc 等。</p><h4><span id="匹配">/ 匹配</span></h4><p>可以写为/，所以请求都走中央调度器，但是静态资源会无法访问，因为通常静态资源都是由Tomcat处理的。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210901223342.png" alt="image-20210901223342141"></p><p>（1） 使用<code>&lt;mvc:default-servlet-handler/&gt;</code></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210901214816.png" alt="image-20210901214816001"></p><p>原理：创建DefaultServletHttpRequestHandler这个控制器对象</p><p>静态资源都转发给了Tomcat处理。</p><p>（2） 使用<code>&lt;mvc:resources/&gt;</code>（掌握）</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210901222816.png" alt="image-20210901222816497"></p><p><font color="red"> location 表示静态资源所在目录</font>。当然，<font color="red">目录不要使用/WEB-INF/及其子目录</font>。</p><p><font color="red">mapping 表示对该资源的请求</font>（以 /images/ 开始的请求，如 /image/beauty.jpg ,/images/car.png 等）。注意，后面是两个星号<font color="red">**</font>。</p><p>解决动态资源和静态资源冲突的问题，在springmvc 配置文件加入：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注册mvc的注解驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br></code></pre></div></td></tr></table></figure><p>原理：创建ResourceHttpRequestHandler这个控制器对象</p><h2><span id="第3章-ssm整合开发">第3章 SSM整合开发</span></h2><p>SSM 整合的实现方式可分为两种：基于XML 配置方式，基于注解方式。</p><h3><span id="1-搭建开发环境">1. 搭建开发环境</span></h3><h4><span id="1-新建maven-web工程导入相关依赖可以直接复制">1. 新建maven web工程，导入相关依赖（可以直接复制）</span></h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wangpeng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ch07-ssm<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Junit单元测试--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--servlet--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--jsp--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1-b03<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--springmvc（无需再单独引入spring的beans、core、context、aop、web等依赖了）--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--spring tx模块，实现事务管理--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--spring jdbc模块，实现事务管理--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--aspectj--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--jackson 用于json转换--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mybatis和spring集成的依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mybatis--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mysql--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--druid连接池--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--目的是把src/main/java目录下的xml文件包含到输出结果中(classes中)。--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><span class="hljs-comment">&lt;!--所在的目录--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><span class="hljs-comment">&lt;!--包括目录下的.properties,.xml文件都会扫描到--&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--指定jdk版本--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br> <br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>spring相关红色，Mybatis和数据库相关的橙色，javaweb相关的绿色，其他蓝色</p><p>归纳一下：</p><ol><li>  <font color="blue">单元测试，junit</font></li><li>  <font color="green">servlet依赖，javax.servlet-api</font></li><li>  <font color="green">jsp依赖，jsp-api</font></li><li><font color="red">spinrgmvc依赖，spring-webmvc</font><ol><li>  引入spring-webmvc依赖后则无需再单独引入spring的<font color="red">beans、core、context、aop、web</font>等依赖了</li><li>  好像我们只用过context和web</li></ol></li><li>  <font color="red">spring事务管理，spring-tx（通知）和spring-jdbc（jdbc）</font></li><li>  <font color="red">aspectj依赖，用于aop配置（比如说管理事务）</font></li><li>  <font color="green">jackson依赖，jackson-core和jackson-databind</font>，用于json转换</li><li>  <font color="orange">mybatis依赖，mybatis</font></li><li>  <font color="orange">mybatis</font><font color="red">和spring集成，</font><font color="orange">mybatis</font><font color="red">-spring</font></li><li>  <font color="orange">mysql驱动，mysql-connector-java</font></li><li>  <font color="orange">druid连接池，druid</font></li></ol><p>完美！注意把web.xml换成4.0的版本</p><h4><span id="2-配置webxml的中央调度器-spring监听器-字符集过滤器可以直接复制">2. 配置web.xml的中央调度器、spring监听器、字符集过滤器（可以直接复制）</span></h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br> <br>  <span class="hljs-comment">&lt;!--注册中央调度器--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:conf/dispatcherServlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br> <br>  <span class="hljs-comment">&lt;!--注册spring的监听器，定义Spring配置文件的位置--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:conf/applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br> <br>  <span class="hljs-comment">&lt;!--注册字符集过滤器--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceRequestEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceResponseEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br> <br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="2-整合开发例子">2. 整合开发例子</span></h3><h4><span id="1-建表">1. 建表</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907174258.png" alt="image-20210907174251211"></p><h4><span id="2-新建工程导入依赖">2. 新建工程，导入依赖</span></h4><p>依赖和上面一样</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wangpeng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>StudentCRUD<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Junit单元测试--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--servlet--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--jsp--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1-b03<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--springmvc（无需再单独引入spring的beans、core、context、aop、web等依赖了）--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--spring tx模块，实现事务管理--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--spring jdbc模块，实现事务管理--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--aspectj--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--jackson 用于json转换--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mybatis和spring集成的依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mybatis--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mysql--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--druid连接池--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--目的是把src/main/java目录下的xml文件包含到输出结果中(classes中)。--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><span class="hljs-comment">&lt;!--所在的目录--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><span class="hljs-comment">&lt;!--包括目录下的.properties,.xml文件都会扫描到--&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--指定jdk版本--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="3-定义包结构-组织结构">3. 定义包结构、组织结构</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907175014.png" alt="image-20210907175014866"></p><h4><span id="4-编写一堆配置文件">4. 编写一堆配置文件</span></h4><h5><span id="jdbcproperties">jdbc.properties</span></h5><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/springdb</span><br><span class="hljs-meta">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">jdbc.password</span>=<span class="hljs-string">7783772</span><br></code></pre></div></td></tr></table></figure><h5><span id="spring配置文件-applicationcontextxml">Spring配置文件 applicationContext.xml</span></h5><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!--设置数据库配置文件地址--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:conf/jdbc.properties&quot;</span>/&gt;</span><br> <br>    <span class="hljs-comment">&lt;!--声明数据源，连接数据库--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!--SqlSessionFactoryBean创建SqlSessionFactory--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:conf/mybatis.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!--声明mybatis的扫描器，创建dao对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.wangpeng.dao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!--组件扫描器，扫描service--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wangpeng.service&quot;</span>/&gt;</span><br> <br>    <span class="hljs-comment">&lt;!--下面还可以写事务配置：注解的配置，aspect的配置--&gt;</span><br>    <span class="hljs-comment">&lt;!--事务注解驱动，然后就可以使用@Transactional注解来实现事务管理--&gt;</span><br>    <span class="hljs-comment">&lt;!--或者配置aspectj用aop的事务管理--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>重点就是 三个对象的创建：</p><ol><li><font color="blue">DruidDataSource</font>，连接池对象，并且配置四个参数<ol><li>  url，数据库的url地址，<font color="red">druid不需要配置driver的原因是，它内部通过url自动选择驱动</font>。</li><li>  username，数据库用户名</li><li>  password，数据库密码</li><li>  maxActive（一般也不用）</li></ol></li><li><font color="blue">SqlSessionFactoryBean</font>，我们在Mybatis中需要使用sqlSession对象，需要通过SqlSessionFactory创建。<ul><li>  这里用SqlSessionFactoryBean类来创建sqlSessionFactory的对象。</li><li>它需要2个信息<ol><li>  连接池对象，<font color="red">因为连接池对象是引用类型，所以这里使用ref进行赋值</font>。</li><li>  Mybatis的配置文件位置</li></ol></li></ul></li><li><font color="blue">MapperScannerConfigurer</font>，它能够扫描到目录下所有的dao接口，并<font color="red">创建所有的Dao代理对象</font>。<ol><li>  sqlSessionFactoryBeanName，指定sqlSession的工厂类，<font color="red">因为sqlSessionFactory是String类型，所以使用value来赋值</font>。</li><li>  basePackage，扫描Dao的位置。</li></ol></li></ol><p><font color="red">studentDao这个是框架在内部创建的对象。</font></p><p>组件扫描器：可以扫描注解，方便使用注解方式创建service对象交给spring管理。</p><h5><span id="springmvc配置文件dispatcherservletxml">Springmvc配置文件：dispatcherServlet.xml</span></h5><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!--springmvc的配置文件，老三样--&gt;</span><br> <br>    <span class="hljs-comment">&lt;!--组件扫描器，扫描controller--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wangpeng.controller&quot;</span>/&gt;</span><br> <br>    <span class="hljs-comment">&lt;!--视图解析器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!--注解驱动注册--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br> <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h5><span id="mybatis配置文件mybatisxml">Mybatis配置文件：mybatis.xml</span></h5><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--核心配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--日志信息--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!--给所有的pojo类设置别名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.wangpeng.domain&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!--每一个Mapper.xml都需要在Mybatis核心配置文件中注册！--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.wangpeng.dao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br> <br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="5-定义webxml">5. 定义web.xml</span></h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br> <br>  <span class="hljs-comment">&lt;!--注册中央调度器--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:conf/dispatcherServlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br> <br>  <span class="hljs-comment">&lt;!--注册spring的监听器，定义Spring配置文件的位置--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:conf/applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br> <br>  <span class="hljs-comment">&lt;!--注册字符集过滤器--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceRequestEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceResponseEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br> <br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="6-实体类">6. 实体类</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.domain;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-comment">//,..</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="7-dao接口和sql映射文件">7. Dao接口和sql映射文件</span></h4><p>StudentDao</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.dao;<br> <br><span class="hljs-keyword">import</span> com.wangpeng.domain.Student;<br> <br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentDao</span> </span>&#123;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insertStudent</span><span class="hljs-params">(Student student)</span></span>;<br>    <span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">selectStudents</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>StudentDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--StudentDao接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.wangpeng.dao.StudentDao&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--查询所有学生--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudents&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>        select id,name,age from student order by id desc<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--添加学生--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertStudent&quot;</span>&gt;</span><br>        insert into student(name,age) values(#&#123;name&#125;,#&#123;age&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="8-service接口和实现类">8. Service接口和实现类</span></h4><p>StudentService</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.service;<br> <br><span class="hljs-keyword">import</span> com.wangpeng.domain.Student;<br> <br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentService</span> </span>&#123;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addStudent</span><span class="hljs-params">(Student student)</span></span>;<br>    <span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">findStudents</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>impl.StudentServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.service.impl;<br> <br><span class="hljs-keyword">import</span> com.wangpeng.dao.StudentDao;<br><span class="hljs-keyword">import</span> com.wangpeng.domain.Student;<br><span class="hljs-keyword">import</span> com.wangpeng.service.StudentService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br> <br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">StudentService</span> </span>&#123;<br>    <span class="hljs-comment">//引用类型的自动注入@Autowired，@Resource</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StudentDao studentDao;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addStudent</span><span class="hljs-params">(Student student)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> studentDao.insertStudent(student);<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title">findStudents</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> studentDao.selectStudents();<br>    &#125;<br>&#125;<br> <br></code></pre></div></td></tr></table></figure><h4><span id="9-controller定义">9. Controller定义</span></h4><p>StudentController</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.controller;<br> <br><span class="hljs-keyword">import</span> com.wangpeng.domain.Student;<br><span class="hljs-keyword">import</span> com.wangpeng.service.StudentService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br> <br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/student&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentController</span> </span>&#123;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StudentService service;<br> <br>    <span class="hljs-comment">//注册学生</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/addStudent.do&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">addStudent</span><span class="hljs-params">(Student student)</span> </span>&#123;<br>        ModelAndView mv = <span class="hljs-keyword">new</span> ModelAndView();<br>        <span class="hljs-comment">//调用service处理student</span><br>        <span class="hljs-keyword">int</span> nums = service.addStudent(student);<br>        String tips;<br>        <span class="hljs-keyword">if</span>(nums &gt; <span class="hljs-number">0</span>) tips = <span class="hljs-string">&quot;学生【&quot;</span> + student.getName() + <span class="hljs-string">&quot;】注册成功&quot;</span>;<br>        <span class="hljs-keyword">else</span> tips = <span class="hljs-string">&quot;注册失败&quot;</span>;<br>        mv.addObject(<span class="hljs-string">&quot;tips&quot;</span>, tips);<br>        mv.setViewName(<span class="hljs-string">&quot;result&quot;</span>);<br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br> <br>    <span class="hljs-comment">//处理查询，响应ajax</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/queryStudent.do&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title">queryStudent</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;Student&gt; students = service.findStudents();<br>        <span class="hljs-keyword">return</span> students;<br>    &#125;<br>&#125;<br> <br></code></pre></div></td></tr></table></figure><h4><span id="10-首页indexjsp">10. 首页index.jsp</span></h4><p>别忘记导入jsp的JavaScript的配置</p><p>index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%<br>    String basePath = request.getScheme() + <span class="hljs-string">&quot;://&quot;</span><br>            + request.getServerName() + <span class="hljs-string">&quot;:&quot;</span> + request.getServerPort()<br>            + request.getContextPath() + <span class="hljs-string">&quot;/&quot;</span>;<br>%&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;功能入口&lt;/title&gt;<br>    &lt;base href=<span class="hljs-string">&quot;&lt;%=basePath%&gt;&quot;</span> /&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div align=<span class="hljs-string">&quot;center&quot;</span>&gt;<br>        &lt;p&gt;SSM整合的例子&lt;/p&gt;<br>        &lt;img src=<span class="hljs-string">&quot;images/ssm.jpg&quot;</span> /&gt;<br>        &lt;table&gt;<br>            &lt;tr&gt;<br>                &lt;td&gt;&lt;a href=<span class="hljs-string">&quot;addStudent.jsp&quot;</span>&gt;注册学生&lt;/a&gt;&lt;/td&gt;<br>            &lt;/tr&gt;<br>            &lt;tr&gt;<br>                &lt;td&gt;&lt;a href=<span class="hljs-string">&quot;listStudent.jsp&quot;</span>&gt;浏览学生&lt;/a&gt;&lt;/td&gt;<br>            &lt;/tr&gt;<br>        &lt;/table&gt;<br>    &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br> <br></code></pre></div></td></tr></table></figure><h4><span id="11-注册学生的页面-addstudentjsp">11. 注册学生的页面 addStudent.jsp</span></h4><p>addStudent.sjp</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%<br>    String basePath = request.getScheme() + <span class="hljs-string">&quot;://&quot;</span><br>            + request.getServerName() + <span class="hljs-string">&quot;:&quot;</span> + request.getServerPort()<br>            + request.getContextPath() + <span class="hljs-string">&quot;/&quot;</span>;<br>%&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;注册学生&lt;/title&gt;<br>    &lt;base href=<span class="hljs-string">&quot;&lt;%=basePath%&gt;&quot;</span> /&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div align=<span class="hljs-string">&quot;center&quot;</span>&gt;<br>        &lt;form action=<span class="hljs-string">&quot;student/addStudent.do&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>            &lt;table&gt;<br>                &lt;tr&gt;<br>                    &lt;td&gt;姓名：&lt;/td&gt;<br>                    &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;name&quot;</span> /&gt;&lt;/td&gt;<br>                &lt;/tr&gt;<br>                &lt;tr&gt;<br>                    &lt;td&gt;年龄：&lt;/td&gt;<br>                    &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;age&quot;</span> /&gt;&lt;/td&gt;<br>                &lt;/tr&gt;<br>                &lt;tr&gt;<br>                    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/td&gt;<br>                    &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;注册&quot;</span> /&gt;&lt;/td&gt;<br>                &lt;/tr&gt;<br>            &lt;/table&gt;<br>        &lt;/form&gt;<br>    &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h4><span id="12-浏览学生的jsp页面">12. 浏览学生的jsp页面</span></h4><p>listStudent.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%<br>    String basePath = request.getScheme() + <span class="hljs-string">&quot;://&quot;</span><br>            + request.getServerName() + <span class="hljs-string">&quot;:&quot;</span> + request.getServerPort()<br>            + request.getContextPath() + <span class="hljs-string">&quot;/&quot;</span>;<br>%&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;查询学生ajax&lt;/title&gt;<br>    &lt;base href=<span class="hljs-string">&quot;&lt;%=basePath%&gt;&quot;</span> /&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;js/jquery-3.4.1.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        $(function () &#123;<br>           loadStudentData();<br>           $(<span class="hljs-string">&quot;#btnLoader&quot;</span>).click(function () &#123;<br>               loadStudentData();<br>           &#125;);<br>        &#125;);<br> <br>        <span class="hljs-function">function <span class="hljs-title">loadStudentData</span><span class="hljs-params">()</span> </span>&#123;<br>            $.ajax(&#123;<br>                url:<span class="hljs-string">&quot;student/queryStudent.do&quot;</span>,<br>                type:<span class="hljs-string">&quot;get&quot;</span>,<br>                dataType:<span class="hljs-string">&quot;json&quot;</span>,<br>                success:function (data) &#123;<br>                    $(<span class="hljs-string">&quot;#info&quot;</span>).html();<br>                    $.each(data,function (i,n) &#123;<br>                        $(<span class="hljs-string">&quot;#info&quot;</span>).append(<span class="hljs-string">&quot;&lt;tr&gt;&quot;</span>)<br>                            .append(<span class="hljs-string">&quot;&lt;td&gt;&quot;</span>+n.id+<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>)<br>                            .append(<span class="hljs-string">&quot;&lt;td&gt;&quot;</span>+n.name+<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>)<br>                            .append(<span class="hljs-string">&quot;&lt;td&gt;&quot;</span>+n.age+<span class="hljs-string">&quot;&lt;/td&gt;&quot;</span>)<br>                            .append(<span class="hljs-string">&quot;&lt;/tr&gt;&quot;</span>)<br>                    &#125;);<br>                &#125;<br>            &#125;);<br>        &#125;<br> <br>    &lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;div align=<span class="hljs-string">&quot;center&quot;</span>&gt;<br>        &lt;table&gt;<br>            &lt;thead&gt;<br>            &lt;tr&gt;<br>                &lt;td&gt;学号&lt;/td&gt;<br>                &lt;td&gt;姓名&lt;/td&gt;<br>                &lt;td&gt;年龄&lt;/td&gt;<br>            &lt;/tr&gt;<br>            &lt;/thead&gt;<br>            &lt;tbody id=<span class="hljs-string">&quot;info&quot;</span>&gt;<br> <br>            &lt;/tbody&gt;<br>        &lt;/table&gt;<br>        &lt;input type=<span class="hljs-string">&quot;button&quot;</span> id=<span class="hljs-string">&quot;btnLoader&quot;</span> value=<span class="hljs-string">&quot;查询数据&quot;</span> /&gt;<br>    &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br> <br></code></pre></div></td></tr></table></figure><h4><span id="13-注册结果页面">13. 注册结果页面</span></h4><p>jsp.result.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;结果页面&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    注册结果：$&#123;tips&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h2><span id="第4章-springmvc核心技术">第4章 SpringMVC核心技术</span></h2><h3><span id="1-请求重定向和请求转发">1. 请求重定向和请求转发</span></h3><p>​    当处理器对请求处理完毕后，向其它资源进行跳转时，有两种跳转方式：请求转发与重定向。而根据所要跳转的资源类型，又可分为两类：跳转到页面与跳转到其它处理器。</p><p>​    注意，对于<font color="red">请求转发的页面，可以是WEB-INF 中页面</font>；而<font color="red">重定向的页面，是不能为WEB-INF中页面</font>的。因为重定向相当于用户再次发出一次请求，而用户是<font color="red">不能直接访问 WEB-INF 中资源</font>的。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907181232.png" alt="image-20210907181232136"></p><p>SpringMVC 框架把原来 Servlet 中的请求转发和重定向操作进行了封装。现在可以使用简单的方式实现转发和重定向。<br>forward:表示转发，实现<code>request.getRequestDispatcher(&quot;xx.jsp&quot;).forward() </code><br>redirect:表示重定向，实现<code>response.sendRedirect(&quot;xxx.jsp&quot;)</code></p><h4><span id="1-请求转发">1. 请求转发</span></h4><p>处理器方法返回 ModelAndView 时，需在 setViewName()指定的视图前添加forward:，且<font color="red">此时的视图不再与视图解析器一同工作</font>，这样可以在配置了解析器时指定不同位置的视图。<br>视图页面必须写出相对于项目根的路径。forward 操作不需要视图解析器。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907185428.png" alt="image-20210907185428277"></p><h4><span id="2-请求重定向">2. 请求重定向</span></h4><p>在处理器方法返回的视图字符串的前面添加redirect:，则可实现重定向跳转。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907185451.png" alt="image-20210907185451287"></p><h3><span id="2-异常处理">2. 异常处理</span></h3><p>SpringMVC 框架处理异常的常用方式：使用@ExceptionHandler 注解处理异常。</p><h4><span id="1-exceptionhandler-注解">1. @ExceptionHandler 注解</span></h4><p>使用注解@ExceptionHandler 可以将一个方法指定为异常处理方法。该注解只有一个可选属性 value，为一个 Class&lt;?&gt;数组，用于指定该注解的方法所要处理的异常类，即所要匹配的异常。<br>而被注解的方法，其返回值可以是ModelAndView、String，或void，方法名随意，方法参数可以是 Exception 及其子类对象、HttpServletRequest、HttpServletResponse 等。系统会自动为这些方法参数赋值。<br>对于异常处理注解的用法，也可以直接将异常处理方法注解于 Controller 之中。</p><p>自定义异常类</p><p>定义三个异常类：NameException、AgeException、MyUserException。其中 MyUserException<br>是另外两个异常的父类。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907204152.png" alt="image-20210907204152524"></p><p>====</p><p>修改 Controller 抛出异常</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907191725.png" alt="image-20210907191725601"></p><p>定义异常响应页面</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907204010.png" alt="image-20210907204010844"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907204015.png" alt="image-20210907204015627"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907204018.png" alt="image-20210907204018887"></p><p>不过，一般不这样使用。而是将异常处理方法专门定义在一个类中，作为全局的异常处理类。</p><p><strong>（4） 定义全局异常处理类</strong></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907204328.png" alt="image-20210907204328184"></p><p>需要使用注解@ControllerAdvice，字面理解就是“控制器增强”，是给控制器对象增强功能的。使用@ControllerAdvice 修饰的类中可以使用@ExceptionHandler。<br>当使用@RequestMapping 注解修饰的方法抛出异常时，会执行@ControllerAdvice 修饰的类中的异常处理方法。<br>@ControllerAdvice 是使用@Component 注解修饰的，可以<a href="context:component-scan">context:component-scan</a>扫描到@ControllerAdvice 所在的类路径(包名)，创建对象。</p><p><strong>（5） 定义 Spring 配置文件</strong></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907204447.png" alt="image-20210907204447805"></p><h3><span id="3-拦截器">3. 拦截器</span></h3><p>SpringMVC 中的Interceptor 拦截器是非常重要和相当有用的，它的主要作用是拦截指定的用户请求，并进行相应的预处理与后处理。其拦截的时间点在“处理器映射器根据用户提交的请求映射出了所要执行的处理器类，并且也找到了要执行该处理器类的处理器适配器，在处理器适配器执行处理器之前”。当然，在处理器映射器映射出所要执行的处理器类时，已经将拦截器与处理器组合为了一个处理器执行链，并返回给了中央调度器。</p><h4><span id="一个拦截器的执行">一个拦截器的执行</span></h4><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907204600.png" alt="image-20210907204600153"></p><p>自定义拦截器，需要实现HandlerInterceptor 接口。而该接口中含有三个方法：<br><strong>➢ preHandle(request,response, Object handler)：</strong><br>该方法在处理器方法执行之前执行。其返回值为 boolean，若为 true，则紧接着会执行处理器方法，且会将 afterCompletion()方法放入到一个专门的方法栈中等待执行。</p><p><strong>➢ postHandle(request,response, Object handler,modelAndView)：</strong><br>该方法在处理器方法执行之后执行。处理器方法若最终未被执行，则该方法不会执行。由于该方法是在处理器方法执行完后执行，且该方法参数中包含 ModelAndView，所以该方法可以修改处理器方法的处理结果数据，且可以修改跳转方向。</p><p><strong>➢ afterCompletion(request,response, Object handler, Exception ex)：</strong><br>当 preHandle()方法返回 true 时，会将该方法放到专门的方法栈中，等到对请求进行响应的所有工作完成之后才执行该方法。即该方法是在中央调度器渲染（数据填充）了响应页面之后执行的，此时对 ModelAndView 再操作也对响应无济于事。</p><p>afterCompletion 最后执行的方法，清除资源，例如在 Controller 方法中加入数据</p><p><strong>注册拦截器</strong></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907204948.png" alt="image-20210907204947933"></p><p><a href="mvc:mapping/">mvc:mapping/</a>用于指定当前所注册的拦截器可以拦截的请求路径，而/**表示拦截所有请求。</p><p><strong>修改 index 页面</strong></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907205014.png" alt="image-20210907205014002"></p><p><strong>修改处理器</strong></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907205104.png" alt="image-20210907205104637"></p><p><strong>修改 show 页面</strong></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907205111.png" alt="image-20210907205111570"></p><p><strong>控制台输出结果</strong></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907205115.png" alt="image-20210907205115262"></p><h4><span id="多个拦截器的执行">多个拦截器的执行</span></h4><p>（1） 再定义一个拦截器</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907205156.png" alt="image-20210907205156419"></p><p>（2） 多个拦截器的注册与执行</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907205207.png" alt="image-20210907205207364"></p><p>（3） 控制台执行结果</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907205217.png" alt="image-20210907205217206"></p><p>当有多个拦截器时，形成拦截器链。拦截器链的执行顺序，与其注册顺序一致。需要再次强调一点的是，当某一个拦截器的 preHandle()方法返回 true 并被执行到时，会向一个专门的方法栈中放入该拦截器的 afterCompletion()方法。</p><p>从图中可以看出，只要有一个 preHandle()方法返回 false，则上部的执行链将被断开，其后续的处理器方法与 postHandle()方法将无法执行。但，无论执行链执行情况怎样，只要方法栈中有方法，即执行链中只要有 preHandle()方法返回 true，就会执行方法栈中的afterCompletion()方法。最终都会给出响应。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907205750.png" alt="image-20210907205750141"></p><h4><span id="权限拦截器举例">权限拦截器举例</span></h4><p>只有经过登录的用户方可访问处理器，否则，将返回“无权访问”提示。<br>本例的登录，由一个 JSP 页面完成。即在该页面里将用户信息放入 session 中。也就是说，只要访问过该页面，就说明登录了。没访问过，则为未登录用户。</p><p>（1） 修改 index 页面</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907205829.png" alt="image-20210907205829563"></p><p>（2） 定义 Controller</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907205839.png" alt="image-20210907205838968"></p><p>（3） 定义 welcome 页面</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907205850.png" alt="image-20210907205850662"></p><p>（4） 定义权限拦截器</p><p>当preHandle()方法返回 false 时，需要使用request 或response 对请求进行响应。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907205950.png" alt="image-20210907205950360"></p><p>在Session域中取数据，key是user，如果数据不是beijing，则跳出fail页面，否则放行。</p><p>（5） 定义 fail 页面</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907210331.png" alt="image-20210907210331385"></p><p>（6） 注册权限拦截器</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907210344.png" alt="image-20210907210344611"></p><p>（7） 定义 login 页面</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907210356.png" alt="image-20210907210356100"></p><p>（8） 定义 logout 页面</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210907210410.png" alt="image-20210907210410937"></p><p>（9） 项目测试</p><p>Step1：在地址栏先直接提交 system.do 请求</p><p>Step2：访问login.jsp，进行用户登录</p><p>Step3：再次提交system.do 请求</p><p>Step4：访问logout.jsp，进行用户退出</p><p>Step5：三次提交system.do 请求</p>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>SSM框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaWeb</tag>
      
      <tag>SSM</tag>
      
      <tag>SpringMVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM框架-04-Spring</title>
    <link href="/2021/08/01/SSM%E6%A1%86%E6%9E%B6-04-Spring/"/>
    <url>/2021/08/01/SSM%E6%A1%86%E6%9E%B6-04-Spring/</url>
    
    <content type="html"><![CDATA[<h1><span id="spring5">Spring5</span></h1><!-- toc --><ul><li><a href="#spring5%E6%A1%86%E6%9E%B6%E6%A6%82%E5%BF%B5">Spring5框架概念</a></li><li><a href="#%E4%B8%8B%E8%BD%BD">下载</a></li><li><a href="#%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B">入门案例</a></li><li><a href="#1-ioc%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%ACioc%E5%AE%B9%E5%99%A8star">1、IOC控制反转（IOC容器）:star:</a><ul><li><a href="#ioc%E5%8E%9F%E7%90%86%E5%92%8C%E6%A6%82%E5%BF%B5">IOC原理和概念</a></li><li><a href="#ioc%E6%8E%A5%E5%8F%A3">IOC接口</a></li><li><a href="#iocbean%E7%AE%A1%E7%90%86">IOCBean管理</a></li><li><a href="#ioc%E6%93%8D%E4%BD%9Cbean%E7%AE%A1%E7%90%86%E5%9F%BA%E4%BA%8Exml">IOC操作Bean管理（基于xml）</a><ul><li><a href="#1-%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1">1. 创建对象</a></li><li><a href="#2-set%E6%B3%A8%E5%85%A5">2. set注入</a></li><li><a href="#3-%E4%BD%BF%E7%94%A8%E6%9C%89%E5%8F%82%E6%9E%84%E9%80%A0%E6%B3%A8%E5%85%A5">3. 使用有参构造注入</a></li><li><a href="#4-p%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4%E6%B3%A8%E5%85%A5%E4%BA%86%E8%A7%A3">4. p名称空间注入（了解）</a></li><li><a href="#5-null%E5%92%8C%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7%E7%9A%84%E6%B3%A8%E5%85%A5">5. null和特殊符号的注入</a></li><li><a href="#6-%E6%B3%A8%E5%85%A5%E5%A4%96%E9%83%A8bean">6. 注入外部bean</a></li><li><a href="#7-%E6%B3%A8%E5%85%A5%E5%86%85%E9%83%A8bean">7. 注入内部Bean</a></li><li><a href="#8-%E7%BA%A7%E8%81%94%E8%B5%8B%E5%80%BC">8. 级联赋值</a></li><li><a href="#9-%E6%B3%A8%E5%85%A5%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B">9. 注入集合类型</a></li><li><a href="#10-%E9%9B%86%E5%90%88%E9%87%8C%E8%AE%BE%E7%BD%AE%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B">10. 集合里设置对象（引用）类型</a></li><li><a href="#11-%E6%8A%8A%E9%9B%86%E5%90%88%E6%B3%A8%E5%85%A5%E9%83%A8%E5%88%86%E6%8F%90%E5%8F%96%E5%87%BA%E6%9D%A5">11. 把集合注入部分提取出来</a></li><li><a href="#12-%E5%B7%A5%E5%8E%82bean">12. 工厂Bean</a></li><li><a href="#13-bean-%E4%BD%9C%E7%94%A8%E5%9F%9F">13. bean 作用域</a></li><li><a href="#14-bean%E5%A3%B0%E6%98%8E%E5%91%A8%E6%9C%9F">14. bean声明周期</a></li><li><a href="#15-%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%B3%A8%E5%85%A5">15. 自动装配（注入）</a></li><li><a href="#16-%E5%A4%96%E9%83%A8%E5%B1%9E%E6%80%A7%E6%96%87%E4%BB%B6">16. 外部属性文件</a></li></ul></li><li><a href="#ioc%E6%93%8D%E4%BD%9Cbean%E7%AE%A1%E7%90%86%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3">IOC操作Bean管理（基于注解）</a><ul><li><a href="#1-%E4%BB%80%E4%B9%88%E6%98%AF%E6%B3%A8%E8%A7%A3">1、什么是注解</a></li><li><a href="#2-spring-%E9%92%88%E5%AF%B9-bean-%E7%AE%A1%E7%90%86%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E6%8F%90%E4%BE%9B%E6%B3%A8%E8%A7%A3">2、Spring 针对 Bean 管理中创建对象提供注解</a></li><li><a href="#3-%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA">3、基于注解方式实现对象创建</a></li><li><a href="#4-%E5%BC%80%E5%90%AF%E7%BB%84%E4%BB%B6%E6%89%AB%E6%8F%8F%E7%BB%86%E8%8A%82%E9%85%8D%E7%BD%AE">4、开启组件扫描细节配置</a></li><li><a href="#5-%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%B1%9E%E6%80%A7%E6%B3%A8%E5%85%A5">5、基于注解方式实现属性注入</a></li><li><a href="#6-%E5%AE%8C%E5%85%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91">6、完全注解开发</a></li></ul></li></ul></li><li><a href="#2-aop%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8Bstar">2、AOP面向切面编程:star:</a><ul><li><a href="#aop%E6%A6%82%E5%BF%B5">AOP概念</a></li><li><a href="#aop%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86">AOP底层原理</a></li><li><a href="#aopjdk-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86">AOP（JDK 动态代理）</a></li><li><a href="#aop%E6%9C%AF%E8%AF%AD">AOP（术语）</a></li><li><a href="#aop-%E6%93%8D%E4%BD%9C%E4%BE%9D%E8%B5%96-%E5%88%87%E5%85%A5%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0">AOP 操作（依赖、切入点表达式学习）</a></li><li><a href="#aop-%E6%93%8D%E4%BD%9Caspectj-%E6%B3%A8%E8%A7%A3">AOP 操作（AspectJ 注解）</a><ul><li><a href="#%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4">使用步骤</a></li><li><a href="#%E7%9B%B8%E5%90%8C%E7%9A%84%E5%88%87%E5%85%A5%E7%82%B9%E6%8A%BD%E5%8F%96">相同的切入点抽取</a></li><li><a href="#%E6%9C%89%E5%A4%9A%E4%B8%AA%E5%A2%9E%E5%BC%BA%E7%B1%BB%E5%A4%9A%E5%90%8C%E4%B8%80%E4%B8%AA%E6%96%B9%E6%B3%95%E8%BF%9B%E8%A1%8C%E5%A2%9E%E5%BC%BA%E8%AE%BE%E7%BD%AE%E5%A2%9E%E5%BC%BA%E7%B1%BB%E4%BC%98%E5%85%88%E7%BA%A7">有多个增强类多同一个方法进行增强，设置增强类优先级</a></li><li><a href="#%E5%AE%8C%E5%85%A8%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91">完全使用注解开发</a></li></ul></li><li><a href="#aop-%E6%93%8D%E4%BD%9Caspectj-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">AOP 操作（AspectJ 配置文件）</a></li></ul></li><li><a href="#3-spring-mabtis%E6%95%B4%E5%90%88star">3、Spring、Mabtis整合:star:</a><ul><li><a href="#1-%E5%88%9B%E5%BB%BA%E6%99%AE%E9%80%9Amaven%E9%A1%B9%E7%9B%AE%E5%AF%BC%E5%85%A5%E4%BE%9D%E8%B5%96">1. 创建普通maven项目，导入依赖</a></li><li><a href="#2-%E5%86%99pojo%E7%B1%BB">2. 写pojo类</a></li><li><a href="#3-%E5%86%99dao%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%AF%B9%E5%BA%94%E7%9A%84mapper%E6%96%87%E4%BB%B6">3. 写Dao接口和对应的Mapper文件</a></li><li><a href="#4-%E5%86%99mybatis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">4. 写mybatis配置文件</a></li><li><a href="#5-%E5%86%99jdbcproperties">5. 写jdbc.properties</a></li><li><a href="#6-%E5%86%99spring%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6applicationcontextxml">6. 写spring配置文件（applicationContext.xml）</a></li><li><a href="#7-%E5%86%99service%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%AF%B9%E5%BA%94%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%B1%BB">7. 写Service接口和对应的实现类</a></li><li><a href="#8-%E6%B5%8B%E8%AF%95%E5%8A%9F%E8%83%BD">8. 测试功能</a></li></ul></li><li><a href="#4-spring%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86star">4、Spring事务处理:star:</a><ul><li><a href="#spring%E7%9A%84%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86api">Spring的事务管理API</a><ul><li><a href="#%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%AF%B9%E5%BA%94%E5%AE%9E%E7%8E%B0%E7%B1%BB">事务管理器接口和对应实现类</a></li><li><a href="#%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E6%88%96%E8%A1%8C%E4%B8%BA">事务的属性或行为</a><ul><li><a href="#%E4%BA%94%E4%B8%AA%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E6%8E%8C%E6%8F%A1">五个事务隔离级别（掌握）</a></li><li><a href="#%E4%B8%83%E4%B8%AA%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA%E6%8E%8C%E6%8F%A1">七个事务传播行为（掌握）</a></li></ul></li></ul></li><li><a href="#spring%E4%BA%8B%E5%8A%A1%E6%B3%A8%E8%A7%A3%E7%AE%A1%E7%90%86%E7%9A%84%E7%A8%8B%E5%BA%8F%E4%BE%8B%E5%AD%90">Spring事务注解管理的程序例子</a><ul><li><a href="#1-%E6%96%B0%E5%BB%BAmaven%E5%B7%A5%E7%A8%8B%E5%AF%BC%E5%85%A5%E4%BE%9D%E8%B5%96">1. 新建maven工程，导入依赖</a></li><li><a href="#2-%E5%86%99%E6%95%B0%E6%8D%AE%E5%BA%93%E5%86%99pojo%E7%B1%BB">2. 写数据库，写pojo类</a></li><li><a href="#3-%E5%86%99dao%E5%92%8C%E5%AF%B9%E5%BA%94%E7%9A%84mapper">3. 写Dao和对应的mapper</a></li><li><a href="#4-%E5%86%99%E4%B8%80%E4%B8%AA%E5%BC%82%E5%B8%B8%E7%B1%BB">4. 写一个异常类</a></li><li><a href="#5-%E5%86%99service%E7%B1%BB%E5%85%B3%E9%94%AE">5. 写Service类（关键）</a></li><li><a href="#6-%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81">6. 测试代码</a></li><li><a href="#7-%E5%86%99spring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E9%87%8D%E8%A6%81">7. 写spring事务管理的配置文件（重要）</a></li><li><a href="#8-%E6%B7%BB%E5%8A%A0%E6%B3%A8%E8%A7%A3">8. 添加注解</a></li><li><a href="#9-%E6%B5%8B%E8%AF%95">9. 测试</a></li></ul></li><li><a href="#spring%E7%9A%84%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E8%A7%A3%E6%9E%90">SPring的事务管理解析</a></li><li><a href="#aspectj%E7%9A%84aop-%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E4%BA%8B%E5%8A%A1">AspectJ的AOP 配置管理事务</a><ul><li><a href="#1-%E5%8A%A0%E5%85%A5aspectj%E4%BE%9D%E8%B5%96">1. 加入aspectj依赖</a></li><li><a href="#2-%E5%9C%A8%E5%AE%B9%E5%99%A8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8">2. 在容器中添加事务管理器</a></li><li><a href="#3-%E9%85%8D%E7%BD%AE%E4%BA%8B%E5%8A%A1%E9%80%9A%E7%9F%A5">3. 配置事务通知</a></li><li><a href="#4-%E9%85%8D%E7%BD%AE%E5%88%87%E5%85%A5%E7%82%B9-%E5%85%B3%E8%81%94%E9%80%9A%E7%9F%A5%E4%B8%8E%E5%88%87%E5%85%A5%E7%82%B9">4. 配置切入点、关联通知与切入点</a></li><li><a href="#5-%E6%B5%8B%E8%AF%95">5. 测试</a></li></ul></li></ul></li><li><a href="#5-spring%E5%92%8Cweb">5、Spring和Web</a><ul><li><a href="#1-%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4">1. 使用步骤</a><ul><li><a href="#1-%E6%96%B0%E5%BB%BAweb%E7%9A%84maven%E5%B7%A5%E7%A8%8B%E5%AF%BC%E5%85%A5%E4%BE%9D%E8%B5%96">1. 新建web的maven工程，导入依赖</a></li><li><a href="#2-%E5%86%99%E6%B3%A8%E5%86%8C%E9%A1%B5%E9%9D%A2%E7%9A%84jsp">2. 写注册页面的jsp</a></li><li><a href="#3-%E5%86%99servlet">3. 写servlet</a></li><li><a href="#4-%E6%B3%A8%E5%86%8C%E6%88%90%E5%8A%9F%E9%A1%B5%E9%9D%A2">4. 注册成功页面</a></li><li><a href="#5-webxml-%E6%B3%A8%E5%86%8Cservlet">5. web.xml 注册Servlet</a></li><li><a href="#6-%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90">6. 运行结果分析</a></li></ul></li><li><a href="#2-%E4%BD%BF%E7%94%A8spring-%E7%9A%84%E7%9B%91%E5%90%AC%E5%99%A8contextloaderlistener%E6%8E%8C%E6%8F%A1">2. 使用Spring 的监听器ContextLoaderListener(掌握)</a><ul><li><a href="#1-%E6%B7%BB%E5%8A%A0%E4%B8%8A8%E7%9A%84%E4%BE%9D%E8%B5%96">1. 添加上8的依赖</a></li><li><a href="#2-%E6%B3%A8%E5%86%8C%E7%9B%91%E5%90%AC%E5%99%A8contextloaderlistener">2. 注册监听器ContextLoaderListener</a></li><li><a href="#%E6%96%B9%E6%B3%95%E4%B8%80%E4%BB%8Eservletcontext-%E4%B8%AD%E8%8E%B7%E5%8F%96spring%E5%AE%B9%E5%99%A8%E5%AF%B9%E8%B1%A1">方法一：从ServletContext 中获取spring容器对象</a></li><li><a href="#%E6%96%B9%E6%B3%95%E4%BA%8C%E9%80%9A%E8%BF%87webapplicationcontextutils-%E8%8E%B7%E5%8F%96spring%E5%AE%B9%E5%99%A8%E5%AF%B9%E8%B1%A1">方法二：通过WebApplicationContextUtils 获取spring容器对象</a></li></ul></li></ul></li></ul><!-- tocstop --><h2><span id="spring5框架概念">Spring5框架概念</span></h2><ol><li>  Spring是<strong>轻量级</strong>，<strong>开源的</strong>JavaEE框架。</li><li>  Spring解决企业开发的复杂性</li><li>Spring两个核心部分：<font color="red">IOC和Aop</font><ol><li>  IOC：控制反转，把<strong>创建对象</strong>的过程交给Spring管理。</li><li>  Aop：面向切面，不修改源代码进行功能增强。</li></ol></li><li>Spring特点：<ol><li>  简化开发</li><li>  Aop支持</li><li>  方便程序测试</li><li>  方便与其他框架进行整合</li><li>  降低API开发难度</li></ol></li></ol><h2><span id="下载">下载</span></h2><p>网址：<a href="https://repo.spring.io/ui/packages">Packages - repo.spring.io</a></p><p>Spring 体系结构</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210904221501.png" alt="image-20210904221454693"></p><h2><span id="入门案例">入门案例</span></h2><ol><li>新建maven项目</li><li>导入依赖  <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li>在src下new一组文件夹（com.wangpeng.spring5），new一个Bean类User，写一个普通方法。  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.spring5;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;add...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>在src下new一个spring的xml配置文件，配置一下UserBean，代码如下  <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!--配置User对象创建--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wangpeng.spring5.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li>在src下的wangpeng下，new一个test文件夹，new一个TestSpring5类，写代码  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.test;<br> <br><span class="hljs-keyword">import</span> com.wangpeng.spring5.User;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSpring5</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAdd</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1. 加载配置文件</span><br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<br> <br>        <span class="hljs-comment">//2. 获取配置的对象</span><br>        User user = context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br> <br>        System.out.println(user);<br>        user.add();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>  成功获取到对象并可以执行方法。</li></ol><h2><span id="1-ioc控制反转ioc容器star">1、IOC控制反转（IOC容器）:star:</span></h2><h3><span id="ioc原理和概念">IOC原理和概念</span></h3><ol><li>什么是IOC<ol><li>  控制反转，把对象创建和对象之间的调用过程，交给Spring进行管理。</li><li>  使用IOC的目的：降低耦合度。<font color="orange">（耦合度的就是 分手难度）</font></li><li>  刚才的入门案例就是IOC实现。</li></ol></li><li>IOC底层原理<ol><li>  xml解析、工厂模式、反射</li></ol></li><li>原理解释<ol><li><p>我们平常创建对象和对象调用是这样的</p><p>  <img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210818181340.png" alt="image-20210818181340142"></p><p>  这样的缺点就是耦合度太高了，比如说我UserDao改个名字，就要改很多程序的名字。</p></li><li><p>解决方法1：工厂模式</p><p>  <img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210818182057.png" alt="image-20210818182057470"></p><p>  这样的好处就是，如果要改动Bean类，只需要改动工厂类，一大堆程序就不需要变动。降低了耦合度</p></li><li><p>IOC，通过xml，工厂模式，反射的结合，将耦合度降到最低。</p><p>  <img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210818182727.png" alt="image-20210818182727068"></p></li></ol></li></ol><h3><span id="ioc接口">IOC接口</span></h3><ol><li>IOC思想基于IOC容器完成，IOC容器底层就是对象工厂。</li><li>Spring提供IOC容器的两种实现方式：<ol><li>**<font color="red">BeanFactory</font>**：IOC容器的基本实现，是Spring内部的使用接口，不提供开发人员进行使用。<ul><li>  <font color="green">加载配置文件时<strong>不会创建对象</strong></font>，在获取（使用）对象才去创建对象。</li></ul></li><li>**<font color="red">ApplicationContext</font>**：BeanFactory接口的子接口，提供更多更强大的功能，一般由开发人员进行使用。<ul><li>  <font color="green">加载配置文件时<strong>就会创建对象</strong></font>。</li></ul></li></ol></li><li>ApplicationContext接口的实现类（ctrl+H打开类的结构）  <img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210818193629.png" alt="image-20210818193622907"></li></ol><h3><span id="iocbean管理">IOCBean管理</span></h3><ol><li>Bean管理是指两个操作<ol><li>  Spring创建对象</li><li>  Spring注入属性</li></ol></li><li>Bean管理的两种方式<ol><li>  基于xml</li><li>  基于注解</li></ol></li><li>  xml里是一个个对象的实例</li></ol><h3><span id="ioc操作bean管理基于xml">IOC操作Bean管理（基于xml）</span></h3><h4><span id="1-创建对象">1. 创建对象</span></h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置User对象创建--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wangpeng.spring5.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ol><li>  在spring配置文件中，使用bean标签，在标签中添加对应的属性。</li><li>常用属性介绍<ul><li>  id属性：唯一标识</li><li>  class属性：类全路径</li></ul></li><li>  创建对象时，<font color="red">默认也是执行无参构造方法</font>（如果Bean类没有无参构造方法，则无法通过IOC创建成功）</li></ol><h4><span id="2-set注入">2. set注入</span></h4><ul><li>  DI（Dependency Injection）：依赖注入，就是<font color="red">注入属性</font>（DI是IOC的一种实现）</li></ul><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置book对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wangpeng.spring5.Book&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--    name：属性名称</span><br><span class="hljs-comment">            value：向属性注入的值    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;易筋经&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bauthor&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;达摩老祖&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>注意，配置的对象的类必须包含set方法。</p><h4><span id="3-使用有参构造注入">3. 使用有参构造注入</span></h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;order&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wangpeng.spring5.Order&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;oname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;订单大哥&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;oadress&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;北京紫禁城&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="4-p名称空间注入了解">4. p名称空间注入（了解）</span></h4><ol><li>添加一个p名称空间在配置文件中（idea自动添加）  <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li>简化set方法注入  <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wangpeng.spring5.Book&quot;</span> <span class="hljs-attr">p:bname</span>=<span class="hljs-string">&quot;九阳神功&quot;</span> <span class="hljs-attr">p:bauthor</span>=<span class="hljs-string">&quot;无名氏&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ol><h4><span id="5-null和特殊符号的注入">5. null和特殊符号的注入</span></h4><ol><li>null值  <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;adress&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li>属性值包含特殊符号（html里的方法，使用<code>&amp;lt;&amp;gt;</code>也可以；使用<code>&lt;![CDATA[....]]&gt;</code>也可以）  <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;adress&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&lt;![CDATA[&lt;&lt;南京&gt;&gt;]]&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ol><h4><span id="6-注入外部bean">6. 注入外部bean</span></h4><ol><li>建一个UserDao和UserDaoImpl，里面的内容正常写。  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.dao;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;查询成功！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>建一个UserService和UserServiceImpl，这里UserDao对象不直接new出来，而是要写一个set方法，方便xml注入属性。  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.service;<br> <br><span class="hljs-keyword">import</span> com.wangpeng.dao.UserDao;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-comment">//定义UserDao属性，编写set方法，待会可以xml注入</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(UserDao userDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userDao = userDao;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">login</span><span class="hljs-params">()</span> </span>&#123;<br>        userDao.query();<br>        System.out.println(<span class="hljs-string">&quot;登陆成功!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>spring bean的xml  <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--创建Service对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wangpeng.service.UserServiceImpl&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--注入userDao对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wangpeng.dao.UserDaoImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ol><li>  这里创建UserService对象，它的userDao属性，给它引用下面的userDao的对象。</li><li>  <font color="red">注意：基本类型的set注入是通过value赋值，引用类型需要使用ref赋值。</font></li><li>  <font color="red">在框架中，String也当成基本类型，所以String是通过value来赋值的。</font></li></ol></li><li>Test类  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testService</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//1. 加载配置文件</span><br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<br>    <span class="hljs-comment">//2. 获取配置的对象</span><br>    UserService userService = context.getBean(<span class="hljs-string">&quot;userService&quot;</span>,UserService.class);<br>    <span class="hljs-comment">//3. 调用方法</span><br>    userService.login();<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>输出  <figure class="highlight erlang-repl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs erlang-repl">查询成功！<br>登陆成功!<br></code></pre></div></td></tr></table></figure></li></ol><h4><span id="7-注入内部bean">7. 注入内部Bean</span></h4><ol><li>建个Depart类和Emp类，Depart和Emp是一对多的关系，我们要在Emp中添加一个Depart属性。  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.pojo;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Depart</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String dname;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDname</span><span class="hljs-params">(String dname)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.dname = dname;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Depart&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;dname=&#x27;&quot;</span> + dname + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.pojo;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Emp</span> </span>&#123;<br> <br>    <span class="hljs-keyword">private</span> String ename;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> Depart depart;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEname</span><span class="hljs-params">(String ename)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.ename = ename;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setGender</span><span class="hljs-params">(String gender)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.gender = gender;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDepart</span><span class="hljs-params">(Depart depart)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.depart = depart;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Emp&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;ename=&#x27;&quot;</span> + ename + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, depart=&quot;</span> + depart +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>bean2.xml  <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wangpeng.pojo.Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ename&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;王小波&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;depart&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;depart&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wangpeng.pojo.Depart&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;保安部&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li>Test  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInterBean</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//1. 加载配置文件</span><br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean2.xml&quot;</span>);<br>    <span class="hljs-comment">//2. 获取配置的对象</span><br>    Emp emp = context.getBean(<span class="hljs-string">&quot;emp&quot;</span>, Emp.class);<br>    <span class="hljs-comment">//3. 调用方法</span><br>    System.out.println(emp);<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>输出  <figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">Emp&#123;<span class="hljs-attribute">ename</span>=<span class="hljs-string">&#x27;王小波&#x27;</span>, <span class="hljs-attribute">gender</span>=<span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-attribute">depart</span>=Depart&#123;<span class="hljs-attribute">dname</span>=<span class="hljs-string">&#x27;保安部&#x27;</span>&#125;&#125;<br></code></pre></div></td></tr></table></figure></li></ol><h4><span id="8-级联赋值">8. 级联赋值</span></h4><ol><li>xml  <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wangpeng.pojo.Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ename&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;王小波&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;depart&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;depart&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;depart.dname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;技术部&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;depart&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wangpeng.pojo.Depart&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;财务部&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li>注意depart.dname，需要读depart，所以Emp中需要有get方法  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.pojo;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Emp</span> </span>&#123;<br> <br>    <span class="hljs-keyword">private</span> String ename;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> Depart depart;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEname</span><span class="hljs-params">(String ename)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.ename = ename;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setGender</span><span class="hljs-params">(String gender)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.gender = gender;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDepart</span><span class="hljs-params">(Depart depart)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.depart = depart;<br>    &#125;<br> <br>    <span class="hljs-comment">/**************************************/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Depart <span class="hljs-title">getDepart</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> depart;<br>    &#125;<br>    <span class="hljs-comment">/**************************************/</span><br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Emp&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;ename=&#x27;&quot;</span> + ename + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, depart=&quot;</span> + depart +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>输出  <figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">Emp&#123;<span class="hljs-attribute">ename</span>=<span class="hljs-string">&#x27;王小波&#x27;</span>, <span class="hljs-attribute">gender</span>=<span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-attribute">depart</span>=Depart&#123;<span class="hljs-attribute">dname</span>=<span class="hljs-string">&#x27;技术部&#x27;</span>&#125;&#125;<br></code></pre></div></td></tr></table></figure></li></ol><h4><span id="9-注入集合类型">9. 注入集合类型</span></h4><ol><li>Stu类  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.pojo;<br> <br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stu</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String[] strings;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; lists;<br>    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; maps;<br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; sets;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStrings</span><span class="hljs-params">(String[] strings)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.strings = strings;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLists</span><span class="hljs-params">(List&lt;String&gt; lists)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.lists = lists;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMaps</span><span class="hljs-params">(Map&lt;String, String&gt; maps)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.maps = maps;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSets</span><span class="hljs-params">(Set&lt;String&gt; sets)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sets = sets;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Stu&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;strings=&quot;</span> + Arrays.toString(strings) +<br>                <span class="hljs-string">&quot;, lists=&quot;</span> + lists +<br>                <span class="hljs-string">&quot;, maps=&quot;</span> + maps +<br>                <span class="hljs-string">&quot;, sets=&quot;</span> + sets +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>xml  <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stu&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wangpeng.pojo.Stu&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;strings&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>one<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>two<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lists&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>one<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>two<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maps&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;key1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;value1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;key2&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;value2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sets&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>one<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>two<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li>效果  <figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">Stu&#123;strings=[<span class="hljs-keyword">one</span>, <span class="hljs-keyword">two</span>], lists=[<span class="hljs-keyword">one</span>, <span class="hljs-keyword">two</span>], maps=&#123;key1=value1, key2=value2&#125;, sets=[<span class="hljs-keyword">one</span>, <span class="hljs-keyword">two</span>]&#125;<br></code></pre></div></td></tr></table></figure></li></ol><h4><span id="10-集合里设置对象引用类型">10. 集合里设置对象（引用）类型</span></h4><ol><li>  先创建course对象</li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight xml"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;course1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.collectiontype.Course&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Spring5 框架&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;course2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.collectiontype.Course&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;MyBatis 框架&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure></code></pre><ol start="2"><li>再引用它们  <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;courseList&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;course1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;course2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ol><h4><span id="11-把集合注入部分提取出来">11. 把集合注入部分提取出来</span></h4><ol><li>引入命名空间  <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:util</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/util&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                           http://www.springframework.org/schema/util</span></span><br><span class="hljs-string"><span class="hljs-tag">http://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li>使用 util 标签完成 list 集合注入提取  <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1 提取list集合类型属性注入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">util:list</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookList&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>易筋经<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>九阴真经<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>九阳神功<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">util:list</span>&gt;</span><br> <br><span class="hljs-comment">&lt;!--2 提取list集合类型属性注入使用--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.collectiontype.Book&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookList&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ol><h4><span id="12-工厂bean">12. 工厂Bean</span></h4><p><font color="red">就是多态呗。</font></p><p>1、Spring 有两种类型 bean，一种普通 bean，另外一种工厂 bean（FactoryBean）</p><p>2、普通 bean：在配置文件中定义 bean 类型就是返回类型</p><p>3、工厂 bean：在配置文件定义 bean 类型可以和返回类型不一样</p><p>第一步 创建类，让这个类作为工厂 bean，实现接口 FactoryBean</p><p>第二步 实现接口里面的方法，在实现的方法中定义返回的 bean 类型</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FactoryBean</span>&lt;<span class="hljs-title">Course</span>&gt; </span>&#123;<br>    <span class="hljs-comment">//定义返回bean</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Course <span class="hljs-title">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Course course = <span class="hljs-keyword">new</span> Course();<br>        course.setCname(<span class="hljs-string">&quot;abc&quot;</span>);<br>        <span class="hljs-keyword">return</span> course;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSingleton</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBean&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.factorybean.MyBean&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context =<br>            <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean3.xml&quot;</span>);<br>    Course course = context.getBean(<span class="hljs-string">&quot;myBean&quot;</span>, Course.class);<br>    System.out.println(course);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="13-bean-作用域">13. bean 作用域</span></h4><p>1、在 Spring 里面，设置创建 bean 实例是单实例还是多实例</p><p>2、在 Spring 里面，<font color="red">默认情况下，bean 是单实例对象</font></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210819172515.png" alt="image-20210819172508594"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210819172525.png" alt="image-20210819172525157"></p><p>3、如何设置单实例还是多实例<br>（1）在 spring 配置文件 bean 标签里面有<font color="red">属性（scope）用于设置单实例还是多实例 </font><br>（2）scope 属性值<br>第一个值  默认值，<strong>singleton</strong>，表示是单实例对象<br>第二个值  <strong>prototype</strong>，表示是多实例对象</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210819172535.png" alt="image-20210819172535788"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210819172541.png" alt="image-20210819172541604"></p><p>（3）singleton 和 prototype 区别<br>第一 singleton 单实例，prototype 多实例<br>第二 设置 scope 值是 singleton 时候，<font color="red">加载 spring 配置文件时候就会创建单实例对象 </font><br>设置 scope 值是 prototype 时候，不是在加载 spring 配置文件时候创建 对象，在调用<br>getBean 方法时候创建多实例对象</p><h4><span id="14-bean声明周期">14. bean声明周期</span></h4><p>1、生命周期<br>（1）从对象创建到对象销毁的过程</p><p>2、bean 生命周期<br><font color="red">（1）通过构造器创建 bean 实例（无参数构造） </font><br><font color="red">（2）为 bean 的属性设置值和对其他 bean 引用（调用 set 方法） </font><br><font color="red">（3）调用 bean 的初始化的方法（需要进行配置初始化的方法） </font><br><font color="red">（4）bean 可以使用了（对象获取到了） </font><br><font color="red">（5）当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法） </font></p><p>3、演示 bean 生命周期</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Orders</span> </span>&#123;<br>    <span class="hljs-comment">//无参数构造</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Orders</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;第一步 执行无参数构造创建 bean 实例&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">private</span> String oname;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setOname</span><span class="hljs-params">(String oname)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.oname = oname;<br>        System.out.println(<span class="hljs-string">&quot;第二步 调用 set 方法设置属性值&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//创建执行的初始化的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initMethod</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;第三步 执行初始化的方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//创建执行的销毁的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroyMethod</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;第五步 执行销毁的方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orders&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.bean.Orders&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;initMethod&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroyMethod&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;oname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;手机&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210819181250.png" alt="image-20210819181250765"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210819181257.png" alt="image-20210819181257309"></p><p>4、bean 的后置处理器，bean 生命周期有七步</p><p>（1）通过构造器创建 bean 实例（无参数构造）<br>（2）为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）<br><font color="red">（3）把bean 实例传递 bean后置处理器的方法 postProcessBeforeInitialization </font><br>（4）调用 bean 的初始化的方法（需要进行配置初始化的方法）<br><font color="red">（5）把bean 实例传递 bean 后置处理器的方法 postProcessAfterInitialization </font><br>（6）bean 可以使用了（对象获取到了）<br>（7）当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）</p><p>5、演示添加后置处理器效果<br>（1）创建类，实现接口 BeanPostProcessor，创建后置处理器</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBeanPost</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BeanPostProcessor</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span></span><br><span class="hljs-function"><span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;在初始化之前执行的方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span></span><br><span class="hljs-function"><span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;在初始化之后执行的方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置后置处理器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBeanPost&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.bean.MyBeanPost&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><img src="C:\Users\wangpeng\AppData\Roaming\Typora\typora-user-images\image-20210819181419510.png" alt="image-20210819181419510"></p><h4><span id="15-自动装配注入">15. 自动装配（注入）</span></h4><p>1、什么是自动装配<br>（1）根据指定装配规则（属性名称或者属性类型），Spring 自动将匹配的属性值进行注入</p><p>2、演示自动装配过程<br>（1）根据属性名称自动注入</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--实现自动装配</span><br><span class="hljs-comment">    bean标签属性 autowire，配置自动装配</span><br><span class="hljs-comment">    autowire属性常用两个值：</span><br><span class="hljs-comment">        byName根据属性名称注入 ，注入值bean的 id值和类属性名称一样</span><br><span class="hljs-comment">        byType根据属性类型注入</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.autowire.Emp&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;property name=&quot;dept&quot; ref=&quot;dept&quot;&gt;&lt;/property&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.autowire.Dept&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="16-外部属性文件">16. 外部属性文件</span></h4><p><strong>1、直接配置数据库信息</strong><br>（1）配置德鲁伊连接池<br>（2）引入德鲁伊连接池依赖 jar 包</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210819193726.png" alt="image-20210819193726867"></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--直接配置连接池--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/userDb&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>2、引入外部属性文件配置数据库连接池</strong><br>（1）创建外部属性文件，properties 格式文件，写数据库信息</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/springdb</span><br><span class="hljs-meta">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">jdbc.password</span>=<span class="hljs-string">7783772</span><br></code></pre></div></td></tr></table></figure><p>（2）把外部 properties 属性文件引入到 spring 配置文件中</p><ul><li>引入 context 名称空间（idea会自动引入）</li><li>在 spring 配置文件使用标签引入外部属性文件  <figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入外部属性文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--配置连接池--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;prop.url&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;prop.userName&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;prop.password&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ul><h3><span id="ioc操作bean管理基于注解">IOC操作Bean管理（基于注解）</span></h3><h4><span id="1-什么是注解">1、什么是注解</span></h4><p>（1）注解是代码特殊标记，格式：@注解名称(属性名称=属性值, 属性名称=属性值..)<br>（2）使用注解，注解作用在类上面，方法上面，属性上面<br>（3）使用注解目的：简化 xml 配置</p><h4><span id="2-spring-针对-bean-管理中创建对象提供注解">2、Spring 针对 Bean 管理中创建对象提供注解</span></h4><p>（1）@Component<br>（2）@Service<br>（3）@Controller<br>（4）@Repository</p><ul><li>上面四个注解<font color="red">功能是一样的</font>，都可以用来创建bean 实例，只是<font color="red">习惯放在对应的层次中</font>。</li></ul><h4><span id="3-基于注解方式实现对象创建">3、基于注解方式实现对象创建</span></h4><p><font color="red">第一步 引入依赖（略过，还是spring-context依赖）</font></p><p><font color="red">第二步 开启组件扫描</font></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--开启组件扫描</span><br><span class="hljs-comment">    1 如果扫描多个包，多个包使用逗号隔开</span><br><span class="hljs-comment">    2 扫描包上层目录</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wangpeng&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>多个包的情况</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210820192406.png" alt="image-20210820192359149"></p><p><font color="red">第三步 创建类，在类上面添加创建对象注解 </font></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//在注解里面value属性值可以省略不写，</span><br><span class="hljs-comment">//默认值是类名称，首字母小写</span><br><span class="hljs-comment">//UserService -- userService</span><br><span class="hljs-meta">@Component(value = &quot;userService&quot;)</span>  <span class="hljs-comment">//&lt;bean id=&quot;userService&quot; class=&quot;..&quot;/&gt;</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;service add.......&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="4-开启组件扫描细节配置">4、开启组件扫描细节配置</span></h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--示例1</span><br><span class="hljs-comment">    use-default-filters=&quot;false&quot; 表示现在不使用默认filter，自己配置 filter</span><br><span class="hljs-comment">    context:include-filter ，设置扫描哪些内容</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wangpeng&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-comment">&lt;!--示例2</span><br><span class="hljs-comment">    下面配置扫描包所有内容</span><br><span class="hljs-comment">    context:exclude-filter： 设置哪些内容不进行扫描</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p> annotation    注解</p><p>关不关闭默认的扫描机制，都是可以排除一些不去扫描，所以示例2没加use-default-filters=“false”，表示扫描所有的情况下设置一些不扫描</p><h4><span id="5-基于注解方式实现属性注入">5、基于注解方式实现属性注入</span></h4><p><font color="red">（1）@Autowired：根据属性类型进行自动装配 </font><br>第一步 UserDaoImpl添加注解</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.dao;<br> <br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br> <br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;dao add...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>第二步 UserServiceImpl添加注解</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.service;<br> <br><span class="hljs-keyword">import</span> com.wangpeng.dao.UserDao;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br> <br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span></span>&#123;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>        userDao.add();<br>        System.out.println(<span class="hljs-string">&quot;service add...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>第三步 测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.test;<br> <br><span class="hljs-keyword">import</span> com.wangpeng.service.UserService;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<br>        UserService userService = context.getBean(<span class="hljs-string">&quot;userServiceImpl&quot;</span>, UserService.class);<br>        userService.add();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>测试结果</p><figure class="highlight gams"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">dao</span></span> add...<br><span class="hljs-function"><span class="hljs-title">service</span></span> add...<br></code></pre></div></td></tr></table></figure><p><font color="red">（2）@Qualifier：根据名称进行注入 </font></p><p>这个@Qualifier 注解的使用，<font color="red">和上面@Autowired 一起使用 </font></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//定义dao类型属性</span><br><span class="hljs-comment">//不需要添加set方法</span><br><span class="hljs-comment">//添加注入属性注解</span><br><span class="hljs-meta">@Autowired</span>  <span class="hljs-comment">//根据类型进行注入</span><br><span class="hljs-meta">@Qualifier(value = &quot;userDaoImpl1&quot;)</span> <span class="hljs-comment">//根据名称进行注入</span><br><span class="hljs-keyword">private</span> UserDao userDao;<br></code></pre></div></td></tr></table></figure><p>这样就指定了userDao实现类的名称</p><p>第一步 修改UserDaoImpl的注解value</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.dao;<br> <br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br> <br><span class="hljs-meta">@Repository(value = &quot;userDaoImpl1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;dao add...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>第二步 添加Qualifier</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.service;<br> <br><span class="hljs-keyword">import</span> com.wangpeng.dao.UserDao;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br> <br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span></span>&#123;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(value = &quot;userDaoImpl1&quot;)</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>        userDao.add();<br>        System.out.println(<span class="hljs-string">&quot;service add...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>第三步 测试（同上）</p><p>测试结果</p><figure class="highlight gams"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">dao</span></span> add...<br><span class="hljs-function"><span class="hljs-title">service</span></span> add...<br></code></pre></div></td></tr></table></figure><p><font color="red">（3）@Resource：可以根据类型注入，可以根据名称注入 </font></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//@Resource  //根据类型进行注入</span><br><span class="hljs-meta">@Resource(name = &quot;userDaoImpl1&quot;)</span>  <span class="hljs-comment">//根据名称进行注入</span><br><span class="hljs-keyword">private</span> UserDao userDao;<br></code></pre></div></td></tr></table></figure><p>指定名字就根据名字注入，不指定就根据类型注入，@Resourse是在javax的包里，所以spring不推荐使用。</p><p><font color="red">（4）@Value：注入普通类型属性</font></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Value(value = &quot;abc&quot;)</span><br><span class="hljs-keyword">private</span> String name;<br></code></pre></div></td></tr></table></figure><p>修改Service</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.service;<br> <br><span class="hljs-keyword">import</span> com.wangpeng.dao.UserDao;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br> <br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span></span>&#123;<br> <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(value = &quot;userDaoImpl1&quot;)</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br> <br>    <span class="hljs-meta">@Value(value = &quot;abc&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>        userDao.add();<br>        System.out.println(<span class="hljs-string">&quot;service add...&quot;</span>);<br>        System.out.println(name);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>测试同上</p><p>测试结果</p><figure class="highlight gams"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">dao</span></span> add...<br><span class="hljs-function"><span class="hljs-title">service</span></span> add...<br>abc<br></code></pre></div></td></tr></table></figure><h4><span id="6-完全注解开发">6、完全注解开发</span></h4><p>（1）创建配置类，替代xml配置文件</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.config;<br> <br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Configurable;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<br> <br><span class="hljs-meta">@Configurable</span><br><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.wangpeng&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringConfig</span> </span>&#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>（2）编写测试类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.test;<br> <br><span class="hljs-keyword">import</span> com.wangpeng.config.SpringConfig;<br><span class="hljs-keyword">import</span> com.wangpeng.service.UserService;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);<br> <br>        UserService userService = context.getBean(<span class="hljs-string">&quot;userServiceImpl&quot;</span>, UserService.class);<br>        userService.add();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2><span id="2-aop面向切面编程star">2、AOP面向切面编程:star:</span></h2><h3><span id="aop概念">AOP概念</span></h3><p>1、什么是 AOP<br>（1）<font color="red">面向切面编程（方面）</font>，利用 AOP 可以对业务逻辑的各个部分进行隔离，从而<font color="red">使</font>得<br>业务逻辑各部分之间的<font color="red">耦合度降低，提高程序的可重用性，同时提高了开发的效率</font>。</p><p>（2）通俗描述：不通过修改源代码方式，在主干功能里面添加新功能</p><p>（3）使用登录例子说明 AOP</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210821155201.png" alt="image-20210821155154605"></p><h3><span id="aop底层原理">AOP底层原理</span></h3><p>1、AOP 底层使用动态代理<br>（1）有两种情况动态代理<br>第一种 有接口情况，使用 JDK 动态代理<br>⚫ 创建接口实现类代理对象，增强类的方法</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210821155221.png" alt="image-20210821155221831"></p><p>第二种 没有接口情况，使用 CGLIB 动态代理<br>⚫ 创建子类的代理对象，增强类的方法</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210821155240.png" alt="image-20210821155240575"></p><h3><span id="aopjdk-动态代理">AOP（JDK 动态代理）</span></h3><p>1、使用 JDK 动态代理，使用 Proxy 类里面的方法创建代理对象</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210821155305.png" alt="image-20210821155305554"></p><p>（1）调用 newProxyInstance 方法</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210821155337.png" alt="image-20210821155337806"></p><p>方法有三个参数：<br>第一参数，类加载器<br>第二参数，增强方法所在的类，这个类实现的接口，支持多个接口<br>第三参数，实现这个接口 InvocationHandler，创建代理对象，写增强的部分</p><p>2、编写 JDK 动态代理代码</p><p>（1）创建接口，定义方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">update</span><span class="hljs-params">(String id)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>（2）创建接口实现类，实现方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a+b;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">update</span><span class="hljs-params">(String id)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>（3）使用 Proxy 类创建接口代理对象</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDKProxy</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建接口实现类代理对象</span><br>        Class[] interfaces = &#123;UserDao.class&#125;;<br><span class="hljs-comment">//        Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces,</span><br><span class="hljs-keyword">new</span> InvocationHandler() &#123;<br><span class="hljs-comment">//            @Override</span><br><span class="hljs-comment">//            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="hljs-comment">//                return null;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;);</span><br>        UserDaoImpl userDao = <span class="hljs-keyword">new</span> UserDaoImpl();<br>        UserDao dao = (UserDao)Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, <span class="hljs-keyword">new</span> UserDaoProxy(userDao));<br>        <span class="hljs-keyword">int</span> result = dao.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>        System.out.println(<span class="hljs-string">&quot;result:&quot;</span>+result);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//创建代理对象代码</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br>    <span class="hljs-comment">//1 把创建的是谁的代理对象，把谁传递过来</span><br>    <span class="hljs-comment">//有参数构造传递</span><br>    <span class="hljs-keyword">private</span> Object obj;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserDaoProxy</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.obj = obj;<br>    &#125;<br>    <span class="hljs-comment">//增强的逻辑</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        <span class="hljs-comment">//方法之前</span><br>        System.out.println(<span class="hljs-string">&quot;方法之前执行....&quot;</span>+method.getName()+<span class="hljs-string">&quot; :传递的参数...&quot;</span>+ Arrays.toString(args));<br>        <span class="hljs-comment">//被增强的方法执行</span><br>        Object res = method.invoke(obj, args);<br>        <span class="hljs-comment">//方法之后</span><br>        System.out.println(<span class="hljs-string">&quot;方法之后执行....&quot;</span>+obj);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3><span id="aop术语">AOP（术语）</span></h3><p><strong>1、连接点</strong></p><p><font color="orange">可以被增强的方法。</font></p><p><strong>2、切入点</strong></p><p><font color="green">实际被增强的方法。</font></p><p><strong>3、通知（增强）</strong></p><p><font color="blue">实际增强的逻辑部分称为通知（增强）</font></p><p>通知的多种类型</p><ul><li>  <font color="red">前置通知</font></li><li>  <font color="red">后置通知</font></li><li>  <font color="red">环绕通知</font></li><li>  <font color="red">异常通知</font></li><li><font color="red">最终通知</font></li><li><em>4、切面</em>*</li></ul><p><font color="purple">把通知应用到切入点的过程。</font></p><h3><span id="aop-操作依赖-切入点表达式学习">AOP 操作（依赖、切入点表达式学习）</span></h3><p>1、Spring 框架一般都是基于 AspectJ 实现 AOP 操作<br>（1）AspectJ 不是 Spring 组成部分，独立 AOP 框架，一般把 AspectJ 和 Spirng 框架一起使<br>用，进行 AOP 操作</p><p>2、基于 AspectJ 实现 AOP 操作<br>（1）基于 xml 配置文件实现<br>（2）基于注解方式实现（使用）</p><p>3、在项目工程里面引入 AOP 相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong><font color="red">4、切入点表达式</font></strong><br>（1）切入点表达式作用：知道对哪个类里面的哪个方法进行增强<br>（2）语法结构： <code>execution([权限修饰符] [返回类型] [类全路径] [方法名称]([参数列表]) ) </code></p><p><font color="red">权限修饰符可以省略，返回类型可以使用通配符*</font></p><p>举例 1：对 com.atguigu.dao.BookDao 类里面的 add 进行增强<br>execution( * com.atguigu.dao.BookDao.add(..))</p><p>举例 2：对 com.atguigu.dao.BookDao 类里面的所有的方法进行增强<br>execution( *  com.atguigu.dao.BookDao.* (..))</p><p>举例 3：对 com.atguigu.dao 包里面所有类，类里面所有方法进行增强<br>execution(*  com.atguigu.dao.<em>.</em> (..))</p><p><font color="green">两个点表示参数列表</font></p><p><font color="orange">实际上就和写个方法的声明差不多</font></p><p>全通配写法：</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">execution</span><span class="hljs-params">(* *..*.*(..)</span></span>)<br></code></pre></div></td></tr></table></figure><p>变化过程：</p><ol><li>访问修饰符可省略 <figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">void cn<span class="hljs-selector-class">.luis</span><span class="hljs-selector-class">.service</span><span class="hljs-selector-class">.impl</span><span class="hljs-selector-class">.AccountServiceImpl</span><span class="hljs-selector-class">.saveAccount</span>()<br></code></pre></div></td></tr></table></figure></li><li>返回值可使用通配符<code>*</code> <figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">* cn.luis.service.impl.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AccountServiceImpl</span>.</span></span>save<span class="hljs-constructor">Account()</span><br></code></pre></div></td></tr></table></figure></li><li>包名可使用通配符<code>*</code>：表示任意包  有几级包就写几个*  <figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span><span class="hljs-strong">*.*</span>.<span class="hljs-strong">*.*</span>.AccountServiceImpl.saveAccount()<br></code></pre></div></td></tr></table></figure>  <font color="red">表示当前包及其子包<code>*..</code></font>  <figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">* *..<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AccountServiceImpl</span>.</span></span>save<span class="hljs-constructor">Account()</span><br></code></pre></div></td></tr></table></figure></li><li>类名和方法名都可以使用通配符<code>*</code>  <figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span><span class="hljs-strong">*..*</span>.*()  //无参方法被增强<br></code></pre></div></td></tr></table></figure></li><li>参数列表  基本数据类型直接写名称，如：<code>int</code></li></ol><div class="hljs code-wrapper"><pre><code><figure class="highlight java"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">* *..*.*(<span class="hljs-keyword">int</span>)<br></code></pre></div></td></tr></table></figure>引用类型写包名<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">java.lang.String<br></code></pre></div></td></tr></table></figure></code></pre><ol start="6"><li>参数类型  可以用通配符<code>*</code>表示：:<strong>前提是必须有参数</strong>  <figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span><span class="hljs-strong">*..*</span>.<span class="hljs-strong">*(*</span>)<br></code></pre></div></td></tr></table></figure>  <code>..</code>表示有无参数均可，有参数时可以是任意类型  <figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span><span class="hljs-strong">*..*</span>.*(..)<br></code></pre></div></td></tr></table></figure></li><li>实际开发中切入点表达式通常写法  <figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>cn.luis.service.impl.<span class="hljs-strong">*.*</span>(..)<br></code></pre></div></td></tr></table></figure></li></ol><h3><span id="aop-操作aspectj-注解">AOP 操作（AspectJ 注解）</span></h3><h4><span id="使用步骤">使用步骤</span></h4><p>1、被增强的类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.pojo;<br> <br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br> <br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;add...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>2、增强类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.pojo;<br> <br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br> <br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserProxy</span> </span>&#123;<br>    <span class="hljs-meta">@Before(value = &quot;execution(* com.wangpeng.pojo.User.add(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;before...&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-meta">@AfterReturning(value = &quot;execution(* com.wangpeng.pojo.User.add(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterReturning</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;afterReturning...&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-meta">@After(value = &quot;execution(* com.wangpeng.pojo.User.add(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;after...&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-meta">@AfterThrowing(value = &quot;execution(* com.wangpeng.pojo.User.add(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterThrowing</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;afterThrowing...&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-meta">@Around(value = &quot;execution(* com.wangpeng.pojo.User.add(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">around</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;环绕之前&quot;</span>);<br>        proceedingJoinPoint.proceed();<br>        System.out.println(<span class="hljs-string">&quot;环绕之后&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>3、xml配置</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/aop</span></span><br><span class="hljs-string"><span class="hljs-tag">       https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--组件扫描，这样就能识别生成对象的注解--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.wangpeng&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--自动增强，这样就能识别增强的注解--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>4、测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.test;<br> <br><span class="hljs-keyword">import</span> com.wangpeng.pojo.User;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<br>        User user = context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br>        user.add();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>5、测试结果</p><figure class="highlight gams"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gams">环绕之前<br><span class="hljs-function"><span class="hljs-title">before</span></span>...<br><span class="hljs-function"><span class="hljs-title">add</span></span>...<br>环绕之后<br><span class="hljs-function"><span class="hljs-title">after</span></span>...<br><span class="hljs-function"><span class="hljs-title">afterReturning</span></span>...<br></code></pre></div></td></tr></table></figure><p><font color="green">注解说明：</font></p><ol><li>  <font color="red">@Before</font>：前置通知</li><li>  <font color="red">@AfterReturning</font>：后置通知，只有被增强的方法正常返回才会执行。</li><li>  <font color="red">@After</font>：最终通知，无论如何都会在被增强的方法之后执行。</li><li>  <font color="red">@AfterThrowing</font>：异常通知，被增强的方法出现异常时执行。</li><li>  <font color="red">@Around</font>：环绕通知，增加一个参数<code>ProceedingJoinPoint proceedingJoinPoint</code>，在方法内调用<code>proceedingJoinPoint.proceed();</code>就是被增强的方法，在此之前和之后都可以写一段代码，让其在原方法之前和之后执行。</li></ol><h4><span id="相同的切入点抽取">相同的切入点抽取</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//相同切入点抽取</span><br><span class="hljs-meta">@Pointcut(value = &quot;execution(* com.atguigu.spring5.aopanno.User.add(..))&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pointdemo</span><span class="hljs-params">()</span> </span>&#123;<br>&#125;<br><span class="hljs-comment">//前置通知</span><br><span class="hljs-comment">//@Before注解表示作为前置通知</span><br><span class="hljs-meta">@Before(value = &quot;pointdemo()&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;before.........&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="有多个增强类多同一个方法进行增强设置增强类优先级">有多个增强类多同一个方法进行增强，设置增强类优先级</span></h4><p>（1）在增强类上面添加注解<font color="red"> @Order(数字类型值)，数字类型值越小优先级越高 </font></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Order(1)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonProxy</span></span><br></code></pre></div></td></tr></table></figure><h4><span id="完全使用注解开发">完全使用注解开发</span></h4><p>（1）创建配置类，不需要创建 xml 配置文件</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.atguigu&quot;&#125;)</span><br><span class="hljs-meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConfigAop</span> </span>&#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>@EnableAspectJAutoProxy(proxyTargetClass = true)</code> 等价于 xml中的<code>&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</code></p><h3><span id="aop-操作aspectj-配置文件">AOP 操作（AspectJ 配置文件）</span></h3><p>1、创建两个类，增强类和被增强类，创建方法</p><p>2、在 spring 配置文件中创建两个类对象</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--创建对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;book&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.aopxml.Book&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bookProxy&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.spring5.aopxml.BookProxy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>3、在 spring 配置文件中配置切入点</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置aop增强--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--切入点--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(*</span></span><br><span class="hljs-string"><span class="hljs-tag">com.atguigu.spring5.aopxml.Book.buy(..))&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--配置切面--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bookProxy&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--增强作用在具体的方法上--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;p&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2><span id="3-spring-mabtis整合star">3、Spring、Mabtis整合:star:</span></h2><h3><span id="1-创建普通maven项目导入依赖">1. 创建普通maven项目，导入依赖</span></h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wangpeng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--单元测试--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--spring环境--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--spirng事务--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--spring jdbc--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--mybatis--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--spring和mybatis集成--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--mysql--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--德鲁伊线程池--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--使得java目录下的xml也能打包进classes里--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><span class="hljs-comment">&lt;!--所在的目录--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><span class="hljs-comment">&lt;!--包括目录下的.properties,.xml文件都会扫描到--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="2-写pojo类">2. 写pojo类</span></h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.pojo;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-comment">//...省略基本方法</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3><span id="3-写dao接口和对应的mapper文件">3. 写Dao接口和对应的Mapper文件</span></h3><p>dao接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.dao;<br> <br><span class="hljs-keyword">import</span> com.wangpeng.pojo.Student;<br> <br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insertStudent</span><span class="hljs-params">(Student student)</span></span>;<br>    <span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">selectAllStudents</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>mapper文件</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--namespace=绑定对应的Dao/Mapper接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.wangpeng.dao.StudentDao&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--id=绑定对应的方法名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertStudent&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>        insert into student(id,name,age) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;age&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAllStudents&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>        select id,name,age from student order by id<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="4-写mybatis配置文件">4. 写mybatis配置文件</span></h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mybatis全局设置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--设置上输出日志--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!--设置别名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.wangpeng.pojo&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!--设置mapper位置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.wangpeng.dao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>只保留这三样，连接池不使用mybatis自带的，而是使用druid连接池。</p><h3><span id="5-写jdbcproperties">5. 写jdbc.properties</span></h3><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/springdb</span><br><span class="hljs-meta">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">jdbc.password</span>=<span class="hljs-string">7783772</span><br><span class="hljs-meta">jdbc.maxActive</span>=<span class="hljs-string">20</span><br></code></pre></div></td></tr></table></figure><p>这是druid官方推荐的需要配置的四个参数，把他抽离到properties文件中。</p><h3><span id="6-写spring配置文件applicationcontextxml">6. 写spring配置文件（applicationContext.xml）</span></h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!--数据库配置文件的位置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span><br> <br>    <span class="hljs-comment">&lt;!--声明数据源DataSource，作用是连接数据库--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myDataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--set注入DruidDataSource提供连接数据库信息--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span><span class="hljs-comment">&lt;!--setUrl()--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxActive&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.maxActive&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!--声明的是mybatis中提供的SqlSessionFactoryBean类，这个类内部创建SqlSessionFactory--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--set注入，把数据库连接池赋给了dataSource属性--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;myDataSource&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--mybatis主配置文件的位置</span><br><span class="hljs-comment">            configLocation属性是Resource类型的，用来读取配置文件</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis.xml&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!--创建dao对象，使用SqlSession的getMapper（StudentDao.class）</span><br><span class="hljs-comment">        MapperScannerConfigurer:在内部调用getMapper()生成每个dao接口的代理对象</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--指定SqlSessionFactory对象的id--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--指定包名，包名是dao接口所在的包名</span><br><span class="hljs-comment">            MapperScannerConfigurer会扫描这个包中的所有接口，</span><br><span class="hljs-comment">            把每个接口都执行一次getMapper()方法，得到每个接口的dao对象，</span><br><span class="hljs-comment">            创建好的dao对象放入到spring的容器中。dao对象的默认名称是借口名首字母小写。</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.wangpeng.dao&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!--声明service--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.wangpeng.service.impl.StudentServiceImpl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;studentDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;studentDao&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br> <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>重点就是 三个对象的创建：</p><ol><li>DruidDataSource，连接池对象，并且配置四个参数<ol><li>  url，数据库的url地址，<font color="red">druid不需要配置driver的原因是，它内部通过url自动选择驱动</font>。</li><li>  username，数据库用户名</li><li>  password，数据库密码</li><li>  maxActive（一般也不用）</li></ol></li><li>SqlSessionFactoryBean，我们在Mybatis中需要使用sqlSession对象，需要通过SqlSessionFactory创建。<ul><li>  这里用SqlSessionFactoryBean类来创建sqlSessionFactory的对象。</li><li>它需要2个信息<ol><li>  连接池对象，<font color="red">因为连接池对象是引用类型，所以这里使用ref进行赋值</font>。</li><li>  Mybatis的配置文件位置</li></ol></li></ul></li><li>MapperScannerConfigurer，它能够扫描到目录下所有的dao接口，并<font color="red">创建所有的Dao代理对象</font>。<ol><li>  sqlSessionFactoryBeanName，指定sqlSession的工厂类，<font color="red">因为sqlSessionFactory是String类型，所以使用value来赋值</font>。</li><li>  basePackage，扫描Dao的位置。</li></ol></li></ol><p><font color="red">studentDao这个是框架在内部创建的对象。</font></p><h3><span id="7-写service接口和对应的实现类">7. 写Service接口和对应的实现类</span></h3><p>Service接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.service;<br> <br><span class="hljs-keyword">import</span> com.wangpeng.pojo.Student;<br> <br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addStudent</span><span class="hljs-params">(Student student)</span></span>;<br>    <span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">queryStudents</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>Service实现类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.service.impl;<br> <br><span class="hljs-keyword">import</span> com.wangpeng.dao.StudentDao;<br><span class="hljs-keyword">import</span> com.wangpeng.pojo.Student;<br><span class="hljs-keyword">import</span> com.wangpeng.service.StudentService;<br> <br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">StudentService</span> </span>&#123;<br> <br>    <span class="hljs-keyword">private</span> StudentDao studentDao;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStudentDao</span><span class="hljs-params">(StudentDao studentDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.studentDao = studentDao;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addStudent</span><span class="hljs-params">(Student student)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> num = studentDao.insertStudent(student);<br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title">queryStudents</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;Student&gt; students = studentDao.selectAllStudents();<br>        <span class="hljs-keyword">return</span> students;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>给studentDao一个set方法，是为了通过xml的方式来set注入的。</p><h3><span id="8-测试功能">8. 测试功能</span></h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.dao;<br> <br><span class="hljs-keyword">import</span> com.wangpeng.pojo.Student;<br><span class="hljs-keyword">import</span> com.wangpeng.service.StudentService;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br> <br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br> <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>        String config = <span class="hljs-string">&quot;applicationContext.xml&quot;</span>;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(config);<br>        String[] names = context.getBeanDefinitionNames();<br>        <span class="hljs-keyword">for</span> (String name : names) &#123;<br>            System.out.println(<span class="hljs-string">&quot;容器中对象的名称&quot;</span>+name+<span class="hljs-string">&quot;|&quot;</span>+context.getBean(name));<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDaoInsert</span><span class="hljs-params">()</span> </span>&#123;<br>        String config = <span class="hljs-string">&quot;applicationContext.xml&quot;</span>;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(config);<br>        <span class="hljs-comment">// 获取spring容器中的dao对象</span><br>        StudentDao dao = (StudentDao) context.getBean(<span class="hljs-string">&quot;studentDao&quot;</span>);<br>        <span class="hljs-keyword">int</span> num = dao.insertStudent(<span class="hljs-keyword">new</span> Student(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;王语嫣&quot;</span>, <span class="hljs-number">16</span>));<br>        System.out.println(<span class="hljs-string">&quot;num=&quot;</span> + num);<br>    &#125;<br> <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testServiceInsert</span><span class="hljs-params">()</span> </span>&#123;<br>        String config = <span class="hljs-string">&quot;applicationContext.xml&quot;</span>;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(config);<br>        <span class="hljs-comment">// 获取spring容器中的dao对象</span><br>        StudentService service = (StudentService) context.getBean(<span class="hljs-string">&quot;studentService&quot;</span>);<br>        <span class="hljs-keyword">int</span> num = service.addStudent(<span class="hljs-keyword">new</span> Student(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;柳如是&quot;</span>, <span class="hljs-number">25</span>));<br>        <span class="hljs-comment">//spring和mybatis整合时，事务是自动提交的。</span><br>        System.out.println(<span class="hljs-string">&quot;num=&quot;</span> + num);<br>    &#125;<br> <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testServiceSelect</span><span class="hljs-params">()</span> </span>&#123;<br>        String config = <span class="hljs-string">&quot;applicationContext.xml&quot;</span>;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(config);<br>        <span class="hljs-comment">// 获取spring容器中的dao对象</span><br>        StudentService service = (StudentService) context.getBean(<span class="hljs-string">&quot;studentService&quot;</span>);<br>        List&lt;Student&gt; students = service.queryStudents();<br>        students.forEach(stu -&gt; System.out.println(stu));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2><span id="4-spring事务处理star">4、Spring事务处理:star:</span></h2><p>事务原本是数据库中的概念，在Dao 层。<font color="red">但一般情况下，需要将事务提升到业务层，即Service 层。</font>这样做是为了能够使用事务的特性来管理具体的业务。<br>在Spring 中通常可以通过以下两种方式来实现对事务的管理：<br>（1）使用Spring 的事务注解管理事务<br>（2）使用AspectJ 的AOP 配置管理事务</p><h3><span id="spring的事务管理api">Spring的事务管理API</span></h3><h4><span id="事务管理器接口和对应实现类">事务管理器接口和对应实现类</span></h4><p>事务管理器是PlatformTransactionManager 接口对象。其主要用于完成事务的提交、回<br>滚，及获取事务的状态信息。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210905183752.png" alt="image-20210905183752200"></p><p><strong>A、常用的两个实现类</strong></p><p>PlatformTransactionManager 接口有两个常用的实现类：<br>➢ <font color="red">DataSourceTransactionManager</font>：使用JDBC 或MyBatis 进行数据库操作时使用。<br>➢ <font color="red">HibernateTransactionManager</font>：使用Hibernate 进行持久化数据时使用。 \</p><p><strong>B、Spring 的回滚方式(理解)</strong></p><p>Spring 事务的默认回滚方式是：<font color="red">发生运行时异常和error 时回滚</font>，发生受查(编译)异常时提交。不过，对于受查异常，程序员也可以手工设置其回滚方式。</p><p><strong>回顾错误与异常</strong></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210905184025.png" alt="image-20210905184025372"></p><p>RuntimeException是运行时异常，如，NullPointerException、ArrayIndexOutOfBoundsExceptionIllegalArgumentException 等均属于运行时异常。这些异常由JVM 抛出，在编译时不要求必须处理（捕获或抛出）。但，只要代码编写足够仔细，程序足够健壮，运行时异常是可以避免的。</p><p>受查异常，也叫编译时异常，即在代码编写时要求必须捕获或抛出的异常，若不处理，<br>则无法通过编译。如SQLException，ClassNotFoundException，IOException 等都属于受查异常。</p><h4><span id="事务的属性或行为">事务的属性或行为</span></h4><p>事务定义接口TransactionDefinition 中定义了事务描述相关的三类常量：<font color="red">事务隔离级别、事务传播行为、事务默认超时时限，及对它们的操作</font>。</p><h5><span id="五个事务隔离级别掌握">五个事务隔离级别（掌握）</span></h5><p>这些常量均是以ISOLATION_开头。即形如ISOLATION_XXX。<br>➢ <font color="red">DEFAULT</font>：采用DB 默认的事务隔离级别。MySql 的默认为<font color="red">REPEATABLE_READ</font>； Oracle<br>默认为<font color="red">READ_COMMITTED</font>。</p><p>➢ <font color="red">READ_UNCOMMITTED</font>：读未提交。未解决任何并发问题。<br>➢ <font color="red">READ_COMMITTED</font>：读已提交。解决脏读，存在不可重复读与幻读。<br>➢ <font color="red">REPEATABLE_READ</font>：可重复读。解决脏读、不可重复读，存在幻读<br>➢ <font color="red">SERIALIZABLE</font>：串行化。不存在并发问题。</p><p>MySQL默认第三档读已提交，Oracle默认是第二档读未提交。</p><h5><span id="七个事务传播行为掌握">七个事务传播行为（掌握）</span></h5><p>事务传播行为常量都是以PROPAGATION_ 开头，形如PROPAGATION_XXX。</p><p><font color="red">PROPAGATION_REQUIRED </font><br><font color="red">PROPAGATION_REQUIRES_NEW </font><br><font color="red">PROPAGATION_SUPPORTS </font></p><p>（前三个比较重要，重点掌握）</p><p>PROPAGATION_MANDATORY<br>PROPAGATION_NESTED<br>PROPAGATION_NEVER<br>PROPAGATION_NOT_SUPPORTED</p><p>a. PROPAGATION_REQUIRED（必须）【默认】</p><p>指定的方法必须在事务内执行。<font color="red">若当前存在事务，就加入到当前事务中；若当前没有事务，则创建一个新事务</font>。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210905184726.png" alt="image-20210905184725996"></p><p>b.  PROPAGATION_SUPPORTS（支持）</p><p>指定的方法支持当前事务，但若当前没有事务，<font color="red">也可以以非事务方式执行</font>。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210905184943.png" alt="image-20210905184943353"></p><p>c. PROPAGATION_REQUIRES_NEW（要求新的）</p><p><font color="red">总是新建一个事务</font>，若当前存在事务，就将当前事务挂起，直到新事务执行完毕。</p><h3><span id="spring事务注解管理的程序例子">Spring事务注解管理的程序例子</span></h3><h4><span id="1-新建maven工程导入依赖">1. 新建maven工程，导入依赖</span></h4><p>还是spring整合mybatis的那几个依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wangpeng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ch08-spring-trans<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--单元测试--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--spring环境--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--spirng事务--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--spring jdbc--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mybatis--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--spring和mybatis集成--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--mysql--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--德鲁伊线程池--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--使得java目录下的xml也能打包进classes里--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><span class="hljs-comment">&lt;!--所在的目录--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><span class="hljs-comment">&lt;!--包括目录下的.properties,.xml文件都会扫描到--&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="2-写数据库写pojo类">2. 写数据库，写pojo类</span></h4><p>数据库2个表，销售表和商品表。</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">USE springdb;<br> <br>CREATE TABLE sales(<br>    id INT PRIMARY KEY AUTO_INCREMENT,<br>    gid INT,<br>    nums INT DEFAULT NULL<br>);<br> <br>CREATE TABLE goods(<br>    id INT PRIMARY KEY,<br>    `name` VARCHAR(20) DEFAULT NULL,<br>    amount INT DEFAULT NULL,<br>    price FLOAT DEFAULT NULL<br>);<br> <br>INSERT INTO goods(id,`name`,amount,price) VALUES<br>(1001,&#x27;笔记本&#x27;,10,5000),(1002,&#x27;手机&#x27;,20,3000);<br></code></pre></div></td></tr></table></figure><p>对应pojo</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sale</span> </span>&#123;<br>    Integer id;<br>    Integer gid;<br>    Integer nums;<br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Goods</span> </span>&#123;<br>    Integer id;<br>    String name;<br>    Integer amount;<br>    Float price;<br>    ...<br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="3-写dao和对应的mapper">3. 写Dao和对应的mapper</span></h4><p>GoodsDao</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.dao;<br> <br><span class="hljs-keyword">import</span> com.wangpeng.domain.Goods;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">GoodsDao</span> </span>&#123;<br>    <span class="hljs-comment">//更新库存，goods表示本次用户购买的商品信息</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateGoods</span><span class="hljs-params">(Goods goods)</span></span>;<br>    <span class="hljs-comment">//根据id查询商品信息</span><br>    <span class="hljs-function">Goods <span class="hljs-title">selectGoods</span><span class="hljs-params">(Integer id)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>GoodsDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--namespace=绑定对应的Dao/Mapper接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.wangpeng.dao.GoodsDao&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--更新库存--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateGoods&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;Goods&quot;</span>&gt;</span><br>        update goods set amount=amount-#&#123;amount&#125; where id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--根据id查询商品--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectGoods&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Goods&quot;</span>&gt;</span><br>        select id,name,amount,price from goods where id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>SaleDao</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.dao;<br> <br><span class="hljs-keyword">import</span> com.wangpeng.domain.Sale;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SaleDao</span> </span>&#123;<br>    <span class="hljs-comment">//增加销售记录</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insertSale</span><span class="hljs-params">(Sale sale)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>SaleDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--namespace=绑定对应的Dao/Mapper接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.wangpeng.dao.SaleDao&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--增加销售记录--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertSale&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.wangpeng.domain.Sale&quot;</span>&gt;</span><br>        insert into sale(gid,nums) values(#&#123;gid&#125;,#&#123;nums&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="4-写一个异常类">4. 写一个异常类</span></h4><p>com.wangpeng.exception.NotEnoughException，继承与运行时异常，实现前2个构造方法。</p><p>商品数量不足的异常（库存数量&lt;销售数量，则抛出该异常）</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.exception;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NotEnoughException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RuntimeException</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NotEnoughException</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NotEnoughException</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(message);<br>    &#125;<br>&#125;<br> <br></code></pre></div></td></tr></table></figure><h4><span id="5-写service类关键">5. 写Service类（关键）</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.service.impl;<br> <br><span class="hljs-keyword">import</span> com.wangpeng.dao.GoodsDao;<br><span class="hljs-keyword">import</span> com.wangpeng.dao.SaleDao;<br><span class="hljs-keyword">import</span> com.wangpeng.domain.Goods;<br><span class="hljs-keyword">import</span> com.wangpeng.domain.Sale;<br><span class="hljs-keyword">import</span> com.wangpeng.exception.NotEnoughException;<br><span class="hljs-keyword">import</span> com.wangpeng.service.BuyGoodsService;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BuyGoodsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BuyGoodsService</span> </span>&#123;<br> <br>    <span class="hljs-keyword">private</span> SaleDao saleDao;<br>    <span class="hljs-keyword">private</span> GoodsDao goodsDao;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSaleDao</span><span class="hljs-params">(SaleDao saleDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.saleDao = saleDao;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setGoodsDao</span><span class="hljs-params">(GoodsDao goodsDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.goodsDao = goodsDao;<br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buy</span><span class="hljs-params">(Integer goodsId, Integer nums)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;=====buy方法的开始=====&quot;</span>);<br>        <span class="hljs-comment">//记录销售信息，向sale表添加记录</span><br>        Sale sale = <span class="hljs-keyword">new</span> Sale();<br>        sale.setGid(goodsId);<br>        sale.setNums(nums);<br>        saleDao.insertSale(sale);    <span class="hljs-comment">//添加销售记录</span><br>        <span class="hljs-comment">//更新库存</span><br>        Goods goods = goodsDao.selectGoods(goodsId);<br>        <span class="hljs-keyword">if</span>(goods == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">//商品不存在</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException(<span class="hljs-string">&quot;编号是&quot;</span>+goodsId+<span class="hljs-string">&quot;的商品不存在&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(goods.getAmount() &lt; nums) &#123;<br>            <span class="hljs-comment">//商品库存不足</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NotEnoughException(<span class="hljs-string">&quot;编号是&quot;</span>+goodsId+<span class="hljs-string">&quot;的商品库存不足&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//修改库存</span><br>        Goods buyGoods = <span class="hljs-keyword">new</span> Goods();<br>        buyGoods.setId(goodsId);<br>        buyGoods.setAmount(nums);<br>        goodsDao.updateGoods(buyGoods);<br>        System.out.println(<span class="hljs-string">&quot;=====buy方法的结束=====&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>dao的set方法是为了xml创建service对象时方便set注入。</p><p>buy方法，先获取销售信息，并且<font color="red">添加销售记录</font>，如果出现异常，则跳出，库存没改变，这样有了销售记录，却没有库存影响，<font color="red">出现了不一致性</font>。</p><p>需要通过事务来保证一致性。</p><h4><span id="6-测试代码">6. 测试代码</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng;<br> <br><span class="hljs-keyword">import</span> com.wangpeng.service.BuyGoodsService;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br> <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>        String config = <span class="hljs-string">&quot;applicationContext.xml&quot;</span>;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(config);<br>        <span class="hljs-comment">//从容器获取service</span><br>        BuyGoodsService service = (BuyGoodsService) context.getBean(<span class="hljs-string">&quot;studentService&quot;</span>);<br>        <span class="hljs-comment">//调用方法</span><br>        service.buy(<span class="hljs-number">1002</span>,<span class="hljs-number">200</span>);<br>    &#125;<br>&#125;<br> <br></code></pre></div></td></tr></table></figure><p>很明显，会出现问题。</p><h4><span id="7-写spring事务管理的配置文件重要">7. 写spring事务管理的配置文件（重要）</span></h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--使用spring的事务处理--&gt;</span><br><span class="hljs-comment">&lt;!--使用事务管理器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--连接的数据库，指定数据源--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;myDataSource&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--开启事务注解驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><p>主要是创建DataSourceTransactionManager对象，注入数据源（连接池）的属性。</p><p>然后开启事务注解驱动，这样就能使用@Transactional注解。</p><h4><span id="8-添加注解">8. 添加注解</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.service.impl;<br> <br><span class="hljs-keyword">import</span> com.wangpeng.dao.GoodsDao;<br><span class="hljs-keyword">import</span> com.wangpeng.dao.SaleDao;<br><span class="hljs-keyword">import</span> com.wangpeng.domain.Goods;<br><span class="hljs-keyword">import</span> com.wangpeng.domain.Sale;<br><span class="hljs-keyword">import</span> com.wangpeng.exception.NotEnoughException;<br><span class="hljs-keyword">import</span> com.wangpeng.service.BuyGoodsService;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Isolation;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Propagation;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BuyGoodsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BuyGoodsService</span> </span>&#123;<br> <br>    <span class="hljs-keyword">private</span> SaleDao saleDao;<br>    <span class="hljs-keyword">private</span> GoodsDao goodsDao;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSaleDao</span><span class="hljs-params">(SaleDao saleDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.saleDao = saleDao;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setGoodsDao</span><span class="hljs-params">(GoodsDao goodsDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.goodsDao = goodsDao;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * rollbackFor：发生指定的异常一定回滚</span><br><span class="hljs-comment">     */</span><br><span class="hljs-comment">/*    @Transactional(</span><br><span class="hljs-comment">            propagation = Propagation.REQUIRED,</span><br><span class="hljs-comment">            isolation = Isolation.DEFAULT,</span><br><span class="hljs-comment">            readOnly = false,</span><br><span class="hljs-comment">            rollbackFor = &#123;</span><br><span class="hljs-comment">                    NullPointerException.class,NotEnoughException.class</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">    )*/</span><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buy</span><span class="hljs-params">(Integer goodsId, Integer nums)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;=====buy方法的开始=====&quot;</span>);<br>        <span class="hljs-comment">//记录销售信息，向sale表添加记录</span><br>        Sale sale = <span class="hljs-keyword">new</span> Sale();<br>        sale.setGid(goodsId);<br>        sale.setNums(nums);<br>        saleDao.insertSale(sale);<br>        <span class="hljs-comment">//更新库存</span><br>        Goods goods = goodsDao.selectGoods(goodsId);<br>        <span class="hljs-keyword">if</span>(goods == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">//商品不存在</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException(<span class="hljs-string">&quot;编号是&quot;</span>+goodsId+<span class="hljs-string">&quot;的商品不存在&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(goods.getAmount() &lt; nums) &#123;<br>            <span class="hljs-comment">//商品库存不足</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NotEnoughException(<span class="hljs-string">&quot;编号是&quot;</span>+goodsId+<span class="hljs-string">&quot;的商品库存不足&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//修改库存</span><br>        Goods buyGoods = <span class="hljs-keyword">new</span> Goods();<br>        buyGoods.setId(goodsId);<br>        buyGoods.setAmount(nums);<br>        goodsDao.updateGoods(buyGoods);<br>        System.out.println(<span class="hljs-string">&quot;=====buy方法的结束=====&quot;</span>);<br>    &#125;<br>&#125;<br> <br></code></pre></div></td></tr></table></figure><p>就实现了事务管理，如果在该方法中出现运行时异常，则回滚事件，否则提交事件。</p><p>如果rollbackFor指定了要回滚的异常，则发生指定的异常时，回滚，否则判断是否是运行时异常，运行时异常回滚。</p><h4><span id="9-测试">9. 测试</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng;<br> <br><span class="hljs-keyword">import</span> com.wangpeng.service.BuyGoodsService;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br> <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>        String config = <span class="hljs-string">&quot;applicationContext.xml&quot;</span>;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(config);<br>        <span class="hljs-comment">//从容器获取service</span><br>        BuyGoodsService service = (BuyGoodsService) context.getBean(<span class="hljs-string">&quot;studentService&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;service是代理：&quot;</span>+service.getClass().getName());<br>        <span class="hljs-comment">//调用方法</span><br>        service.buy(<span class="hljs-number">1002</span>,<span class="hljs-number">200</span>);<br>    &#125;<br> <br>&#125;<br></code></pre></div></td></tr></table></figure><p>把service输出一下，可以很明显地看到service是一个代理类对象。</p><p>所以，基本原理是，spring使用aop给添加了@Transactional的方法增强了事务功能，然后创建了代理类对象，给我们用户来使用。</p><h3><span id="spring的事务管理解析">SPring的事务管理解析</span></h3><p>@Transactional 的所有可选属性如下所示：<br>➢ <font color="red">propagation</font>：用于设置事务传播属性。该属性类型为 Propagation 枚举，默认值为Propagation.REQUIRED。</p><p>➢ <font color="red">isolation </font>：用于设置事务的隔离级别。该属性类型为 Isolation 枚举，默认值为Isolation.DEFAULT。<br>➢ <font color="red">readOnly</font>：用于设置该方法对数据库的操作是否是只读的。该属性为 boolean，默认值为false。<br>➢ <font color="red">timeout</font>：用于设置本操作与数据库连接的超时时限。单位为秒，类型为int，默认值为-1，即没有时限。<br>➢ <font color="red">rollbackFor</font>：指定需要回滚的异常类。类型为Class[]，默认值为空数组。当然，若只有一个异常类时，可以不使用数组。<br>➢ <font color="red">rollbackForClassName</font>：指定需要回滚的异常类类名。类型为String[]，默认值为空数组。当然，若只有一个异常类时，可以不使用数组。<br>➢ <font color="red">noRollbackFor</font>：指定不需要回滚的异常类。类型为Class[]，默认值为空数组。当然，若只有一个异常类时，可以不使用数组。<br>➢ <font color="red">noRollbackForClassName</font>：指定不需要回滚的异常类类名。类型为String[]，默认值为空数组。当然，若只有一个异常类时，可以不使用数组。<br>需要注意的是，@Transactional 若用在方法上，只能用于public 方法上。对于其他非public方法，如果加上了注解@Transactional，虽然Spring 不会报错，但不会将指定事务织入到该方法中。因为Spring 会忽略掉所有非public 方法上的@Transaction 注解。<br>若@Transaction 注解在类上，则表示该类上所有的方法均将在执行时织入事务。</p><p>  使用@Transactional的步骤：<br>  1.需要声明事务管理器对象</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;xx&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;DataSourceTransactionManager&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>  2.开启事务注解驱动， 告诉spring框架，我要使用注解的方式管理事务。<br><font color="red">spring使用aop机制，创建@Transactional所在的类代理对象，给方法加入事务的功能</font>。<br>spring给业务方法加入事务<br>在你的业务方法执行之前，先开启事务，在业务方法之后提交或回滚事务，使用aop的环绕通知</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Around(&quot;你要增加的事务功能的业务方法名称&quot;)</span><br><span class="hljs-function">Object <span class="hljs-title">myAround</span><span class="hljs-params">()</span></span>&#123;<br>    开启事务，spring给你开启<br>        <span class="hljs-keyword">try</span>&#123;<br>            buy(<span class="hljs-number">1001</span>,<span class="hljs-number">10</span>);<br>            spring的事务管理器.commit();<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            spring的事务管理器.rollback();<br>        &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>  3.在你的方法的上面加入@Trancational</p><h3><span id="aspectj的aop-配置管理事务">AspectJ的AOP 配置管理事务</span></h3><h4><span id="1-加入aspectj依赖">1. 加入aspectj依赖</span></h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="2-在容器中添加事务管理器">2. 在容器中添加事务管理器</span></h4><p>applicationContext.xml（spring配置文件，需要spring创建并交给容器的对象）</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--1. 声明事务管理器对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;myDataSource&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="3-配置事务通知">3. 配置事务通知</span></h4><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--2. 声明业务方法它的事务属性（隔离级别，传播行为，超时时间）</span><br><span class="hljs-comment">            id:自定义名称</span><br><span class="hljs-comment">            transaction-manager:事务管理器对象的id</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置事务属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--tx:method：给具体的方法配置事务属性，method可以有多个，分别给不同的方法设置事务属性</span><br><span class="hljs-comment">                name:方法名称，  1）完整的方法名称，不带有包和类。</span><br><span class="hljs-comment">                                2）方法可以使用通配符，*表示任意字符</span><br><span class="hljs-comment">                propagation：传播行为，枚举值</span><br><span class="hljs-comment">                isolation：隔离级别</span><br><span class="hljs-comment">                rollback：指定异常类名，全限定类名，发生异常一定回滚。</span><br><span class="hljs-comment">            --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;buy&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span> <span class="hljs-attr">isolation</span>=<span class="hljs-string">&quot;DEFAULT&quot;</span></span><br><span class="hljs-tag">                   <span class="hljs-attr">rollback-for</span>=<span class="hljs-string">&quot;java.lang.NullPointerException,</span></span><br><span class="hljs-string"><span class="hljs-tag">                                 com.wangpeng.exception.NotEnoughException&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--使用通配符，来指定很多的方法，比如说以某某开头--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;add*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRES_NEW&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--指定修改方法--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;modify*&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--删除方法--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remove*&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--查询方法，query，search，find，上面这些方法以外的用这个--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;SUPPORTS&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>该部分就是把@Transactional注解用xml的方式配置出来。</p><p>要学会 * 号通配符的使用，它表示任意字符（不限数量）。</p><p>spring框架在事务的匹配过程中，是有优先级的。</p><ol><li>  先找完全匹配的，比如说上面的buy</li><li>  再找使用通配符匹配的</li><li>  最后找 * ，都能匹配的。</li></ol><p><font color="red">注意，这里只说明了方法，但是方法在哪个类中spring并不知道</font>。所以还需要如下配置。</p><h4><span id="4-配置切入点-关联通知与切入点">4. 配置切入点、关联通知与切入点</span></h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置aop：通知应用的切入点--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置切入点表达式，指定那些包中类，要使用事务</span><br><span class="hljs-comment">            id:切入点表达式的名称，唯一值</span><br><span class="hljs-comment">            expression:切入点表达式，指定那些类要使用事务，aspectj会创建代理对象。、</span><br><span class="hljs-comment">            com.wangpeng.service</span><br><span class="hljs-comment">            com.crm.service</span><br><span class="hljs-comment">            com.service</span><br><span class="hljs-comment">            权限修饰符：可以省略，</span><br><span class="hljs-comment">            第一个*：是返回值</span><br><span class="hljs-comment">            *..service：任意包下的service包</span><br><span class="hljs-comment">            ..*：包及其子包下的所有类</span><br><span class="hljs-comment">            .*：任意方法</span><br><span class="hljs-comment">            (..)：任意参数的方法</span><br><span class="hljs-comment">        --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;servicePt&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* *..service..*.*(..))&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--配置增强器：关联advice和pointcut</span><br><span class="hljs-comment">            advice-ref：通知，上面tx：advice那里的配置</span><br><span class="hljs-comment">        --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;myAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;servicePt&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="5-测试">5. 测试</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    String config = <span class="hljs-string">&quot;applicationContext.xml&quot;</span>;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(config);<br>    <span class="hljs-comment">//从容器获取service</span><br>    BuyGoodsService service = (BuyGoodsService) context.getBean(<span class="hljs-string">&quot;buyService&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;service是代理：&quot;</span>+service.getClass().getName());<br>    <span class="hljs-comment">//调用方法</span><br>    service.buy(<span class="hljs-number">1006</span>,<span class="hljs-number">2</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>同样也可以看到，service变成了代理对象，显然通知切入成功了，实现了事务管理。</p><h2><span id="5-spring和web">5、Spring和Web</span></h2><h3><span id="1-使用步骤">1. 使用步骤</span></h3><h4><span id="1-新建web的maven工程导入依赖">1. 新建web的maven工程，导入依赖</span></h4><ol><li>  单元测试，junit</li><li>  spring核心ioc，spring-context</li><li>  spring事务，spring-tx，spring-jdbc</li><li>  mybatis依赖，mybatis</li><li>  mybatis和spring集成，mybatis-spring</li><li>  mysql驱动，mysql-connector-java</li><li>  druid连接池，druid</li><li>  <font color="red">servlet依赖，javax.servlet-api</font></li><li>  <font color="red">jsp依赖，jsp-api</font></li><li>  <font color="orange">spring web的依赖，为了使用监听器，spring-web</font></li></ol><p>先在1-7的基础上加上8和9</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- servlet依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br> <br><span class="hljs-comment">&lt;!-- jsp依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.1-b03<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>注意把web.xml换成4.0的版本</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="2-写注册页面的jsp">2. 写注册页面的jsp</span></h4><p>index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;p&gt;注册学生&lt;/p&gt;<br>    &lt;form action=<span class="hljs-string">&quot;registerServlet&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>        &lt;table&gt;<br>            &lt;tr&gt;<br>                &lt;td&gt;id：&lt;/td&gt;<br>                &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;id&quot;</span>&gt;&lt;/td&gt;<br>            &lt;/tr&gt;<br>            &lt;tr&gt;<br>                &lt;td&gt;姓名：&lt;/td&gt;<br>                &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;name&quot;</span>&gt;&lt;/td&gt;<br>            &lt;/tr&gt;<br>            &lt;tr&gt;<br>                &lt;td&gt;email：&lt;/td&gt;<br>                &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;email&quot;</span>&gt;&lt;/td&gt;<br>            &lt;/tr&gt;<br>            &lt;tr&gt;<br>                &lt;td&gt;年龄：&lt;/td&gt;<br>                &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;age&quot;</span>&gt;&lt;/td&gt;<br>            &lt;/tr&gt;<br>            &lt;tr&gt;<br>                &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;注册学生&quot;</span>&gt;&lt;/td&gt;<br>            &lt;/tr&gt;<br>        &lt;/table&gt;<br>    &lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h4><span id="3-写servlet">3. 写servlet</span></h4><p>com.wangpeng.controller.RegiserServlet</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.controller;<br> <br><span class="hljs-keyword">import</span> com.wangpeng.domain.Student;<br><span class="hljs-keyword">import</span> com.wangpeng.service.StudentService;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.support.WebApplicationContextUtils;<br> <br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegisterServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br> <br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        String id = request.getParameter(<span class="hljs-string">&quot;id&quot;</span>);<br>        String name = request.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br>        String email = request.getParameter(<span class="hljs-string">&quot;email&quot;</span>);<br>        String age = request.getParameter(<span class="hljs-string">&quot;age&quot;</span>);<br> <br>        <span class="hljs-comment">//创建spring的容器对象</span><br>        String config = <span class="hljs-string">&quot;spring.xml&quot;</span>;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(config);<br> <br>        System.out.println(<span class="hljs-string">&quot;容器对象的信息========&quot;</span> + context);<br>        <span class="hljs-comment">//获取service</span><br>        StudentService service = (StudentService) context.getBean(<span class="hljs-string">&quot;studentService&quot;</span>);<br>        Student student = <span class="hljs-keyword">new</span> Student();<br>        student.setId(Integer.parseInt(id));<br>        student.setName(name);<br>        student.setEmail(email);<br>        student.setAge(Integer.parseInt(age));<br>        service.addStudent(student);<br> <br>        <span class="hljs-comment">//给一个页面</span><br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/result.jsp&quot;</span>).forward(request,response);<br>    &#125;<br>&#125;<br> <br></code></pre></div></td></tr></table></figure><h4><span id="4-注册成功页面">4. 注册成功页面</span></h4><p>result.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: wangpeng<br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">9</span>/<span class="hljs-number">6</span><br>  Time: <span class="hljs-number">18</span>:<span class="hljs-number">13</span><br>  To change <span class="hljs-keyword">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;注册成功页面&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    result.jsp 注册成功<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h4><span id="5-webxml-注册servlet">5. web.xml 注册Servlet</span></h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>RegisterServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.wangpeng.controller.RegisterServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>RegisterServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/registerServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="6-运行结果分析">6. 运行结果分析</span></h4><p>测试成功之后，分析一下。</p><p>当表单提交，跳转到success.jsp 后，多刷新几次页面，查看后台输出，发现每刷新一次页面，就new 出一个新的Spring 容器。即，每提交一次请求，就会创建一个新的Spring 容器。对于一个应用来说，只需要一个Spring 容器即可。所以，将Spring 容器的创建语句放在Servlet 的doGet()或doPost()方法中是有问题的。</p><p>此时，可以考虑，将Spring 容器的创建放在Servlet 进行初始化时进行，即执行init()方法时执行。并且，Servlet 还是单例多线程的，即一个业务只有一个Servlet 实例，所有执行该业务的用户执行的都是这一个Servlet 实例。这样，Spring 容器就具有了唯一性了。<br>但是，Servlet 是一个业务一个 Servlet 实例，即 LoginServlet 只有一个，但还会有StudentServlet、TeacherServlet 等。每个业务都会有一个Servlet，都会执行自己的init()方法，也就都会创建一个Spring 容器了。这样一来，Spring 容器就又不唯一了。</p><p>所以需要使用Spring 的监听器ContextLoaderListener(掌握)</p><h3><span id="2-使用spring-的监听器contextloaderlistener掌握">2. 使用Spring 的监听器ContextLoaderListener(掌握)</span></h3><h4><span id="1-添加上8的依赖">1. 添加上8的依赖</span></h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="2-注册监听器contextloaderlistener">2. 注册监听器ContextLoaderListener</span></h4><p><strong>web.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注册监听器ContextLoaderListener</span><br><span class="hljs-comment">        监听器被创建对象后，会读取/WEB-INF/spring.xml</span><br><span class="hljs-comment">        为什么要读取文件：因为在监听器中要创建ApplicationContext对象，需要加载配置文件。</span><br><span class="hljs-comment">        /WEB-INF/applicationContext.xml就是监听器默认读取的spring配置文件路径</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">        可以修改默认的文件位置，使用context-param重新指定文件的位置</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">        配置监听器：目的是创建容器对象，创建了容器对象， 就能把spring.xml配置文件中的所有对象都创建好。</span><br><span class="hljs-comment">        用户发起请求就可以直接使用对象了。</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">        配置监听器：目的是创建容器对象，创建了容器对象，就能把spring.xml配置文件中的所有对象都创建好。</span><br><span class="hljs-comment">        用户发起请求就可以直接使用对象了。</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--表示配置文件的路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="方法一从servletcontext-中获取spring容器对象">方法一：从ServletContext 中获取spring容器对象</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.controller;<br> <br><span class="hljs-keyword">import</span> com.wangpeng.domain.Student;<br><span class="hljs-keyword">import</span> com.wangpeng.service.StudentService;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.support.WebApplicationContextUtils;<br> <br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegisterServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br> <br>    &#125;<br> <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        String id = request.getParameter(<span class="hljs-string">&quot;id&quot;</span>);<br>        String name = request.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br>        String email = request.getParameter(<span class="hljs-string">&quot;email&quot;</span>);<br>        String age = request.getParameter(<span class="hljs-string">&quot;age&quot;</span>);<br> <br>        <span class="hljs-comment">//创建spring的容器对象</span><br>        WebApplicationContext context = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">//获取ServletContext中的容器对象，创建好的容器对象，拿来就用。</span><br>        String key = WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;<br>        Object attr = getServletContext().getAttribute(key);<br>        <span class="hljs-keyword">if</span>(attr != <span class="hljs-keyword">null</span>) &#123;<br>            context = (WebApplicationContext)attr;<br>        &#125;<br> <br>        ServletContext sc = getServletContext();<br>        context = WebApplicationContextUtils.getRequiredWebApplicationContext(sc);<br>        System.out.println(<span class="hljs-string">&quot;容器对象的信息&quot;</span> + context);<br> <br>        System.out.println(<span class="hljs-string">&quot;容器对象的信息========&quot;</span> + context);<br>        <span class="hljs-comment">//获取service</span><br>        StudentService service = (StudentService) context.getBean(<span class="hljs-string">&quot;studentService&quot;</span>);<br>        Student student = <span class="hljs-keyword">new</span> Student();<br>        student.setId(Integer.parseInt(id));<br>        student.setName(name);<br>        student.setEmail(email);<br>        student.setAge(Integer.parseInt(age));<br>        service.addStudent(student);<br> <br>        <span class="hljs-comment">//给一个页面</span><br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/result.jsp&quot;</span>).forward(request,response);<br>    &#125;<br>&#125;<br> <br></code></pre></div></td></tr></table></figure><h4><span id="方法二通过webapplicationcontextutils-获取spring容器对象">方法二：通过WebApplicationContextUtils 获取spring容器对象</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//创建spring的容器对象</span><br>WebApplicationContext context = <span class="hljs-keyword">null</span>;<br>ServletContext sc = getServletContext();<br>context = WebApplicationContextUtils.getRequiredWebApplicationContext(sc);<br>System.out.println(<span class="hljs-string">&quot;容器对象的信息========&quot;</span> + context);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>SSM框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaWeb</tag>
      
      <tag>SSM</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM框架-03-Mybatis</title>
    <link href="/2021/08/01/SSM%E6%A1%86%E6%9E%B6-03-Mybatis/"/>
    <url>/2021/08/01/SSM%E6%A1%86%E6%9E%B6-03-Mybatis/</url>
    
    <content type="html"><![CDATA[<h1><span id="mybatis">MyBatis</span></h1><!-- toc --><ul><li><a href="#1-mybatis%E6%A6%82%E8%BF%B0">1、MyBatis概述</a><ul><li><a href="#11-%E4%BB%80%E4%B9%88%E6%98%AFmybatis">1.1 什么是MyBatis</a></li><li><a href="#12-mybatis%E7%9A%84%E4%BD%9C%E7%94%A8">1.2 MyBatis的作用</a></li></ul></li><li><a href="#2-mybatis-%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8">2、MyBatis 使用入门</a><ul><li><a href="#21-%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93">2.1 创建数据库</a></li><li><a href="#22-%E6%96%B0%E5%BB%BAmaven%E5%B7%A5%E7%A8%8B%E5%AF%BC%E5%85%A5%E7%9B%B8%E5%85%B3%E4%BE%9D%E8%B5%96">2.2 新建Maven工程，导入相关依赖</a></li><li><a href="#23-%E5%88%9B%E5%BB%BApojo%E7%B1%BB">2.3 创建pojo类</a></li><li><a href="#24-%E5%88%9B%E5%BB%BAdao%E6%8E%A5%E5%8F%A3">2.4 创建Dao接口</a></li><li><a href="#25-%E5%88%9B%E5%BB%BA%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6xml">2.5 创建接口的映射文件xml</a></li><li><a href="#26-%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E6%96%87%E4%BB%B6">2.6 创建数据库配置参数文件</a></li><li><a href="#27-%E5%88%9B%E5%BB%BA%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6star">2.7 创建核心配置文件:star:</a></li><li><a href="#28-mybatis%E5%B7%A5%E5%85%B7%E7%B1%BB">2.8 Mybatis工具类</a></li><li><a href="#29-%E6%B5%8B%E8%AF%95%E7%B1%BB">2.9 测试类</a></li></ul></li><li><a href="#3-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">3、配置文件</a><ul><li><a href="#31-%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">3.1 核心配置文件</a></li><li><a href="#32-%E7%8E%AF%E5%A2%83environments">3.2 环境（environments）</a><ul><li><a href="#datasource-%E6%A0%87%E7%AD%BE">dataSource 标签</a></li><li><a href="#%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8">事务管理器</a></li></ul></li><li><a href="#33-%E6%98%A0%E5%B0%84%E5%99%A8mappers">3.3 映射器（mappers）</a></li><li><a href="#34-%E5%B1%9E%E6%80%A7properties">3.4 属性（properties）</a></li><li><a href="#35-%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8Dtypealiases">3.5 类型别名（typeAliases）</a></li><li><a href="#36-%E8%AE%BE%E7%BD%AEsettings">3.6 设置（settings）</a></li><li><a href="#37-%E5%85%B6%E4%BB%96%E9%85%8D%E7%BD%AE">3.7 其他配置</a></li></ul></li><li><a href="#4-mybatis-%E5%AF%B9%E8%B1%A1%E5%88%86%E6%9E%90">4、MyBatis 对象分析</a><ul><li><a href="#41-resources-%E7%B1%BB">4.1 Resources 类</a></li><li><a href="#42-sqlsessionfactorybuilder-%E7%B1%BB">4.2 SqlSessionFactoryBuilder 类</a></li><li><a href="#43-sqlsessionfactory-%E6%8E%A5%E5%8F%A3">4.3 SqlSessionFactory 接口</a></li><li><a href="#44-sqlsession-%E6%8E%A5%E5%8F%A3">4.4 SqlSession 接口</a></li></ul></li><li><a href="#5-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86">5、动态代理</a><ul><li><a href="#51-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%88%86%E6%9E%90">5.1 动态代理分析</a></li></ul></li><li><a href="#6-mybatis%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0">6、Mybatis传递参数</a><ul><li><a href="#61-parametertype">6.1 parameterType</a></li><li><a href="#62-%E5%8F%82%E6%95%B0%E5%88%86%E7%B1%BB">6.2 参数分类</a></li></ul></li><li><a href="#7-mybatis-%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C">7、MyBatis 返回结果</a><ul><li><a href="#71-mybatis%E5%B0%81%E8%A3%85sql%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C">7.1 mybatis封装sql语句的执行结果</a></li><li><a href="#72-%E8%A1%A8%E7%9A%84%E5%88%97%E5%90%8D%E5%92%8Cjava%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%90%8D%E7%A7%B0%E4%B8%8D%E4%B8%80%E6%A0%B7">7.2 表的列名和java对象的属性名称不一样</a></li><li><a href="#73-%E6%9F%A5%E8%AF%A2%E8%BF%94%E5%9B%9Emap">7.3 查询返回map</a></li><li><a href="#74-%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2like%E4%BD%BF%E7%94%A8">7.4 模糊查询Like使用</a></li></ul></li><li><a href="#8-%E5%8A%A8%E6%80%81sql">8、动态SQL</a><ul><li><a href="#1-%E6%B3%A8%E6%84%8F">1、注意</a></li><li><a href="#if%E6%A0%87%E7%AD%BE"><code>&lt;if&gt;</code>标签</a></li><li><a href="#where%E6%A0%87%E7%AD%BE"><code>&lt;where&gt;</code>标签</a></li><li><a href="#foreach%E6%A0%87%E7%AD%BE"><code>&lt;foreach&gt;</code>标签</a><ul><li><a href="#1%E9%81%8D%E5%8E%86-list%E7%AE%80%E5%8D%95%E7%B1%BB%E5%9E%8B">（1）遍历 List&lt;简单类型&gt;</a></li><li><a href="#2%E9%81%8D%E5%8E%86-list%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B">（2）遍历 List&lt;对象类型&gt;</a></li></ul></li><li><a href="#%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5">代码片段</a></li></ul></li><li><a href="#9-%E6%89%A9%E5%B1%95">9、扩展</a><ul><li><a href="#pagehelper">PageHelper</a><ul><li><a href="#1-maven-%E5%9D%90%E6%A0%87">（1） maven 坐标</a></li><li><a href="#2-%E5%8A%A0%E5%85%A5plugin-%E9%85%8D%E7%BD%AE">（2） 加入plugin 配置</a></li><li><a href="#3-pagehelper-%E5%AF%B9%E8%B1%A1">（3） PageHelper 对象</a></li></ul></li></ul></li></ul><!-- tocstop --><h2><span id="1-mybatis概述">1、MyBatis概述</span></h2><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210823224000.png" alt="image-20210823224000912"></p><p>官方文档网址：<a href="https://mybatis.org/mybatis-3/index.html">mybatis – MyBatis 3 | Introduction</a></p><p>GitHub地址：<a href="https://github.com/mybatis/mybatis-3">mybatis/mybatis-3: MyBatis SQL mapper framework for Java (github.com)</a></p><h3><span id="11-什么是mybatis">1.1 什么是MyBatis</span></h3><p>MyBatis 是一款优秀的<font color="red">持久层框架</font>，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><p>mybatis是 MyBatis SQL Mapper Framework for Java （sql映射框架）</p><h3><span id="12-mybatis的作用">1.2 MyBatis的作用</span></h3><p>我们之前使用JDBC，有以下的缺陷</p><ol><li><p>代码比较多，开发效率低 </p></li><li><p>需要关注Connection ,Statement, ResultSet 对象创建和销毁 </p></li><li><p>对ResultSet 查询的结果，需要自己封装为 List </p></li><li><p>重复的代码比较多些 </p></li><li><p>业务代码和数据库的操作混在一起 </p></li></ol><p>于是我们就可以使用Mybatis来减轻JDBC的复杂性，简化代码、提升开发效率。</p><p>MyBatis 可以完成： </p><ol><li>注册数据库的驱动，例如 Class.forName(“com.mysql.jdbc.Driver”)) </li><li>创建JDBC 中必须使用的 Connection ， Statement， ResultSet 对象 </li><li>从xml 中获取sql，并执行 sql 语句，把ResultSet 结果转换 java 对象 </li><li>关闭资源 ResultSet.close() , Statement.close() , Conenection.close() </li></ol><h2><span id="2-mybatis-使用入门">2、MyBatis 使用入门</span></h2><h3><span id="21-创建数据库">2.1 创建数据库</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE DATABASE `mybatis`;<br>USE `mybatis`;<br><br>CREATE TABLE `user`(<br>    `id` INT(20) PRIMARY KEY,<br>    `name` VARCHAR(30) DEFAULT NULL,<br>    `pswd` VARCHAR(30) DEFAULT NULL<br>)ENGINE=INNODB DEFAULT CHARSET=utf8;<br><br>INSERT INTO `user`(`id`,`name`,`pswd`) VALUES<br>(1,&#x27;张三&#x27;,&#x27;123456&#x27;),<br>(2,&#x27;李四&#x27;,&#x27;234567&#x27;),<br>(3,&#x27;王五&#x27;,&#x27;345678&#x27;);<br><br>SELECT * FROM `user`;<br></code></pre></div></td></tr></table></figure><h3><span id="22-新建maven工程导入相关依赖">2.2 新建Maven工程，导入相关依赖</span></h3><p>新建普通Maven工程即可</p><p>我们导入3个依赖，分别是junit、mysql、mybatis</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--导入junit--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--导入mysql--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--导入mybatis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><font color="red">特别注意，需要将java文件夹下的xml也加入打包。</font></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><span class="hljs-comment">&lt;!--所在的目录--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><span class="hljs-comment">&lt;!--包括目录下的.properties,.xml 文件都会扫描到--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- filtering 选项 false 不启用过滤器， *.property 已经起到过滤的作用了 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="23-创建pojo类">2.3 创建pojo类</span></h3><p>com/wangpeng/pojo/User.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String pswd;<br>    <span class="hljs-comment">//省略构造方法、get/set方法、toString方法</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3><span id="24-创建dao接口">2.4 创建Dao接口</span></h3><p>com/wangpeng/dao/UserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.dao;<br><br><span class="hljs-keyword">import</span> com.wangpeng.pojo.User;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br>    <span class="hljs-comment">// 获取所有的用户</span><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">// 根据id获取用户</span><br>    <span class="hljs-function">User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br>    <span class="hljs-comment">// 增加一个用户</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;<br>    <span class="hljs-comment">// 修改一个用户</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<br>    <span class="hljs-comment">// 删除一个用户</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3><span id="25-创建接口的映射文件xml">2.5 创建接口的映射文件xml</span></h3><p>com/wangpeng/dao/UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--namespace=绑定一个对应的Dao/Mapper接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.wangpeng.dao.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--获取所有用户--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        select * from user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--根据id获取用户--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        select * from user where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--增加一个User--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        insert into user(id,name,pswd) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;pswd&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--修改一个用户--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        update user set name=#&#123;name&#125;,pswd=#&#123;pswd&#125; where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--删除一个用户--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>        delete from user where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>CRUD标签中：对应一个接口中的方法</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript"><span class="hljs-built_in">id</span>：对应的方法名<br>parameterType：参数的类型<br>resultType：返回结果的类型<br></code></pre></div></td></tr></table></figure><p><font color="red">注意：自定义类型需要写全类名，除非在核心配置文件中设置了《类型别名》标签。</font></p><p>#{id}中需要与pojo对象中的属性名一致，很明显，它的底层使用了反射机制。</p><p>注意：namespace和id属性并不一定是要用接口的全类名和对应方法名，也可以是自己自定义的a和b。只要在主类调用的时候，在参数中与之对应即可。</p><p>但是，按照规范或者说约定，namespace就填接口的全类名，id就填对应的方法名。</p><h3><span id="26-创建数据库配置参数文件">2.6 创建数据库配置参数文件</span></h3><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">7783772</span><br></code></pre></div></td></tr></table></figure><h3><span id="27-创建核心配置文件star">2.7 创建核心配置文件:star:</span></h3><p>在resources里创建mybatis-config.xml，该文件名也是任意的，只是后面使用时候需要一致。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-comment">&lt;!--定义了该文件的约束规则（.dtd）--&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--核心配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置参数文件，这样下面就可以使用$&#123;&#125;获得参数--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>/&gt;</span><br>    <br><span class="hljs-comment">&lt;!--    &lt;settings&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;!--设置mybatis输出日志--&gt;</span>--&gt;<br><span class="hljs-comment">&lt;!--        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot; /&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;/settings&gt;--&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--给所有的pojo类设置别名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--&lt;typeAlias type=&quot;com.wangpeng.pojo.User&quot; alias=&quot;User&quot;/&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.wangpeng.pojo&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--environments中可以有多个environment，就是配置多套环境--&gt;</span><br>    <span class="hljs-comment">&lt;!--default参数与environment中的id参数对应即可使用该环境。--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--事务的类型，type: JDBC(表示使用jdbc中的Connection对象的commit，rollback做事务处理)--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">               dataSource:表示数据源，连接数据库的</span><br><span class="hljs-comment">                  type：表示数据源的类型， POOLED表示使用连接池</span><br><span class="hljs-comment">            --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--每一个Mapper.xml都需要在Mybatis核心配置文件中注册！--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/wangpeng/dao/UserMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="28-mybatis工具类">2.8 Mybatis工具类</span></h3><p>com/wangpeng/utils/MybatisUtils.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.utils;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-comment">// SqlSessionFactory</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisUtils</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 获取Mybatis获取SqlSessionFactory对象</span><br>            String resource = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>            InputStream inputStream = Resources.getResourceAsStream(resource);<br>            sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取SqlSession对象</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>通过SqlSessionFactoryBuilder对象build一个SqlSessionFactory对象，SqlSessionFactory对象是单例对象，所以在工具类的静态代码块中创建。</p><p>然后有个方法，获取SqlSession对象，SqlSession对象就可以执行mapper.xml中的sql语句。</p><h3><span id="29-测试类">2.9 测试类</span></h3><p>test下java下的com/wangpeng/dao/UserMapperTest.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.dao;<br><br><span class="hljs-keyword">import</span> com.wangpeng.pojo.User;<br><span class="hljs-keyword">import</span> com.wangpeng.utils.MybatisUtils;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMapperTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetUserList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//第一步：获得sqlSession对象</span><br>        SqlSession sqlSession = <span class="hljs-keyword">null</span>;<br><br>        sqlSession = MybatisUtils.getSqlSession();<br>        <span class="hljs-comment">//方法一：SqlSession对象的getMapper方法实例化接口</span><br>        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);<br>        List&lt;User&gt; userList = userMapper.getUserList();<br>        <span class="hljs-comment">//方法二：直接通过SqlSession对象的对应数据库操纵方法</span><br><span class="hljs-comment">//        List&lt;User&gt; userList = sqlSession.selectList(&quot;com.wangpeng.dao.UserMapper.getUserList&quot;);</span><br>        <span class="hljs-keyword">for</span>(User user : userList) &#123;<br>            System.out.println(user);<br>        &#125;<br><br>        <span class="hljs-comment">//关闭流</span><br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetUserById</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 获取sqlSession对象</span><br>        SqlSession sqlSession = MybatisUtils.getSqlSession();<br><br>        User user = sqlSession.getMapper(UserMapper.class).getUserById(<span class="hljs-number">1</span>);<br>        System.out.println(user);<br><br>        <span class="hljs-comment">//关闭流</span><br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAddUser</span><span class="hljs-params">()</span> </span>&#123;<br>        SqlSession sqlSession = MybatisUtils.getSqlSession();<br><br>        sqlSession.getMapper(UserMapper.class).addUser(<span class="hljs-keyword">new</span> User(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;林六&quot;</span>, <span class="hljs-string">&quot;987654&quot;</span>));<br>        sqlSession.commit();<br><br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdateUser</span><span class="hljs-params">()</span> </span>&#123;<br>        SqlSession sqlSession = MybatisUtils.getSqlSession();<br><br>        sqlSession.getMapper(UserMapper.class).updateUser(<span class="hljs-keyword">new</span> User(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;张七&quot;</span>, <span class="hljs-string">&quot;555555&quot;</span>));<br>        sqlSession.commit();<br><br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteUser</span><span class="hljs-params">()</span> </span>&#123;<br>        SqlSession sqlSession = MybatisUtils.getSqlSession();<br><br>        sqlSession.getMapper(UserMapper.class).deleteUser(<span class="hljs-number">4</span>);<br>        sqlSession.commit();<br><br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><font color="red">注意增删改操作都需要手动commit。</font></p><p>因为Mybatis默认是不开启自动提交的，除非在调用工厂类的openSession中传入true。</p><p>getMapper方法的原理实际上就是动态代理，后面会详细说明。</p><p>第一个方法的运行效果</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">User&#123;<span class="hljs-attribute">id</span>=1, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-attribute">pswd</span>=<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>User&#123;<span class="hljs-attribute">id</span>=2, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-attribute">pswd</span>=<span class="hljs-string">&#x27;234567&#x27;</span>&#125;<br>User&#123;<span class="hljs-attribute">id</span>=3, <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-attribute">pswd</span>=<span class="hljs-string">&#x27;345678&#x27;</span>&#125;<br></code></pre></div></td></tr></table></figure><h2><span id="3-配置文件">3、配置文件</span></h2><h3><span id="31-核心配置文件">3.1 核心配置文件</span></h3><ul><li>  mybatis-config.xml</li><li>  MyBatis的配置文件包含了会影响MyBatis行为的设置和属性信息。</li></ul><figure class="highlight elm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elm"><span class="hljs-title">configuration</span>（配置）<br><span class="hljs-title">properties</span>（属性）<br><span class="hljs-title">settings</span>（设置）<br>typeAliases（类型别名）<br>typeHandlers（类型处理器）<br><span class="hljs-title">objectFactory</span>（对象工厂）<br><span class="hljs-title">plugins</span>（插件）<br><span class="hljs-title">environments</span>（环境配置）<br><span class="hljs-title">environment</span>（环境变量）<br><span class="hljs-title">transactionManager</span>（事务管理器）<br><span class="hljs-title">dataSource</span>（数据源）<br><span class="hljs-title">databaseIdProvider</span>（数据库厂商标识）<br><span class="hljs-title">mappers</span>（映射器）<br></code></pre></div></td></tr></table></figure><h3><span id="32-环境environments">3.2 环境（environments）</span></h3><p>Mybatis可以配置成适应多种环境<br><strong>不过要记住：尽管可以配置多个环境，但每个SqlSessionFactory实例只能选择一种环境。</strong><br>学会使用配置多套运行环境！<br>Mybatis默认的事务管理器就是JDBC,连接池：POOLED</p><h4><span id="datasource-标签">dataSource 标签</span></h4><p>Mybatis 中访问数据库，可以连接池技术，但它采用的是自己的连接池技术。在 Mybatis 的 mybatis.xml<br>配置文件中，通过<code>&lt;dataSource type=&quot;pooled&quot;&gt;</code>来实现 Mybatis 中连接池的配置。 </p><p>UNPOOLED 不使用连接池的数据源<br>POOLED 使用连接池的数据源<br>JNDI 使用JNDI 实现的数据源 </p><h4><span id="事务管理器">事务管理器</span></h4><p><code>&lt;transactionManager type=&quot;JDBC&quot;/&gt; </code></p><p>该标签用于指定MyBatis 所使用的事务管理器。MyBatis 支持两种事务管理器类型：JDBC 与MANAGED。</p><p>JDBC：使用JDBC 的事务管理机制。即，通过 Connection 的commit()方法提交，通过 rollback()方法<br>回滚。<font color="red">默认情况下，MyBatis 将自动提交功能关闭了，改为了手动提交。</font></p><p>MANAGED：由容器来管理事务的整个生命周期（如Spring 容器）。 </p><h3><span id="33-映射器mappers">3.3 映射器（mappers）</span></h3><p>注册绑定Mapper文件</p><p>方式一：【推荐使用】</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/wangpeng/dao/UserMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>方式二：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.dao.UserMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="34-属性properties">3.4 属性（properties）</span></h3><p>我们可以通过properties属性来实现引用配置文件<br>这些属性都是可外部配置且可动态替换的，既可以在典型的Java属性文件中配置，亦可通过properties元素的子元素来传递。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;db.properties&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123123&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">123456</span><br></code></pre></div></td></tr></table></figure><h3><span id="35-类型别名typealiases">3.5 类型别名（typeAliases）</span></h3><ul><li>  类型别名是为Java类型设置一个短的名字。</li><li>  存在的意义仅在于用来减少类完全限定名的冗余。</li></ul><p>第一种：可以给实体类起别名</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.wangpeng.pojo.User&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;User&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>第二种：也可以指定一个包名，MyBatis会在包名下面搜索需要的JavaBean</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.wangpeng.pojo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>第一种可以DIY别名，第二种则不行，如果非要改，需要在实体上增加注解</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Alias(&quot;user&quot;)</span><br><span class="hljs-comment">//实体类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;&#125;<br></code></pre></div></td></tr></table></figure><h3><span id="36-设置settings">3.6 设置（settings）</span></h3><p>这是MyBatis中极为重要的调整设置，它们会改变MyBatis的运行时行为。</p><p><img src="https://img-blog.csdnimg.cn/20201023095101296.png#pic_center" alt="img"></p><p>先了解一个日志就行，设置为STDOUT_LOGGING，是标准的，默认的日志设置。</p><h3><span id="37-其他配置">3.7 其他配置</span></h3><ul><li>  typeHandlers（类型处理器）</li><li>  objectFactory（对象工厂）</li><li>plugins（插件）<ol><li> mybatis-generator-core</li><li> mybatis-plus</li><li> 通用mapper</li></ol></li></ul><h2><span id="4-mybatis-对象分析">4、MyBatis 对象分析</span></h2><h3><span id="41-resources-类">4.1 Resources 类</span></h3><p>用于读取资源文件</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">InputStream in = Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis.xml&quot;</span>);<br></code></pre></div></td></tr></table></figure><h3><span id="42-sqlsessionfactorybuilder-类">4.2 SqlSessionFactoryBuilder 类</span></h3><p>用于创建SqlSessionFactory对象</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">SqlSessionFactoryBuilder builder  = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder();<br>SqlSessionFactory factory = builder.build(in);<br></code></pre></div></td></tr></table></figure><h3><span id="43-sqlsessionfactory-接口">4.3 SqlSessionFactory 接口</span></h3><p>是SqlSession的工厂类，在整个项目中，有一个就够用了。</p><p>用于获取SqlSession对象</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">SqlSession sqlSession = factory.openSession();<br></code></pre></div></td></tr></table></figure><p>openSession()方法说明：</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-number">1.</span> <span class="hljs-keyword">open</span><span class="hljs-constructor">Session()</span> ：无参数的， 获取是非自动提交事务的SqlSession对象<br><span class="hljs-number">2.</span> <span class="hljs-keyword">open</span><span class="hljs-constructor">Session(<span class="hljs-params">boolean</span>)</span>: <span class="hljs-keyword">open</span><span class="hljs-constructor">Session(<span class="hljs-params">true</span>)</span>  获取自动提交事务的SqlSession. <br> <span class="hljs-keyword">open</span><span class="hljs-constructor">Session(<span class="hljs-params">false</span>)</span>  非自动提交事务的SqlSession对象<br></code></pre></div></td></tr></table></figure><h3><span id="44-sqlsession-接口">4.4 SqlSession 接口</span></h3><p>定义了操作数据的方法 例如 selectOne() ,selectList() ,insert(),update(), delete(), commit(), rollback()</p><p>使用要求： SqlSession对象不是线程安全的，需要在方法内部使用， 在执行sql语句之前，使用openSession()获取SqlSession对象。</p><p>在执行完sql语句后，需要关闭它，执行SqlSession.close(). 这样能保证他的使用是线程安全的。</p><h2><span id="5-动态代理">5、动态代理</span></h2><h3><span id="51-动态代理分析">5.1 动态代理分析</span></h3><p>MyBatis 框架抛开了 Dao 的实现类，直接定位到映射文件 mapper 中的相应 SQL 语句，对DB 进行操作。这种对Dao 的实现方式称为 Mapper 的动态代理方式。<br>Mapper 动态代理方式无需程序员实现 Dao 接口。接口是由 MyBatis 结合映射文件自动生成的动态代理实现的。 </p><p>动态代理： 使用SqlSession.getMapper(dao接口.class) 获取这个dao接口的对象</p><h2><span id="6-mybatis传递参数">6、Mybatis传递参数</span></h2><h3><span id="61-parametertype">6.1 parameterType</span></h3><p>接口中方法参数的类型， 类型的完全限定名或别名。<font color="red">这个属性是可选的</font>，因为 MyBatis可以推断出具体传入语句的参数，默认值为未设置（unset）。接口中方法的参数从java代码传入到mapper 文件的sql 语句。 </p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">int 或 java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.Integer</span> <br>hashmap 或 java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.HashMap</span> <br>list 或 java<span class="hljs-selector-class">.util</span><span class="hljs-selector-class">.ArrayList</span> <br>student 或 com<span class="hljs-selector-class">.bjpowernode</span><span class="hljs-selector-class">.domain</span><span class="hljs-selector-class">.Student</span> <br></code></pre></div></td></tr></table></figure><p>更多看官方文档。</p><h3><span id="62-参数分类">6.2 参数分类</span></h3><ol><li><p>一个简单类型参数：在mapper文件获取简单类型的一个参数的值，<font color="red">使用 #{任意字符}</font></p>  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">接口：<span class="hljs-function"><span class="hljs-keyword">public</span> Student  <span class="hljs-title">selectStudentById</span><span class="hljs-params">(Integer id)</span> </span><br><span class="hljs-function">mapper：select id,name, email,age from student where id</span>=#&#123;studentId&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>多个参数，使用<font color="red">@Param命名参数</font></p>  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">接口：<span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title">selectMulitParam</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;myname&quot;)</span> String name, <span class="hljs-meta">@Param(&quot;myage&quot;)</span> Integer age)</span></span><br><span class="hljs-function">    </span><br><span class="hljs-function">mapper文件：</span><br><span class="hljs-function">&lt;select&gt;</span><br><span class="hljs-function">    select * from student where name</span>=#&#123;myname&#125; or age=#&#123;myage&#125;<br>&lt;/select&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>多个参数，使用java对象传参， 在mapper文件中， 使用<font color="red">#{java对象属性名称}</font></p>  <figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">语法 #&#123;属性名&#125;<br><br>vo: <span class="hljs-keyword">value</span> <span class="hljs-keyword">object</span> , 放一些存储数据的类。比如说 提交请求参数， <span class="hljs-type">name</span> ,age <br>现在想把<span class="hljs-type">name</span> ,age 传给一个service 类。<br><br>vo: <span class="hljs-keyword">view</span> <span class="hljs-keyword">object</span> , 从servlet把数据返回给浏览器使用的类，表示显示结果的类。<br></code></pre></div></td></tr></table></figure></li><li><p>多个参数，使用参数的位置， 在mapper文件，<font color="red">#{arg位置值，从0开始}</font></p>  <figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c">例如：<span class="hljs-meta">#&#123;arg0&#125;</span><br>很少用<br></code></pre></div></td></tr></table></figure></li><li><p>多个参数，使用map，<font color="red">#{map的key}</font></p>  <figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">缺点：可读性差<br></code></pre></div></td></tr></table></figure></li><li><p><code>#</code>和 <code>$</code>占位符的区别</p>  <figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> id,<span class="hljs-type">name</span>, email,age <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id=#&#123;studentId&#125;<br># 的结果： <span class="hljs-keyword">select</span> id,<span class="hljs-type">name</span>, email,age <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id=? <br><br><br><span class="hljs-keyword">select</span> id,<span class="hljs-type">name</span>, email,age <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id=$&#123;studentId&#125;<br>$ 的结果：<span class="hljs-keyword">select</span> id,<span class="hljs-type">name</span>, email,age <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id=<span class="hljs-number">1001</span><br><br>$:可以替换表名或者列名， 你能确定数据是安全的。可以使用$<br><br># 和 $区别<br>  <span class="hljs-number">1.</span> #使用 ？在<span class="hljs-keyword">sql</span>语句中做站位的， 使用PreparedStatement执行<span class="hljs-keyword">sql</span>，效率高<br>  <span class="hljs-number">2.</span> #能够避免<span class="hljs-keyword">sql</span>注入，更安全。<br>  <span class="hljs-number">3.</span> $不使用占位符，是字符串连接方式，使用<span class="hljs-keyword">Statement</span>对象执行<span class="hljs-keyword">sql</span>，效率低<br>  <span class="hljs-number">4.</span> $有<span class="hljs-keyword">sql</span>注入的风险，缺乏安全性。<br>  <span class="hljs-number">5.</span> $:可以替换表名或者列名<br></code></pre></div></td></tr></table></figure></li></ol><h2><span id="7-mybatis-返回结果">7、MyBatis 返回结果</span></h2><p>mybatis执行sql语句后，把ResultSet转为java对象，mybatis负责创建对象，给属性赋值</p><h3><span id="71-mybatis封装sql语句的执行结果">7.1 mybatis封装sql语句的执行结果</span></h3><ol><li>resultType: 在<select>标签中使用的，把查询的结果转为java对象的类型<ol><li>  java类型的全限定名称</li><li>  别名</li></ol></select></li><li>2.resultMap: 自定义列名和属性名称的对应关系<ol><li>  先使用<code>&lt;resultMap&gt; </code>定义列和属性对应关系</li><li>  <code>在&lt;select resultMap=&quot;定义好的名称&quot;&gt; </code></li></ol></li></ol><h3><span id="72-表的列名和java对象的属性名称不一样">7.2 表的列名和java对象的属性名称不一样</span></h3><ol><li><p>  使用<strong>resultMap</strong>指定列名和属性名称的对应</p></li><li><p>  使用resultType通过<strong>别名</strong>的方式，指定别名和属性名称对应一致</p></li></ol><h3><span id="73-查询返回map">7.3 查询返回map</span></h3><p>就只能返回只有一行的数据。</p><h3><span id="74-模糊查询like使用">7.4 模糊查询Like使用</span></h3><ol><li><p>  在java代码中指定模糊查询的内容，例如 “%李%”， 然后把这个值传入到sql语句中</p></li><li><p>  在sql语句中拼接like的内容， 方式  where name like “%”空格#{name}空格”%”</p></li></ol><h2><span id="8-动态sql">8、动态SQL</span></h2><p>动态 SQL，通过 MyBatis 提供的各种标签对条件作出判断以实现动态拼接 SQL 语句。这里的条件判断使用的表达式为OGNL 表达式。常用的动态SQL 标签有<code>&lt;if&gt;、&lt;where&gt;、&lt;choose/&gt;、&lt;foreach&gt;</code>等。与 JSTL 中的语句非常相似。</p><h3><span id="1-注意">1、注意</span></h3><p>在mapper 的动态SQL 中若出现大于号（&gt;）、小于号（&lt;）、大于等于号（&gt;=），小于等于号（&lt;=）等符号，最好将其转换为实体符号。否则，XML 可能会出现解析出错问题。<br>特别是对于小于号（&lt;），在 XML 中是绝不能出现的。否则解析mapper 文件会出错。 </p><p>实体符号表：<br>|符号|说明|转义|<br>|–|–|–|<br>|&lt;|小于|<code>&amp;lt;</code>|<br>|&gt;|大于|<code>&amp;gt; </code>|<br>|&lt;=|小于等于|<code>&amp;lt;= </code>|<br>|&gt;=|大于等于|<code>&amp;gt;= </code>|</p><h3><span id="ltifgt标签"><code>&lt;if&gt;</code>标签</span></h3><p>语法：<code>&lt;if test=&quot;条件&quot;&gt;</code> sql 语句的部分<code>&lt;/if&gt;</code></p><p>当test 的值为true 时，会将其包含的 SQL 片断拼接到其所在的 SQL 语句中。 </p><p>演示</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudentIf&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span> <br>    select id,name,email,age from student <br>    where 1=1 <br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null and name !=&#x27;&#x27; &quot;</span>&gt;</span> <br>        and name = #&#123;name&#125; <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age &gt; 0 &quot;</span>&gt;</span> <br>        and age <span class="hljs-symbol">&amp;gt;</span> #&#123;age&#125; <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="ltwheregt标签"><code>&lt;where&gt;</code>标签</span></h3><p>语法：<code>&lt;where&gt;</code> 其他动态sql <code>&lt;/where&gt;</code></p><p><code>&lt;if/&gt;</code>标签的中存在一个比较麻烦的地方：需要在where 后手工添加1=1 的子句。因为，若 where 后<br>的所有<code>&lt;if/&gt;</code>条件均为 false，而 where 后若又没有 1=1 子句，则 SQL 中就会只剩下一个空的 where，SQL<br>出错。</p><p>使用<code>&lt;where/&gt;</code>标签，在有查询条件时，可以自动添加上 where 子句；没有查询条件时，不会添加<br>where 子句。</p><p>需要注意的是，第一个<code>&lt;if/&gt;</code>标签中的SQL 片断，可以不包含 and。不过，写上 and 也不错，<br>系统会将多出的and 去掉。但其它<code>&lt;if/&gt;</code>中SQL 片断的and，必须要求写上。否则SQL 语句将拼接出错。</p><p>演示</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudentWhere&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span> <br>    select id,name,email,age from student<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null and name !=&#x27;&#x27; &quot;</span>&gt;</span> <br>            and name = #&#123;name&#125; <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age &gt; 0 &quot;</span>&gt;</span> <br>            and age <span class="hljs-symbol">&amp;gt;</span> #&#123;age&#125; <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><h3><span id="ltforeachgt标签"><code>&lt;foreach&gt;</code>标签</span></h3><p><code>&lt;foreach/&gt;</code>标签用于实现对于数组与集合的遍历。对其使用，需要注意：<br>➢ collection 表示要遍历的集合类型, list ，array 等。<br>➢ open、close、separator 为对遍历内容的SQL 拼接。 </p><p>语法</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;集合类型&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;开始的字符&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;结束的字符&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;集合中的成员&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;集合成员之间的分隔符&quot;</span>&gt;</span> <br>            #&#123;item的值&#125; <br><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><h4><span id="1遍历-listlt简单类型gt">（1）遍历 List&lt;简单类型&gt;</span></h4><p>表达式中的List 使用 list 表示，其大小使用 list.size 表示。 </p><p>需求：查询学生id 是 1002,1005,1006<br>接口方法：<br><code>List&lt;Student&gt; selectStudentForList(List&lt;Integer&gt; idList); </code></p><p>mapper.xml：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudentForList&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span> <br>    select id,name,email,age from student <br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;list !=null and list.size &gt; 0 &quot;</span>&gt;</span> <br>        where id in <br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>  </span><br><span class="hljs-tag"> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;stuid&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span> <br>            #&#123;stuid&#125; <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><p>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectForList</span><span class="hljs-params">()</span>  </span>&#123; <br>    List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(); <br>    list.add(<span class="hljs-number">1002</span>); <br>    list.add(<span class="hljs-number">1005</span>); <br>    list.add(<span class="hljs-number">1006</span>); <br> <br>    List&lt;Student&gt; studentList = studentDao.selectStudentForList(list); <br>    studentList.forEach( stu -&gt; System.out.println(stu)); <br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="2遍历-listlt对象类型gt">（2）遍历 List&lt;对象类型&gt;</span></h4><p>接口方法：<br><code>List&lt;Student&gt; selectStudentForList2(List&lt;Student&gt; stuList); </code></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">mapper 文件： <br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudentForList2&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span> <br>    select id,name,email,age from student <br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;list !=null and list.size &gt; 0 &quot;</span>&gt;</span> <br>        where id in <br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>  </span><br><span class="hljs-tag"> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;stuobject&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span> <br>            #&#123;stuobject.id&#125; <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectForList2</span><span class="hljs-params">()</span>  </span>&#123; <br>    List&lt;Student&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(); <br>    Student s1 = <span class="hljs-keyword">new</span> Student(); <br>    s1.setId(<span class="hljs-number">1002</span>); <br>    list.add(s1); <br> <br>    s1 = <span class="hljs-keyword">new</span> Student(); <br>    s1.setId(<span class="hljs-number">1005</span>); <br>    list.add(s1); <br> <br>    List&lt;Student&gt; studentList = studentDao.selectStudentForList2(list); <br>    studentList.forEach( stu -&gt; System.out.println(stu)); <br>&#125;<br></code></pre></div></td></tr></table></figure><h3><span id="代码片段">代码片段</span></h3><p><code>&lt;sql/&gt;</code>标签用于定义 SQL 片断，以便其它 SQL 标签复用。而其它标签使用该 SQL 片断，需要使用<code>&lt;include/&gt;</code>子标签。该<code>&lt;sql/&gt;</code>标签可以定义SQL 语句中的任何部分，所以<include>子标签可以放在动态SQL的任何位置。 </include></p><p>演示</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentSql&quot;</span>&gt;</span> <br>    select id,name,email,age from student <br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudentSqlFragment&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.bjpowernode.domain.Student&quot;</span>&gt;</span> <br> <span class="hljs-comment">&lt;!-- 引用 sql片段 --&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;studentSql&quot;</span>/&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;list !=null and list.size &gt; 0 &quot;</span>&gt;</span> <br>        where id in <br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>  </span><br><span class="hljs-tag"> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;stuobject&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span> <br>            #&#123;stuobject.id&#125; <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2><span id="9-扩展">9、扩展</span></h2><h3><span id="pagehelper">PageHelper</span></h3><h4><span id="1-maven-坐标">（1） maven 坐标</span></h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><h4><span id="2-加入plugin-配置">（2） 加入plugin 配置</span></h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">在<span class="hljs-tag">&lt;<span class="hljs-name">environments</span>&gt;</span>之前加入 <br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageInterceptor&quot;</span> /&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><h4><span id="3-pagehelper-对象">（3） PageHelper 对象</span></h4><p>查询语句之前调用PageHelper.startPage  静态方法。<br>除了 PageHelper.startPage 方法外，还提供了类似用法的  PageHelper.offsetPage  方法。<br>在你需要进行分页的 MyBatis 查询方法前调用  PageHelper.startPage  静态方法即可，紧跟在这个<br>方法后的第一个MyBatis 查询方法会被进行分页。 </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelect</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123; <br><span class="hljs-comment">//获取第 1页，3条内容 </span><br>PageHelper.startPage(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>); <br>    List&lt;Student&gt; studentList = studentDao.selectStudents(); <br>    studentList.forEach( stu -&gt; System.out.println(stu)); <br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>SSM框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaWeb</tag>
      
      <tag>SSM</tag>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM框架-02-框架入门</title>
    <link href="/2021/08/01/SSM%E6%A1%86%E6%9E%B6-02-%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/"/>
    <url>/2021/08/01/SSM%E6%A1%86%E6%9E%B6-02-%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1><span id="框架入门">框架入门</span></h1><!-- toc --><ul><li><a href="#%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84">三层架构</a></li><li><a href="#%E6%A1%86%E6%9E%B6">框架</a></li></ul><!-- tocstop --><h2><span id="三层架构">三层架构</span></h2><p>界面层（User Interface layer）、业务逻辑层（Business Logic Layer）、数据访问层（Data access layer） </p><p>三层的职责 </p><ol><li>界面层（表示层，视图层）：接收用户请求，显示处理结果。使用 web 页面或手机app与用户交互。</li><li>业务逻辑层：接收表示传递过来的数据，检查数据，计算业务逻辑，调用数据访问层获取数据。 </li><li>数据访问层：与数据库打交道。主要实现对数据的增、删、改、查。将存储在数据库中的数据提交给业务层，同时将业务层处理的数据保存到数据库. </li></ol><p>三层对应的包<br>       界面层： controller包 （servlet）<br>       业务逻辑层： service 包（XXXService类）<br>       数据访问层： dao包（XXXDao类）</p><p>三层的处理请求的交互： 用户—&gt; 界面层—&gt;业务逻辑层—&gt;数据访问层—&gt;DB 数据库</p><p>如图：</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210825214851.png" alt="image-20210825214851876"></p><p>为什么要使用三层？ </p><p>1，结构清晰、耦合度低、各层分工明确<br>2，可维护性高，可扩展性高<br>3，有利于标准化<br>4，开发人员可以只关注整个结构中的其中某一层的功能实现<br>5，有利于各层逻辑的复用 </p><p>三层对应的处理框架<br>       界面层—servlet—springmvc（框架）<br>       业务逻辑层—service类–spring（框架）<br>       数据访问层—dao类–mybatis（框架）</p><h2><span id="框架">框架</span></h2><p>框架（Framework）是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法;另一种认为，框架是可被应用开发者定制的应用骨架、模板。 </p><p>简单的说，框架其实是半成品软件，就是一组组件，供你使用完成你自己的系统。</p><p>框架特点：<br>       1. 框架一般不是全能的， 不能做所有事情<br>    2. 框架是针对某一个领域有效。 特长在某一个方面，比如mybatis做数据库操作强，但是他不能做其它的。<br>    3. 框架是一个软件</p><p>框架要解决的最重要的一个问题是技术整合，另一个方面可以提供开发的效率。</p>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>SSM框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaWeb</tag>
      
      <tag>SSM</tag>
      
      <tag>框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM框架-01-动态代理</title>
    <link href="/2021/08/01/SSM%E6%A1%86%E6%9E%B6-01-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <url>/2021/08/01/SSM%E6%A1%86%E6%9E%B6-01-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1><span id="动态代理">动态代理</span></h1><!-- toc --><ul><li><a href="#1-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F">1、代理模式</a><ul><li><a href="#11-%E4%BB%8B%E7%BB%8D">1.1 介绍</a></li><li><a href="#12-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%9C%E7%94%A8">1.2 代理模式的作用</a></li></ul></li><li><a href="#2-%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86">2、静态代理</a></li><li><a href="#3-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86">3、动态代理</a><ul><li><a href="#31-jdk%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86">3.1 jdk动态代理</a></li><li><a href="#32-invocationhandler-%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E5%A4%84%E7%90%86%E5%99%A8">3.2 InvocationHandler 接口（调用处理器）</a></li><li><a href="#33-method%E7%B1%BB%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95%E7%9A%84-%E7%A1%AE%E5%88%87%E7%9A%84%E8%AF%B4%E5%B0%B1%E6%98%AF%E7%9B%AE%E6%A0%87%E7%B1%BB%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95">3.3 Method类：表示方法的， 确切的说就是目标类中的方法</a></li><li><a href="#34-proxy%E7%B1%BB%E6%A0%B8%E5%BF%83%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1">3.4 Proxy类：核心的对象，创建代理对象。</a></li><li><a href="#35-%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E6%AD%A5%E9%AA%A4">3.5 实现动态代理的步骤：</a></li><li><a href="#36-%E6%BC%94%E7%A4%BA%E4%BB%A3%E7%A0%81">3.6 演示代码</a><ul><li><a href="#%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3">服务接口</a></li><li><a href="#%E7%9B%AE%E6%A0%87%E7%B1%BB%E5%B7%A5%E5%8E%82%E7%B1%BB">目标类（工厂类）</a></li><li><a href="#%E8%B0%83%E7%94%A8%E5%A4%84%E7%90%86%E5%99%A8%E7%B1%BB%E4%BB%A3%E7%90%86%E7%B1%BB%E8%A6%81%E5%AE%8C%E6%88%90%E7%9A%84%E5%8A%9F%E8%83%BD">调用处理器类（代理类要完成的功能）</a></li><li><a href="#%E7%94%A8%E6%88%B7%E8%B0%83%E7%94%A8">用户调用</a></li></ul></li></ul></li></ul><!-- tocstop --><h2><span id="1-代理模式">1、代理模式</span></h2><h3><span id="11-介绍">1.1 介绍</span></h3><p>代理就像代购、中介。</p><p>使用代理对象，是为了在不修改目标对象的基础上，增强主业务逻辑。</p><p><font color="red">客户类真正的想要访问的对象是目标对象，但客户类真正可以访问的对象是代理对象。</font></p><p><font color="red">客户类对目标对象的访问是通过访问代理对象来实现的。</font>当然，代理类与目标类要实现同一个接口。 </p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210825173459.png" alt="image-20210825173459480"></p><h3><span id="12-代理模式的作用">1.2 代理模式的作用</span></h3><ol><li>  功能增强：在你原有的功能上，增加了额外的功能。 新增加的功能，叫做功能增强。</li><li>  控制访问：代理类不让你访问目标，例如商家不让用户访问厂家。 </li></ol><h2><span id="2-静态代理">2、静态代理</span></h2><p>手动实现代理类，代理类中调用的目标类是静态的（写死的），用户类通过代理类调用目标类，这就是静态代理。</p><p>特点：1）实现简单    2）容易理解</p><p>缺点：1）当目标类增加了， 代理类可能也需要成倍的增加。 代理类数量过多。<br>2） 当你的接口中功能增加了， 或者修改了，会影响众多的实现类，厂家类，代理都需要修改。影响比较多。</p><h2><span id="3-动态代理">3、动态代理</span></h2><p><font color="red">利用反射机制创建代理类的对象，并且目标类也可以是动态指定的。</font></p><p>动态代理的实现： </p><ol><li><p>jdk动态代理（理解）： 使用java反射包中的类和接口实现动态代理的功能。<br> 反射包 java.lang.reflect , 里面有三个类 ： InvocationHandler , Method, Proxy.</p></li><li><p>cglib动态代理（了解）: cglib是第三方的工具库， 创建代理对象。</p></li></ol><blockquote><p>  cglib的原理是继承， cglib通过继承目标类，创建它的子类，在子类中重写父类中同名的方法， 实现功能的修改。</p><p>  因为cglib是继承，重写方法，所以要求目标类不能是final的， 方法也不能是final的。</p><p>  cglib的要求目标类比较宽松， 只要能继承就可以了。cglib在很多的框架中使用， </p><p>  比如 mybatis ，spring框架中都有使用。</p></blockquote><h3><span id="31-jdk动态代理">3.1 jdk动态代理</span></h3><p>jdk动态代理的实现</p><p>反射包 java.lang.reflect , 里面有三个类 ： <strong>InvocationHandler , Method, Proxy.</strong></p><h3><span id="32-invocationhandler-接口调用处理器">3.2 InvocationHandler 接口（调用处理器）</span></h3><p>就一个方法invoke（）<br>invoke（）:表示代理对象要执行的功能代码。你的代理类要完成的功能就写在invoke()方法中。</p><p>方法原型：public Object invoke(Object proxy, Method method, Object[] args)</p><p>参数：<br>    <strong>Object proxy</strong>：jdk创建的代理对象，无需赋值。<br>    <strong>Method method</strong>:目标类中的方法，jdk提供method对象的<br>    <strong>Object[] args</strong>：目标类中方法的参数， jdk提供的。</p><p>InvocationHandler 接口：表示你的代理要干什么。</p><p>怎么用： </p><p>1.创建类实现接口InvocationHandler<br>2.重写invoke（）方法， 把原来静态代理中代理类要完成的功能，写在这。</p><h3><span id="33-method类表示方法的-确切的说就是目标类中的方法">3.3 Method类：表示方法的， 确切的说就是目标类中的方法</span></h3><p>作用：通过Method可以执行某个目标类的方法，Method.invoke();<br>method.invoke(目标对象，方法的参数)<br>Object ret = method.invoke(service2, “李四”);</p><p>说明： method.invoke（）就是用来执行目标方法的，等同于静态代理中的<br>//向厂家发送订单，告诉厂家，我买了u盘，厂家发货<br>float price = factory.sell(amount); //厂家的价格。</p><h3><span id="34-proxy类核心的对象创建代理对象">3.4 Proxy类：核心的对象，创建代理对象。</span></h3><p>之前创建对象都是 new 类的构造方法()；现在我们是使用Proxy类的方法，代替new的使用。 </p><p>方法： 静态方法 newProxyInstance()<br>作用是： 创建代理对象， 等同于静态代理中的TaoBao taoBao = new TaoBao();</p><h3><span id="35-实现动态代理的步骤">3.5 实现动态代理的步骤：</span></h3><ol><li><p>创建接口，定义目标类要完成的功能</p></li><li><p>创建目标类实现接口</p></li><li><p>创建InvocationHandler接口的实现类，在invoke方法中完成代理类的功能<br> 1.调用目标方法<br>  2.增强功能</p></li><li><p>使用Proxy类的静态方法，创建代理对象。 并把返回值转为接口类型。</p></li></ol><h3><span id="36-演示代码">3.6 演示代码</span></h3><h4><span id="服务接口">服务接口</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjpowernode.service;<br><br><span class="hljs-comment">//目标接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UsbSell</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">float</span> <span class="hljs-title">sell</span><span class="hljs-params">(<span class="hljs-keyword">int</span> amount)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>卖U盘接口，一个方法，卖U盘。</p><h4><span id="目标类工厂类">目标类（工厂类）</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjpowernode.factory;<br><br><span class="hljs-keyword">import</span> com.bjpowernode.service.UsbSell;<br><br><span class="hljs-comment">//目标类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UsbKingFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UsbSell</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">float</span> <span class="hljs-title">sell</span><span class="hljs-params">(<span class="hljs-keyword">int</span> amount)</span> </span>&#123;<br>        <span class="hljs-comment">//目标方法</span><br>        System.out.println(<span class="hljs-string">&quot;目标类中，执行sell目标方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">85.0f</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>实现了卖U盘的接口，实现了卖U盘的方法。</p><h4><span id="调用处理器类代理类要完成的功能">调用处理器类（代理类要完成的功能）</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjpowernode.handler;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">//必须实现InvocationHandler接口，完成代理类要做的功能（1.调用目标方法，2.功能增强）</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySellHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Object target = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-comment">//动态代理：目标对象是活动的，不是固定的，需要传入进来。</span><br>    <span class="hljs-comment">//传入是谁，就给谁创建代理。</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MySellHandler</span><span class="hljs-params">(Object target)</span> </span>&#123;<br>        <span class="hljs-comment">//给目标对象赋值</span><br>        <span class="hljs-keyword">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br><br>        Object res  = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-comment">//向厂家发送订单，告诉厂家，我买了u盘，厂家发货</span><br>        <span class="hljs-comment">//float price = factory.sell(amount); //厂家的价格。</span><br>        res =  method.invoke(target,args); <span class="hljs-comment">//执行目标方法</span><br><br><br><br>        <span class="hljs-comment">//商家 需要加价， 也就是代理要增加价格。</span><br>        <span class="hljs-comment">//price = price + 25; //增强功能，代理类在完成目标类方法调用后，增强了功能。</span><br>        <span class="hljs-keyword">if</span>( res != <span class="hljs-keyword">null</span> )&#123;<br>            Float price = (Float)res;<br>            price = price + <span class="hljs-number">25</span>;<br>            res = price;<br>        &#125;<br><br>        <span class="hljs-comment">//在目标类的方法调用后，你做的其它功能，都是增强的意思。</span><br>        System.out.println(<span class="hljs-string">&quot;淘宝商家，给你返一个优惠券，或者红包&quot;</span>);<br>        <span class="hljs-comment">//记录数据库</span><br><br>        <span class="hljs-comment">//增加的价格</span><br>        <span class="hljs-keyword">return</span> res;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>接收一个目标类对象（也就意味着该代理可以指向不同的目标），通过反射执行该目标类对象的卖方法，然后加点价格（增强功能），再返回。</p><h4><span id="用户调用">用户调用</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bjpowernode;<br><br><span class="hljs-keyword">import</span> com.bjpowernode.factory.UsbKingFactory;<br><span class="hljs-keyword">import</span> com.bjpowernode.handler.MySellHandler;<br><span class="hljs-keyword">import</span> com.bjpowernode.service.UsbSell;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainShop</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建代理对象，使用Proxy</span><br>        <span class="hljs-comment">//1. 创建目标对象</span><br>        <span class="hljs-comment">// UsbKingFacotry  factory = new UsbKingFactory();</span><br>        UsbSell factory = <span class="hljs-keyword">new</span> UsbKingFactory();<br>        <span class="hljs-comment">//2.创建InvocationHandler对象</span><br>        InvocationHandler handler = <span class="hljs-keyword">new</span> MySellHandler(factory);<br><br>        <span class="hljs-comment">//3.创建代理对象</span><br>        UsbSell proxy = (UsbSell) Proxy.newProxyInstance(factory.getClass().getClassLoader(),<br>                factory.getClass().getInterfaces(),handler);<br><br>        <span class="hljs-comment">//com.sun.proxy.$Proxy0 : 这是jdk动态代理创建的对象类型。</span><br>        System.out.println(<span class="hljs-string">&quot;proxy:&quot;</span>+proxy.getClass().getName());<br>        <span class="hljs-comment">//4.通过代理执行方法</span><br>        <span class="hljs-keyword">float</span> price = proxy.sell(<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">&quot;通过动态代理对象，调用方法：&quot;</span>+price);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>先确定目标类，new一个目标类对象，然后new一个我们的调用处理器类对象，创建代理对象（绑定了目标类的构造器、目标类的接口、调用处理器类），这样我们通过代理对象执行卖方法（会间接调用处理器类对象中的invoke方法）。</p><p>具体JDK是怎么处理的，就不继续探究了。</p>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>SSM框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaWeb</tag>
      
      <tag>SSM</tag>
      
      <tag>动态代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开发工具-Maven</title>
    <link href="/2021/07/22/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-Maven/"/>
    <url>/2021/07/22/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-Maven/</url>
    
    <content type="html"><![CDATA[<h1><span id="maven">Maven</span></h1><!-- toc --><ul><li><a href="#%E7%AC%AC1%E7%AB%A0-maven%E7%AE%80%E4%BB%8B">第1章 Maven简介</a><ul><li><a href="#11-maven-%E6%A6%82%E8%BF%B0">1.1 Maven 概述</a></li></ul></li><li><a href="#12-maven%E6%9E%84%E5%BB%BA%E7%9A%84%E7%8E%AF%E8%8A%82">1.2 Maven构建的环节</a><ul><li><a href="#13-maven-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5">1.3 Maven 核心概念</a></li><li><a href="#14-%E5%AE%89%E8%A3%85maven%E7%8E%AF%E5%A2%83">1.4 安装Maven环境</a></li></ul></li><li><a href="#%E7%AC%AC2%E7%AB%A0-maven%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5font-colorred%E9%87%8D%E7%82%B9font">第2章 Maven核心概念<font color="red">（重点）</font></a><ul><li><a href="#21-maven-%E5%B7%A5%E7%A8%8B%E7%BA%A6%E5%AE%9A%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84">2.1 Maven 工程约定的目录结构</a></li><li><a href="#22-%E7%AC%AC%E4%B8%80%E4%B8%AAmaven%E5%B7%A5%E7%A8%8B">2.2 第一个maven工程</a></li><li><a href="#23-pom%E6%96%87%E4%BB%B6">2.3 POM文件</a></li><li><a href="#24-%E5%9D%90%E6%A0%87">2.4 坐标</a></li><li><a href="#25-%E4%BE%9D%E8%B5%96">2.5 依赖</a></li><li><a href="#26-%E4%BB%93%E5%BA%93">2.6 仓库</a></li><li><a href="#27-%E4%BB%93%E5%BA%93%E7%9A%84%E7%B1%BB%E5%88%AB">2.7 仓库的类别</a></li><li><a href="#28-maven-%E5%AF%B9%E4%BB%93%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8">2.8 Maven 对仓库的使用</a></li><li><a href="#29-maven%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">2.9 Maven的常用命令</a></li><li><a href="#210-%E6%8F%92%E4%BB%B6">2.10 插件</a></li><li><a href="#211-%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F">2.11 配置阿里云镜像</a></li></ul></li><li><a href="#%E7%AC%AC3%E7%AB%A0-maven%E5%9C%A8idea%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8font-colorred%E9%87%8D%E7%82%B9font">第3章 Maven在IDEA中的应用<font color="red">（重点）</font></a><ul><li><a href="#31-idea%E9%9B%86%E6%88%90maven%E7%9A%84%E8%AE%BE%E7%BD%AE">3.1 IDEA集成Maven的设置</a></li><li><a href="#32-idea-%E5%88%9B%E5%BB%BA-maven-%E7%89%88-java-%E5%B7%A5%E7%A8%8B">3.2 IDEA 创建 Maven 版 java 工程</a></li></ul></li><li><a href="#%E7%AC%AC4%E7%AB%A0-%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86">第4章 依赖管理</a><ul><li><a href="#41-%E4%BE%9D%E8%B5%96%E7%9A%84%E8%8C%83%E5%9B%B4">4.1 依赖的范围</a></li></ul></li><li><a href="#%E7%AC%AC5%E7%AB%A0-maven%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE">第5章 Maven常用设置</a><ul><li><a href="#51-%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F">5.1 全局变量</a></li></ul></li><li><a href="#%E8%A1%A5%E5%85%85%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF">补充：常见错误</a></li></ul><!-- tocstop --><h2><span id="第1章-maven简介">第1章 Maven简介</span></h2><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210822170847.png" alt="image-20210822170847103"></p><p>官网：<a href="http://maven.apache.org/">http://maven.apache.org/</a> </p><p>仓库地址：<a href="https://mvnrepository.com/">Maven Repository: Search/Browse/Explore (mvnrepository.com)</a></p><h3><span id="11-maven-概述">1.1 Maven 概述</span></h3><p>Maven 是一款<font color="red">自动化项目构建工具</font>，专注<font color="red">服务于 Java 平台的项目构建和 依赖管理</font>。</p><p>主要功能：<font color="red">（1）项目构建；（2）管理依赖</font></p><h2><span id="12-maven构建的环节">1.2 Maven构建的环节</span></h2><ol><li>  <strong>清理</strong>：删除以前的编译结果，为重新编译做好准备。 </li><li>  <strong>编译</strong>：将Java源程序编译为字节码文件。 </li><li>  <strong>测试</strong>：针对项目中的关键点进行测试，确保项目在迭代开发过程中关键点的正确性。 </li><li>  <strong>报告</strong>：在每一次测试后以标准的格式记录和展示测试结果。 </li><li>  <strong>打包</strong>：将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java 工程对应 jar 包，Web工程对应war包。 </li><li>  <strong>安装</strong>：在Maven环境下特指将打包的结果——jar包或war包安装到本地仓库中。 </li><li>  <strong>部署</strong>：将打包的结果部署到远程仓库或将war包部署到服务器上运行 </li></ol><h3><span id="13-maven-核心概念">1.3 Maven 核心概念</span></h3><p>Maven的九个核心概念实现自动化构建和依赖管理<br>①POM<br>②约定的目录结构<br>③坐标<br>④依赖管理<br>⑤仓库管理<br>⑥生命周期<br>⑦插件和目标<br>⑧继承<br>⑨聚合</p><h3><span id="14-安装maven环境">1.4 安装Maven环境</span></h3><p>1、 确保安装了 java 环境:maven 本身就是 java 写的，所以要求必须安装 JDK。<br>查看 java 环境变量：<code>echo %JAVA_HOME%</code></p><p>2、 下载并解压 maven 安装程序：<br><a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a> </p><p>3、 配置 Maven 的环境变量：<br>MAVEN_HOME=d:/apache-maven-3.3.9 或者 M2_HOME=d:/apache-maven-3.3.9</p><p>path=%MAVEN_HOME%/bin; 或者%M2_HOME%/bin; </p><p>4、 验证是否安装成功: <font color="red">mvn –v </font></p><h2><span id="第2章-maven核心概念重点">第2章 Maven核心概念<font color="red">（重点）</font></span></h2><h3><span id="21-maven-工程约定的目录结构">2.1 Maven 工程约定的目录结构</span></h3><figure class="highlight brainfuck"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs brainfuck"><span class="hljs-comment">maven</span> <span class="hljs-comment">中约定的目录结构：</span> <br><span class="hljs-comment">Hello</span> <br> <span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-comment">src</span> <br> <span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-comment">main</span> <br> <span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-comment">java</span> <br> <span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-comment">resources</span> <br> <span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-comment">test</span> <br> <span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-comment">java</span> <br> <span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-comment">resources</span> <br> <span class="hljs-comment">|</span>--<span class="hljs-literal">-</span><span class="hljs-comment">pom</span><span class="hljs-string">.</span><span class="hljs-comment">xml</span> <br></code></pre></div></td></tr></table></figure><p>说明：Hello:根目录，也就是工程名<br> src：源代码<br> main：主程序<br> java：主程序的 java 源码<br> resources：主程序的配置文件<br> test：测试程序<br> java：测试程序的 java 源码<br> resources：测试程序的配置文件<br> pom.xml：Maven 工程的核心配置文件。 </p><p>一般情况下，我们习惯上采取的措施是：约定&gt;配置&gt;编码</p><p>maven 的 <font color="red">pom.xml </font>记录的<font color="red">关于构建项目的各个方面的设置</font>，maven 从 pom.xml 文件开始，按照助约定的<br>工程目录编译，测试，打包，部署，发布项目。 </p><p><font color="red">pom.xml用于描述项目，记录构建项目的各种设置。</font></p><h3><span id="22-第一个maven工程">2.2 第一个maven工程</span></h3><ol><li>  按约定的目录结构，新建工程。</li><li>  在工程名/src/main/java中new一个java文件并编写java代码。</li><li>  在项目目录下，打开cmd，执行mvn compile命令。</li><li>  进入target/classes 目录，执行 java 全类名 命令。</li></ol><h3><span id="23-pom文件">2.3 POM文件</span></h3><p>即 Project Object Model 项目对象模型。Maven 把一个项目的结构和内容抽象成一个模型，在 xml 文件中进行声明，以方便进行构建和描述，pom.xml 是 Maven 的灵魂。所以，maven 环境搭建好之后，所有的学习和操作都是关于 pom.xml 的。 </p><p><strong>POM常见标签：</strong></p><p><strong>基本信息</strong></p><ol><li>  <font color="blue">modelVersion</font>：Maven 模型的版本，只能是4.0</li><li>  <font color="blue">groupId</font>：组织id，一般是公司域名的倒写或倒写+项目名</li><li>  <font color="blue">artifactId</font>：项目名称，也是模块名称，对应 groupId 中 项目中的子项目。</li><li>  <font color="blue">version</font>：项目的版本号。如果项目还在开发中，是不稳定版本，通常在版本后带-SNAPSHOT ，version 使用<font color="red">三位数字标识</font>，例如 1.1.0</li><li>  <font color="blue">packaging</font>：项目打包的类型，可以使 jar、war、rar、ear、pom，默认是jar</li></ol><p><strong>依赖</strong></p><p><font color="blue">dependencies </font>和<font color="blue">dependency </font>：在Maven 中，引用的 jar 就被称为依赖，使用标签dependency 来配置。而这种依赖的配置正是通过坐标来定位的，由此我们也不难看出，maven 把所有的jar 包也都视为项目存在了。</p><p><strong>配置属性</strong></p><p><font color="blue">properties</font>：properties 是 用 来 定 义 一 些 配 置 属 性 的 ， 例 如project.build.sourceEncoding（项目构建源码编码方式），可以设置为UTF-8，防止中文乱码，也可定义相关构建版本号，便于日后统一升级。</p><p><strong>构建</strong></p><p><font color="blue">build</font>：build 表示与构建相关的配置，例如设置编译插件的 jdk 版本</p><p><strong>继承</strong></p><p><font color="blue">parent</font>：在 Maven 中，如果多个模块都需要声明相同的配置，例如：groupId、version、有相同的依赖、或者相同的组件配置等，也有类似 Java 的继承机制，用parent 声明要继承的父工程的pom 配置。 </p><p><strong>聚合</strong></p><p><font color="blue">modules</font>：在Maven 的多模块开发中，为了统一构建整个项目的所有模块，可以提供一个额外的模块，该模块打包方式为 pom，并且在其中使用 modules 聚合的其它模块，这样通过本模块就可以一键自动识别模块间的依赖关系来构建所有模块，叫Maven 的聚合。 </p><h3><span id="24-坐标">2.4 坐标</span></h3><p><font color="red">groupId 、artifactId 、version 三个元素生成 了一个Maven 项目的基本坐标，坐标能够唯一定位一个项目。</font></p><p>演示：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.wangpeng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ch02-maven-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>SNAPSHOP表示不是正式版，还在开发中。</p><h3><span id="25-依赖">2.5 依赖</span></h3><p>依赖类似导入，把其它的jar加入到项目中</p><p>演示</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--加入Servlet依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--jsp依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="26-仓库">2.6 仓库</span></h3><p>在Maven中，任何一个依赖、插件或者项目构建的输出，都可以称之为构件。maven把所有的构件统一存储在某一个位置，这个位置就叫做仓库。</p><p>仓库是存放东西的，Maven 仓库的是： </p><ol><li>  Maven 的插件，插件也是一些 jar，这些jar 可以完成一定的功能。 </li><li>  我们自己开发项目的模块</li><li>  第三方框架或工具的 jar 包 </li></ol><h3><span id="27-仓库的类别">2.7 仓库的类别</span></h3><p>本地仓库：默认存放在<code>users\系统的用户名\.m2\repository</code>中，你也可以通过Maven的配置文件Maven_home/conf/settings.xml中修改本地仓库所在的目录。 </p><p>远程仓库分为：</p><ol><li>  为全世界范围内的开发人员提供服务的中央仓库</li><li>  为全世界范围内某些特定的用户提供服务的中央仓库镜像</li><li>  为本公司提供服务自己架设的私服</li></ol><p>中央仓库是maven默认的远程仓库，其地址是:<a href="http://repo.maven.apache.org/maven2/">http://repo.maven.apache.org/maven2/</a></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210822170840.png" alt="image-20210822170833863"></p><h3><span id="28-maven-对仓库的使用">2.8 Maven 对仓库的使用</span></h3><p>maven如果需要某些构建，它会自己在仓库中查找，找到则直接使用，找不到则到上一级仓库查找并下载。</p><p>查找顺位：</p><p>本地仓库–&gt;公司私服–&gt;中央仓库镜像–&gt;中央仓库。</p><h3><span id="29-maven的常用命令">2.9 Maven的常用命令</span></h3><p><font color="blue">mvn clean</font> 清理(会删除原来编译和测试的目录，即target 目录，但是已经install 到仓库里的包不会删除) </p><p><font color="blue">mvn compile</font> 编译主程序(会在当前目录下生成一个 target,里边存放编译主程序之后生成的字节码文件) </p><p><font color="blue">mvn test-compile</font>  编译测试程序(会在当前目录下生成一个target,里边存放编译测试程序之后生成的字节码文件) </p><p><font color="blue">mvn test</font> 测试(会生成一个目录surefire-reports，保存测试结果) </p><p><font color="blue">mvn package</font> 打包主程序(会编译、编译测试、测试、并且按照pom.xml 配置把主程序打包生成 jar 包或者war 包) </p><p><font color="blue">mvn install</font> 安装主程序(会把本工程打包，并且按照本工程的坐标保存到本地仓库中) </p><p><font color="blue">mvn deploy</font> 部署主程序(会把本工程打包，按照本工程的坐标保存到本地库中，并且还会保存到私服仓库中。还会自动把项目部署到 web 容器中)。 </p><p><font color="red">注意：执行以上命令必须在命令行进入 pom.xml 所在目录！ </font></p><h3><span id="210-插件">2.10 插件</span></h3><p>Maven构建项目是使用插件来实现的。</p><p>官网插件说明：<a href="http://maven.apache.org/plugins/">http://maven.apache.org/plugins/</a><br>在项目根目录下执行：mvn clean install </p><p><font color="blue">clean 插件 maven-clean-plugin:2.5</font>：clean 阶段是独立的一个阶段，功能就是清除工程目前下的 target 目录 </p><p><font color="blue">resources 插件 maven-resources-plugin:2.6</font>：resource 插件的功能就是把项目需要的配置文件拷贝到指定的目当，默认是拷贝src\main\resources 目录下的件到classes 目录下 </p><p><font color="blue">compile 插件 maven-compiler-plugin</font>：compile 插件执行时先调用resouces 插件，功能就是把src\mainjava 源码编译成字节码生成 class 文件，并把编译好的 class 文件输出到target\classes 目录下 </p><p><font color="blue">test 测试插件</font>：单元测试所用的compile 和resources 插件和主代码是相同的，但执行的目标不行，目标testCompile 和testResources是把 src\test\java 下的代码编译成字节码输出到 target\test-classes，同时把src\test\resources 下的配置文件拷贝到target\test-classes </p><p><font color="blue">package 打包插件 maven-jar-plugin</font>：这个插件是把 class 文件、配置文件打成一个 jar(war 或其它格式)包 </p><p><font color="blue">deploy 发布插件 maven-install-plugin</font>：发布插件的功能就是把构建好的 artifact 部署到本地仓库，还有一个deploy 插件是将构建好的 artifact 部署到远程仓库 </p><p>插件可以在自己的项目中设置，最常使用的是maven 编译插件。设置项目使用的 jdk 版本时通过编译插件指定。<br>pom.xml 文件<code>&lt;build&gt;</code>中设置。 </p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span> <br> <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span> <br> <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span> <br> <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br> <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br> <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <br> <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span> <br> <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span> <br> <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span> <br> <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span> <br> <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span> <br> <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="211-配置阿里云镜像">2.11 配置阿里云镜像</span></h3><p>在settings.xml文件中的mirrors下添加mirror标签</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyunmaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>阿里云公共仓库<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>配置指南：<a href="https://developer.aliyun.com/mvn/guide">仓库服务 (aliyun.com)</a></p><h2><span id="第3章-maven在idea中的应用重点">第3章 Maven在IDEA中的应用<font color="red">（重点）</font></span></h2><h3><span id="31-idea集成maven的设置">3.1 IDEA集成Maven的设置</span></h3><p>设置Maven程序的路径和设置文件的路径</p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210823220628.png" alt="image-20210823220628197" style="zoom: 50%;"><p>以下设置能够加快启动速度。</p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210823220745.png" alt="image-20210823220745010" style="zoom: 50%;"><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">-DarchetypeCatalog</span>=internal<br></code></pre></div></td></tr></table></figure><h3><span id="32-idea-创建-maven-版-java-工程">3.2 IDEA 创建 Maven 版 java 工程</span></h3><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210823220944.png" alt="image-20210823220944737" style="zoom: 50%;"><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210823221111.png" alt="image-20210823221111201" style="zoom: 50%;"><p>next—&gt;finish即可</p><h2><span id="第4章-依赖管理">第4章 依赖管理</span></h2><h3><span id="41-依赖的范围">4.1 依赖的范围</span></h3><p>依赖的范围：compile、test、provided，默认采用 compile</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210823221312.png" alt="image-20210823221312919"></p><h2><span id="第5章-maven常用设置">第5章 Maven常用设置</span></h2><h3><span id="51-全局变量">5.1 全局变量</span></h3><p>在Maven 的pom.xml 文件中，<code>&lt;properties&gt;</code>用于定义全局变量，POM 中通过<code>$&#123;property_name&#125;</code>的形式引用变量的值。<br>定义全局变量： </p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>4.3.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><p>引用全局变量</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> //关注该行<br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><p>Maven 系统采用的变量</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span> 源码编译jdk 版本 <br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span> 运行代码的jdk 版本 <br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span> 项目构建使用的编码，避免中文乱码 <br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span> 生成报告的编码 <br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><p>5.2 指定资源位置</p><p>​    src/main/java 和 src/test/java 这两个目录中的所有*.java 文件会分别在 comile 和 test-comiple 阶段被编译，编译结果分别放到了 target/classes 和targe/test-classes 目录中，但是这两个目录中的其他文件都会被忽略掉，如果需要把 src 目录下的文件包放到target/classes 目录，作为输出的 jar 一部分。需要指定资源文件位置。以下内容放到 <code>&lt;buid&gt;</code>标签中。 </p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><span class="hljs-comment">&lt;!--所在的目录--&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><span class="hljs-comment">&lt;!--包括目录下的.properties,.xml 文件都会扫描到--&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span> <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span> <br>        <span class="hljs-comment">&lt;!-- filtering 选项 false 不启用过滤器， *.property 已经起到过滤的作用了 --&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span> <br></code></pre></div></td></tr></table></figure><h2><span id="补充常见错误">补充：常见错误</span></h2><p><font color="red">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.10:test (default-test) on project web_nanchang: There are test failures.</font></p><p><font color="red">[ERROR]</font></p><p><font color="red">[ERROR] Please refer to E:\maven\web_nanchang\target\surefire-reports for the individual test results.</font></p><p>解决方法：</p><p>这是因为测试代码时遇到错误，它会停止编译。只需要在<a href="http://www.javaw.net/">pom.xml</a>的<code>&lt;project&gt;</code>里添加以下配置，使得测试出错不影响项目的编译。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">testFailureIgnore</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">testFailureIgnore</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>开发工具</tag>
      
      <tag>Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb-12-JSON and Ajax</title>
    <link href="/2021/07/20/JavaWeb-12-JSON%20and%20Ajax/"/>
    <url>/2021/07/20/JavaWeb-12-JSON%20and%20Ajax/</url>
    
    <content type="html"><![CDATA[<h1><span id="json-and-ajax">JSON and Ajax</span></h1><!-- toc --><ul><li><a href="#1-json">1. JSON</a><ul><li><a href="#11-%E4%BB%80%E4%B9%88%E6%98%AFjson">1.1 什么是JSON</a></li><li><a href="#12-json%E5%9C%A8javascript%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8">1.2 JSON在JavaScript中的使用</a><ul><li><a href="#121-json-%E7%9A%84%E5%AE%9A%E4%B9%89">1.2.1 json 的定义</a></li><li><a href="#122-json-%E7%9A%84%E8%AE%BF%E9%97%AE">1.2.2、json 的访问</a></li><li><a href="#123-json-%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95">1.2.3、json 的两个常用方法</a></li></ul></li><li><a href="#13-json%E5%9C%A8java%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8">1.3 JSON在java中的使用</a><ul><li><a href="#131-javabean-%E5%92%8C-json-%E7%9A%84%E4%BA%92%E8%BD%AC">1.3.1 javaBean 和 json 的互转</a></li><li><a href="#132-list-%E5%92%8C-json-%E7%9A%84%E4%BA%92%E8%BD%AC">1.3.2 List 和 json 的互转</a></li><li><a href="#133-map-%E5%92%8C-json-%E7%9A%84%E4%BA%92%E8%BD%AC">1.3.3 map 和 json 的互转</a></li></ul></li></ul></li><li><a href="#2-ajax-%E8%AF%B7%E6%B1%82">2. AJAX 请求</a><ul><li><a href="#21-%E4%BB%80%E4%B9%88%E6%98%AF-ajax-%E8%AF%B7%E6%B1%82">2.1 什么是 AJAX 请求</a></li><li><a href="#22-%E5%8E%9F%E7%94%9F-ajax-%E8%AF%B7%E6%B1%82%E7%9A%84%E7%A4%BA%E4%BE%8B">2.2 原生 AJAX 请求的示例</a></li><li><a href="#23-jquery-%E4%B8%AD%E7%9A%84-ajax-%E8%AF%B7%E6%B1%82">2.3、jQuery 中的 AJAX 请求</a></li></ul></li></ul><!-- tocstop --><h2><span id="1-json">1. JSON</span></h2><h3><span id="11-什么是json">1.1 什么是JSON</span></h3><p>JSON(JavaScriptObject Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。JSON采用完全独立于语言的文本格式，而且很多语言都提供了对 json的支持（包括 C,C++,C#,Java, JavaScript,Perl, Python等）。 这样就使得 JSON成为理想的数据交换格式。</p><p>json是一种轻量级的数据交换格式。</p><p>轻量级指的是跟 xml做比较。</p><p>数据交换指的是客户端和服务器之间业务数据的传递格式。</p><h3><span id="12-json在javascript中的使用">1.2 JSON在JavaScript中的使用</span></h3><h4><span id="121-json-的定义">1.2.1 json 的定义</span></h4><p>json 是由键值对组成，并且由花括号（大括号）包围。每个键由引号引起来，键和值之间使用冒号进行分隔，<br>多组键值对之间进行逗号进行分隔。</p><p>演示：</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">var jsonObj = &#123;<br>    <span class="hljs-attr">&quot;key1&quot;</span>:<span class="hljs-number">12</span>,<br>    <span class="hljs-attr">&quot;key2&quot;</span>:<span class="hljs-string">&quot;abc&quot;</span>,<br>    <span class="hljs-attr">&quot;key3&quot;</span>:<span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">&quot;key4&quot;</span>:[<span class="hljs-number">11</span>,<span class="hljs-string">&quot;arr&quot;</span>,<span class="hljs-literal">false</span>],<br>    <span class="hljs-attr">&quot;key5&quot;</span>:&#123;<br>    <span class="hljs-attr">&quot;key5_1&quot;</span> : <span class="hljs-number">551</span>,<br>    <span class="hljs-attr">&quot;key5_2&quot;</span> : <span class="hljs-string">&quot;key5_2_value&quot;</span><br>&#125;,<br><span class="hljs-attr">&quot;key6&quot;</span>:[&#123;<br>    <span class="hljs-attr">&quot;key6_1_1&quot;</span>:<span class="hljs-number">6611</span>,<br>    <span class="hljs-attr">&quot;key6_1_2&quot;</span>:<span class="hljs-string">&quot;key6_1_2_value&quot;</span><br>&#125;,&#123;<br><br>    <span class="hljs-attr">&quot;key6_2_1&quot;</span>:<span class="hljs-number">6621</span>,<br>    <span class="hljs-attr">&quot;key6_2_2&quot;</span>:<span class="hljs-string">&quot;key6_2_2_value&quot;</span><br>    &#125;]<br>&#125;;<br></code></pre></div></td></tr></table></figure><h4><span id="122-json-的访问">1.2.2、json 的访问</span></h4><p>json 本身是一个对象。<br>json 中的 key 我们可以理解为是对象中的一个属性。</p><p>json 中的 key 访问就跟访问对象的属性一样：json 对象.key</p><p>json 访问示例：</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">alert(typeof(jsonObj));<span class="hljs-comment">// object json 就是一个对象</span><br>alert(jsonObj.key1); <span class="hljs-comment">//12</span><br>alert(jsonObj.key2); <span class="hljs-comment">// abc</span><br>alert(jsonObj.key3); <span class="hljs-comment">// true</span><br>alert(jsonObj.key4);<span class="hljs-comment">// 得到数组[11,&quot;arr&quot;,false]</span><br><span class="hljs-comment">// json 中 数组值的遍历</span><br>for(var i = <span class="hljs-number">0</span>; i &lt; jsonObj.key4.length; i++) &#123;<br>alert(jsonObj.key4[i]);<br>&#125;<br>alert(jsonObj.key5.key5_1);<span class="hljs-comment">//551</span><br>alert(jsonObj.key5.key5_2);<span class="hljs-comment">//key5_2_value</span><br>alert( jsonObj.key6 );<span class="hljs-comment">// 得到 json 数组</span><br><span class="hljs-comment">// 取出来每一个元素都是 json 对象</span><br>var jsonItem = jsonObj.key6[<span class="hljs-number">0</span>];<br><span class="hljs-comment">// alert( jsonItem.key6_1_1 ); //6611</span><br>alert( jsonItem.key6_1_2 ); <span class="hljs-comment">//key6_1_2_value</span><br></code></pre></div></td></tr></table></figure><h4><span id="123-json-的两个常用方法">1.2.3、json 的两个常用方法</span></h4><p>json 的存在有两种形式。<br>一种是：对象的形式存在，我们叫它 json 对象。<br>一种是：字符串的形式存在，我们叫它 json 字符串。</p><p>一般我们要操作 json 中的数据的时候，需要 json 对象的格式。<br>一般我们要在客户端和服务器之间进行数据交换的时候，使用 json 字符串。</p><p>JSON.stringify()        把 json 对象转换成为 json 字符串</p><p>JSON.parse()            把 json 字符串转换成为 json 对象</p><p>演示：</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json"><span class="hljs-comment">// 把 json 对象转换成为 json 字符串</span><br>var jsonObjString = JSON.stringify(jsonObj);<br><br><span class="hljs-comment">// 特别像 Java 中对象的 toString</span><br><br>alert(jsonObjString)<br><span class="hljs-comment">// 把 json 字符串。转换成为 json 对象</span><br>var jsonObj2 = JSON.parse(jsonObjString);<br>alert(jsonObj2.key1);<span class="hljs-comment">// 12</span><br>alert(jsonObj2.key2);<span class="hljs-comment">// abc</span><br></code></pre></div></td></tr></table></figure><h3><span id="13-json在java中的使用">1.3 JSON在java中的使用</span></h3><h4><span id="131-javabean-和-json-的互转">1.3.1 javaBean 和 json 的互转</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.google.gson.Gson;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Person person = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;孙磊&quot;</span>);<br>        Gson gson = <span class="hljs-keyword">new</span> Gson();<br>        <span class="hljs-comment">// toJson 方法可以把 java 对象转换成为 json 字符串</span><br>        String personJsonString = gson.toJson(person);<br>        System.out.println(personJsonString);<br>        <span class="hljs-comment">// fromJson 把 json 字符串转换回 Java 对象</span><br>        <span class="hljs-comment">// 第一个参数是 json 字符串</span><br>        <span class="hljs-comment">// 第二个参数是转换回去的 Java 对象类型</span><br>        Person person1 = gson.fromJson(personJsonString,Person.class);<br>        System.out.println(person1);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4><span id="132-list-和-json-的互转">1.3.2 List 和 json 的互转</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> com.google.gson.Gson;<br><span class="hljs-keyword">import</span> com.google.gson.reflect.TypeToken;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;Person&gt; list1 = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list1.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;孙磊&quot;</span>));<br>        list1.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;王自如&quot;</span>));<br><br>        Gson gson = <span class="hljs-keyword">new</span> Gson();<br><br>        String personListJsonString = gson.toJson(list1);<br>        System.out.println(personListJsonString);<br><br>        List&lt;Person&gt; list2 = gson.fromJson(personListJsonString, <span class="hljs-keyword">new</span> TypeToken&lt;List&lt;Person&gt;&gt;()&#123;&#125;.getType());<br>        System.out.println(list2);<br><br>        Person person = list2.get(<span class="hljs-number">0</span>);<br>        System.out.println(person);<br><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4><span id="133-map-和-json-的互转">1.3.3 map 和 json 的互转</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>    Map&lt;Integer,Person&gt; personMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <br>    personMap.put(<span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> Person(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;国哥好帅&quot;</span>));<br>    personMap.put(<span class="hljs-number">2</span>, <span class="hljs-keyword">new</span> Person(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;康师傅也好帅&quot;</span>));<br>    <br>    Gson gson = <span class="hljs-keyword">new</span> Gson();<br>    <br>    <span class="hljs-comment">// 把 map 集合转换成为 json 字符串</span><br>    String personMapJsonString = gson.toJson(personMap);<br>    System.out.println(personMapJsonString);<br>    <br>    PersonMapType().getType());<br>    Map&lt;Integer,Person&gt; personMap2 = gson.fromJson(personMapJsonString, <span class="hljs-keyword">new</span> TypeToken&lt;HashMap&lt;Integer,Person&gt;&gt;()&#123;&#125;.getType());<br>    System.out.println(personMap2);<br>    <br>    Person p = personMap2.get(<span class="hljs-number">1</span>);<br>    System.out.println(p);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2><span id="2-ajax-请求">2. AJAX 请求</span></h2><h3><span id="21-什么是-ajax-请求">2.1 什么是 AJAX 请求</span></h3><p>AJAX 即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发<br>技术。</p><p>ajax 是一种浏览器通过 js 异步发起请求，局部更新页面的技术。</p><p>Ajax 请求的局部更新，浏览器地址栏不会发生变化<br>局部更新不会舍弃原来页面的内容</p><h3><span id="22-原生-ajax-请求的示例">2.2 原生 AJAX 请求的示例</span></h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>    // 在这里使用 javaScript 语言发起 Ajax 请求，访问服务器 AjaxServlet 中 javaScriptAjax<br>    function ajaxRequest() &#123;<br>            // 1、我们首先要创建 XMLHttpRequest<br>            var xmlhttprequest = new XMLHttpRequest();<br>            // 2、调用 open 方法设置请求参数<br>            xmlhttprequest.open(&quot;GET&quot;,&quot;http://localhost:8080/16_json_ajax_i18n/ajaxServlet?action=javaScriptAj<br>            ax&quot;,true)<br>            // 4、在 send 方法前绑定 onreadystatechange 事件，处理请求完成后的操作。<br>            xmlhttprequest.onreadystatechange = function()&#123;<br>            if (xmlhttprequest.readyState == 4 &amp;&amp; xmlhttprequest.status == 200) &#123;<br>            var jsonObj = JSON.parse(xmlhttprequest.responseText);<br>                // 把响应的数据显示在页面上<br>                document.getElementById(&quot;div01&quot;).innerHTML = &quot;编号：&quot; + jsonObj.id + &quot; , 姓名：&quot; +<br>                jsonObj.name;<br>            &#125;<br>        &#125;<br>        // 3、调用 send 方法发送请求<br>        xmlhttprequest.send();<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>XMLHttpRequest对象的三个重要的属性。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210817154835.png" alt="image-20210817154828544"></p><h3><span id="23-jquery-中的-ajax-请求">2.3、jQuery 中的 AJAX 请求</span></h3><p><code>$.ajax </code>方法<br>url             表示请求的地址<br>type         表示请求的类型 GET 或 POST 请求<br>data         表示发送给服务器的数据</p><p><strong>格式有两种：</strong><br>        <strong>一：name=value&amp;name=value</strong><br>        <strong>二：{key:value}</strong></p><p>success                 请求成功，响应的回调函数<br>dataType             响应的数据类型<br>                            常用的数据类型有：<br>                            text 表示纯文本<br>                            xml 表示 xml 数据<br>                            json 表示 json 对象</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#ajaxBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $.ajax(&#123;<br>        <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;http://localhost:8080/16_json_ajax_i18n/ajaxServlet&quot;</span>,<br>        <span class="hljs-attr">data</span>:&#123;<span class="hljs-attr">action</span>:<span class="hljs-string">&quot;jQueryAjax&quot;</span>&#125;,<br>        <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;GET&quot;</span>,<br>        <span class="hljs-attr">success</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>            $(<span class="hljs-string">&quot;#msg&quot;</span>).html(<span class="hljs-string">&quot;编号：&quot;</span> + data.id + <span class="hljs-string">&quot; , 姓名：&quot;</span> + data.name);<br>        &#125;,<br>        <span class="hljs-attr">dataType</span> : <span class="hljs-string">&quot;json&quot;</span><br>    &#125;);<br>&#125;);<br></code></pre></div></td></tr></table></figure><p><code>$.get</code> 方法和<code>$.post</code> 方法<br>url                 请求的url 地址<br>data             发送的数据<br>callback     成功的回调函数<br>type             返回的数据类型</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// ajax--get 请求</span><br>$(<span class="hljs-string">&quot;#getBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $.get(<span class="hljs-string">&quot;http://localhost:8080/16_json_ajax_i18n/ajaxServlet&quot;</span>,<span class="hljs-string">&quot;action=jQueryGet&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>        $(<span class="hljs-string">&quot;#msg&quot;</span>).html(<span class="hljs-string">&quot; get 编号：&quot;</span> + data.id + <span class="hljs-string">&quot; , 姓名：&quot;</span> + data.name);<br>    &#125;,<span class="hljs-string">&quot;json&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// ajax--post 请求</span><br>$(<span class="hljs-string">&quot;#postBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $.post(<span class="hljs-string">&quot;http://localhost:8080/16_json_ajax_i18n/ajaxServlet&quot;</span>,<span class="hljs-string">&quot;action=jQueryPost&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>)</span><br><span class="hljs-function">    </span>&#123;<br>        $(<span class="hljs-string">&quot;#msg&quot;</span>).html(<span class="hljs-string">&quot; post 编号：&quot;</span> + data.id + <span class="hljs-string">&quot; , 姓名：&quot;</span> + data.name);<br>    &#125;,<span class="hljs-string">&quot;json&quot;</span>);<br>&#125;);<br></code></pre></div></td></tr></table></figure><p><code>$.getJSON</code>方法</p><p>url                请求的 url 地址</p><p>data            发送给服务器的数据</p><p>callback        成功的回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// ajax--getJson 请求</span><br>$(<span class="hljs-string">&quot;#getJSONBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $.getJSON(<span class="hljs-string">&quot;http://localhost:8080/16_json_ajax_i18n/ajaxServlet&quot;</span>,<span class="hljs-string">&quot;action=jQueryGetJSON&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span></span><br><span class="hljs-function">    (<span class="hljs-params">data</span>) </span>&#123;<br>    $(<span class="hljs-string">&quot;#msg&quot;</span>).html(<span class="hljs-string">&quot; getJSON 编号：&quot;</span> + data.id + <span class="hljs-string">&quot; , 姓名：&quot;</span> + data.name);<br>    &#125;);<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>表单序列化 serialize()<br>serialize()可以把表单中<strong>所有表单项的内容都获取到，并以 name=value&amp;name=value 的形式进行拼接</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// ajax 请求</span><br>$(<span class="hljs-string">&quot;#submit&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 把参数序列化</span><br>    $.getJSON(<span class="hljs-string">&quot;http://localhost:8080/16_json_ajax_i18n/ajaxServlet&quot;</span>,<span class="hljs-string">&quot;action=jQuerySerialize&amp;&quot;</span> + $(<span class="hljs-string">&quot;#form01&quot;</span>).serialize(),<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>    $(<span class="hljs-string">&quot;#msg&quot;</span>).html(<span class="hljs-string">&quot; Serialize 编号：&quot;</span> + data.id + <span class="hljs-string">&quot; , 姓名：&quot;</span> + data.name);<br>    &#125;);<br>&#125;);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaWeb</tag>
      
      <tag>JSON</tag>
      
      <tag>Ajax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb-11-Filter and ThreadLocal</title>
    <link href="/2021/07/20/JavaWeb-11-Filter%20and%20ThreadLocal/"/>
    <url>/2021/07/20/JavaWeb-11-Filter%20and%20ThreadLocal/</url>
    
    <content type="html"><![CDATA[<h1><span id="filter-and-threadlocal">Filter and ThreadLocal</span></h1><!-- toc --><ul><li><a href="#1-filter%E4%BB%8B%E7%BB%8D">1. Filter介绍</a></li><li><a href="#2-filter-%E7%9A%84%E5%88%9D%E4%BD%93%E9%AA%8C">2. Filter 的初体验</a><ul><li><a href="#%E5%AE%8C%E6%95%B4%E7%9A%84%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95">完整的用户登录</a></li></ul></li><li><a href="#3-filter-%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">3. Filter 的生命周期</a></li><li><a href="#4-filterconfig-%E7%B1%BB">4. FilterConfig 类</a></li><li><a href="#5-filterchain-%E8%BF%87%E6%BB%A4%E5%99%A8%E9%93%BE">5. FilterChain 过滤器链</a></li><li><a href="#6-filter-%E7%9A%84%E6%8B%A6%E6%88%AA%E8%B7%AF%E5%BE%84">6. Filter 的拦截路径</a><ul><li><a href="#-%E7%B2%BE%E7%A1%AE%E5%8C%B9%E9%85%8D">–精确匹配</a></li><li><a href="#-%E7%9B%AE%E5%BD%95%E5%8C%B9%E9%85%8D">–目录匹配</a></li><li><a href="#-%E5%90%8E%E7%BC%80%E5%90%8D%E5%8C%B9%E9%85%8D">–后缀名匹配</a></li></ul></li><li><a href="#7-threadlocal-%E7%9A%84%E4%BD%BF%E7%94%A8">7. ThreadLocal 的使用</a></li><li><a href="#8-%E4%BD%BF%E7%94%A8-filter-%E5%92%8C-threadlocal-%E7%BB%84%E5%90%88%E7%AE%A1%E7%90%86%E4%BA%8B%E5%8A%A1">8. 使用 Filter 和 ThreadLocal 组合管理事务</a><ul><li><a href="#81-%E4%BD%BF%E7%94%A8threadlocal">8.1 使用ThreadLocal</a></li><li><a href="#82-%E4%BD%BF%E7%94%A8filter%E8%BF%87%E6%BB%A4%E5%99%A8">8.2 使用Filter过滤器</a></li><li><a href="#83-%E5%B0%86%E6%89%80%E6%9C%89%E5%BC%82%E5%B8%B8%E9%83%BD%E7%BB%9F%E4%B8%80%E4%BA%A4%E7%BB%99-tomcat%E8%AE%A9-tomcat-%E5%B1%95%E7%A4%BA%E5%8F%8B%E5%A5%BD%E7%9A%84%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%E9%A1%B5%E9%9D%A2">8.3 将所有异常都统一交给 Tomcat，让 Tomcat 展示友好的错误信息页面。</a></li></ul></li></ul><!-- tocstop --><h2><span id="1-filter介绍">1. Filter介绍</span></h2><p>1、Filter 过滤器它是 JavaWeb 的三大组件之一。三大组件分别是：<strong>Servlet 程序、Listener 监听器、Filter 过滤器</strong><br>2、Filter 过滤器它是 JavaEE 的规范（接口）。<br>3、Filter 过滤器它的作用是：拦截请求，过滤响应。</p><p>拦截请求常见的应用场景有：<br>1、权限检查<br>2、日记操作<br>3、事务管理<br>……等等</p><h2><span id="2-filter-的初体验">2. Filter 的初体验</span></h2><p>要求：在你的 web 工程下，有一个 admin 目录。这个 admin 目录下的所有资源（html 页面、jpg 图片、jsp 文件、等等）都必<br>须是用户登录之后才允许访问。</p><p>思考：根据之前我们学过内容。我们知道，用户登录之后都会把用户登录的信息保存到 Session 域中。所以要检查用户是否<br>登录，可以判断 Session 中否包含有用户登录的信息即可！！！</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%<br>    Object user = session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br>    <span class="hljs-comment">// 如果等于 null，说明还没有登录</span><br>    <span class="hljs-keyword">if</span> (user == <span class="hljs-keyword">null</span>) &#123;<br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(request,response);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>%&gt;<br></code></pre></div></td></tr></table></figure><p>Filter 的工作流程图：</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210816221453.png" alt="image-20210816221446438"></p><p>web.xml 中的配置：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--filter 标签用于配置一个 Filter 过滤器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--给 filter 起一个别名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>AdminFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置 filter 的全类名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.atguigu.filter.AdminFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-comment">&lt;!--filter-mapping 配置 Filter 过滤器的拦截路径--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--filter-name 表示当前的拦截路径给哪个 filter使用--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>AdminFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br><span class="hljs-comment">&lt;!--url-pattern 配置拦截路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/admin/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><code>/admin/* 表示请求地址为：http://ip:port/工程路径/admin/*</code></p><p>Filter 的代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdminFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * doFilter 方法，专门用于拦截请求。可以做权限检查</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain</span></span><br><span class="hljs-params"><span class="hljs-function">    filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        HttpServletRequest req = (HttpServletRequest) servletRequest;<br>        HttpServletResponse resp = (HttpServletResponse) servletResponse;<br>        <br>        User user = (User) req.getSession().getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-comment">// 如果等于 null，说明还没有登录</span><br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-keyword">null</span>) &#123;<br>            req.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(req,resp);<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 让程序继续往下访问用户的目标资源</span><br>            filterChain.doFilter(servletRequest,servletResponse);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>Filter 过滤器的使用步骤：<br>1、编写一个类去实现 Filter 接口<br>2、实现过滤方法 doFilter()<br>3、到 web.xml 中去配置 Filter 的拦截路径</p><h3><span id="完整的用户登录">完整的用户登录</span></h3><p>login.jsp 页面 == 登录表单</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">这是登录页面。login.jsp 页面 &lt;br&gt;<br>&lt;form action=<span class="hljs-string">&quot;http://localhost:8080/15_filter/loginServlet&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>    用户名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>/&gt; &lt;br&gt;<br>    密 码：&lt;input type=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>/&gt; &lt;br&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> /&gt;<br>&lt;/form&gt;<br></code></pre></div></td></tr></table></figure><p>LoginServlet 程序</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponseresp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        resp.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>        String username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        String password = req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        <br>        <span class="hljs-keyword">if</span> (username.equals(<span class="hljs-string">&quot;wzg168&quot;</span>) &amp;&amp; password.equals(<span class="hljs-string">&quot;123456&quot;</span>)) &#123;<br>            req.getSession().setAttribute(<span class="hljs-string">&quot;user&quot;</span>,username);<br>            resp.getWriter().write(<span class="hljs-string">&quot;登录 成功！！！&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>        req.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(req,resp);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2><span id="3-filter-的生命周期">3. Filter 的生命周期</span></h2><p>Filter 的生命周期包含几个方法<br>1、构造器方法</p><p>2、init 初始化方法<br>    第 1，2 步，在 web 工程启动的时候执行（Filter 已经创建）</p><p>3、doFilter 过滤方法<br>    第 3 步，每次拦截到请求，就会执行</p><p>4、destroy 销毁<br>    第 4 步，停止 web 工程的时候，就会执行（停止 web 工程，也会销毁 Filter 过滤器）</p><h2><span id="4-filterconfig-类">4. FilterConfig 类</span></h2><p>FilterConfig 类见名知义，它是 Filter 过滤器的配置文件类。<br>Tomcat 每次创建 Filter 的时候，也会同时创建一个 FilterConfig 类，这里包含了 Filter 配置文件的配置信息。</p><p>FilterConfig 类的作用是获取 filter 过滤器的配置内容<br>1、获取 Filter 的名称 filter-name 的内容<br>2、获取在 Filter 中配置的 init-param 初始化参数<br>3、获取 ServletContext 对象</p><p>java 代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;2.Filter 的 init(FilterConfig filterConfig)初始化&quot;</span>);<br>    <span class="hljs-comment">// 1、获取 Filter 的名称 filter-name 的内容</span><br>    System.out.println(<span class="hljs-string">&quot;filter-name 的值是：&quot;</span> + filterConfig.getFilterName());<br>    <span class="hljs-comment">// 2、获取在 web.xml 中配置的 init-param 初始化参数</span><br>    System.out.println(<span class="hljs-string">&quot;初始化参数 username 的值是：&quot;</span> + filterConfig.getInitParameter(<span class="hljs-string">&quot;username&quot;</span>));<br>    System.out.println(<span class="hljs-string">&quot;初始化参数 url 的值是：&quot;</span> + filterConfig.getInitParameter(<span class="hljs-string">&quot;url&quot;</span>));<br>    <span class="hljs-comment">// 3、获取 ServletContext 对象</span><br>    System.out.println(filterConfig.getServletContext());<br>&#125;<br></code></pre></div></td></tr></table></figure><p>web.xml 配置：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--filter 标签用于配置一个 Filter 过滤器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--给 filter 起一个别名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>AdminFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置 filter 的全类名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.atguigu.filter.AdminFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>username<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>url<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>jdbc:mysql://localhost3306/test<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2><span id="5-filterchain-过滤器链">5. FilterChain 过滤器链</span></h2><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210816222701.png" alt="image-20210816222701388"></p><p>过滤地址是Filter</p><h2><span id="6-filter-的拦截路径">6. Filter 的拦截路径</span></h2><h3><span id="精确匹配">–精确匹配</span></h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/target.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>以上配置的路径，表示请求地址必须为：<a href="http://ip:port/工程路径/target.jsp">http://ip:port/工程路径/target.jsp</a></p><h3><span id="目录匹配">–目录匹配</span></h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/admin/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>以上配置的路径，表示请求地址必须为：<a href="http://ip:port/工程路径/admin/">http://ip:port/工程路径/admin/</a>*</p><h3><span id="后缀名匹配">–后缀名匹配</span></h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.html<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>以上配置的路径，表示请求地址必须以.html 结尾才会拦截到<br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.do<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>以上配置的路径，表示请求地址必须以.do 结尾才会拦截到<br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.action<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>以上配置的路径，表示请求地址必须以.action 结尾才会拦截到<br></code></pre></div></td></tr></table></figure><p>Filter 过滤器它只关心请求的地址是否匹配，不关心请求的资源是否存在！！！</p><h2><span id="7-threadlocal-的使用">7. ThreadLocal 的使用</span></h2><p>ThreadLocal 的作用，它可以解决多线程的数据安全问题。</p><p>ThreadLocal 它可以给当前线程关联一个数据（可以是普通变量，可以是对象，也可以是数组，集合）</p><p>ThreadLocal 的特点：</p><ol><li>  ThreadLocal 可以为当前线程关联一个数据。（它可以像 Map 一样存取数据，key 为当前线程）</li><li>  每一个 ThreadLocal 对象，只能为当前线程关联一个数据，如果要为当前线程关联多个数据，就需要使用多个ThreadLocal 对象实例。</li><li>  每个 ThreadLocal 对象实例定义的时候，一般都是 static 类型</li><li>  ThreadLocal 中保存数据，在线程销毁后。会由 JVM 虚拟自动释放。</li></ol><p>原理：</p><p>ThreadLocal本质上就是一个map来关联，key是当前线程的线程名（Thread.currentThread().getName()），value是自己存的数据。</p><p>因为key已经帮你写好是线程名了，所以使用的时候就不需要key的参数了。</p><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadLocalTest</span> </span>&#123;<br><span class="hljs-comment">// public static Map&lt;String,Object&gt; data = new Hashtable&lt;String,Object&gt;();</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;Object&gt; threadLocal = <span class="hljs-keyword">new</span> ThreadLocal&lt;Object&gt;();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Random random = <span class="hljs-keyword">new</span> Random();<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Task</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>        <span class="hljs-meta">@Override</span> <br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-comment">// 在 Run 方法中，随机生成一个变量（线程要关联的数据），然后以当前线程名为 key 保存到 map 中</span><br>            Integer i = random.nextInt(<span class="hljs-number">1000</span>);<br>            <span class="hljs-comment">// 获取当前线程名</span><br>            String name = Thread.currentThread().getName();<br>            System.out.println(<span class="hljs-string">&quot;线程[&quot;</span>+name+<span class="hljs-string">&quot;]生成的随机数是：&quot;</span> + i);<br>            <span class="hljs-comment">// data.put(name,i);</span><br>            threadLocal.set(i);<br>            <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">3000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">new</span> OrderService().createOrder();<br>            <span class="hljs-comment">// 在 Run 方法结束之前，以当前线程名获取出数据并打印。查看是否可以取出操作</span><br>            <span class="hljs-comment">// Object o = data.get(name);</span><br>            Object o = threadLocal.get();<br>            System.out.println(<span class="hljs-string">&quot;在线程[&quot;</span>+name+<span class="hljs-string">&quot;]快结束时取出关联的数据是：&quot;</span> + o);<br>&#125;<br>&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>            <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Task()).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2><span id="8-使用-filter-和-threadlocal-组合管理事务">8. 使用 Filter 和 ThreadLocal 组合管理事务</span></h2><h3><span id="81-使用threadlocal">8.1 使用ThreadLocal</span></h3><p>使用事务管理来包裹订单功能，因为订单功能很明显就是要么全做要么全不做的需要事务管理的功能。</p><p>要使用事务管理，就需要所有的操作都使用同一个Connection对象，所以我们可以用ThreadLocal来管理。</p><p>ThreadLocal需要使用同一个线程，显然没有问题。</p><p>注意事务管理包裹的是最外层Servlet层的内容，里层的错误一层一层往外抛，统一管理。</p><p>代码改动：</p><p>JdbcUtils里改动，添加ThreadLocal来绑定线程。</p><p>这样有三种操作：</p><ol><li>  获取连接：如果ThreadLocal对象里有该线程的连接，就返回；否则new一个线程，绑定线程Local，然后返回。</li><li>  提交事务并关闭：提交事务，获取当前线程的连接，给他关闭，记得解绑。</li><li>  回滚事务并关闭：回滚事务，获取当前线程的连接，给他关闭，记得解绑。</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.utils;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;<br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JdbcUtils</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DruidDataSource dataSource;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;Connection&gt; conns = <span class="hljs-keyword">new</span> ThreadLocal&lt;Connection&gt;();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Properties properties = <span class="hljs-keyword">new</span> Properties();<br>            <span class="hljs-comment">//读取jdbc.properties属性配置文件</span><br>            InputStream inputStream = JdbcUtils.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;jdbc.properties&quot;</span>);<br>            <span class="hljs-comment">//从流中加载数据</span><br>            properties.load(inputStream);<br>            dataSource = (DruidDataSource) DruidDataSourceFactory.createDataSource(properties);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取数据库连接池中的连接</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果返回null，说明获取连接失败，有值就是获取连接成功</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> </span>&#123;<br>        Connection conn = conns.get();<br>        <span class="hljs-keyword">if</span>(conn == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn = dataSource.getConnection();  <span class="hljs-comment">//从数据库连接池中获取连接</span><br>                conns.set(conn);    <span class="hljs-comment">//保存到ThreadLocal对象中，供后买你的jdbc操作使用</span><br>                conn.setAutoCommit(<span class="hljs-keyword">false</span>);  <span class="hljs-comment">//设置为手动管理事务</span><br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> conn;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 提交事务并关闭释放连接</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">commitAndClose</span><span class="hljs-params">()</span> </span>&#123;<br>        Connection connection = conns.get();<br>        <span class="hljs-keyword">if</span>(connection != <span class="hljs-keyword">null</span>) &#123;    <span class="hljs-comment">//如果不等于null，说明之前使用过连接，操作过数据库</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                connection.commit();    <span class="hljs-comment">//提交事务</span><br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    connection.close(); <span class="hljs-comment">//关闭连接，释放资源</span><br>                &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                    throwables.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>        conns.remove(); <span class="hljs-comment">//ThradLocal的解绑（因为Tomcat服务器底层使用了线程池技术）</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 回滚事务并关闭释放连接</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rollbackAndClose</span><span class="hljs-params">()</span> </span>&#123;<br>        Connection connection = conns.get();<br>        <span class="hljs-keyword">if</span>(connection != <span class="hljs-keyword">null</span>) &#123;    <span class="hljs-comment">//如果不等于null，说明之前使用过连接，操作过数据库</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                connection.rollback();    <span class="hljs-comment">//回滚事务</span><br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    connection.close(); <span class="hljs-comment">//关闭连接，释放资源</span><br>                &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                    throwables.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>        conns.remove(); <span class="hljs-comment">//ThradLocal的解绑，否则就会出错（因为Tomcat服务器底层使用了线程池技术）</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 关闭连接，放回数据库连接池</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> conn</span><br><span class="hljs-comment">     */</span><br><span class="hljs-comment">/*    public static void close(Connection conn) &#123;</span><br><span class="hljs-comment">        if(conn != null) &#123;</span><br><span class="hljs-comment">            try &#123;</span><br><span class="hljs-comment">                conn.close();</span><br><span class="hljs-comment">            &#125; catch (SQLException throwables) &#123;</span><br><span class="hljs-comment">                throwables.printStackTrace();</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;*/</span><br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.dao.impl;<br><br><span class="hljs-keyword">import</span> com.wangpeng.pojo.User;<br><span class="hljs-keyword">import</span> com.wangpeng.utils.JdbcUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.QueryRunner;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.ScalarHandler;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseDao</span> </span>&#123;<br>    <span class="hljs-comment">//使用DbUtils操作数据库</span><br>    <span class="hljs-keyword">private</span> QueryRunner queryRunner = <span class="hljs-keyword">new</span> QueryRunner();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * update()方法用来执行：Insert\Update\Delete语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果返回-1，说明执行失败，返回其他表示影响的行数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(String sql, Object ... args)</span> </span>&#123;<br>        Connection conn = JdbcUtils.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> queryRunner.update(conn,sql,args);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(throwables);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询返回一个javaBean的sql语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type 返回的对象类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sql 执行的sql语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args sql对应的参数值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt; 返回的类型的泛型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt;<span class="hljs-function">T <span class="hljs-title">queryForOne</span><span class="hljs-params">(Class&lt;T&gt; type, String sql, Object ... args)</span> </span>&#123;<br>        Connection conn = JdbcUtils.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> queryRunner.query(conn,sql, <span class="hljs-keyword">new</span> BeanHandler&lt;T&gt;(type), args);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(throwables);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询返回多个javaBean的sql语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type 返回的对象类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sql 执行的sql语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args sql对应的参数值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt; 返回的类型的泛型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">List&lt;T&gt; <span class="hljs-title">queryForList</span><span class="hljs-params">(Class&lt;T&gt; type, String sql, Object ... args)</span> </span>&#123;<br>        Connection conn = JdbcUtils.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> queryRunner.query(conn, sql, <span class="hljs-keyword">new</span> BeanListHandler&lt;T&gt;(type), args);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(throwables);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 执行返回一行一列的sql语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sql 执行的sql语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args sql对应的参数值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">queryForSingleValue</span><span class="hljs-params">(String sql, Object ... args)</span> </span>&#123;<br>        Connection conn = JdbcUtils.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> queryRunner.query(conn, sql, <span class="hljs-keyword">new</span> ScalarHandler(), args);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(throwables);<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>BaseDao中所有的数据库操作都不能关闭连接，并且产生的异常需要往外抛。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.dao.impl;<br><br><span class="hljs-keyword">import</span> com.wangpeng.pojo.User;<br><span class="hljs-keyword">import</span> com.wangpeng.utils.JdbcUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.QueryRunner;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.ScalarHandler;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseDao</span> </span>&#123;<br>    <span class="hljs-comment">//使用DbUtils操作数据库</span><br>    <span class="hljs-keyword">private</span> QueryRunner queryRunner = <span class="hljs-keyword">new</span> QueryRunner();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * update()方法用来执行：Insert\Update\Delete语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果返回-1，说明执行失败，返回其他表示影响的行数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(String sql, Object ... args)</span> </span>&#123;<br>        Connection conn = JdbcUtils.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> queryRunner.update(conn,sql,args);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(throwables);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询返回一个javaBean的sql语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type 返回的对象类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sql 执行的sql语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args sql对应的参数值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt; 返回的类型的泛型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt;<span class="hljs-function">T <span class="hljs-title">queryForOne</span><span class="hljs-params">(Class&lt;T&gt; type, String sql, Object ... args)</span> </span>&#123;<br>        Connection conn = JdbcUtils.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> queryRunner.query(conn,sql, <span class="hljs-keyword">new</span> BeanHandler&lt;T&gt;(type), args);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(throwables);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询返回多个javaBean的sql语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> type 返回的对象类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sql 执行的sql语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args sql对应的参数值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt; 返回的类型的泛型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">List&lt;T&gt; <span class="hljs-title">queryForList</span><span class="hljs-params">(Class&lt;T&gt; type, String sql, Object ... args)</span> </span>&#123;<br>        Connection conn = JdbcUtils.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> queryRunner.query(conn, sql, <span class="hljs-keyword">new</span> BeanListHandler&lt;T&gt;(type), args);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(throwables);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 执行返回一行一列的sql语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sql 执行的sql语句</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args sql对应的参数值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">queryForSingleValue</span><span class="hljs-params">(String sql, Object ... args)</span> </span>&#123;<br>        Connection conn = JdbcUtils.getConnection();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> queryRunner.query(conn, sql, <span class="hljs-keyword">new</span> ScalarHandler(), args);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(throwables);<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>在Sevlet中包裹相关代码。</p><h3><span id="82-使用filter过滤器">8.2 使用Filter过滤器</span></h3><p>对相关的Servlet给他加一层过滤器，自定义Filter类中的doFilter方法调用filterChain.doFilter(servletRequest,servletResponse);</p><p>也就间接调用了Servlet中的方法。这样有问题都会抛到Filter类中去处理，我们就在Filter中给他提交事务和回滚事务。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.dao.filter;<br><br><span class="hljs-keyword">import</span> com.wangpeng.utils.JdbcUtils;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TransactionFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;&#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            filterChain.doFilter(servletRequest,servletResponse);<br>            JdbcUtils.commitAndClose(); <span class="hljs-comment">//提交事务</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            JdbcUtils.rollbackAndClose();   <span class="hljs-comment">//回滚事务</span><br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);  <span class="hljs-comment">//把异常抛给Tomcat服务器</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>注意把异常抛给Tomcat服务器，我们可以在8.3做错误提示的功能。</p><p>xml中的配置</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>TransactionFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.wangpeng.dao.filter.TransactionFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>TransactionFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--/*表示当前工程下所有请求--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>注意BaseServlet的异常也需要往外抛</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.web;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doPost(req,resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        resp.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br>        String action = req.getParameter(<span class="hljs-string">&quot;action&quot;</span>);<br>        <span class="hljs-comment">//通过反射调用对应方法</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Method method = <span class="hljs-keyword">this</span>.getClass().getDeclaredMethod(action, HttpServletRequest.class, HttpServletResponse.class);<br>            method.invoke(<span class="hljs-keyword">this</span>, req, resp);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);  <span class="hljs-comment">//把异常抛给Filter过滤器</span><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>因为Filter、BaseServlet和OrderServlet的内外层关系是。</p><p>Filter–&gt;BaseServlet–&gt;OrderServlet</p><h3><span id="83-将所有异常都统一交给-tomcat让-tomcat-展示友好的错误信息页面">8.3 将所有异常都统一交给 Tomcat，让 Tomcat 展示友好的错误信息页面。</span></h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--服务器出错之后，自动跳转的页面--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">error-page</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">error-code</span>&gt;</span>500<span class="hljs-tag">&lt;/<span class="hljs-name">error-code</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">location</span>&gt;</span>/pages/error/error500.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">location</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">error-page</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">error-page</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">error-code</span>&gt;</span>404<span class="hljs-tag">&lt;/<span class="hljs-name">error-code</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">location</span>&gt;</span>/pages/error/error404.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">location</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">error-page</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaWeb</tag>
      
      <tag>Filter</tag>
      
      <tag>ThreadLocal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb-10-Cookie and Session</title>
    <link href="/2021/07/20/JavaWeb-10-Cookie%20and%20Session/"/>
    <url>/2021/07/20/JavaWeb-10-Cookie%20and%20Session/</url>
    
    <content type="html"><![CDATA[<h1><span id="cookie-和-session">Cookie 和 Session</span></h1><!-- toc --><ul><li><a href="#1-cookie">1. Cookie</a><ul><li><a href="#11-%E4%BB%80%E4%B9%88%E6%98%AF-cookie">1.1 什么是 Cookie?</a></li><li><a href="#12-%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA-cookie">1.2 如何创建 Cookie</a></li><li><a href="#13-%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96-cookie">1.3 服务器如何获取 Cookie</a></li><li><a href="#14-cookie-%E5%80%BC%E7%9A%84%E4%BF%AE%E6%94%B9">1.4 Cookie 值的修改</a></li><li><a href="#%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9F%A5%E7%9C%8B-cookie">浏览器查看 Cookie</a></li><li><a href="#15-cookie-%E7%94%9F%E5%91%BD%E6%8E%A7%E5%88%B6">1.5 Cookie 生命控制</a></li><li><a href="#16-cookie-%E6%9C%89%E6%95%88%E8%B7%AF%E5%BE%84-path-%E7%9A%84%E8%AE%BE%E7%BD%AE">1.6 Cookie 有效路径 Path 的设置</a></li><li><a href="#17-cookie-%E7%BB%83%E4%B9%A0-%E5%85%8D%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%E7%99%BB%E5%BD%95">1.7 Cookie 练习—免输入用户名登录</a></li></ul></li><li><a href="#2-session-%E4%BC%9A%E8%AF%9D">2. Session 会话</a><ul><li><a href="#21-%E4%BB%80%E4%B9%88%E6%98%AF-session-%E4%BC%9A%E8%AF%9D">2.1 什么是 Session 会话?</a></li><li><a href="#22-%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA-session-%E5%92%8C%E8%8E%B7%E5%8F%96id-%E5%8F%B7%E6%98%AF%E5%90%A6%E4%B8%BA%E6%96%B0">2.2 如何创建 Session 和获取(id 号,是否为新)</a></li><li><a href="#23-session-%E5%9F%9F%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%8F%96">2.3 Session 域数据的存取</a></li><li><a href="#24-session-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%8E%A7%E5%88%B6">2.4 Session 生命周期控制</a></li><li><a href="#25-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%92%8C-session-%E4%B9%8B%E9%97%B4%E5%85%B3%E8%81%94%E7%9A%84%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95">2.5 浏览器和 Session 之间关联的技术内幕</a></li></ul></li></ul><!-- tocstop --><h2><span id="1-cookie">1. Cookie</span></h2><h3><span id="11-什么是-cookie">1.1 什么是 Cookie?</span></h3><p>1、Cookie 翻译过来是饼干的意思。<br>2、Cookie 是服务器通知客户端保存键值对的一种技术。<br>3、客户端有了 Cookie 后，每次请求都发送给服务器。<br>4、每个 Cookie 的大小不能超过 4kb</p><h3><span id="12-如何创建-cookie">1.2 如何创建 Cookie</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210811220033.png" alt="image-20210811220033792"></p><p>Servlet 程序中的代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JAVA"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">createCookie</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException,</span><br><span class="hljs-function">IOException </span>&#123;<br>    <span class="hljs-comment">//1 创建 Cookie 对象</span><br>    Cookie cookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;key4&quot;</span>, <span class="hljs-string">&quot;value4&quot;</span>);<br>    <span class="hljs-comment">//2 通知客户端保存 Cookie</span><br>    resp.addCookie(cookie);<br>    <span class="hljs-comment">//1 创建 Cookie 对象</span><br>    Cookie cookie1 = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;key5&quot;</span>, <span class="hljs-string">&quot;value5&quot;</span>);<br>    <span class="hljs-comment">//2 通知客户端保存 Cookie</span><br>    resp.addCookie(cookie1);<br>    resp.getWriter().write(<span class="hljs-string">&quot;Cookie 创建成功&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3><span id="13-服务器如何获取-cookie">1.3 服务器如何获取 Cookie</span></h3><p>服务器获取客户端的 Cookie 只需要一行代码：req.getCookies():Cookie[]</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210811220247.png" alt="image-20210811220247839"></p><p>Cookie 的工具类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CookieUtils</span> </span>&#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 查找指定名称的 Cookie 对象</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> cookies</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Cookie <span class="hljs-title">findCookie</span><span class="hljs-params">(String name , Cookie[] cookies)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (name == <span class="hljs-keyword">null</span> || cookies == <span class="hljs-keyword">null</span> || cookies.length == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br>    <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>        <span class="hljs-keyword">if</span> (name.equals(cookie.getName())) &#123;<br>            <span class="hljs-keyword">return</span> cookie;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>            <span class="hljs-keyword">if</span> (name.equals(cookie.getName())) &#123;<br>                <span class="hljs-keyword">return</span> cookie;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>Servlet 程序中的代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Cookie iWantCookie = CookieUtils.findCookie(<span class="hljs-string">&quot;key1&quot;</span>, cookies);<br><span class="hljs-keyword">if</span> (iWantCookie != <span class="hljs-keyword">null</span>) &#123;<br>resp.getWriter().write(<span class="hljs-string">&quot;找到了需要的 Cookie&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3><span id="14-cookie-值的修改">1.4 Cookie 值的修改</span></h3><p>方案一：<br>1、先创建一个要修改的同名（指的就是 key）的 Cookie 对象<br>2、在构造器，同时赋于新的 Cookie 值。<br>3、调用 response.addCookie( Cookie );</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Cookie cookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;key1&quot;</span>,<span class="hljs-string">&quot;newValue1&quot;</span>);<br>resp.addCookie(cookie);<br></code></pre></div></td></tr></table></figure><p>方案二：<br>1、先查找到需要修改的 Cookie 对象<br>2、调用 setValue()方法赋于新的 Cookie 值。<br>3、调用 response.addCookie()通知客户端保存修改</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 方案二：</span><br><span class="hljs-comment">// 1、先查找到需要修改的 Cookie 对象</span><br>Cookie cookie = CookieUtils.findCookie(<span class="hljs-string">&quot;key2&quot;</span>, req.getCookies());<br><span class="hljs-keyword">if</span> (cookie != <span class="hljs-keyword">null</span>) &#123;<br>    <span class="hljs-comment">// 2、调用 setValue()方法赋于新的 Cookie 值。</span><br>    cookie.setValue(<span class="hljs-string">&quot;newValue2&quot;</span>);<br>    <span class="hljs-comment">// 3、调用 response.addCookie()通知客户端保存修改</span><br>    resp.addCookie(cookie);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3><span id="浏览器查看-cookie">浏览器查看 Cookie</span></h3><p>谷歌浏览器如何查看 Cookie</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210811221627.png" alt="image-20210811221627868"></p><p>火狐浏览器如何查看 Cookie</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210811221805.png" alt="image-20210811221805888"></p><h3><span id="15-cookie-生命控制">1.5 Cookie 生命控制</span></h3><p>Cookie 的生命控制指的是如何管理 Cookie 什么时候被销毁（删除）</p><p>setMaxAge()<br>正数，表示在指定的秒数后过期<br>负数，表示浏览器一关，Cookie 就会被删除（默认值是-1）<br>零，表示马上删除 Cookie</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Cookie cookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;life3600&quot;</span>, <span class="hljs-string">&quot;life3600&quot;</span>);<br>cookie.setMaxAge(<span class="hljs-number">60</span> * <span class="hljs-number">60</span>); <span class="hljs-comment">// 设置 Cookie 一小时之后被删除。无效</span><br>resp.addCookie(cookie);<br>resp.getWriter().write(<span class="hljs-string">&quot;已经创建了一个存活一小时的 Cookie&quot;</span>);<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Cookie cookie = CookieUtils.findCookie(<span class="hljs-string">&quot;key4&quot;</span>, req.getCookies());<br><span class="hljs-keyword">if</span> (cookie != <span class="hljs-keyword">null</span>) &#123;<br>    <span class="hljs-comment">// 调用 setMaxAge(0);</span><br>    cookie.setMaxAge(<span class="hljs-number">0</span>); <span class="hljs-comment">// 表示马上删除，都不需要等待浏览器关闭</span><br>    <span class="hljs-comment">// 调用 response.addCookie(cookie);</span><br>    resp.addCookie(cookie);<br>    resp.getWriter().write(<span class="hljs-string">&quot;key4 的 Cookie 已经被删除&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Cookie cookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;defalutLife&quot;</span>,<span class="hljs-string">&quot;defaultLife&quot;</span>);<br>cookie.setMaxAge(-<span class="hljs-number">1</span>);<span class="hljs-comment">//设置存活时间</span><br>resp.addCookie(cookie);<br></code></pre></div></td></tr></table></figure><h3><span id="16-cookie-有效路径-path-的设置">1.6 Cookie 有效路径 Path 的设置</span></h3><p>Cookie 的 path 属性可以有效的过滤哪些 Cookie 可以发送给服务器。哪些不发。<br>path 属性是通过请求的地址来进行有效的过滤。</p><p>CookieA path=/工程路径<br>CookieB path=/工程路径/abc</p><p>请求地址如下：<br><a href="http://ip:port/工程路径/a.html">http://ip:port/工程路径/a.html</a><br>CookieA 发送<br>CookieB 不发送<br><a href="http://ip:port/工程路径/abc/a.html">http://ip:port/工程路径/abc/a.html</a><br>CookieA 发送<br>CookieB 发送</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Cookie cookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;path1&quot;</span>, <span class="hljs-string">&quot;path1&quot;</span>);<br><span class="hljs-comment">// getContextPath() ===&gt;&gt;&gt;&gt; 得到工程路径</span><br>cookie.setPath( req.getContextPath() + <span class="hljs-string">&quot;/abc&quot;</span> ); <span class="hljs-comment">// ===&gt;&gt;&gt;&gt; /工程路径/abc</span><br>resp.addCookie(cookie);<br>resp.getWriter().write(<span class="hljs-string">&quot;创建了一个带有 Path 路径的 Cookie&quot;</span>);<br></code></pre></div></td></tr></table></figure><h3><span id="17-cookie-练习免输入用户名登录">1.7 Cookie 练习—免输入用户名登录</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210811222907.png" alt="image-20210811222907049"></p><p>login.jsp 页面</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;http://localhost:8080/13_cookie_session/loginServlet&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>用户名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span> value=<span class="hljs-string">&quot;$&#123;cookie.username.value&#125;&quot;</span>&gt; &lt;br&gt;<br>密码：&lt;input type=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>&gt; &lt;br&gt;<br>&lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;登录&quot;</span>&gt;<br>&lt;/form&gt;<br></code></pre></div></td></tr></table></figure><p>LoginServlet 程序：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException,</span><br><span class="hljs-function">IOException </span>&#123;<br>    String username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>    String password = req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;wzg168&quot;</span>.equals(username) &amp;&amp; <span class="hljs-string">&quot;123456&quot;</span>.equals(password)) &#123;<br>        <span class="hljs-comment">//登录 成功</span><br>        Cookie cookie = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;username&quot;</span>, username);<br>        cookie.setMaxAge(<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">7</span>);<span class="hljs-comment">//当前 Cookie 一周内有效</span><br>        resp.addCookie(cookie);<br>        System.out.println(<span class="hljs-string">&quot;登录 成功&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 登录 失败</span><br>        System.out.println(<span class="hljs-string">&quot;登录 失败&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2><span id="2-session-会话">2. Session 会话</span></h2><h3><span id="21-什么是-session-会话">2.1 什么是 Session 会话?</span></h3><p>1、Session 就一个接口（HttpSession）。<br>2、Session 就是会话。它是用来维护一个客户端和服务器之间关联的一种技术。<br>3、每个客户端都有自己的一个 Session 会话。<br>4、Session 会话中，我们经常用来保存用户登录之后的信息。</p><h3><span id="22-如何创建-session-和获取id-号是否为新">2.2 如何创建 Session 和获取(id 号,是否为新)</span></h3><p>如何创建和获取 Session。它们的 API 是一样的。<br>request.getSession()<br>    第一次调用是：创建 Session 会话<br>    之后调用都是：获取前面创建好的 Session 会话对象。<br>isNew(); 判断到底是不是刚创建出来的（新的）<br>    true 表示刚创建<br>    false 表示获取之前创建<br>每个会话都有一个身份证号。也就是 ID 值。而且这个 ID 是唯一的。<br>getId() 得到 Session 的会话 id 值。</p><h3><span id="23-session-域数据的存取">2.3 Session 域数据的存取</span></h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">req.getSession().setAttribute(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>);<br>resp.getWriter().write(<span class="hljs-string">&quot;已经往 Session 中保存了数据&quot;</span>);<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Object attribute = req.getSession().getAttribute(<span class="hljs-string">&quot;key1&quot;</span>);<br>resp.getWriter().write(<span class="hljs-string">&quot;从 Session 中获取出 key1 的数据是：&quot;</span> + attribute);<br></code></pre></div></td></tr></table></figure><h3><span id="24-session-生命周期控制">2.4 Session 生命周期控制</span></h3><p>public void setMaxInactiveInterval(int interval) 设置 Session 的超时时间（以秒为单位），超过指定的时长，Session就会被销毁。<br>值为正数的时候，设定 Session 的超时时长。<br>负数表示永不超时（极少使用）</p><p>public int getMaxInactiveInterval()获取 Session 的超时时间<br>public void invalidate() 让当前 Session 会话马上超时无效。</p><p>Session 默认的超时时间长为 30 分钟。</p><p>因为在 Tomcat 服务器的配置文件 web.xml 中默认有以下的配置，它就表示配置了当前 Tomcat 服务器下所有的 Session<br>超时配置默认时长为：30 分钟。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>如果说。你希望你的 web 工程，默认的 Session 的超时时长为其他时长。你可以在你自己的 web.xml 配置文件中做以上相同的配置。就可以修改你的 web 工程所有 Seession 的默认超时时长。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>如果你想只修改个别 Session 的超时时长。就可以使用上面的 API。setMaxInactiveInterval(int interval)来进行单独的设置。</p><p>session.setMaxInactiveInterval(int interval)单独设置超时时长。</p><p>Session 超时的概念介绍：</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210811224923.png" alt="image-20210811224923485"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 先获取 Session 对象</span><br>HttpSession session = req.getSession();<br><span class="hljs-comment">// 设置当前 Session3 秒后超时</span><br>session.setMaxInactiveInterval(<span class="hljs-number">3</span>);<br>resp.getWriter().write(<span class="hljs-string">&quot;当前 Session 已经设置为 3 秒后超时&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>Session 马上被超时示例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 先获取 Session 对象</span><br>HttpSession session = req.getSession();<br><span class="hljs-comment">// 让 Session 会话马上超时</span><br>session.invalidate();<br>resp.getWriter().write(<span class="hljs-string">&quot;Session 已经设置为超时（无效）&quot;</span>);<br></code></pre></div></td></tr></table></figure><h3><span id="25-浏览器和-session-之间关联的技术内幕">2.5 浏览器和 Session 之间关联的技术内幕</span></h3><p>Session 技术，底层其实是基于 Cookie 技术来实现的。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210811225011.png" alt="image-20210811225011609"></p>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaWeb</tag>
      
      <tag>Cookie</tag>
      
      <tag>Session</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb-09-Update and Download</title>
    <link href="/2021/07/20/JavaWeb-09-Update%20and%20Download/"/>
    <url>/2021/07/20/JavaWeb-09-Update%20and%20Download/</url>
    
    <content type="html"><![CDATA[<h1><span id="上传与下载">上传与下载</span></h1><!-- toc --><ul><li><a href="#font-colorred1-%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%8A%E4%BC%A0%E4%BB%8B%E7%BB%8D%E9%87%8D%E7%82%B9font"><font color="red">1. 文件的上传介绍（重点）</font></a><ul><li><a href="#11-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0http%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%AF%B4%E6%98%8E">1.1 文件上传，HTTP协议的说明</a></li><li><a href="#12-commons-fileuploadjar-%E5%B8%B8%E7%94%A8-api-%E4%BB%8B%E7%BB%8D%E8%AF%B4%E6%98%8E">1.2 commons-fileupload.jar 常用 API 介绍说明</a></li><li><a href="#13-fileupload-%E7%B1%BB%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8">1.3 fileupload 类库的使用</a></li></ul></li><li><a href="#2-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD">2. 文件下载</a></li><li><a href="#3-%E9%99%84%E4%BB%B6%E4%B8%AD%E6%96%87%E5%90%8D%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">3. 附件中文名乱码问题解决方案</a><ul><li><a href="#%E6%96%B9%E6%A1%88%E4%B8%80urlencoder-%E8%A7%A3%E5%86%B3-ie-%E5%92%8C%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84-%E9%99%84%E4%BB%B6%E4%B8%AD%E6%96%87%E5%90%8D%E9%97%AE%E9%A2%98">方案一：URLEncoder 解决 IE 和谷歌浏览器的 附件中文名问题。</a></li><li><a href="#%E6%96%B9%E6%A1%88%E4%BA%8Cbase64-%E7%BC%96%E8%A7%A3%E7%A0%81-%E8%A7%A3%E5%86%B3-%E7%81%AB%E7%8B%90%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E9%99%84%E4%BB%B6%E4%B8%AD%E6%96%87%E5%90%8D%E9%97%AE%E9%A2%98">方案二：BASE64 编解码 解决 火狐浏览器的附件中文名问题</a></li></ul></li></ul><!-- tocstop --><h2><span id="1-文件的上传介绍重点"><font color="red">1. 文件的上传介绍（重点）</font></span></h2><p>1、要有一个 form 标签，method=post 请求<br>2、form 标签的 encType 属性值必须为 multipart/form-data 值<br>3、在 form 标签中使用 input type=file 添加上传的文件<br>4、编写服务器代码（Servlet 程序）接收，处理上传的数据。</p><p>encType=multipart/form-data 表示提交的数据，以多段（每一个表单项一个数据段）的形式进行拼接，然后以二进制流的形式发送给服务器。</p><h3><span id="11-文件上传http协议的说明">1.1 文件上传，HTTP协议的说明</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210811212958.png" alt="image-20210811212951825"></p><h3><span id="12-commons-fileuploadjar-常用-api-介绍说明">1.2 commons-fileupload.jar 常用 API 介绍说明</span></h3><p>commons-fileupload.jar 需要依赖 commons-io.jar 这个包，所以两个包我们都要引入。</p><p><strong>第一步，就是需要导入两个 jar 包：</strong><br>commons-fileupload-1.2.1.jar<br>commons-io-1.4.jar</p><p><strong>commons-fileupload.jar 和 commons-io.jar 包中，我们常用的类有哪些？</strong></p><p>ServletFileUpload 类，用于解析上传的数据。<br>FileItem 类，表示每一个表单项。</p><p>boolean ServletFileUpload.isMultipartContent(HttpServletRequest request);</p><p>判断当前上传的数据格式是否是多段的格式。</p><p>public List<fileitem> parseRequest(HttpServletRequest request)<br>解析上传的数据</fileitem></p><p>boolean FileItem.isFormField()<br>判断当前这个表单项，是否是普通的表单项。还是上传的文件类型。<br>true 表示普通类型的表单项<br>false 表示上传的文件类型</p><p>String FileItem.getFieldName()<br>获取表单项的 name 属性值</p><p>String FileItem.getString()<br>获取当前表单项的值。</p><p>String FileItem.getName();<br>获取上传的文件名</p><p>void FileItem.write( file );<br>将上传的文件写到 参数 file 所指向抽硬盘位置。</p><h3><span id="13-fileupload-类库的使用">1.3 fileupload 类库的使用</span></h3><p>上传文件的表单</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://192.168.31.74:8080/09_EL_JSTL/uploadServlet&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>头像：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;photo&quot;</span> &gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上传&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>解析上传的数据的代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><span class="hljs-comment">//1 先判断上传的数据是否多段数据（只有是多段的数据，才是文件上传的）</span><br><span class="hljs-keyword">if</span> (ServletFileUpload.isMultipartContent(req)) &#123;<br><span class="hljs-comment">// 创建 FileItemFactory 工厂实现类</span><br>FileItemFactory fileItemFactory = <span class="hljs-keyword">new</span> DiskFileItemFactory();<br><span class="hljs-comment">// 创建用于解析上传数据的工具类 ServletFileUpload 类</span><br>ServletFileUpload servletFileUpload = <span class="hljs-keyword">new</span> ServletFileUpload(fileItemFactory);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 解析上传的数据，得到每一个表单项 FileItem</span><br>List&lt;FileItem&gt; list = servletFileUpload.parseRequest(req);<br><span class="hljs-comment">// 循环判断，每一个表单项，是普通类型，还是上传的文件</span><br><span class="hljs-keyword">for</span> (FileItem fileItem : list) &#123;<br><span class="hljs-keyword">if</span> (fileItem.isFormField()) &#123;<br><span class="hljs-comment">// 普通表单项</span><br>System.out.println(<span class="hljs-string">&quot;表单项的 name 属性值：&quot;</span> + fileItem.getFieldName());<br><span class="hljs-comment">// 参数 UTF-8.解决乱码问题</span><br>System.out.println(<span class="hljs-string">&quot;表单项的 value 属性值：&quot;</span> + fileItem.getString(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 上传的文件</span><br>System.out.println(<span class="hljs-string">&quot;表单项的 name 属性值：&quot;</span> + fileItem.getFieldName());<br>System.out.println(<span class="hljs-string">&quot;上传的文件名：&quot;</span> + fileItem.getName());<br>fileItem.write(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;e:\\&quot;</span> + fileItem.getName()));<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2><span id="2-文件下载">2. 文件下载</span></h2><p>下载的常用 API 说明：<br>response.getOutputStream();<br>servletContext.getResourceAsStream();<br>servletContext.getMimeType();<br>response.setContentType();</p><p>response.setHeader(“Content-Disposition”, “attachment; fileName=1.jpg”);<br>这个响应头告诉浏览器。这是需要下载的。而 attachment 表示附件，也就是下载的一个文件。fileName=后面，表示下载的文件名。</p><p>完成上面的两个步骤，下载文件是没问题了。但是如果我们要下载的文件是中文名的话。你会发现，下载无法正确显示出正确的中文名。<br>原因是在响应头中，不能包含有中文字符，只能包含 ASCII 码。</p><p>文件下载示例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException,IOException </span>&#123;<br><span class="hljs-comment">// 1、获取要下载的文件名</span><br>String downloadFileName = <span class="hljs-string">&quot;2.jpg&quot;</span>;<br><span class="hljs-comment">// 2、读取要下载的文件内容 (通过 ServletContext 对象可以读取)</span><br>ServletContext servletContext = getServletContext();<br><span class="hljs-comment">// 获取要下载的文件类型</span><br>String mimeType = servletContext.getMimeType(<span class="hljs-string">&quot;/file/&quot;</span> + downloadFileName);<br>System.out.println(<span class="hljs-string">&quot;下载的文件类型：&quot;</span> + mimeType);<br><span class="hljs-comment">// 4、在回传前，通过响应头告诉客户端返回的数据类型</span><br>resp.setContentType(mimeType);<br><span class="hljs-comment">// 5、还要告诉客户端收到的数据是用于下载使用（还是使用响应头）</span><br><span class="hljs-comment">// Content-Disposition 响应头，表示收到的数据怎么处理</span><br><span class="hljs-comment">// attachment 表示附件，表示下载使用</span><br><span class="hljs-comment">// filename= 表示指定下载的文件名</span><br>resp.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment; filename=&quot;</span> + downloadFileName);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* /斜杠被服务器解析表示地址为 http://ip:prot/工程名/ 映射 到代码的 Web 目录</span><br><span class="hljs-comment">*/</span><br>InputStream resourceAsStream = servletContext.getResourceAsStream(<span class="hljs-string">&quot;/file/&quot;</span> +<br>downloadFileName);<br><span class="hljs-comment">// 获取响应的输出流</span><br>OutputStream outputStream = resp.getOutputStream();<br><span class="hljs-comment">// 3、把下载的文件内容回传给客户端</span><br><span class="hljs-comment">// 读取输入流中全部的数据，复制给输出流，输出给客户端</span><br>IOUtils.copy(resourceAsStream,outputStream);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2><span id="3-附件中文名乱码问题解决方案">3. 附件中文名乱码问题解决方案</span></h2><h3><span id="方案一urlencoder-解决-ie-和谷歌浏览器的-附件中文名问题">方案一：URLEncoder 解决 IE 和谷歌浏览器的 附件中文名问题。</span></h3><p>如果客户端浏览器是 IE 浏览器 或者 是谷歌浏览器。我们需要使用 URLEncoder 类先对中文名进行 UTF-8 的编码<br>操作。<br>因为 IE 浏览器和谷歌浏览器收到含有编码后的字符串后会以 UTF-8 字符集进行解码显示。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 把中文名进行 UTF-8 编码操作。</span><br>String str = <span class="hljs-string">&quot;attachment; fileName=&quot;</span> + URLEncoder.encode(<span class="hljs-string">&quot;中文.jpg&quot;</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br></code></pre></div></td></tr></table></figure><h3><span id="方案二base64-编解码-解决-火狐浏览器的附件中文名问题">方案二：BASE64 编解码 解决 火狐浏览器的附件中文名问题</span></h3><p>如果客户端浏览器是火狐浏览器。 那么我们需要对中文名进行 BASE64 的编码操作。</p><p>这时候需要把请求头 Content-Disposition: attachment; filename=中文名<br>编码成为：Content-Disposition: attachment; filename==?charset?B?xxxxx?=</p><p>=?charset?B?xxxxx?= 现在我们对这段内容进行一下说明。<br>=? 表示编码内容的开始<br>charset 表示字符集<br>B 表示 BASE64 编码<br>xxxx 表示文件名 BASE64 编码后的内容<br>?= 表示编码内容的结束</p><p><strong>BASE64 编解码操作：</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    String content = <span class="hljs-string">&quot;这是需要 Base64 编码的内容&quot;</span>;<br>    <span class="hljs-comment">// 创建一个 Base64 编码器</span><br>    BASE64Encoder base64Encoder = <span class="hljs-keyword">new</span> BASE64Encoder();<br>    <span class="hljs-comment">// 执行 Base64 编码操作</span><br>    String encodedString = base64Encoder.encode(content.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>    System.out.println( encodedString );<br>    <span class="hljs-comment">// 创建 Base64 解码器</span><br>    BASE64Decoder base64Decoder = <span class="hljs-keyword">new</span> BASE64Decoder();<br>    <span class="hljs-comment">// 解码操作</span><br>    <span class="hljs-keyword">byte</span>[] bytes = base64Decoder.decodeBuffer(encodedString);<br>    String str = <span class="hljs-keyword">new</span> String(bytes, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    System.out.println(str);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>因为火狐使用的是 BASE64 的编解码方式还原响应中的汉字。所以需要使用 BASE64Encoder 类进行编码操作。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 使用下面的格式进行 BASE64 编码后</span><br>String str = <span class="hljs-string">&quot;attachment; fileName=&quot;</span> + <span class="hljs-string">&quot;=?utf-8?B?&quot;</span><br>+ <span class="hljs-keyword">new</span> BASE64Encoder().encode(<span class="hljs-string">&quot;中文.jpg&quot;</span>.getBytes(<span class="hljs-string">&quot;utf-8&quot;</span>)) + <span class="hljs-string">&quot;?=&quot;</span>;<br><br><span class="hljs-comment">// 设置到响应头中</span><br>response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, str);<br></code></pre></div></td></tr></table></figure><p>那么我们如何解决上面两种不同编解码方式呢。我们只需要通过判断请求头中 User-Agent 这个请求头携带过来的浏览器信息即可判断出是什么浏览器。</p><p>如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String ua = request.getHeader(<span class="hljs-string">&quot;User-Agent&quot;</span>);<br><span class="hljs-comment">// 判断是否是火狐浏览器</span><br><span class="hljs-keyword">if</span> (ua.contains(<span class="hljs-string">&quot;Firefox&quot;</span>)) &#123;<br><span class="hljs-comment">// 使用下面的格式进行 BASE64 编码后</span><br>String str = <span class="hljs-string">&quot;attachment; fileName=&quot;</span> + <span class="hljs-string">&quot;=?utf-8?B?&quot;</span><br>+ <span class="hljs-keyword">new</span> BASE64Encoder().encode(<span class="hljs-string">&quot;中文.jpg&quot;</span>.getBytes(<span class="hljs-string">&quot;utf-8&quot;</span>)) + <span class="hljs-string">&quot;?=&quot;</span>;<br><span class="hljs-comment">// 设置到响应头中</span><br>response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, str);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 把中文名进行 UTF-8 编码操作。</span><br>String str = <span class="hljs-string">&quot;attachment; fileName=&quot;</span> + URLEncoder.encode(<span class="hljs-string">&quot;中文.jpg&quot;</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br><span class="hljs-comment">// 然后把编码后的字符串设置到响应头中</span><br>response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, str);<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaWeb</tag>
      
      <tag>Update</tag>
      
      <tag>Download</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb-08-EL and JSTL</title>
    <link href="/2021/07/20/JavaWeb-08-EL%20and%20JSTL/"/>
    <url>/2021/07/20/JavaWeb-08-EL%20and%20JSTL/</url>
    
    <content type="html"><![CDATA[<h1><span id="el-and-jstl">EL and JSTL</span></h1><!-- toc --><ul><li><a href="#1-el%E8%A1%A8%E8%BE%BE%E5%BC%8F">1. EL表达式</a><ul><li><a href="#11-%E4%BB%80%E4%B9%88%E6%98%AFel%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BD%9C%E7%94%A8">1.1 什么是EL表达式，作用？</a></li><li><a href="#12-el-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%90%9C%E7%B4%A2%E5%9F%9F%E6%95%B0%E6%8D%AE%E7%9A%84%E9%A1%BA%E5%BA%8F">1.2 EL 表达式搜索域数据的顺序</a></li><li><a href="#13-el-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BE%93%E5%87%BA-bean-%E7%9A%84%E6%99%AE%E9%80%9A%E5%B1%9E%E6%80%A7%E6%95%B0%E7%BB%84%E5%B1%9E%E6%80%A7-list-%E9%9B%86%E5%90%88%E5%B1%9E%E6%80%A7map-%E9%9B%86%E5%90%88%E5%B1%9E%E6%80%A7">1.3 EL 表达式输出 Bean 的普通属性，数组属性。List 集合属性，map 集合属性</a></li><li><a href="#14-el%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%90%E7%AE%97">1.4 EL表达式——运算</a></li><li><a href="#15-el-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84-11-%E4%B8%AA%E9%9A%90%E5%90%AB%E5%AF%B9%E8%B1%A1">1.5 EL 表达式的 11 个隐含对象</a></li><li><a href="#16-el-%E8%8E%B7%E5%8F%96%E5%9B%9B%E4%B8%AA%E7%89%B9%E5%AE%9A%E5%9F%9F%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7">1.6 EL 获取四个特定域中的属性</a></li><li><a href="#17-pagecontext-%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BD%BF%E7%94%A8">1.7 pageContext 对象的使用</a></li><li><a href="#18-el-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%B6%E4%BB%96%E9%9A%90%E5%90%AB%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BD%BF%E7%94%A8">1.8 EL 表达式其他隐含对象的使用</a></li></ul></li><li><a href="#2-font-colorredjstl%E6%A0%87%E7%AD%BE%E5%BA%93%E6%AC%A1%E9%87%8D%E7%82%B9font">2. <font color="red">JSTL标签库（次重点）</font></a><ul><li><a href="#21-%E4%BB%8B%E7%BB%8D">2.1 介绍</a></li><li><a href="#22-%E6%A0%87%E7%AD%BE%E7%BB%84%E6%88%90">2.2 标签组成</a></li><li><a href="#23-%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4">2.3 使用步骤</a></li><li><a href="#24-core%E6%A0%B8%E5%BF%83%E5%BA%93%E4%BD%BF%E7%94%A8">2.4 core核心库使用</a><ul><li><a href="#1-cset-font-colorred%E5%BE%88%E5%B0%91%E4%BD%BF%E7%94%A8font">1. <code> &lt;c:set /&gt;</code><font color="red">很少使用</font></a></li><li><a href="#2-cif">2. <code>&lt;c:if /&gt;</code></a></li><li><a href="#3-cchoose-cwhen-cotherwise%E6%A0%87%E7%AD%BE">3. <code>&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签</code></a></li><li><a href="#4-cforeach">4. <code>&lt;c:forEach /&gt;</code></a></li></ul></li></ul></li></ul><!-- tocstop --><h2><span id="1-el表达式">1. EL表达式</span></h2><h3><span id="11-什么是el表达式作用">1.1 什么是EL表达式，作用？</span></h3><p>EL 表达式的全称是：Expression Language。是表达式语言。</p><p>EL 表达式的什么作用：EL 表达式主要是代替 jsp 页面中的表达式脚本在 jsp 页面中进行数据的输出。</p><p>因为 EL 表达式在输出数据的时候，要比 jsp 的表达式脚本要<strong>简洁</strong>很多。</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;body&gt;<br>    &lt;%<br>    request.setAttribute(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;值&quot;</span>);<br>    %&gt;<br>    表达式脚本输出 key 的值是：<br>  &lt;%=request.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>)==<span class="hljs-keyword">null</span>?<span class="hljs-string">&quot;&quot;</span>:request.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>)%&gt;&lt;br/&gt;<br>    EL 表达式输出 key 的值是：$&#123;key1&#125;<br>&lt;/body&gt;<br></code></pre></div></td></tr></table></figure><h3><span id="12-el-表达式搜索域数据的顺序">1.2 EL 表达式搜索域数据的顺序</span></h3><p>当四个域中都有相同的 key 的数据的时候，EL 表达式会按照四个域的从小到大的顺序去进行搜索，找到就输出。</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;body&gt;<br>    &lt;%<br>    <span class="hljs-comment">//往四个域中都保存了相同的 key 的数据。</span><br>        request.setAttribute(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;request&quot;</span>);<br>        session.setAttribute(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;session&quot;</span>);<br>        application.setAttribute(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;application&quot;</span>);<br>        pageContext.setAttribute(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;pageContext&quot;</span>);<br>    %&gt;<br>$&#123;key&#125;<br>&lt;/body&gt;<br></code></pre></div></td></tr></table></figure><h3><span id="13-el-表达式输出-bean-的普通属性数组属性-list-集合属性map-集合属性">1.3 EL 表达式输出 Bean 的普通属性，数组属性。List 集合属性，map 集合属性</span></h3><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;body&gt;<br>    &lt;%<br>        Person person = <span class="hljs-keyword">new</span> Person();<br>        person.setName(<span class="hljs-string">&quot;国哥好帅！&quot;</span>);<br>        person.setPhones(<span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;18610541354&quot;</span>,<span class="hljs-string">&quot;18688886666&quot;</span>,<span class="hljs-string">&quot;18699998888&quot;</span>&#125;);<br><br>        List&lt;String&gt; cities = <span class="hljs-keyword">new</span><br><br>        ArrayList&lt;String&gt;();<br><br>        cities.add(<span class="hljs-string">&quot;北京&quot;</span>);<br>        cities.add(<span class="hljs-string">&quot;上海&quot;</span>);<br>        cities.add(<span class="hljs-string">&quot;深圳&quot;</span>);<br>        person.setCities(cities);<br><br>        Map&lt;String,Object&gt;map = <span class="hljs-keyword">new</span><br><br>        HashMap&lt;&gt;();<br><br>        map.put(<span class="hljs-string">&quot;key1&quot;</span>,<span class="hljs-string">&quot;value1&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;key2&quot;</span>,<span class="hljs-string">&quot;value2&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;key3&quot;</span>,<span class="hljs-string">&quot;value3&quot;</span>);<br>        person.setMap(map);<br>        pageContext.setAttribute(<span class="hljs-string">&quot;p&quot;</span>, person);<br>    %&gt;<br><br>    输出 Person：$&#123; p &#125;&lt;br/&gt;<br>    输出 Person 的 name 属性：$&#123;p.name&#125; &lt;br&gt;<br>    输出 Person 的 pnones 数组属性值：$&#123;p.phones[<span class="hljs-number">2</span>]&#125; &lt;br&gt;<br>    输出 Person 的 cities 集合中的元素值：$&#123;p.cities&#125; &lt;br&gt;<br>    输出 Person 的 List 集合中个别元素值：$&#123;p.cities[<span class="hljs-number">2</span>]&#125; &lt;br&gt;<br>    输出 Person 的 Map 集合: $&#123;p.map&#125; &lt;br&gt;<br>    输出 Person 的 Map 集合中某个 key 的值: $&#123;p.map.key3&#125; &lt;br&gt;<br>    输出 Person 的 age 属性：$&#123;p.age&#125; &lt;br&gt;<br>&lt;/body&gt;<br></code></pre></div></td></tr></table></figure><h3><span id="14-el表达式运算">1.4 EL表达式——运算</span></h3><p>语法：${运算表达式}，EL表达式支持如下运算符：</p><p><strong>1）关系运算</strong></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807160227.png" alt="image-20210807160220850"></p><p><strong>2）逻辑运算</strong></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807160248.png" alt="image-20210807160248588"></p><p><strong>3）算数运算</strong></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807160305.png" alt="image-20210807160305781"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807160319.png" alt="image-20210807160319578"></p><p><strong>4）empty 运算</strong></p><p>empty 运算可以判断一个数据是否为空，如果为空，则输出 true,不为空输出 false。</p><p>以下几种情况为空：<br>1、值为 null 值的时候，为空<br>2、值为空串的时候，为空<br>3、值是 Object 类型数组，长度为零的时候<br>4、list 集合，元素个数为零<br>5、map 集合，元素个数为零</p><p><strong>5）三元运算</strong></p><p>表达式 1？表达式 2：表达式 3<br>如果表达式 1 的值为真，返回表达式 2 的值，如果表达式 1 的值为假，返回表达式 3 的值。</p><p><strong>6）“.”点运算和[]中括号运算符</strong></p><p><font color="red">.点运算，可以输出 Bean 对象中某个属性的值</font>。</p><p>.运算还能直接通过key输出value</p><p>[]中括号运算，可以输出有序集合中某个元素的值。<br>并且[]中括号运算，还可以输出 map 集合中 key 里含有特殊字符的 key 的值。</p><p>演示</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;body&gt;<br>    &lt;%<br>        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String,Object&gt;();<br>        map.put(<span class="hljs-string">&quot;a.a.a&quot;</span>, <span class="hljs-string">&quot;aaaValue&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;b+b+b&quot;</span>, <span class="hljs-string">&quot;bbbValue&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;c-c-c&quot;</span>, <span class="hljs-string">&quot;cccValue&quot;</span>);<br>        <br>    request.setAttribute(<span class="hljs-string">&quot;map&quot;</span>,map);<br>    %&gt;<br>    $&#123;map[<span class="hljs-string">&#x27;a.a.a&#x27;</span>]&#125; &lt;br&gt;<br>    $&#123;map[<span class="hljs-string">&quot;b+b+b&quot;</span>]&#125; &lt;br&gt;<br>    $&#123;map[<span class="hljs-string">&#x27;c-c-c&#x27;</span>]&#125; &lt;br&gt;<br>&lt;/body&gt;<br></code></pre></div></td></tr></table></figure><h3><span id="15-el-表达式的-11-个隐含对象">1.5 EL 表达式的 11 个隐含对象</span></h3><p>EL 个达式中 11 个隐含对象，是 EL 表达式中自己定义的，可以直接使用。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807160626.png" alt="image-20210807160626615"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807160644.png" alt="image-20210807160644364"></p><h3><span id="16-el-获取四个特定域中的属性">1.6 EL 获取四个特定域中的属性</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807160819.png" alt="image-20210807160819764"></p><p>演示</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;body&gt;<br>&lt;%<br>        pageContext.setAttribute(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;pageContext1&quot;</span>);<br>        pageContext.setAttribute(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;pageContext2&quot;</span>);<br>        request.setAttribute(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;request&quot;</span>);<br>        session.setAttribute(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;session&quot;</span>);<br>        application.setAttribute(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;application&quot;</span>);<br>    %&gt;<br>    $&#123; applicationScope.key2 &#125;<br>&lt;/body&gt;<br></code></pre></div></td></tr></table></figure><h3><span id="17-pagecontext-对象的使用">1.7 pageContext 对象的使用</span></h3><p>1.协议：</p><p>2.服务器 ip：</p><p>3.服务器端口：</p><p>4.获取工程路径：</p><p>5.获取请求方法：</p><p>6.获取客户端 ip 地址：</p><p>7.获取会话的 id 编号：</p><p>演示</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;body&gt;<br>    &lt;%<br>    pageContext.setAttribute(<span class="hljs-string">&quot;req&quot;</span>, request);<br>    %&gt;<br>    &lt;%=request.getScheme() %&gt; &lt;br&gt;<br>    <span class="hljs-number">1.</span>协议： $&#123; req.scheme &#125;&lt;br&gt;<br>    <span class="hljs-number">2.</span>服务器 ip：$&#123; pageContext.request.serverName &#125;&lt;br&gt;<br>    <span class="hljs-number">3.</span>服务器端口：$&#123; pageContext.request.serverPort &#125;&lt;br&gt;<br>    <span class="hljs-number">4.</span>获取工程路径：$&#123; pageContext.request.contextPath &#125;&lt;br&gt;<br>    <span class="hljs-number">5.</span>获取请求方法：$&#123; pageContext.request.method &#125;&lt;br&gt;<br>    <span class="hljs-number">6.</span>获取客户端 ip 地址：$&#123; pageContext.request.remoteHost &#125;&lt;br&gt;<br>    <span class="hljs-number">7.</span>获取会话的 id 编号：$&#123; pageContext.session.id &#125;&lt;br&gt;<br>&lt;/body&gt;<br></code></pre></div></td></tr></table></figure><h3><span id="18-el-表达式其他隐含对象的使用">1.8 EL 表达式其他隐含对象的使用</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807161108.png" alt="image-20210807161108276"></p><p><font color="red">注意是请求参数</font></p><p>演示</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">输出请求参数 username 的值：$&#123;param.username&#125; &lt;br&gt;<br><br>输出请求参数 password 的值：$&#123;param.password&#125; &lt;br&gt;<br>输出请求参数 username 的值：$&#123; paramValues.username[<span class="hljs-number">0</span>] &#125; &lt;br&gt;<br><br>输出请求参数 hobby 的值：$&#123; paramValues.hobby[<span class="hljs-number">0</span>] &#125; &lt;br&gt;<br>输出请求参数 hobby 的值：$&#123; paramValues.hobby[<span class="hljs-number">1</span>] &#125; &lt;br&gt;<br></code></pre></div></td></tr></table></figure><p>请求地址</p><figure class="highlight http"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs http">http://localhost:8080/09_EL_JSTL/other_el_obj.jsp?username=wzg168&amp;password=666666&amp;hobby=java&amp;hobby=cpp<br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807161258.png" alt="image-20210807161258952"></p><p>演示</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">输出请求头【User-Agent】的值：$&#123;header[<span class="hljs-string">&#x27;User-Agent&#x27;</span>] &#125; &lt;br&gt;<br><br>输出请求头【Connection】的值：$&#123;header.Connection &#125; &lt;br&gt;<br><br>输出请求头【User-Agent】的值：$&#123;headerValues[<span class="hljs-string">&#x27;User-Agent&#x27;</span>][<span class="hljs-number">0</span>]&#125; &lt;br&gt;<br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807161352.png" alt="image-20210807161352199"></p><p>演示</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">获取 Cookie 的名称：$&#123; cookie.JSESSIONID.name &#125; &lt;br&gt;<br>获取 Cookie 的值：$&#123; cookie.JSESSIONID.value &#125; &lt;br&gt;<br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807161418.png" alt="image-20210807161418935"></p><p>web.xml中的配置（在web.xml中的都是使用getInitParameter方法）</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>username<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>url<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>jdbc:mysql:///test<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>演示</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">输出&amp;lt;Context-param&amp;gt;username 的值：$&#123; initParam.username &lt;br&gt;<br>输出&amp;lt;Context-param&amp;gt;url 的值：$&#123; initParam.url &#125; &lt;br&gt;<br></code></pre></div></td></tr></table></figure><h2><span id="2-jstl标签库次重点">2. <font color="red">JSTL标签库（次重点）</font></span></h2><h3><span id="21-介绍">2.1 介绍</span></h3><p>​    JSTL 标签库 全称是指 JSP Standard Tag Library JSP 标准标签库。是一个不断完善的开放源代码的 JSP 标<br>签库。<br>​    EL 表达式主要是为了替换 jsp 中的表达式脚本，而标签库则是为了替换代码脚本。这样使得整个 jsp 页面变得更佳简洁。</p><h3><span id="22-标签组成">2.2 标签组成</span></h3><p>JSTL 由五个不同功能的标签库组成</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807184321.png" alt="image-20210807184321452"></p><p>在 jsp 标签库中使用 taglib 指令引入标签库</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">CORE 标签库<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span>%&gt;<br>XML 标签库<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;x&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/xml&quot;</span> %&gt;<br>FMT 标签库<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;fmt&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/fmt&quot;</span>%&gt;<br>SQL 标签库<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;sql&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/sql&quot;</span>%&gt;<br>FUNCTIONS 标签库<br>&lt;%@ taglib prefix=<span class="hljs-string">&quot;fn&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/functions&quot;</span>%&gt;<br></code></pre></div></td></tr></table></figure><h3><span id="23-使用步骤">2.3 使用步骤</span></h3><p>1、先导入 jstl 标签库的 jar 包。<br>taglibs-standard-impl-1.2.1.jar<br>taglibs-standard-spec-1.2.1.jar<br>2、第二步，使用 taglib 指令引入标签库。</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%@ taglib prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span>%&gt;<br></code></pre></div></td></tr></table></figure><h3><span id="24-core核心库使用">2.4 core核心库使用</span></h3><h4><span id="1-ltcset-gt很少使用">1. <code> &lt;c:set /&gt;</code><font color="red">很少使用</font></span></h4><p>作用：set 标签可以往域中保存数据</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">保存之前：$&#123; sessionScope.abc &#125; &lt;br&gt;<br>&lt;c:set scope=<span class="hljs-string">&quot;session&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;abc&quot;</span> value=<span class="hljs-string">&quot;abcValue&quot;</span>/&gt;<br>保存之后：$&#123; sessionScope.abc &#125; &lt;br&gt;<br></code></pre></div></td></tr></table></figure><p>scope是域名</p><p>​    page 表示 PageContext 域（默认值）<br>​    request 表示 Request 域<br>​    session 表示 Session 域<br>​    application 表示 ServletContext 域</p><p>var是key；value是value</p><h4><span id="2-ltcif-gt">2. <code>&lt;c:if /&gt;</code></span></h4><p>作用：if 标签用来做 if 判断</p><p><strong>test 属性表示判断的条件（使用 EL 表达式输出）</strong></p><p><font color="red">注意，没有if…else…，所以只能像下面这样写。</font></p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123; 12 == 12 &#125;&quot;</span>&gt;<br>&lt;h1&gt;<span class="hljs-number">12</span> 等于 <span class="hljs-number">12</span>&lt;/h1&gt;<br>&lt;/c:<span class="hljs-keyword">if</span>&gt;<br>&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123; 12 != 12 &#125;&quot;</span>&gt;<br>&lt;h1&gt;<span class="hljs-number">12</span> 不等于 <span class="hljs-number">12</span>&lt;/h1&gt;<br>&lt;/c:<span class="hljs-keyword">if</span>&gt;<br></code></pre></div></td></tr></table></figure><h4><span id="3-ltcchoosegt-ltcwhengt-ltcotherwisegt标签">3. <code>&lt;c:choose&gt; &lt;c:when&gt; &lt;c:otherwise&gt;标签</code></span></h4><p>作用：多路判断。跟 switch … case ….default 非常接近</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;% request.setAttribute(<span class="hljs-string">&quot;height&quot;</span>, <span class="hljs-number">180</span>); %&gt;<br><br>&lt;c:choose&gt;<br>    &lt;%-- 这是 html 注释 --%&gt;<br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123; requestScope.height &gt; 190 &#125;&quot;</span>&gt;<br>        &lt;h2&gt;小巨人&lt;/h2&gt;<br>    &lt;/c:when&gt;<br>    <br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123; requestScope.height &gt; 180 &#125;&quot;</span>&gt;<br>    &lt;h2&gt;很高&lt;/h2&gt;<br>    &lt;/c:when&gt;<br>    <br>    &lt;c:when test=<span class="hljs-string">&quot;$&#123; requestScope.height &gt; 170 &#125;&quot;</span>&gt;<br>    &lt;h2&gt;还可以&lt;/h2&gt;<br>    &lt;/c:when&gt;<br>    <br>    &lt;c:otherwise&gt;<br>        &lt;h2&gt;一般&lt;/h2&gt;<br>    &lt;/c:otherwise&gt;<br>&lt;/c:choose&gt;<br></code></pre></div></td></tr></table></figure><h4><span id="4-ltcforeach-gt">4. <code>&lt;c:forEach /&gt;</code></span></h4><p>作用：遍历输出使用。</p><p><strong>遍历 1 到 10，输出</strong></p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%--<span class="hljs-number">1.</span>遍历 <span class="hljs-number">1</span> 到 <span class="hljs-number">10</span>，输出<br>begin 属性设置开始的索引<br>end 属性设置结束的索引<br><span class="hljs-keyword">var</span> 属性表示循环的变量(也是当前正在遍历到的数据)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++) --%&gt;<br><br>&lt;table border=<span class="hljs-string">&quot;1&quot;</span>&gt;<br>    &lt;c:forEach begin=<span class="hljs-string">&quot;1&quot;</span> end=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;i&quot;</span>&gt;<br>        &lt;tr&gt;<br>        &lt;td&gt;第$&#123;i&#125;行&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;/c:forEach&gt;<br>&lt;/table&gt;<br></code></pre></div></td></tr></table></figure><p><strong>遍历 Object 数组</strong></p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%<br>request.setAttribute(<span class="hljs-string">&quot;arr&quot;</span>, <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;18610541354&quot;</span>,<span class="hljs-string">&quot;18688886666&quot;</span>,<span class="hljs-string">&quot;18699998888&quot;</span>&#125;);<br>%&gt;<br>&lt;c:forEach items=<span class="hljs-string">&quot;$&#123; requestScope.arr &#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;<br>$&#123; item &#125; &lt;br&gt;<br>&lt;/c:forEach&gt;<br></code></pre></div></td></tr></table></figure><p><strong>遍历Map集合</strong></p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%<br>    Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br>    map.put(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;key3&quot;</span>, <span class="hljs-string">&quot;value3&quot;</span>);<br>request.setAttribute(<span class="hljs-string">&quot;map&quot;</span>, map);<br>%&gt;<br><br>&lt;c:forEach items=<span class="hljs-string">&quot;$&#123; requestScope.map &#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;entry&quot;</span>&gt;<br>&lt;h1&gt;$&#123;entry.key&#125; = $&#123;entry.value&#125;&lt;/h1&gt;<br>&lt;/c:forEach&gt;<br></code></pre></div></td></tr></table></figure><p><strong>遍历 List 集合—list 中存放Student 类，有属性：编号，用户名，密码，年龄，电话信息</strong></p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%<br>    List&lt;Student&gt; studentList = <span class="hljs-keyword">new</span> ArrayList&lt;Student&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>    studentList.add(<span class="hljs-keyword">new</span> Student(i,<span class="hljs-string">&quot;username&quot;</span>+i ,<span class="hljs-string">&quot;pass&quot;</span>+i,<span class="hljs-number">18</span>+i,<span class="hljs-string">&quot;phone&quot;</span>+i));<br>    &#125;<br>    request.setAttribute(<span class="hljs-string">&quot;stus&quot;</span>, studentList);<br>%&gt;<br><br>&lt;table&gt;<br>    &lt;tr&gt;<br>        &lt;th&gt;编号&lt;/th&gt;<br>        &lt;th&gt;用户名&lt;/th&gt;<br>        &lt;th&gt;密码&lt;/th&gt;<br>        &lt;th&gt;年龄&lt;/th&gt;<br>        &lt;th&gt;电话&lt;/th&gt;<br>        &lt;th&gt;操作&lt;/th&gt;<br>    &lt;/tr&gt;<br><br>    &lt;c:forEach begin=<span class="hljs-string">&quot;2&quot;</span> end=<span class="hljs-string">&quot;7&quot;</span> step=<span class="hljs-string">&quot;2&quot;</span> varStatus=<span class="hljs-string">&quot;status&quot;</span> items=<span class="hljs-string">&quot;$&#123;requestScope.stus&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;stu&quot;</span>&gt;<br><br>    &lt;tr&gt;<br>        &lt;td&gt;$&#123;stu.id&#125;&lt;/td&gt;<br>        &lt;td&gt;$&#123;stu.username&#125;&lt;/td&gt;<br>        &lt;td&gt;$&#123;stu.password&#125;&lt;/td&gt;<br>        &lt;td&gt;$&#123;stu.age&#125;&lt;/td&gt;<br>        &lt;td&gt;$&#123;stu.phone&#125;&lt;/td&gt;<br>        &lt;td&gt;$&#123;status.step&#125;&lt;/td&gt;<br>    &lt;/tr&gt;<br>&lt;/c:forEach&gt;<br></code></pre></div></td></tr></table></figure><p>items 表示遍历的集合<br>var 表示遍历到的数据<br>begin 表示遍历的开始索引值<br>end 表示结束的索引值<br>step 属性表示遍历的步长值<br>varStatus 属性表示当前遍历到的数据的状态<br>for（int i = 1; i &lt; 10; i+=2）</p>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaWeb</tag>
      
      <tag>EL</tag>
      
      <tag>JSTL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb-07-jsp</title>
    <link href="/2021/07/20/JavaWeb-07-jsp/"/>
    <url>/2021/07/20/JavaWeb-07-jsp/</url>
    
    <content type="html"><![CDATA[<h1><span id="jsp">jsp</span></h1><!-- toc --><ul><li><a href="#1-%E4%BB%80%E4%B9%88%E6%98%AFjsp">1. 什么是jsp</a></li><li><a href="#2-jsp%E7%9A%84%E6%9C%AC%E8%B4%A8%E6%98%AF%E4%BB%80%E4%B9%88">2. jsp的本质是什么</a></li><li><a href="#3-jsp%E7%9A%84%E4%B8%89%E7%A7%8D%E8%AF%AD%E6%B3%95">3. jsp的三种语法</a><ul><li><a href="#31-jsp%E5%A4%B4%E9%83%A8%E7%9A%84page%E6%8C%87%E4%BB%A4">3.1 jsp头部的page指令</a></li><li><a href="#32-jsp%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC">3.2 jsp中的常用脚本</a><ul><li><a href="#1-%E5%A3%B0%E6%98%8E%E8%84%9A%E6%9C%ACfont-colorred%E6%9E%81%E5%B0%91%E4%BD%BF%E7%94%A8font">1. 声明脚本<font color="red">（极少使用）</font></a></li><li><a href="#2-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%84%9A%E6%9C%ACfont-colorred%E5%B8%B8%E7%94%A8font">2. 表达式脚本<font color="red">（常用）</font></a></li><li><a href="#3-%E4%BB%A3%E7%A0%81%E8%84%9A%E6%9C%ACfont-colorred%E5%B8%B8%E7%94%A8font">3. 代码脚本<font color="red">（常用）</font></a></li></ul></li><li><a href="#33-jsp%E4%B8%AD%E7%9A%84%E4%B8%89%E7%A7%8D%E6%B3%A8%E9%87%8A">3.3 jsp中的三种注释</a></li></ul></li><li><a href="#4-jsp%E4%B9%9D%E5%A4%A7%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1">4. jsp九大内置对象</a></li><li><a href="#5-jsp%E5%9B%9B%E5%A4%A7%E5%9F%9F%E5%AF%B9%E8%B1%A1">5. jsp四大域对象</a></li><li><a href="#6-jsp%E4%B8%ADout%E8%BE%93%E5%87%BA%E5%92%8Cresponsegetwriter%E8%BE%93%E5%87%BA%E7%9A%84%E5%8C%BA%E5%88%AB">6. jsp中out输出和response.getWriter输出的区别</a></li><li><a href="#7-jsp%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE">7. jsp常用标签</a><ul><li><a href="#71-%E9%9D%99%E6%80%81%E5%8C%85%E5%90%AB">7.1 静态包含</a></li><li><a href="#72-%E5%8A%A8%E6%80%81%E5%8C%85%E5%90%AB">7.2 动态包含</a></li><li><a href="#73-jsp%E6%A0%87%E7%AD%BE-%E8%BD%AC%E5%8F%91">7.3 jsp标签-转发</a></li></ul></li><li><a href="#8-%E7%BB%83%E4%B9%A0">8. 练习</a><ul><li><a href="#%E7%BB%83%E4%B9%A0%E4%B8%80%E5%9C%A8-jsp-%E9%A1%B5%E9%9D%A2%E4%B8%AD%E8%BE%93%E5%87%BA%E4%B9%9D%E4%B9%9D%E4%B9%98%E6%B3%95%E5%8F%A3%E8%AF%80%E8%A1%A8">练习一：在 jsp 页面中输出九九乘法口诀表</a></li><li><a href="#%E7%BB%83%E4%B9%A0%E4%BA%8Cjsp-%E8%BE%93%E5%87%BA%E4%B8%80%E4%B8%AA%E8%A1%A8%E6%A0%BC%E9%87%8C%E9%9D%A2%E6%9C%89-10-%E4%B8%AA%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF">练习二：jsp 输出一个表格，里面有 10 个学生信息。</a></li></ul></li><li><a href="#9-linstener%E7%9B%91%E5%90%AC%E5%99%A8">9. Linstener监听器</a><ul><li><a href="#91-servletcontextlistener%E7%9B%91%E5%90%AC%E5%99%A8">9.1 ServletContextListener监听器</a></li></ul></li></ul><!-- tocstop --><h2><span id="1-什么是jsp">1. 什么是jsp</span></h2><p>jsp 的全换是 java server pages。Java 的服务器页面。<br>jsp 的主要作用是代替 Servlet 程序回传 html 页面的数据。<br>因为 Servlet 程序回传 html 页面数据是一件非常繁锁的事情。开发成本和维护成本都极高。</p><p><strong>Servlet 回传 html 页面数据的代码</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PringHtml</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 通过响应的回传流回传html页面数据</span><br>        resp.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>        PrintWriter writer = resp.getWriter();<br>        writer.write(<span class="hljs-string">&quot;&lt;!DOCTYPE html&gt;\r\n&quot;</span>);<br>        writer.write(<span class="hljs-string">&quot;&lt;html lang=\&quot;en\&quot;&gt;\r\n&quot;</span>);<br>        writer.write(<span class="hljs-string">&quot;&lt;head&gt;\r\n&quot;</span>);<br>        writer.write(<span class="hljs-string">&quot;&lt;meta charset=\&quot;UTF-8\&quot;&gt;\r\n&quot;</span>);<br>        writer.write(<span class="hljs-string">&quot;&lt;title&gt;Title&lt;/title&gt;\r\n&quot;</span>);<br>        writer.write(<span class="hljs-string">&quot;&lt;/head&gt;\r\n&quot;</span>);<br>        writer.write(<span class="hljs-string">&quot;&lt;body&gt;\r\n&quot;</span>);<br>        writer.write(<span class="hljs-string">&quot;这是html页面数据\r\n&quot;</span>);<br>        writer.write(<span class="hljs-string">&quot;&lt;/body&gt;\r\n&quot;</span>);<br>        writer.write(<span class="hljs-string">&quot;&lt;/html&gt;\r\n&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>jsp 回传一个简单 html 页面的代码</strong></p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>    &lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>    &lt;/head&gt;<br>    &lt;body&gt;<br>        这是 html 页面数据<br>    &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p><strong>小结：</strong></p><ol><li>  如何创建？右键新建jsp</li><li>  如果访问？jsp和html一样放在web目录下，所以访问也和访问html一样。</li></ol><h2><span id="2-jsp的本质是什么">2. jsp的本质是什么</span></h2><p>jsp 页面本质上是一个 Servlet 程序。</p><p>当我们第一次访问 jsp 页面的时候。Tomcat 服务器会帮我们把 jsp 页面翻译成为一个 java 源文件。并且对它进行编译成为.class 字节码程序。</p><p>我们跟踪源代码发现，HttpJspBase 类。它直接地继承了 HttpServlet 类。也就是说。jsp 翻译出来的 java 类，它间接了继<br>承了 HttpServlet 类。也就是说，翻译出来的是一个 Servlet 程序.</p><p>总结：通过翻译的 java 源代码我们就可以得到结果：jsp 就是 Servlet 程序。</p><h2><span id="3-jsp的三种语法">3. jsp的三种语法</span></h2><h3><span id="31-jsp头部的page指令">3.1 jsp头部的page指令</span></h3><p>jsp 的 page 指令可以修改 jsp 页面中一些重要的属性，或者行为。</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br></code></pre></div></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>language</td><td>jsp翻译后的语言，只支持java</td></tr><tr><td>contentType</td><td>jsp返回的内容的数据类型，也就是response.setContentType()参数值</td></tr><tr><td>pageEncoding</td><td>jsp页面本身的字符集</td></tr><tr><td>import</td><td>用于导包</td></tr><tr><td>—-</td><td>—-</td></tr><tr><td>autoFlush</td><td>out输出流满了之后，是否自动刷新缓冲区</td></tr><tr><td>buffer</td><td>设置out缓冲区的大小，默认是8kb，一般也不改它</td></tr><tr><td>—-</td><td>—</td></tr><tr><td>error</td><td>出错时，自动跳转取错误页面的路径</td></tr><tr><td>isErrorPage</td><td>设置当前jsp页面是否是错误信息页面，默认是false，如果true，可以获取异常信息。（翻译后多一个异常对象）</td></tr><tr><td>session</td><td>设置访问当前jsp页面，是否会创建HttpSession对象，默认是true</td></tr><tr><td>extends</td><td>设置jsp翻译出来的java类默认继承谁。</td></tr></tbody></table><h3><span id="32-jsp中的常用脚本">3.2 jsp中的常用脚本</span></h3><h4><span id="1-声明脚本极少使用">1. 声明脚本<font color="red">（极少使用）</font></span></h4><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%! 声明java代码 %&gt;<br></code></pre></div></td></tr></table></figure><p>演示</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%!<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String,Object&gt; map;<br>%&gt;<br>&lt;%!<br>    <span class="hljs-keyword">static</span> &#123;<br>    map = <span class="hljs-keyword">new</span> HashMap&lt;String,Object&gt;();<br>    map.put(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>);<br>    map.put(<span class="hljs-string">&quot;key3&quot;</span>, <span class="hljs-string">&quot;value3&quot;</span>);<br>&#125;<br>%&gt;<br>&lt;%!<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">abc</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">12</span>;<br>&#125;<br>%&gt;<br></code></pre></div></td></tr></table></figure><h4><span id="2-表达式脚本常用">2. 表达式脚本<font color="red">（常用）</font></span></h4><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%= 表达式 %&gt;<br></code></pre></div></td></tr></table></figure><p>表达式脚本的作用是：的 jsp 页面上输出数据。（可以显示在页面上）</p><p>演示</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%=<span class="hljs-number">12</span> %&gt; &lt;br&gt;<br>&lt;%=<span class="hljs-number">12.12</span> %&gt; &lt;br&gt;<br>&lt;%=<span class="hljs-string">&quot;我是字符串&quot;</span> %&gt; &lt;br&gt;<br>&lt;%=map%&gt; &lt;br&gt;<br>&lt;%=request.getParameter(<span class="hljs-string">&quot;username&quot;</span>)%&gt;<br></code></pre></div></td></tr></table></figure><h4><span id="3-代码脚本常用">3. 代码脚本<font color="red">（常用）</font></span></h4><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;% java 语句 %&gt;<br></code></pre></div></td></tr></table></figure><p>代码脚本的作用是：可以在 jsp 页面中，编写我们自己需要的功能（写的是 java 语句）。</p><p>演示</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%--练习：--%&gt;<br>&lt;%--<span class="hljs-number">1.</span>代码脚本----<span class="hljs-keyword">if</span> 语句--%&gt;<br>&lt;%<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">13</span> ;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">12</span>) &#123;<br>%&gt;<br>&lt;h1&gt;鹏哥好帅&lt;/h1&gt;<br>&lt;%<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>%&gt;<br>&lt;h1&gt;鹏哥又骗人了！&lt;/h1&gt;<br>&lt;%<br>&#125;<br>%&gt;<br></code></pre></div></td></tr></table></figure><p>就是这样拼凑怪。</p><h3><span id="33-jsp中的三种注释">3.3 jsp中的三种注释</span></h3><ol><li>  html注释：会被翻译到java源代码中，输出到客户端。</li><li>  java注释：会被翻译到java代码中，编程java代码的注释。</li><li>  <strong>jsp注释</strong>：可以注释掉jsp中的所有代码，这才jsp中正经使用的注释方法。</li></ol><p>演示</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%--这是 jsp 注释--%&gt;<br></code></pre></div></td></tr></table></figure><h2><span id="4-jsp九大内置对象">4. jsp九大内置对象</span></h2><p>jsp 中的内置对象，是指 Tomcat 在翻译 jsp 页面成为 Servlet 源代码后，内部提供的九大对象，叫内置对象。</p><table><thead><tr><th>对象名</th><th>解释</th></tr></thead><tbody><tr><td>request</td><td>请求对象</td></tr><tr><td>response</td><td>响应对象</td></tr><tr><td>pageContext</td><td>jsp的上下文对象</td></tr><tr><td>session</td><td>会话对象</td></tr><tr><td>application</td><td>ServletContext对象</td></tr><tr><td>config</td><td>ServletConfig对象</td></tr><tr><td>out</td><td>jsp输出流对象</td></tr><tr><td>page</td><td>指向当前jsp的对象</td></tr><tr><td>exception</td><td>异常对象</td></tr></tbody></table><h2><span id="5-jsp四大域对象">5. jsp四大域对象</span></h2><table><thead><tr><th>对象名</th><th>对应类名</th><th>解释</th></tr></thead><tbody><tr><td>pageContext</td><td>PageContextImpl 类</td><td>当前jsp内有效</td></tr><tr><td>request</td><td>HttpServletRequest 类</td><td>一次请求有效</td></tr><tr><td>session</td><td>HttpSession 类</td><td>一个会话范围内有效（直到关闭浏览器失效）</td></tr><tr><td>application</td><td>ServletContext 类</td><td>整个web工程内有效（只要工程不停止）</td></tr></tbody></table><p>域对象是可以像 Map 一样存取数据的对象。四个域对象功能一样。不同的是它们对数据的存取范围。</p><p>优先顺序</p><figure class="highlight coffeescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coffeescript">pageContext ===<span class="hljs-function">=&gt;</span>&gt;&gt; request ===<span class="hljs-function">=&gt;</span>&gt;&gt; session ===<span class="hljs-function">=&gt;</span>&gt;&gt; application<br></code></pre></div></td></tr></table></figure><p>scope.jsp 页面</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;body&gt;<br>    &lt;h1&gt;scope.jsp 页面&lt;/h1&gt;<br>    &lt;%<br>        <span class="hljs-comment">// 往四个域中都分别保存了数据</span><br>        pageContext.setAttribute(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;pageContext&quot;</span>);<br>        request.setAttribute(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;request&quot;</span>);<br>        session.setAttribute(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;session&quot;</span>);<br>        application.setAttribute(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;application&quot;</span>);<br>    %&gt;<br>    pageContext 域是否有值：&lt;%=pageContext.getAttribute(<span class="hljs-string">&quot;key&quot;</span>)%&gt; &lt;br&gt;<br>    request 域是否有值：&lt;%=request.getAttribute(<span class="hljs-string">&quot;key&quot;</span>)%&gt; &lt;br&gt;<br>    session 域是否有值：&lt;%=session.getAttribute(<span class="hljs-string">&quot;key&quot;</span>)%&gt; &lt;br&gt;<br>    application 域是否有值：&lt;%=application.getAttribute(<span class="hljs-string">&quot;key&quot;</span>)%&gt; &lt;br&gt;<br>    &lt;%<br>         request.getRequestDispatcher(<span class="hljs-string">&quot;/scope2.jsp&quot;</span>).forward(request,response);<br>    %&gt;<br>&lt;/body&gt;<br></code></pre></div></td></tr></table></figure><p>scope2.jsp 页面</p><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;body&gt;<br>    &lt;h1&gt;scope2.jsp 页面&lt;/h1&gt;<br>    pageContext 域是否有值：&lt;%=pageContext.getAttribute(<span class="hljs-string">&quot;key&quot;</span>)%&gt;<br>    &lt;br&gt;<br>    request 域是否有值：&lt;%=request.getAttribute(<span class="hljs-string">&quot;key&quot;</span>)%&gt; &lt;br&gt;<br>    session 域是否有值：&lt;%=session.getAttribute(<span class="hljs-string">&quot;key&quot;</span>)%&gt; &lt;br&gt;<br>    application 域是否有值：&lt;%=application.getAttribute(<span class="hljs-string">&quot;key&quot;</span>)%&gt;<br>    &lt;br&gt;<br>&lt;/body&gt;<br></code></pre></div></td></tr></table></figure><h2><span id="6-jsp中out输出和responsegetwriter输出的区别">6. jsp中out输出和response.getWriter输出的区别</span></h2><p>由于 jsp 翻译之后，底层源代码都是使用 out 来进行输出，所以一般情况下。我们在 jsp 页面中统一使用 out 来进行输出。避<br>免打乱页面输出内容的顺序。</p><p>out.write()        输出字符串没有问题</p><p>out.print()        输出任意数据都没有问题（都转换成为字符串后调用的 write 输出）</p><p>深入源码，浅出结论：在 jsp 页面中，可以统一使用 out.print()来进行输出</p><h2><span id="7-jsp常用标签">7. jsp常用标签</span></h2><h3><span id="71-静态包含">7.1 静态包含</span></h3><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%@ include file=<span class="hljs-string">&quot;/include/footer.jsp&quot;</span>%&gt;<br></code></pre></div></td></tr></table></figure><p>静态包含其实是把被包含的 jsp 页面的代码拷贝到包含的位置执行输出。</p><h3><span id="72-动态包含">7.2 动态包含</span></h3><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;jsp:include page=<span class="hljs-string">&quot;/include/footer.jsp&quot;</span>&gt;<br>    &lt;jsp:param name=<span class="hljs-string">&quot;username&quot;</span> value=<span class="hljs-string">&quot;bbj&quot;</span>/&gt;<br>    &lt;jsp:param name=<span class="hljs-string">&quot;password&quot;</span> value=<span class="hljs-string">&quot;root&quot;</span>/&gt;<br>&lt;/jsp:include&gt;<br></code></pre></div></td></tr></table></figure><p>动态包含也可以像静态包含一样。把被包含的内容执行输出到包含位置</p><p>特点：</p><ol><li>  动态包含会把包含的 jsp 页面也翻译成为 java 代码</li><li>  动态包含，还可以传递参数</li></ol><h3><span id="73-jsp标签-转发">7.3 jsp标签-转发</span></h3><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;jsp:forward page=<span class="hljs-string">&quot;/scope2.jsp&quot;</span>&gt;&lt;/jsp:forward&gt;<br></code></pre></div></td></tr></table></figure><p>它的功能就是请求转发page 属性设置请求转发的路径</p><h2><span id="8-练习">8. 练习</span></h2><h3><span id="练习一在-jsp-页面中输出九九乘法口诀表">练习一：在 jsp 页面中输出九九乘法口诀表</span></h3><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>    &lt;style type=<span class="hljs-string">&quot;text/css&quot;</span>&gt;<br>    table&#123;<br>    width: 650px;<br>    &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;%-- 练习一：在 jsp 页面中输出九九乘法口诀表 --%&gt;<br>    &lt;h1 align=<span class="hljs-string">&quot;center&quot;</span>&gt;九九乘法口诀表&lt;/h1&gt;<br>    &lt;table align=<span class="hljs-string">&quot;center&quot;</span>&gt;<br>        &lt;%-- 外层循环遍历行 --%&gt;<br>        &lt;% <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123; %&gt;<br>        &lt;tr&gt;<br>            &lt;%-- 内层循环遍历单元格 --%&gt;<br>            &lt;% <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= i ; j++) &#123; %&gt;<br>            &lt;td&gt;&lt;%=j + <span class="hljs-string">&quot;x&quot;</span> + i + <span class="hljs-string">&quot;=&quot;</span> + (i*j)%&gt;&lt;/td&gt;<br>            &lt;% &#125; %&gt;<br>        &lt;/tr&gt;<br>        &lt;% &#125; %&gt;<br>    &lt;/table&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h3><span id="练习二jsp-输出一个表格里面有-10-个学生信息">练习二：jsp 输出一个表格，里面有 10 个学生信息。</span></h3><figure class="highlight jsp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;com.wangpeng.pojo.Student&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.List&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.ArrayList&quot;</span> %&gt;&lt;%--<br>  Created by IntelliJ IDEA.<br>  User: wangpeng<br>  Date: <span class="hljs-number">2021</span>/<span class="hljs-number">8</span>/<span class="hljs-number">2</span><br>  Time: <span class="hljs-number">22</span>:<span class="hljs-number">24</span><br>  To change <span class="hljs-keyword">this</span> template use File | Settings | File Templates.<br>--%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>    &lt;style type=<span class="hljs-string">&quot;text/css&quot;</span>&gt;<br>        table&#123;<br>            width: 500px;<br>            border: 1px blue solid;<br>            border-collapse: collapse;<br>        &#125;<br>        tr,td,th&#123;<br>            border: 1px blue solid;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1 align=<span class="hljs-string">&quot;center&quot;</span>&gt;学生信息表&lt;/h1&gt;<br>    &lt;%<br>        List&lt;Student&gt; studentList = <span class="hljs-keyword">new</span> ArrayList&lt;Student&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123;<br>            studentList.add(<span class="hljs-keyword">new</span> Student(i, <span class="hljs-string">&quot;小明&quot;</span> + i, <span class="hljs-number">20</span>, i+<span class="hljs-number">100000</span>));<br>        &#125;<br>    %&gt;<br>    &lt;table align=<span class="hljs-string">&quot;center&quot;</span>&gt;<br>        &lt;tr&gt;<br>            &lt;th&gt;编号&lt;/th&gt;<br>            &lt;th&gt;姓名&lt;/th&gt;<br>            &lt;th&gt;年龄&lt;/th&gt;<br>            &lt;th&gt;电话&lt;/th&gt;<br>            &lt;th&gt;操作&lt;/th&gt;<br>        &lt;/tr&gt;<br>        &lt;% <span class="hljs-keyword">for</span>(Student student : studentList) &#123; %&gt;<br>            &lt;tr&gt;<br>                &lt;td&gt;&lt;%= student.getId() %&gt;&lt;/td&gt;<br>                &lt;td&gt;&lt;%= student.getName() %&gt;&lt;/td&gt;<br>                &lt;td&gt;&lt;%= student.getAge() %&gt;&lt;/td&gt;<br>                &lt;td&gt;&lt;%= student.getPhone() %&gt;&lt;/td&gt;<br>                &lt;td&gt;添加、删除&lt;/td&gt;<br>            &lt;/tr&gt;<br>        &lt;% &#125; %&gt;<br>    &lt;/table&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><h2><span id="9-linstener监听器">9. Linstener监听器</span></h2><p>1、Listener 监听器它是 JavaWeb 的三大组件之一。JavaWeb 的三大组件分别是：Servlet 程序、Filter 过滤器、Listener 监听器。<br>2、Listener 它是 JavaEE 的规范，就是接口<br>3、监听器的作用是，监听某种事物的变化。然后通过回调函数，反馈给客户（程序）去做一些相应的处理。</p><h3><span id="91-servletcontextlistener监听器">9.1 ServletContextListener监听器</span></h3><p>ServletContextListener 它可以监听 ServletContext 对象的创建和销毁。<br>ServletContext 对象在 web 工程启动的时候创建，在 web 工程停止的时候销毁。<br>监听到创建和销毁之后都会分别调用 ServletContextListener 监听器的方法反馈。</p><p>两个方法分别是：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ServletContextListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">EventListener</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 在ServletContext 对象创建之后马上调用，做初始化</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextInitialized</span><span class="hljs-params">(ServletContextEvent sce)</span></span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 在ServletContext 对象销毁之后调用</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextDestroyed</span><span class="hljs-params">(ServletContextEvent sce)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如何使用 ServletContextListener 监听器监听 ServletContext 对象。<br>使用步骤如下：<br>1、编写一个类去实现 ServletContextListener<br>2、实现其两个回调方法<br>3、到 web.xml 中去配置监听器</p><p>监听器实现类：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServletContextListenerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ServletContextListener</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextInitialized</span><span class="hljs-params">(ServletContextEvent sce)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;ServletContext 对象被创建了&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextDestroyed</span><span class="hljs-params">(ServletContextEvent sce)</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;ServletContext 对象被销毁了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>web.xml 中的配置：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>com.atguigu.listener.MyServletContextListenerImpl<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaWeb</tag>
      
      <tag>jsp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb-06-Servlet</title>
    <link href="/2021/07/20/JavaWeb-06-Servlet/"/>
    <url>/2021/07/20/JavaWeb-06-Servlet/</url>
    
    <content type="html"><![CDATA[<h1><span id="servlet">Servlet</span></h1><!-- toc --><ul><li><a href="#1-servlet%E6%8A%80%E6%9C%AF">1. Servlet技术</a><ul><li><a href="#11-%E4%BB%80%E4%B9%88%E6%98%AFservlet">1.1 什么是Servlet</a></li><li><a href="#12-%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0-servlet-%E7%A8%8B%E5%BA%8F">1.2 手动实现 Servlet 程序</a></li><li><a href="#13-url-%E5%9C%B0%E5%9D%80%E5%88%B0-servlet-%E7%A8%8B%E5%BA%8F%E7%9A%84%E8%AE%BF%E9%97%AE">1.3 url 地址到 Servlet 程序的访问</a></li><li><a href="#14-servlet-%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">1.4 Servlet 的生命周期</a></li><li><a href="#15-get-%E5%92%8C-post-%E8%AF%B7%E6%B1%82%E7%9A%84%E5%88%86%E5%8F%91%E5%A4%84%E7%90%86">1.5 GET 和 POST 请求的分发处理</a></li><li><a href="#16-%E9%80%9A%E8%BF%87%E7%BB%A7%E6%89%BFhttpservlet%E5%AE%9E%E7%8E%B0servlet%E7%A8%8B%E5%BA%8F">1.6 通过继承HttpServlet实现Servlet程序</a></li><li><a href="#17-%E7%BB%A7%E6%89%BF%E4%BD%93%E7%B3%BB">1.7 继承体系</a></li></ul></li><li><a href="#2-servletconfig%E7%B1%BB">2. ServletConfig类</a></li><li><a href="#3-servletcontext%E7%B1%BB">3. ServletContext类</a></li><li><a href="#4-http%E5%8D%8F%E8%AE%AE">4. HTTP协议</a><ul><li><a href="#41-%E8%AF%B7%E6%B1%82%E7%9A%84http%E5%8D%8F%E8%AE%AE%E6%A0%BC%E5%BC%8F">4.1 请求的HTTP协议格式</a><ul><li><a href="#get%E8%AF%B7%E6%B1%82">GET请求</a></li><li><a href="#post%E8%AF%B7%E6%B1%82">POST请求</a></li></ul></li><li><a href="#42-%E5%B8%B8%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E7%9A%84%E8%AF%B4%E6%98%8E">4.2 常用请求头的说明</a></li><li><a href="#43-%E5%93%AA%E4%BA%9B%E6%98%AFget%E8%AF%B7%E6%B1%82%E5%93%AA%E4%BA%9B%E6%98%AFpost%E8%AF%B7%E6%B1%82">4.3 哪些是GET请求，哪些是POST请求</a></li><li><a href="#44-%E5%93%8D%E5%BA%94%E7%9A%84http%E5%8D%8F%E8%AE%AE%E6%A0%BC%E5%BC%8F">4.4 响应的HTTP协议格式</a></li><li><a href="#45-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%93%8D%E5%BA%94%E7%A0%81%E8%AF%B4%E6%98%8E">4.5 常用的响应码说明</a></li><li><a href="#46mime-%E7%B1%BB%E5%9E%8B%E8%AF%B4%E6%98%8E">4.6MIME 类型说明</a></li><li><a href="#47-%E6%9F%A5%E7%9C%8Bhttp%E5%8D%8F%E8%AE%AE">4.7 查看HTTP协议</a></li></ul></li><li><a href="#5-httpservletrequest-%E7%B1%BB">5. HttpServletRequest 类</a><ul><li><a href="#51-%E4%BB%8B%E7%BB%8D">5.1 介绍</a></li><li><a href="#52-httpservletrequest-%E7%B1%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95">5.2 HttpServletRequest 类的常用方法</a></li><li><a href="#53-%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0">5.3 如何获取请求参数</a></li><li><a href="#54-%E8%A7%A3%E5%86%B3%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98">5.4 解决中文乱码问题</a></li><li><a href="#55-%E8%AF%B7%E6%B1%82%E7%9A%84%E8%BD%AC%E5%8F%91">5.5 请求的转发</a></li><li><a href="#56-base-%E6%A0%87%E7%AD%BE%E7%9A%84%E4%BD%9C%E7%94%A8">5.6 base 标签的作用</a></li><li><a href="#57-web%E4%B8%AD%E7%9A%84%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%92%8C%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84">5.7 Web中的相对路径和绝对路径</a></li><li><a href="#58-web%E4%B8%AD%E6%96%9C%E6%9D%A0%E7%9A%84%E4%B8%8D%E5%90%8C%E5%90%AB%E4%B9%89">5.8 web中斜杠/的不同含义</a></li></ul></li><li><a href="#6-httpservletresponse%E7%B1%BB">6. HttpServletResponse类</a><ul><li><a href="#61-%E4%BB%8B%E7%BB%8D">6.1 介绍</a></li><li><a href="#62-%E4%B8%A4%E4%B8%AA%E8%BE%93%E5%87%BA%E6%B5%81%E8%AF%B4%E6%98%8E">6.2 两个输出流说明</a></li><li><a href="#63-%E5%A6%82%E4%BD%95%E5%BE%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%9B%9E%E4%BC%A0%E6%95%B0%E6%8D%AE">6.3 如何往客户端回传数据</a></li><li><a href="#64-%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81">6.4 解决乱码</a></li><li><a href="#65-%E8%AF%B7%E6%B1%82%E9%87%8D%E5%AE%9A%E5%90%91">6.5 请求重定向</a></li></ul></li></ul><!-- tocstop --><h2><span id="1-servlet技术">1. Servlet技术</span></h2><h3><span id="11-什么是servlet">1.1 什么是Servlet</span></h3><ol><li>  Servlet是JavaEE的接口之一。</li><li>  Servlet 就 JavaWeb 三大组件之一。三大组件分别是：Servlet 程序、Filter 过滤器、Listener 监听器。</li><li>  Servlet 是运行在服务器上的一个 java 小程序，它可以<font color="red">接收</font>客户端发送过来的<font color="red">请求</font>，并<font color="red">响应数据</font>给客户端。</li></ol><h3><span id="12-手动实现-servlet-程序">1.2 手动实现 Servlet 程序</span></h3><p>1、编写一个类去实现 Servlet 接口<br>2、实现 service 方法，处理请求，并响应数据<br>3、到 web.xml 中去配置 servlet 程序的访问地址</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Servlet</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * service 方法是专门用来处理请求和响应的</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> servletRequest</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> servletResponse</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span></span><br><span class="hljs-function">    ServletException, IOException </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;Hello Servlet 被访问了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3><span id="13-url-地址到-servlet-程序的访问">1.3 url 地址到 Servlet 程序的访问</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807170217.png" alt="image-20210807170217853"></p><h3><span id="14-servlet-的生命周期">1.4 Servlet 的生命周期</span></h3><p>1、执行 Servlet 构造器方法<br>2、执行 init 初始化方法<br>第一、二步，是在第一次访问，的时候创建 Servlet 程序会调用。<br>3、执行 service 方法<br>第三步，每次访问都会调用。</p><p>4、执行 destroy 销毁方法<br>第四步，在 web 工程停止的时候调用。</p><h3><span id="15-get-和-post-请求的分发处理">1.5 GET 和 POST 请求的分发处理</span></h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Servlet</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * service 方法是专门用来处理请求和响应的</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> servletRequest</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> servletResponse</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@throws</span> ServletException</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="hljs-keyword">throws</span></span><br><span class="hljs-function">    ServletException, IOException </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;3 service === Hello Servlet 被访问了&quot;</span>);<br>    <span class="hljs-comment">// 类型转换（因为它有 getMethod()方法）</span><br>    HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;<br>    <span class="hljs-comment">// 获取请求的方式</span><br>    String method = httpServletRequest.getMethod();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;GET&quot;</span>.equals(method)) &#123;<br>        doGet();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;POST&quot;</span>.equals(method)) &#123;<br>        doPost();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 做 get 请求的操作</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;get 请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;get 请求&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 做 post 请求的操作</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;post 请求&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;post 请求&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3><span id="16-通过继承httpservlet实现servlet程序">1.6 通过继承HttpServlet实现Servlet程序</span></h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponseresp)</span></span>&#123;...&#125;<br><span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponseresp)</span></span>&#123;...&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3><span id="17-继承体系">1.7 继承体系</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807170733.png" alt="image-20210807170733123"></p><h2><span id="2-servletconfig类">2. ServletConfig类</span></h2><p> Servlet 程序的配置信息类</p><p>Servlet 程序和 ServletConfig 对象都是由 Tomcat 负责创建，我们负责使用。<br>Servlet 程序默认是第一次访问的时候创建，ServletConfig 是每个 Servlet 程序创建时，就创建一个对应的 ServletConfig 对象。</p><p>1、可以获取 Servlet 程序的别名 servlet-name 的值<br>2、获取初始化参数 init-param（在web.xml中的都是使用getInitParameter方法）<br>3、<font color="red">获取 ServletContext 对象</font></p><p><strong>也就是获取web.xml里servlet标签的内容。</strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- servlet 标签给 Tomcat 配置 Servlet 程序 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--servlet-name 标签 Servlet 程序起一个别名（一般是类名） --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.atguigu.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--init-param 是初始化参数--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--是参数名--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>username<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--是参数值--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--init-param 是初始化参数--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--是参数名--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>url<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--是参数值--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/test<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-comment">&lt;!--servlet-mapping 标签给 servlet 程序配置访问地址--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--servlet-name 标签的作用是告诉服务器，我当前配置的地址给哪个Servlet 程序使用--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ServletConfig servletConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;2 init 初始化方法&quot;</span>);<br><br>    <span class="hljs-comment">// 1、可以获取 Servlet 程序的别名 servlet-name 的值</span><br>    System.out.println(<span class="hljs-string">&quot;HelloServlet 程序的别名是:&quot;</span> + servletConfig.getServletName());<br><br>    <span class="hljs-comment">// 2、获取初始化参数 init-param</span><br>    System.out.println(<span class="hljs-string">&quot;初始化参数 username 的值是;&quot;</span> + servletConfig.getInitParameter(<span class="hljs-string">&quot;username&quot;</span>));<br>    System.out.println(<span class="hljs-string">&quot;初始化参数 url 的值是;&quot;</span> + servletConfig.getInitParameter(<span class="hljs-string">&quot;url&quot;</span>));<br><br>    <span class="hljs-comment">// 3、获取 ServletContext 对象</span><br>    System.out.println(servletConfig.getServletContext());<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p><font color="red">注意</font></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807171328.png" alt="image-20210807171328276"></p><h2><span id="3-servletcontext类">3. ServletContext类</span></h2><ol><li><p>  ServletContext 是一个接口，它表示 Servlet 上下文对象</p></li><li><p>  一个 web 工程，只有一个 ServletContext 对象实例。</p></li><li><p>  ServletContext 对象是一个域对象。</p></li><li><p>  ServletContext 是在 web 工程部署启动的时候创建。在 web 工程停止的时候销毁。</p></li></ol><p>什么是域对象?<br>域对象，是可以像 Map 一样存取数据的对象，叫域对象。<br>这里的域指的是存取数据的操作范围，整个 web 工程。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807172129.png" alt="image-20210807172129662"></p><p><strong>ServletContext 类的四个作用</strong></p><p>1、获取 web.xml 中配置的上下文参数 context-param（这个也是自定的域的内容）<br>2、获取当前的工程路径，格式: /工程路径<br>3、获取工程部署后在服务器硬盘上的绝对路径<br>4、像 Map 一样存取数据</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ContextServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//1. 获取web.xml中配置的上下文参数context-param</span><br>        ServletContext context = getServletConfig().getServletContext();<br><span class="hljs-comment">//注意是getInitParameter,（在web.xml中的都是使用getInitParameter方法）</span><br>        String username = context.getInitParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        String password = context.getInitParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;context-param参数username的值是：&quot;</span> + username);<br>        System.out.println(<span class="hljs-string">&quot;context-param参数password的值是：&quot;</span> + password);<br>        <span class="hljs-comment">//2. 获取当前工程路径，格式：/工程路径</span><br>        System.out.println(<span class="hljs-string">&quot;当前工程路径:&quot;</span> + context.getContextPath());<br>        <span class="hljs-comment">//3. 获取工程不是后在服务器硬盘上的绝对路径</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * /斜杠被服务器解析地址为：http://ip:port/工程名/     映射到idea代码的web目录&lt;br/&gt;</span><br><span class="hljs-comment">         */</span><br>        System.out.println(<span class="hljs-string">&quot;工程部署的路径是：&quot;</span> + context.getRealPath(<span class="hljs-string">&quot;/&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;工程下css目录的绝对路径是：&quot;</span> + context.getRealPath(<span class="hljs-string">&quot;/css&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;工程下img目录的1.jpg绝对路径是：&quot;</span> + context.getRealPath(<span class="hljs-string">&quot;/imgs/1.jpg&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--context-param是上下文参数（它属于整个web工程）--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>username<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>context<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br><span class="hljs-comment">&lt;!--context-param 是上下文参数(它属于整个 web工程)--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>password<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>ServletContext 像 Map 一样存取数据</p><p>ConTextServlet1</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ContextServlet1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//获取ServletContext对象</span><br>        ServletContext context = getServletConfig().getServletContext();<br>        System.out.println(<span class="hljs-string">&quot;Context1&quot;</span> + context);<br>        System.out.println(<span class="hljs-string">&quot;保存之前：Context1 中获取域数据Key1的值是：&quot;</span> + context.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>));<br>        context.setAttribute(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value1&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;Context1 中获取域数据Key1的值是：&quot;</span> + context.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;Context1 中获取域数据Key1的值是：&quot;</span> + context.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;Context1 中获取域数据Key1的值是：&quot;</span> + context.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;Context1 中获取域数据Key1的值是：&quot;</span> + context.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>ConTextServlet2</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ContextServlet2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        ServletContext context = getServletContext();<br>        System.out.println(<span class="hljs-string">&quot;Context2&quot;</span> + context);<br>        System.out.println(<span class="hljs-string">&quot;Context2 中获取域数据Key1的值是：&quot;</span> + context.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>));<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2><span id="4-http协议">4. HTTP协议</span></h2><h3><span id="41-请求的http协议格式">4.1 请求的HTTP协议格式</span></h3><h4><span id="get请求">GET请求</span></h4><p>1、请求行<br>(1) 请求的方式 GET<br>(2) 请求的资源路径[+?+请求参数]<br>(3) 请求的协议的版本号 HTTP/1.1</p><p>2、请求头<br>key : value 组成 不同的键值对，表示不同的含义。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807172836.png" alt="image-20210807172836056"></p><p>GET请求没有请求体因为数据在url中携带了</p><h4><span id="post请求">POST请求</span></h4><p>1、请求行<br>(1)请求的方式                                    POST</p><p>(2)请求的资源路径[+?+请求参数]</p><p>(3)请求的协议的版本号                    HTTP/1.1</p><p>2、请求头</p><ol><li>key : value            不同的请求头，有不同的含义</li></ol><p><font color="red">空行</font><br>3、请求体 ===&gt;&gt;&gt; 就是发送给服务器的数据</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807173035.png" alt="image-20210807173035825"></p><h3><span id="42-常用请求头的说明">4.2 常用请求头的说明</span></h3><p>Accept: 表示客户端可以接收的数据类型<br>Accpet-Languege: 表示客户端可以接收的语言类型<br>User-Agent: 表示客户端浏览器的信息<br>Host： 表示请求时的服务器 ip 和端口号</p><h3><span id="43-哪些是get请求哪些是post请求">4.3 哪些是GET请求，哪些是POST请求</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807175653.png" alt="image-20210807175653862"></p><h3><span id="44-响应的http协议格式">4.4 响应的HTTP协议格式</span></h3><p>1、响应行<br>    (1) 响应的协议和版本号<br>    (2) 响应状态码<br>    (3) 响应状态描述符<br>2、响应头<br>    (1) key : value 不同的响应头，有其不同含义<br>    <font color="red">空行</font></p><p>3、响应体 —-&gt;&gt;&gt; 就是回传给客户端的数据</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807175823.png" alt="image-20210807175823639"></p><h3><span id="45-常用的响应码说明">4.5 常用的响应码说明</span></h3><p>200 表示请求成功<br>302 表示请求重定向（明天讲）<br>404 表示请求服务器已经收到了，但是你要的数据不存在（请求地址错误）<br>500 表示服务器已经收到请求，但是服务器内部错误（代码错误）</p><h3><span id="46mime-类型说明">4.6MIME 类型说明</span></h3><p>MIME 的英文全称是”Multipurpose Internet MailExtensions”多功能 Internet邮件扩充服务。MIME 类型的格式是“大类型/小类型”，并与某一种文件的扩展名相对应。</p><p>常见的 MIME 类型：</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807175939.png" alt="image-20210807175938991"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807175949.png" alt="image-20210807175949513"></p><h3><span id="47-查看http协议">4.7  查看HTTP协议</span></h3><p>Chrome</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807180124.png" alt="image-20210807180124436"></p><p>Firefox</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807180141.png" alt="image-20210807180140980"></p><h2><span id="5-httpservletrequest-类">5. HttpServletRequest 类</span></h2><h3><span id="51-介绍">5.1 介绍</span></h3><p>每次只要有请求进入 Tomcat 服务器，Tomcat 服务器就会把请求过来的 HTTP 协议信息解析好封装到 Request 对象中。<br>然后传递到 service 方法（doGet 和 doPost）中给我们使用。我们可以通过HttpServletRequest 对象，获取到所有请求的信息。</p><h3><span id="52-httpservletrequest-类的常用方法">5.2 HttpServletRequest 类的常用方法</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807180308.png" alt="image-20210807180308850"></p><p>演示</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RequestAPIServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//1. 获取请求的资源路径</span><br>        System.out.println(<span class="hljs-string">&quot;URI =&gt; &quot;</span> + req.getRequestURI());<br>        <span class="hljs-comment">//2. 获取请求的URL</span><br>        System.out.println(<span class="hljs-string">&quot;URL =&gt; &quot;</span> + req.getRequestURL());<br>        <span class="hljs-comment">//3. 获取客户端ip地址</span><br>        System.out.println(<span class="hljs-string">&quot;客户端ip地址 =&gt; &quot;</span> + req.getRemoteHost());<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 在idea中，使用localhost，得到的客户端ip地址是127.0.0.1</span><br><span class="hljs-comment">         * 在idea中，使用127.0.0.1，得到的客户端ip地址是127.0.0.1</span><br><span class="hljs-comment">         * 在idea中，使用真实ip，得到的客户端ip地址是真实ip</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//4. 获取请求头</span><br>        System.out.println(<span class="hljs-string">&quot;请求头User-Agent ==&gt;&gt; &quot;</span> + req.getHeader(<span class="hljs-string">&quot;User-Agent&quot;</span>));<br>        <span class="hljs-comment">//5. 请求的方式</span><br>        System.out.println(<span class="hljs-string">&quot;请求方式 ==&gt; &quot;</span> + req.getMethod() );<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3><span id="53-如何获取请求参数">5.3 如何获取请求参数</span></h3><p>表单</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:8080/07_servlet/parameterServlet&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>        用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        兴趣爱好：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cpp&quot;</span>&gt;</span>C++<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java&quot;</span>&gt;</span>Java<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;js&quot;</span>&gt;</span>JavaScript<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ParameterServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;-----------------Get---------------&quot;</span>);<br>        <span class="hljs-comment">//获取请求参数</span><br>        String username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        String password = req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        String[] hobby = req.getParameterValues(<span class="hljs-string">&quot;hobby&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;用户名：&quot;</span> + username);<br>        System.out.println(<span class="hljs-string">&quot;密码：&quot;</span> + password);<br>        System.out.println(<span class="hljs-string">&quot;兴趣爱好：&quot;</span> + Arrays.asList(hobby));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//设置请求体的字符集为UTF-8，解决post请求的中文乱码问题</span><br>        <span class="hljs-comment">//在获取亲求参数之前调用才有效</span><br>        req.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;-----------------Post---------------&quot;</span>);<br>        <span class="hljs-comment">//获取请求参数</span><br>        String username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        String password = req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        String[] hobby = req.getParameterValues(<span class="hljs-string">&quot;hobby&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;用户名：&quot;</span> + username);<br>        System.out.println(<span class="hljs-string">&quot;密码：&quot;</span> + password);<br>        System.out.println(<span class="hljs-string">&quot;兴趣爱好：&quot;</span> + Arrays.asList(hobby));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3><span id="54-解决中文乱码问题">5.4 解决中文乱码问题</span></h3><p>doGet</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 获取请求参数</span><br>String username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br><span class="hljs-comment">//1 先以 iso8859-1 进行编码</span><br><span class="hljs-comment">//2 再以 utf-8 进行解码</span><br>username = <span class="hljs-keyword">new</span> String(username.getBytes(<span class="hljs-string">&quot;iso-8859-1&quot;</span>), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>doPost</p><p><strong>看1.3</strong></p><h3><span id="55-请求的转发">5.5 请求的转发</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807180725.png" alt="image-20210807180725112"></p><p>Servlet1</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.RequestDispatcher;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Servlet1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 获取请求的参数（办事的材料）查看</span><br>        String username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;在Servlet1（柜台）中查看参数（材料）：&quot;</span> + username);<br>        <span class="hljs-comment">// 给材料盖一个章，并传递到Servlet2（柜台2）去查看</span><br>        req.setAttribute(<span class="hljs-string">&quot;key1&quot;</span>,<span class="hljs-string">&quot;柜台1的章&quot;</span>);<br>        <span class="hljs-comment">// 问路：Servlet2（柜台）怎么走</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 请求转发必须要以斜杠大头，斜杠表示地址为：http://ip:port/工程名/，映射到IDEA代码的web目录&lt;br/&gt;</span><br><span class="hljs-comment">         */</span><br>        RequestDispatcher requestDispatcher = req.getRequestDispatcher(<span class="hljs-string">&quot;/servlet2&quot;</span>);<br>        <span class="hljs-comment">//走向Servlet2（柜台2）</span><br>        requestDispatcher.forward(req,resp);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>Servlet2</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Servlet2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//获取请求的参数（办事的材料）查看</span><br>        String username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;在Servlet2（柜台2）中查看参数（材料）&quot;</span> + username);<br><br>        <span class="hljs-comment">//查看柜台1是否有盖章</span><br>        Object key1 = req.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;柜台1是否有章：&quot;</span> + key1);<br>        <span class="hljs-comment">//处理自己的业务</span><br>        System.out.println(<span class="hljs-string">&quot;Servlet2 处理自己的业务&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3><span id="56-base-标签的作用">5.6 base 标签的作用</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807180803.png" alt="image-20210807180803610"></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--base 标签设置页面相对路径工作时参照的地址</span><br><span class="hljs-comment">    href 属性就是参数的地址值</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://localhost:8080/07_servlet/a/b/&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="57-web中的相对路径和绝对路径">5.7 Web中的相对路径和绝对路径</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807180852.png" alt="image-20210807180852378"></p><h3><span id="58-web中斜杠的不同含义">5.8 web中斜杠/的不同含义</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807180916.png" alt="image-20210807180916838"></p><h2><span id="6-httpservletresponse类">6. HttpServletResponse类</span></h2><h3><span id="61-介绍">6.1 介绍</span></h3><p>HttpServletResponse 类和 HttpServletRequest 类一样。每次请求进来，Tomcat 服务器都会创建一个 Response 对象传递给 Servlet 程序去使用。HttpServletRequest 表示请求过来的信息，HttpServletResponse 表示所有响应的信息，我们如果需要设置返回给客户端的信息，都可以通过 HttpServletResponse 对象来进行设置。</p><h3><span id="62-两个输出流说明">6.2 两个输出流说明</span></h3><p>字节流 getOutputStream(); 常用于下载（传递二进制数据）<br>字符流 getWriter(); 常用于回传字符串（常用）</p><p>两个流同时只能使用一个。<br>使用了字节流，就不能再使用字符流，反之亦然，否则就会报错。</p><h3><span id="63-如何往客户端回传数据">6.3 如何往客户端回传数据</span></h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResponseIOServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">//System.out.println( resp.getCharacterEncoding());   //默认ISO-8859-1</span><br>        <span class="hljs-comment">//设置服务器字符集为UTF-8</span><br><span class="hljs-comment">//        resp.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="hljs-comment">//        //设置响应头，设置浏览器也使用UTF-8</span><br><span class="hljs-comment">//        resp.setHeader(&quot;Content-Type&quot;, &quot;text/html; charset=UTF-8&quot;);</span><br><br>        <span class="hljs-comment">//此方法一定要在获取流对象之前调用才有效</span><br>        resp.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>        System.out.println( resp.getCharacterEncoding() );<br><br>        <span class="hljs-comment">//要求：往客户端回传字符串数据</span><br>        PrintWriter writer = resp.getWriter();  <span class="hljs-comment">//获取字符流</span><br>        writer.write(<span class="hljs-string">&quot;国歌很帅&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3><span id="64-解决乱码">6.4 解决乱码</span></h3><p>方案一<font color="red">（不推荐）</font></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 设置服务器字符集为 UTF-8</span><br>resp.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br><span class="hljs-comment">// 通过响应头，设置浏览器也使用 UTF-8 字符集</span><br>resp.setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>方案二<font color="red">（推荐）</font></p><h3><span id="65-请求重定向">6.5 请求重定向</span></h3><p>请求重定向，是指客户端给服务器发请求，然后服务器告诉客户端说。我给你一些地址。你去新地址访问。叫请求重定向（因为之前的地址可能已经被废弃）。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210807181236.png" alt="image-20210807181236477"></p><p>方案一</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 设置响应状态码 302 ，表示重定向，（已搬迁）</span><br>resp.setStatus(<span class="hljs-number">302</span>);<br><span class="hljs-comment">// 设置响应头，说明 新的地址在哪里</span><br>resp.setHeader(<span class="hljs-string">&quot;Location&quot;</span>,<span class="hljs-string">&quot;http://localhost:8080&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>方案二<font color="red">（推荐）</font></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">resp.sendRedirect(<span class="hljs-string">&quot;http://localhost:8080&quot;</span>);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaWeb</tag>
      
      <tag>Servlet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb-05-Tomcat</title>
    <link href="/2021/07/20/JavaWeb-05-Tomcat/"/>
    <url>/2021/07/20/JavaWeb-05-Tomcat/</url>
    
    <content type="html"><![CDATA[<h1><span id="tomcat">Tomcat</span></h1><!-- toc --><ul><li><a href="#1-javaweb%E6%A6%82%E5%BF%B5">1. JavaWeb概念</a></li><li><a href="#2web-%E8%B5%84%E6%BA%90%E7%9A%84%E5%88%86%E7%B1%BB">2.Web 资源的分类</a></li><li><a href="#3%E5%B8%B8%E7%94%A8%E7%9A%84-web-%E6%9C%8D%E5%8A%A1%E5%99%A8">3.常用的 Web 服务器</a></li><li><a href="#4tomcat-%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8Cservlet-%E7%89%88%E6%9C%AC%E7%9A%84%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB">4.Tomcat 服务器和Servlet 版本的对应关系</a></li><li><a href="#5tomcat-%E7%9A%84%E4%BD%BF%E7%94%A8">5.Tomcat 的使用</a><ul><li><a href="#a%E5%AE%89%E8%A3%85">a)安装</a></li><li><a href="#b%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D">b)目录介绍</a></li><li><a href="#c%E5%A6%82%E4%BD%95%E5%90%AF%E5%8A%A8-tomcat-%E6%9C%8D%E5%8A%A1%E5%99%A8">c)如何启动 Tomcat 服务器</a></li><li><a href="#%E5%8F%A6%E4%B8%80%E7%A7%8D%E5%90%AF%E5%8A%A8-tomcat-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%96%B9%E5%BC%8F">另一种启动 tomcat 服务器的方式</a></li><li><a href="#dtomcat-%E7%9A%84%E5%81%9C%E6%AD%A2">d)Tomcat 的停止</a></li><li><a href="#e%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9-tomcat-%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7">e)如何修改 Tomcat 的端口号</a></li><li><a href="#f-%E5%A6%82%E4%BD%95%E9%83%A8%E6%9A%91-web-%E5%B7%A5%E7%A8%8B%E5%88%B0-tomcat-%E4%B8%AD">f) 如何部暑 web 工程到 Tomcat 中</a></li><li><a href="#g%E6%89%8B%E6%89%98html-%E9%A1%B5%E9%9D%A2%E5%88%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E5%92%8C%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E8%BE%93%E5%85%A5httpip%E7%AB%AF%E5%8F%A3%E5%8F%B7%E5%B7%A5%E7%A8%8B%E5%90%8D%E8%AE%BF%E9%97%AE%E7%9A%84%E5%8C%BA%E5%88%AB">g)手托html 页面到浏览器和在浏览器中输入http://ip:端口号/工程名/访问的区别</a></li><li><a href="#hroot-%E7%9A%84%E5%B7%A5%E7%A8%8B%E7%9A%84%E8%AE%BF%E9%97%AE%E4%BB%A5%E5%8F%8A-%E9%BB%98%E8%AE%A4-indexhtml-%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%AE%BF%E9%97%AE">h)ROOT 的工程的访问，以及 默认 index.html 页面的访问</a></li></ul></li><li><a href="#6idea-%E6%95%B4%E5%90%88tomcat-%E6%9C%8D%E5%8A%A1%E5%99%A8">6.IDEA 整合Tomcat 服务器</a></li></ul><!-- tocstop --><h2><span id="1-javaweb概念">1. JavaWeb概念</span></h2><p>a)什么是 JavaWeb<br>JavaWeb 是指，所有通过 Java 语言编写可以通过浏览器访问的程序的总称，叫 JavaWeb。<br>JavaWeb 是基于请求和响应来开发的。</p><p>b)什么是请求<br>请求是指客户端给服务器发送数据，叫请求 Request。</p><p>c)什么是响应<br>响应是指服务器给客户端回传数据，叫响应 Response。</p><p>d)请求和响应的关系<br>请求和响应是成对出现的，有请求就有响应。</p><h2><span id="2web-资源的分类">2.Web 资源的分类</span></h2><p>web 资源按实现的技术和呈现的效果的不同，又分为静态资源和动态资源两种。<br>静态资源： html、css、js、txt、mp4 视频 , jpg 图片<br>动态资源： jsp 页面、Servlet 程序</p><h2><span id="3常用的-web-服务器">3.常用的 Web 服务器</span></h2><p>Tomcat：由 Apache 组织提供的一种 Web 服务器，提供对 jsp 和 Servlet 的支持。它是一种轻量级的 javaWeb 容器（服务器），也是当前应用最广的 JavaWeb 服务器（免费）。</p><p>Jboss：是一个遵从 JavaEE 规范的、开放源代码的、纯 Java 的 EJB 服务器，它支持所有的 JavaEE 规范（免费）。</p><p>GlassFish： 由 Oracle 公司开发的一款 JavaWeb 服务器，是一款强健的商业服务器，达到产品级质量（应用很少）。</p><p>Resin：是 CAUCHO 公司的产品，是一个非常流行的服务器，对 servlet 和 JSP 提供了良好的支持，性能也比较优良，resin 自身采用 JAVA 语言开发（收费，应用比较多）。</p><p>WebLogic：是 Oracle 公司的产品，是目前应用最广泛的 Web 服务器，支持 JavaEE 规范，而且不断的完善以适应新的开发要求，适合大型项目（收费，用的不多，适合大公司）。</p><h2><span id="4tomcat-服务器和servlet-版本的对应关系">4.Tomcat 服务器和Servlet 版本的对应关系</span></h2><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725174123.png" alt="image-20210725174123836"></p><p>Servlet 程序从 2.5 版本是现在世面使用最多的版本（xml 配置）<br>到了 Servlet3.0 之后。就是注解版本的 Servlet 使用。<br>以 2.5 版本为主线讲解 Servlet 程序。</p><h2><span id="5tomcat-的使用">5.Tomcat 的使用</span></h2><h3><span id="a安装">a)安装</span></h3><p>找到你需要用的 Tomcat 版本对应的 zip 压缩包，解压到需要安装的目录即可。</p><h3><span id="b目录介绍">b)目录介绍</span></h3><p>bin 专门用来存放 Tomcat 服务器的可执行程序<br>conf 专门用来存放 Tocmat 服务器的配置文件<br>lib 专门用来存放 Tomcat 服务器的 jar 包<br>logs 专门用来存放 Tomcat 服务器运行时输出的日记信息<br>temp 专门用来存放 Tomcdat 运行时产生的临时数据<br>webapps 专门用来存放部署的 Web 工程。<br>work 是 Tomcat 工作时的目录，用来存放 Tomcat 运行时 jsp 翻译为 Servlet 的源码，和 Session 钝化的目录。</p><h3><span id="c如何启动-tomcat-服务器">c)如何启动 Tomcat 服务器</span></h3><p>找到 Tomcat 目录下的 bin 目录下的 startup.bat 文件，双击，就可以启动 Tomcat 服务器。</p><p>如何测试 Tomcat 服务器启动成功？？？</p><p>打开浏览器，在浏览器地址栏中输入以下地址测试：<br>1、<a href="http://localhost:8080/">http://localhost:8080</a><br>2、<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a><br>3、http://真实 ip:8080<br>当出现如下界面，说明 Tomcat 服务器启动成功！！！</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725174623.png" alt="image-20210725174617271"></p><p>常见的启动失败的情况有，双击 startup.bat 文件，就会出现一个小黑窗口一闪而来。<br>这个时候，失败的原因基本上都是因为没有配置好 JAVA_HOME 环境变量。</p><h3><span id="另一种启动-tomcat-服务器的方式">另一种启动 tomcat 服务器的方式</span></h3><p>1、打开命令行<br>2、cd 到 你的 Tomcat 的 bin 目录下</p><p>3、敲入启动命令： catalina run</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725174837.png" alt="image-20210725174837752"></p><h3><span id="dtomcat-的停止">d)Tomcat 的停止</span></h3><p>1、点击 tomcat 服务器窗口的 x 关闭按钮<br>2、把 Tomcat 服务器窗口置为当前窗口，然后按快捷键 Ctrl+C<br>3、找到 Tomcat 的 bin 目录下的 shutdown.bat 双击，就可以停止 Tomcat 服务器</p><h3><span id="e如何修改-tomcat-的端口号">e)如何修改 Tomcat 的端口号</span></h3><p>Mysql 默认的端口号是：3306<br>Tomcat 默认的端口号是：8080<br>找到 Tomcat 目录下的 conf 目录，找到 server.xml 配置文件。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725175146.png" alt="image-20210725175146856"></p><p>平时上百度：<a href="http://www.baidu.com/">http://www.baidu.com:80</a><br>HTTP 协议默认的端口号是：80</p><h3><span id="f-如何部暑-web-工程到-tomcat-中">f) 如何部暑 web 工程到 Tomcat 中</span></h3><p>第一种部署方法：只需要把 web 工程的目录拷贝到 Tomcat 的 webapps 目录下<br>即可。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725194837.png" alt="image-20210725194837037"></p><p>如何访问 Tomcat 下的web 工程。</p><p>只需要在浏览器中输入访问地址格式如下：<br><a href="http://ip:port/工程名/目录下/文件名">http://ip:port/工程名/目录下/文件名</a></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725195016.png" alt="image-20210725195016686"></p><p>第二种部署方法：</p><p>找到 Tomcat 下的 conf 目录\Catalina\localhost\ 下,创建如下的配置文件：</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725195111.png" alt="image-20210725195111889"></p><!-- Context 表示一个工程上下文path 表示工程的访问路径:/abcdocBase 表示你的工程目录在哪里--><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Context</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/abc&quot;</span> <span class="hljs-attr">docBase</span>=<span class="hljs-string">&quot;D:\MyProject\BookStore&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><p>访问这个工程的路径如下:<a href="http://ip:port/abc/">http://ip:port/abc/</a> 就表示访问 E:\book 目录</p><p>注意要重启tomcat</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725200147.png" alt="image-20210725200140871"></p><h3><span id="g手托html-页面到浏览器和在浏览器中输入httpip端口号工程名访问的区别">g)手托html 页面到浏览器和在浏览器中输入</span></h3><p>手托 html 页面的原理：</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725200211.png" alt="image-20210725200211576"></p><p>输入访问地址访问的原因：</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725200214.png" alt="image-20210725200214776"></p><h3><span id="hroot-的工程的访问以及-默认-indexhtml-页面的访问">h)ROOT 的工程的访问，以及 默认 index.html 页面的访问</span></h3><p>当我们在浏览器地址栏中输入访问地址如下：<br><a href="http://ip:port/">http://ip:port/</a> ====&gt;&gt;&gt;&gt; 没有工程名的时候，默认访问的是 ROOT 工程。</p><p>当我们在浏览器地址栏中输入的访问地址如下：<br><a href="http://ip:port/工程名/">http://ip:port/工程名/</a> ====&gt;&gt;&gt;&gt; 没有资源名，默认访问 index.html 页面</p><h2><span id="6idea-整合tomcat-服务器">6.IDEA 整合Tomcat 服务器</span></h2><ol><li>添加tomcat Server</li></ol><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725200915.png" alt="image-20210725200915098"></p><ol start="2"><li>选择tomcat的路径</li></ol><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725200828.png" alt="image-20210725200828125"></p><ol start="3"><li>添加成功</li></ol><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725202007.png" alt="image-20210725202007527"></p><ol start="4"><li>CTRL + SHIFT + A 打开窗口，或者 CTRL+ALT+SHIFT + / 打开Registry，找到javaee…，勾上，close</li></ol><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725202248.png" alt="image-20210725202248257"></p><ol start="5"><li>new moudle，新建JavaWeb工程，注意选择应用服务器：Tomcat</li></ol><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725204056.png" alt="image-20210725204056661"></p><p>默认就选了web application，所以不用勾选了.</p><ol start="6"><li>结构说明</li></ol><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725204853.png" alt="image-20210725204853527"></p><p>如何给动态 web 工程添加额外 jar 包</p><p>1、可以打开项目结构菜单操作界面，添加一个自己的类库：</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725205111.png" alt="image-20210725205111503"></p><p>2、添加你你类库需要的 jar 包文件。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725205117.png" alt="image-20210725205117735"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725212122.png" alt="image-20210725212122367"></p><p>3、选择你添加的类库，给哪个模块使用：</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725205124.png" alt="image-20210725205124427"></p><p>4、选择 Artifacts 选项，将类库，添加到打包部署中：</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725205130.png" alt="image-20210725205130452"></p><p>如何在 IDEA 中部署工程到 Tomcat 上运行</p><ol><li>给服务器改下名字</li></ol><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725205302.png" alt="image-20210725205302198"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725205349.png" alt="image-20210725205349725"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725205504.png" alt="image-20210725205504669"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725205616.png" alt="image-20210725205616417"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725213135.png" alt="image-20210725213135164"></p>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaWeb</tag>
      
      <tag>Tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb-04-xml</title>
    <link href="/2021/07/20/JavaWeb-04-xml/"/>
    <url>/2021/07/20/JavaWeb-04-xml/</url>
    
    <content type="html"><![CDATA[<h1><span id="xml">XML</span></h1><!-- toc --><ul><li><a href="#%E4%BB%8B%E7%BB%8D">介绍</a></li><li><a href="#%E7%94%A8%E6%B3%95">用法</a></li><li><a href="#%E8%A7%84%E8%8C%83">规范</a></li><li><a href="#xml%E8%A7%A3%E6%9E%90%E6%8A%80%E6%9C%AF">XML解析技术</a></li><li><a href="#dom4j-%E8%A7%A3%E6%9E%90%E6%8A%80%E6%9C%AF">dom4j 解析技术</a></li><li><a href="#dom4j-%E7%BC%96%E7%A8%8B%E6%AD%A5%E9%AA%A4">dom4j 编程步骤</a></li><li><a href="#%E8%8E%B7%E5%8F%96-document-%E5%AF%B9%E8%B1%A1">获取 document 对象</a></li><li><a href="#%E8%8E%B7%E5%8F%96%E6%A0%87%E7%AD%BE%E7%9A%84%E5%86%85%E5%AE%B9">获取标签的内容</a></li></ul><!-- tocstop --><h2><span id="介绍">介绍</span></h2><p>xml 是可扩展的标记性语言。</p><p>xml 的主要作用有：</p><ol><li>用来保存数据，而且这些数据具有自我描述性</li><li>它还可以做为项目或者模块的配置文件</li><li>还可以做为网络传输数据的格式（现在 JSON 为主）。</li></ol><p>xml 语法</p><ol><li>文档声明。</li><li>元素（标签）</li><li>xml 属性</li><li>xml 注释</li><li>文本区域（CDATA 区）</li></ol><h2><span id="用法">用法</span></h2><ol><li><p>创建xml文件</p></li><li><p>声明</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span> xml 声明。<br><span class="hljs-comment">&lt;!-- xml 声明 version 是版本的意思 encoding 是编码--&gt;</span><br></code></pre></div></td></tr></table></figure><p>而且这个&lt;?xml 要连在一起写，否则会有报错</p></li><li><p>图书有 id 属性表示唯一 标识，书名，有作者，价格的信息</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-comment">&lt;!-- xml 声明 version 是版本的意思 encoding 是编码 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">books</span>&gt;</span> <span class="hljs-comment">&lt;!-- 这是 xml 注释 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;SN123123413241&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!-- book 标签描述一本图书 id 属性描述 的是图书 的编号 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>java 编程思想<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span> <span class="hljs-comment">&lt;!-- name 标签描述 的是图书 的信息 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>华仔<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span> <span class="hljs-comment">&lt;!-- author 单词是作者的意思 ，描述图书作者 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>9.9<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span> <span class="hljs-comment">&lt;!-- price 单词是价格，描述的是图书 的价格 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;SN12341235123&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!-- book 标签描述一本图书 id 属性描述 的是图书 的编号 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>葵花宝典<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span> <span class="hljs-comment">&lt;!-- name 标签描述 的是图书 的信息 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>班长<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span> <span class="hljs-comment">&lt;!-- author 单词是作者的意思 ，描述图书作者 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>5.5<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><span class="hljs-comment">&lt;!-- price 单词是价格，描述的是图书 的价格 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">books</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ol><h2><span id="规范">规范</span></h2><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">XML 元素必须遵循以下命名规则：<br>2.1）名称可以含字母、数字以及其他的字符<br><br>例如：<br><br><span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;SN213412341&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!-- 描述一本书 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>班导<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span> <span class="hljs-comment">&lt;!-- 描述书的作者信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>java 编程思想<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span> <span class="hljs-comment">&lt;!-- 书名 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>9.9<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span> <span class="hljs-comment">&lt;!-- 价格 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><br>2.2）名称不能以数字或者标点符号开始<br><br>2.4）名称不能包含空格<br></code></pre></div></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh"><span class="hljs-keyword">xml</span> <span class="hljs-title">的标签属性和 html</span> 的标签属性是非常类似的，属性可以提供元素的额外信息<br><br>在标签上可以书写属性：<br>一个标签上可以书写多个属性。每个属性的值必须使用 引号 引起来。<br>的规则和标签的书写规则一致。<br></code></pre></div></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>.<span class="hljs-number">5</span>.<span class="hljs-number">1</span>）所有 XML 元素都须有关闭标签（也就是闭合）<br><br><span class="hljs-attribute">3</span>.<span class="hljs-number">5</span>.<span class="hljs-number">2</span>）XML标签对大小写敏感<br><br><span class="hljs-attribute">3</span>.<span class="hljs-number">5</span>.<span class="hljs-number">3</span>）XML必须正确地嵌套<br><br><span class="hljs-attribute">3</span>.<span class="hljs-number">5</span>.<span class="hljs-number">4</span>）XML文档必须有根元素<br><br><span class="hljs-attribute">3</span>.<span class="hljs-number">5</span>.<span class="hljs-number">5</span>）XML的属性值须加引号<br><br><span class="hljs-attribute">3</span>.<span class="hljs-number">5</span>.<span class="hljs-number">6</span>）XML 中的特殊字符<br><br><span class="hljs-attribute">3</span>.<span class="hljs-number">5</span>.<span class="hljs-number">7</span>）文本区域（CDATA 区）<br></code></pre></div></td></tr></table></figure><h2><span id="xml解析技术">XML解析技术</span></h2><p>xml 可扩展的标记语言。<br>不管是 html 文件还是 xml 文件它们都是标记型文档，都可以使用 w3c 组织制定的 dom 技术来解析。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725120205.png" alt="image-20210725120158044"></p><p>document 对象表示的是整个文档（可以是 html 文档，也可以是 xml 文档）</p><p>早期 JDK 为我们提供了两种 xml 解析技术 DOM 和 Sax 简介（已经过时，但我们需要知道这两种技术）<br>dom 解析技术是 W3C 组织制定的，而所有的编程语言都对这个解析技术使用了自己语言的特点进行实现。<br>Java 对 dom 技术解析标记也做了实现。<br>sun 公司在 JDK5 版本对 dom 解析技术进行升级：SAX（ Simple API for XML ）<br>SAX 解析，它跟 W3C 制定的解析不太一样。它是以类似事件机制通过回调告诉用户当前正在解析的内容。<br>它是一行一行的读取 xml 文件进行解析的。不会创建大量的 dom 对象。<br>所以它在解析 xml 的时候，在内存的使用上。和性能上。都优于 Dom 解析。</p><p>第三方的解析：<br>jdom 在 dom 基础上进行了封装 、<br>dom4j 又对 jdom 进行了封装。<br>pull 主要用在 Android 手机开发，是在跟 sax 非常类似都是事件机制解析 xml 文件。<br>这个 Dom4j 它是第三方的解析技术。我们需要使用第三方给我们提供好的类库才可以解析 xml 文件。</p><h2><span id="dom4j-解析技术">dom4j 解析技术</span></h2><p>由于 dom4j 它不是 sun 公司的技术，而属于第三方公司的技术，我们需要使用 dom4j就需要到 dom4j 官网下载dom4j的 jar 包。</p><h2><span id="dom4j-编程步骤">dom4j 编程步骤</span></h2><p>第一步： 先加载 xml 文件创建 Document 对象<br>第二步：通过 Document 对象拿到根元素对象<br>第三步：通过根元素.elelemts(标签名); 可以返回一个集合，这个集合里放着。所有你指定的标签名的元素对象<br>第四步：找到你想要修改、删除的子元素，进行相应在的操作<br>第五步，保存到硬盘上</p><h2><span id="获取-document-对象">获取 document 对象</span></h2><p>创建一个 lib 目录，并添加 dom4j 的 jar 包。并添加到类路径。</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210725120325.png" alt="image-20210725120325320"></p><p>需要解析的 books.xml 文件内容</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">books</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">sn</span>=<span class="hljs-string">&quot;SN12341230&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>红楼梦<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>曹雪芹<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>25.5<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">sn</span>=<span class="hljs-string">&quot;SN12341231&quot;</span>&gt;</span>&gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>三国演义<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>罗贯中<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>20.9<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">sn</span>=<span class="hljs-string">&quot;SN12341232&quot;</span>&gt;</span>&gt;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>水浒传<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>施耐庵<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>15.2<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">books</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>解析获取 Document 对象的代码<br>第一步，先创建 SaxReader 对象。这个对象，用于读取 xml 文件，并创建 Document</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.demo1;<br><br><span class="hljs-keyword">import</span> org.dom4j.Document;<br><span class="hljs-keyword">import</span> org.dom4j.io.SAXReader;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//要创建一个 Document 对象，需要我们先创建一个SAXReader 对象</span><br>        SAXReader reader = <span class="hljs-keyword">new</span> SAXReader();<br>        <span class="hljs-comment">//这个对象用于读取xml 文件，然后返回一个Document。</span><br>        Document document = reader.read(<span class="hljs-string">&quot;src/first.xml&quot;</span>);<br>        <span class="hljs-comment">// 打印到控制台，看看是否创建成功</span><br>        System.out.println(document);<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2><span id="获取标签的内容">获取标签的内容</span></h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.wangpeng.demo1;<br><br><span class="hljs-keyword">import</span> org.dom4j.Document;<br><span class="hljs-keyword">import</span> org.dom4j.Element;<br><span class="hljs-keyword">import</span> org.dom4j.io.SAXReader;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//要创建一个 Document 对象，需要我们先创建一个SAXReader 对象</span><br>        SAXReader reader = <span class="hljs-keyword">new</span> SAXReader();<br>        <span class="hljs-comment">//这个对象用于读取xml 文件，然后返回一个Document。</span><br>        Document document = reader.read(<span class="hljs-string">&quot;src/first.xml&quot;</span>);<br>        <span class="hljs-comment">//通过document对象，获得根元素对象</span><br>        Element root = document.getRootElement();<br>        <span class="hljs-comment">//System.out.println(root.asXML());</span><br>        <span class="hljs-comment">//通过根元素，获取book标签对象</span><br>        List&lt;Element&gt; books = root.elements(<span class="hljs-string">&quot;book&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Element book: books) &#123;<br>            <span class="hljs-comment">//System.out.println(book.asXML());</span><br>            String name = book.elementText(<span class="hljs-string">&quot;name&quot;</span>);<br>            String author = book.elementText(<span class="hljs-string">&quot;author&quot;</span>);<br>            String price = book.elementText(<span class="hljs-string">&quot;price&quot;</span>);<br>            Book bk = <span class="hljs-keyword">new</span> Book(name, author, Double.parseDouble(price));<br>            System.out.println(bk);<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>输出</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">Book&#123;<span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;红楼梦&#x27;</span>, <span class="hljs-attribute">author</span>=<span class="hljs-string">&#x27;曹雪芹&#x27;</span>, <span class="hljs-attribute">price</span>=25.5&#125;<br>Book&#123;<span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;三国演义&#x27;</span>, <span class="hljs-attribute">author</span>=<span class="hljs-string">&#x27;罗贯中&#x27;</span>, <span class="hljs-attribute">price</span>=20.9&#125;<br>Book&#123;<span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;水浒传&#x27;</span>, <span class="hljs-attribute">author</span>=<span class="hljs-string">&#x27;施耐庵&#x27;</span>, <span class="hljs-attribute">price</span>=15.2&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaWeb</tag>
      
      <tag>xml</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb-03-Jquery</title>
    <link href="/2021/07/20/JavaWeb-03-Jquery/"/>
    <url>/2021/07/20/JavaWeb-03-Jquery/</url>
    
    <content type="html"><![CDATA[<h1><span id="jquery">jQuery</span></h1><!-- toc --><ul><li><a href="#1-jquery%E4%BB%8B%E7%BB%8D">1. jQuery介绍</a></li><li><a href="#2-jquery%E5%88%9D%E4%BD%93%E9%AA%8C">2. jQuery初体验</a></li><li><a href="#3-jquery%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0">3. jQuery核心函数</a></li><li><a href="#4-jquery%E5%AF%B9%E8%B1%A1%E5%92%8Cdom%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8C%BA%E5%88%AB">4. jQuery对象和dom对象的区别</a><ul><li><a href="#41-%E4%BB%80%E4%B9%88%E6%98%AF-jquery-%E5%AF%B9%E8%B1%A1%E4%BB%80%E4%B9%88%E6%98%AF-dom-%E5%AF%B9%E8%B1%A1">4.1、什么是 jQuery 对象，什么是 dom 对象</a></li><li><a href="#42-%E9%97%AE%E9%A2%98jquery-%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9C%AC%E8%B4%A8%E6%98%AF%E4%BB%80%E4%B9%88">4.2、问题：jQuery 对象的本质是什么？</a></li><li><a href="#43-jquery-%E5%AF%B9%E8%B1%A1%E5%92%8C-dom-%E5%AF%B9%E8%B1%A1%E4%BD%BF%E7%94%A8%E5%8C%BA%E5%88%AB">4.3、jQuery 对象和 Dom 对象使用区别</a></li><li><a href="#44-dom-%E5%AF%B9%E8%B1%A1%E5%92%8C-jquery-%E5%AF%B9%E8%B1%A1%E4%BA%92%E8%BD%AC">4.4、Dom 对象和 jQuery 对象互转</a></li></ul></li><li><a href="#5-jquery%E9%80%89%E6%8B%A9%E5%99%A8">5. jQuery选择器</a><ul><li><a href="#51-%E5%9F%BA%E6%9C%AC%E9%80%89%E6%8B%A9%E5%99%A8%E9%87%8D%E7%82%B9">5.1、基本选择器（****重点）</a></li><li><a href="#52-%E5%B1%82%E7%BA%A7%E9%80%89%E6%8B%A9%E5%99%A8%E9%87%8D%E7%82%B9">5.2、层级选择器（****重点）</a></li><li><a href="#53-%E8%BF%87%E6%BB%A4%E9%80%89%E6%8B%A9%E5%99%A8">5.3、过滤选择器</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E8%BF%87%E6%BB%A4%E5%99%A8">基本过滤器</a></li><li><a href="#%E5%86%85%E5%AE%B9%E8%BF%87%E6%BB%A4%E5%99%A8">内容过滤器</a></li><li><a href="#%E5%8F%AF%E8%A7%81%E8%BF%87%E6%BB%A4%E5%99%A8">可见过滤器</a></li><li><a href="#%E5%B1%9E%E6%80%A7%E8%BF%87%E6%BB%A4%E5%99%A8">属性过滤器</a></li><li><a href="#%E8%A1%A8%E5%8D%95%E8%A1%A8%E5%8D%95%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E8%BF%87%E6%BB%A4%E5%99%A8">表单/表单对象属性过滤器</a></li></ul></li></ul></li><li><a href="#6-jquery%E5%85%83%E7%B4%A0%E7%AD%9B%E9%80%89">6. jQuery元素筛选</a></li><li><a href="#7-jquery%E5%B1%9E%E6%80%A7%E6%93%8D%E4%BD%9C">7. jQuery属性操作</a></li><li><a href="#9-jqunery-%E7%BB%83%E4%B9%A01">9. jQunery 练习1</a><ul><li><a href="#2%E5%85%A8%E9%80%89%E5%85%A8%E4%B8%8D%E9%80%89%E5%8F%8D%E9%80%89">2.全选，全不选，反选</a></li></ul></li><li><a href="#10-dom%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9">10. Dom的增删改</a></li><li><a href="#11-jquery-%E7%BB%83%E4%B9%A02">11. jQuery 练习2</a></li><li><a href="#12-css%E6%A0%B7%E5%BC%8F%E6%93%8D%E4%BD%9C">12. CSS样式操作</a></li><li><a href="#13-jquery-%E5%8A%A8%E7%94%BB">13. jQuery 动画</a></li><li><a href="#14-jquery-%E7%BB%83%E4%B9%A03">14. jQuery 练习3</a></li><li><a href="#15-jquery-%E4%BA%8B%E4%BB%B6%E6%93%8D%E4%BD%9C">15. jQuery 事件操作</a></li><li><a href="#16-jquery-%E7%BB%83%E4%B9%A04">16. jQuery 练习4</a></li></ul><!-- tocstop --><h2><span id="1-jquery介绍">1. jQuery介绍</span></h2><p><strong>什么是 jQuery ?</strong><br>jQuery，顾名思义，也就是JavaScript和查询（Query），它就是辅助JavaScript开发的js类库。</p><h2><span id="2-jquery初体验">2. jQuery初体验</span></h2><p>需求：使用 jQuery 给一个按钮绑定单击事件</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210721195957.png" alt="image-20210721195950660"></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;   <span class="hljs-comment">//相当window.onload=function()&#123;&#125;</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> $bt1 = $(<span class="hljs-string">&quot;#bt_1&quot;</span>);  <span class="hljs-comment">//获取id为bt_1的jQuery对象</span></span><br><span class="javascript">            $bt1.click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123; <span class="hljs-comment">//绑定点击事件</span></span><br><span class="javascript">                alert(<span class="hljs-string">&quot;jQuery的单击事件&quot;</span>)</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bt_1&quot;</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>常见问题？<br>1、使用jQuery一定要引入jQuery库吗？答案：是，必须</p><p>2、jQuery 中的$到底是什么？答案：它是一个函数</p><p>3、怎么为按钮添加点击响应函数的？答案：</p><p>1、使用 jQuery 查询到标签对象<br>2、使用<code>标签对象.click( function()&#123;&#125;);</code></p><h2><span id="3-jquery核心函数">3. jQuery核心函数</span></h2><p><code>$</code> 是jQuery 的核心函数，能完成jQuery 的很多功能。<code>$</code>()就是调用<code>$</code>这个函数</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 传入参数为 [ 函数 ] 时：<br>表示页面加载完成之后。相当于window.onload = function()&#123;&#125;<br><br><span class="hljs-bullet">2.</span> 传入参数为 [ HTML 字符串 ] 时：<br>会对我们创建这个html 标签对象<br><br><span class="hljs-bullet">3.</span> 传入参数为 [ 选择器字符串 ] 时：<br>$(“#id 属性值”); id 选择器，根据id 查询标签对象<br>$(“标签名”); 标签名选择器，根据指定的标签名查询标签对象<br>$(“.class 属性值”); 类型选择器，可以根据class 属性查询标签对象<br><br><span class="hljs-bullet">4.</span> 传入参数为 [ DOM 对象 ] 时：<br>会把这个 dom 对象转换为jQuery 对象<br></code></pre></div></td></tr></table></figure><h2><span id="4-jquery对象和dom对象的区别">4. jQuery对象和dom对象的区别</span></h2><h3><span id="41-什么是-jquery-对象什么是-dom-对象">4.1、什么是 jQuery 对象，什么是 dom 对象</span></h3><p><strong>Dom 对象</strong><br>1.通过 getElementById()查询出来的标签对象是 Dom 对象<br>2.通过 getElementsByName()查询出来的标签对象是 Dom 对象<br>3.通过 getElementsByTagName()查询出来的标签对象是 Dom 对象<br>4.通过 createElement() 方法创建的对象，是 Dom 对象<br>DOM 对象 Alert 出来的效果是：[object HTML 标签名 Element]</p><p><strong>jQuery 对象</strong><br>5.通过 JQuery 提供的 API 创建的对象，是 JQuery 对象<br>6.通过 JQuery 包装的 Dom 对象，也是 JQuery 对象<br>7.通过 JQuery 提供的 API 查询到的对象，是 JQuery 对象<br>jQuery 对象 Alert 出来的效果是：[object Object]</p><h3><span id="42-问题jquery-对象的本质是什么">4.2、问题：jQuery 对象的本质是什么？</span></h3><p>jQuery 对象是 dom 对象的数组 + jQuery 提供的一系列功能函数。</p><h3><span id="43-jquery-对象和-dom-对象使用区别">4.3、jQuery 对象和 Dom 对象使用区别</span></h3><p>jQuery 对象不能使用 DOM 对象的属性和方法<br>DOM 对象也不能使用 jQuery 对象的属性和方法</p><h3><span id="44-dom-对象和-jquery-对象互转">4.4、Dom 对象和 jQuery 对象互转</span></h3><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> dom 对象转化为 jQuery 对象（<span class="hljs-emphasis">*重点）</span><br><span class="hljs-emphasis">1. 先有 DOM 对象</span><br><span class="hljs-emphasis">2. $( DOM 对象 ) 就可以转换成为 jQuery 对象</span><br><span class="hljs-emphasis">2. jQuery 对象转为dom 对象（*</span>重点）<br><span class="hljs-bullet">1.</span> 先有 jQuery 对象<br><span class="hljs-bullet">2.</span> Query 对象[下标]取出相应的 DOM 对象<br></code></pre></div></td></tr></table></figure><h2><span id="5-jquery选择器">5. jQuery选择器</span></h2><h3><span id="51-基本选择器重点">5.1、基本选择器（****重点）</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210721201631.png" alt="image-20210721201631779"></p><figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript">#ID 选择器：根据 id 查找标签对象<br>.class 选择器：根据 <span class="hljs-keyword">class</span> 查找标签对象<br><span class="hljs-symbol">element</span> 选择器：根据标签名查找标签对象<br>* 选择器：表示任意的，所有的元素<br><span class="hljs-symbol">selector1</span>，<span class="hljs-symbol">selector2</span> 组合选择器：合并选择器 <span class="hljs-symbol">1</span>，选择器 <span class="hljs-symbol">2</span> 的结果并返回<br></code></pre></div></td></tr></table></figure><p>演示</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Untitled Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">            <span class="hljs-comment">/*三个基本标签的style*/</span></span><br><span class="css"><span class="hljs-selector-tag">div</span>, <span class="hljs-selector-tag">span</span>, <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">140px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">140px</span>;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span>;</span><br><span class="css">    <span class="hljs-attribute">background</span>: <span class="hljs-number">#aaa</span>;</span><br><span class="css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">#000</span> <span class="hljs-number">1px</span> solid;</span><br><span class="css">    <span class="hljs-attribute">float</span>: left;</span><br><span class="css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">17px</span>;</span><br><span class="css">    <span class="hljs-attribute">font-family</span>: Verdana;</span><br><span class="css">&#125;</span><br><span class="css">            <span class="hljs-comment">/*小方块的style*/</span></span><br><span class="css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.mini</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">55px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">55px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#aaa</span>;</span><br><span class="css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.hide</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">display</span>: none;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//加载时</span></span><br><span class="javascript">                <span class="hljs-comment">//1.选择 id 为 one 的元素 &quot;background-color&quot;,&quot;#bbffaa&quot;</span></span><br><span class="javascript">                $(<span class="hljs-string">&quot;#btn1&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;   <span class="hljs-comment">//btn1按下</span></span><br><span class="javascript">                    $(<span class="hljs-string">&quot;#one&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">                &#125;);</span><br><span class="javascript">                <span class="hljs-comment">//2.选择 class 为 mini 的所有元素</span></span><br><span class="javascript">                $(<span class="hljs-string">&quot;#btn2&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    $(<span class="hljs-string">&quot;.mini&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">                &#125;);</span><br><span class="javascript">                <span class="hljs-comment">//3.选择 元素名是 div 的所有元素</span></span><br><span class="javascript">                $(<span class="hljs-string">&quot;#btn3&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                   $(<span class="hljs-string">&quot;div&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">                &#125;);</span><br><span class="javascript">                <span class="hljs-comment">//4.选择所有的元素</span></span><br><span class="javascript">                $(<span class="hljs-string">&quot;#btn4&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                   $(<span class="hljs-string">&quot;*&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">                &#125;);</span><br><span class="javascript">                <span class="hljs-comment">//5.选择所有的 span 元素和id为two的元素</span></span><br><span class="javascript">                $(<span class="hljs-string">&quot;#btn5&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    $(<span class="hljs-string">&quot;span, #two&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">                &#125;);</span><br><span class="javascript">            &#125;);</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;div&gt;</span><br><span class="hljs-comment">&lt;h1&gt;基本选择器&lt;/h1&gt;</span><br><span class="hljs-comment">&lt;/div&gt; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择 id 为 one 的元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择 class 为 mini 的所有元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择 元素名是 div 的所有元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn3&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择 所有的元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn4&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择 所有的 span 元素和id为two的元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn5&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>id 为 one,class 为 one 的div<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;two&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>id为two,class为one,title为test的div<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;other&quot;</span>&gt;</span>class为mini,title为other<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>class为mini,title为test<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;tesst&quot;</span>&gt;</span>class为mini,title为tesst<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;none&quot;</span>&gt;</span>style的display为&quot;none&quot;的div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hide&quot;</span>&gt;</span>class为&quot;hide&quot;的div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>包含input的type为&quot;hidden&quot;的div<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;span&quot;</span>&gt;</span>^^span元素^^<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h3><span id="52-层级选择器重点">5.2、层级选择器（****重点）</span></h3><figure class="highlight q"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs q">ancestor descendant后代选择器 ：在给定的祖先元素下匹配所有的后代元素<br><br>parent &gt; child子元素选择器：在给定的父元素下匹配所有的子元素<br><br><span class="hljs-built_in">prev</span> + <span class="hljs-built_in">next</span>相邻元素选择器：匹配所有紧接在 <span class="hljs-built_in">prev</span> 元素后的 <span class="hljs-built_in">next</span> 元素<br><br><span class="hljs-built_in">prev</span> ~ sibings之后的兄弟元素选择器：匹配 <span class="hljs-built_in">prev</span> 元素之后的所有 siblings 元素<br></code></pre></div></td></tr></table></figure><p>演示</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Untitled Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">div</span>, <span class="hljs-selector-tag">span</span>, <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">140px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">140px</span>;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span>;</span><br><span class="css">    <span class="hljs-attribute">background</span>: <span class="hljs-number">#aaa</span>;</span><br><span class="css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">#000</span> <span class="hljs-number">1px</span> solid;</span><br><span class="css">    <span class="hljs-attribute">float</span>: left;</span><br><span class="css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">17px</span>;</span><br><span class="css">    <span class="hljs-attribute">font-family</span>: Verdana;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.mini</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">55px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">55px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#aaa</span>;</span><br><span class="css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.hide</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">display</span>: none;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//1.选择 body 内的所有 div 元素 </span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn1&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;body div&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//2.在 body 内, 选择div子元素  </span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn2&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;body &gt; div&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//3.选择 id 为 one 的下一个 div 元素 </span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn3&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;#one + div&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//4.选择 id 为 two 的元素后面的所有 div 兄弟元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn4&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;#two ~ div&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- &lt;div&gt;</span><br><span class="hljs-comment">&lt;h1&gt;层级选择器:根据元素的层级关系选择元素&lt;/h1&gt;</span><br><span class="hljs-comment">ancestor descendant  ：</span><br><span class="hljs-comment">parent &gt; child    ：</span><br><span class="hljs-comment">prev + next    ：</span><br><span class="hljs-comment">prev ~ siblings    ：</span><br><span class="hljs-comment">&lt;/div&gt; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择 body 内的所有 div 元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;在 body 内, 选择div子元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择 id 为 one 的下一个 div 元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn3&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择 id 为 two 的元素后面的所有 div 兄弟元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn4&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>id 为 one,class 为 one 的div<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;two&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>id为two,class为one,title为test的div<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;other&quot;</span>&gt;</span>class为mini,title为other<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>class为mini,title为test<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;tesst&quot;</span>&gt;</span>class为mini,title为tesst<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;none&quot;</span>&gt;</span>style的display为&quot;none&quot;的div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hide&quot;</span>&gt;</span>class为&quot;hide&quot;的div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>包含input的type为&quot;hidden&quot;的div<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;span&quot;</span>&gt;</span>^^span元素^^<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h3><span id="53-过滤选择器">5.3、过滤选择器</span></h3><h4><span id="基本过滤器">基本过滤器</span></h4><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir"><span class="hljs-symbol">:first</span>获取第一个元素<br><br><span class="hljs-symbol">:last</span>获取最后个元素<br><br><span class="hljs-symbol">:not</span>(selector)去除所有与给定选择器匹配的元素<br><br><span class="hljs-symbol">:even</span>匹配所有索引值为偶数的元素，从 0 开始计数<br><br><span class="hljs-symbol">:odd</span>匹配所有索引值为奇数的元素，从 0 开始计数<br><br><span class="hljs-symbol">:eq</span>(index)匹配一个给定索引值的元素<br><br><span class="hljs-symbol">:gt</span>(index)匹配所有大于给定索引值的元素<br><br><span class="hljs-symbol">:lt</span>(index)匹配所有小于给定索引值的元素<br><br><span class="hljs-symbol">:header</span>匹配如 h1, h2, h3 之类的标题元素<br><br><span class="hljs-symbol">:animated</span>匹配所有正在执行动画效果的元素<br></code></pre></div></td></tr></table></figure><p>演示</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Untitled Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">div</span>, <span class="hljs-selector-tag">span</span>, <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">140px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">140px</span>;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span>;</span><br><span class="css">    <span class="hljs-attribute">background</span>: <span class="hljs-number">#aaa</span>;</span><br><span class="css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">#000</span> <span class="hljs-number">1px</span> solid;</span><br><span class="css">    <span class="hljs-attribute">float</span>: left;</span><br><span class="css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">17px</span>;</span><br><span class="css">    <span class="hljs-attribute">font-family</span>: Verdana;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.mini</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">55px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">55px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#aaa</span>;</span><br><span class="css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.hide</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">display</span>: none;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">anmateIt</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;#mover&quot;</span>).slideToggle(<span class="hljs-string">&quot;slow&quot;</span>, anmateIt);</span><br><span class="javascript">&#125;</span><br><span class="javascript">anmateIt();</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//1.选择第一个 div 元素  </span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn1&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;div:first&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//2.选择最后一个 div 元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn2&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;div:last&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//3.选择class不为 one 的所有 div 元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn3&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;div:not(.one)&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//4.选择索引值为偶数的 div 元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn4&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;div:even&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//5.选择索引值为奇数的 div 元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn5&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;div:odd&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//6.选择索引值为大于 3 的 div 元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn6&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;div:gt(3)&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//7.选择索引值为等于 3 的 div 元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn7&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;div:eq(3)&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//8.选择索引值为小于 3 的 div 元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn8&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;div:lt(3)&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//9.选择所有的标题元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn9&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;:header&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//10.选择当前正在执行动画的所有元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn10&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;:animated&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-comment">//11.选择没有执行动画的最后一个div</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn11&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    $(<span class="hljs-string">&quot;div:not(:animated):last&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">                &#125;);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;div&gt;</span><br><span class="hljs-comment">:first </span><br><span class="hljs-comment">:last </span><br><span class="hljs-comment">:not(selector) </span><br><span class="hljs-comment">:even </span><br><span class="hljs-comment">:odd </span><br><span class="hljs-comment">:eq(index) </span><br><span class="hljs-comment">:gt(index) </span><br><span class="hljs-comment">:lt(index) </span><br><span class="hljs-comment">:header </span><br><span class="hljs-comment">:animated </span><br><span class="hljs-comment">&lt;/div&gt; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择第一个 div 元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择最后一个 div 元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择class不为 one 的所有 div 元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn3&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择索引值为偶数的 div 元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn4&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择索引值为奇数的 div 元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn5&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择索引值为大于 3 的 div 元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn6&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择索引值为等于 3 的 div 元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn7&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择索引值为小于 3 的 div 元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择所有的标题元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn9&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择当前正在执行动画的所有元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn10&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择没有执行动画的最后一个div&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn11&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>基本选择器.<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>id 为 one,class 为 one 的div<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;two&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>id为two,class为one,title为test的div<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;other&quot;</span>&gt;</span>class为mini,title为other<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>class为mini,title为test<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;tesst&quot;</span>&gt;</span>class为mini,title为tesst<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;none&quot;</span>&gt;</span>style的display为&quot;none&quot;的div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hide&quot;</span>&gt;</span>class为&quot;hide&quot;的div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>包含input的type为&quot;hidden&quot;的div<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mover&quot;</span>&gt;</span>正在执行动画的div元素.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h4><span id="内容过滤器">内容过滤器</span></h4><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir"><span class="hljs-symbol">:contains</span>(text)匹配包含给定文本的元素<br><br><span class="hljs-symbol">:empty</span>匹配所有不包含子元素或者文本的空元素<br><br><span class="hljs-symbol">:has</span>(selector)匹配含有选择器所匹配的元素的元素<br><br><span class="hljs-symbol">:parent</span>匹配含有子元素或者文本的元素<br></code></pre></div></td></tr></table></figure><p>演示</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Untitled Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">div</span>, <span class="hljs-selector-tag">span</span>, <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">140px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">140px</span>;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span>;</span><br><span class="css">    <span class="hljs-attribute">background</span>: <span class="hljs-number">#aaa</span>;</span><br><span class="css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">#000</span> <span class="hljs-number">1px</span> solid;</span><br><span class="css">    <span class="hljs-attribute">float</span>: left;</span><br><span class="css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">17px</span>;</span><br><span class="css">    <span class="hljs-attribute">font-family</span>: Verdana;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.mini</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">55px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">55px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#aaa</span>;</span><br><span class="css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.hide</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">display</span>: none;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">anmateIt</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;#mover&quot;</span>).slideToggle(<span class="hljs-string">&quot;slow&quot;</span>, anmateIt);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript">anmateIt();</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">/** </span></span><br><span class="hljs-comment"><span class="javascript">:contains(text)   </span></span><br><span class="hljs-comment"><span class="javascript">:empty   </span></span><br><span class="hljs-comment"><span class="javascript">:has(selector) </span></span><br><span class="hljs-comment"><span class="javascript">:parent </span></span><br><span class="hljs-comment"><span class="javascript">*/</span></span><br><span class="javascript">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//1.选择 含有文本 &#x27;di&#x27; 的 div 元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn1&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;div:contains(di)&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//2.选择不包含子元素(或者文本元素) 的 div 空元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn2&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;div:empty&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//3.选择含有 class 为 mini 元素的 div 元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn3&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    $(<span class="hljs-string">&quot;div:has(.mini)&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//4.选择含有子元素(或者文本元素)的div元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn4&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;div:parent&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择 含有文本 &#x27;di&#x27; 的 div 元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择不包含子元素(或者文本元素) 的 div 空元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择含有 class 为 mini 元素的 div 元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn3&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择含有子元素(或者文本元素)的div元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn4&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>id 为 one,class 为 one 的div<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;two&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>id为two,class为one,title为test的div<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;other&quot;</span>&gt;</span>class为mini,title为other<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>class为mini,title为test<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;tesst&quot;</span>&gt;</span>class为mini,title为tesst<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;none&quot;</span>&gt;</span>style的display为&quot;none&quot;的div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hide&quot;</span>&gt;</span>class为&quot;hide&quot;的div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>包含input的type为&quot;hidden&quot;的div<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mover&quot;</span>&gt;</span>正在执行动画的div元素.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h4><span id="可见过滤器">可见过滤器</span></h4><figure class="highlight llvm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs llvm">:<span class="hljs-keyword">hidden</span>匹配所有不可见元素，或者<span class="hljs-keyword">type</span>为<span class="hljs-keyword">hidden</span>的元素<br>:visible匹配所有的可见元素<br></code></pre></div></td></tr></table></figure><p>演示</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Untitled Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">div</span>, <span class="hljs-selector-tag">span</span>, <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">140px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">140px</span>;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span>;</span><br><span class="css">    <span class="hljs-attribute">background</span>: <span class="hljs-number">#aaa</span>;</span><br><span class="css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">#000</span> <span class="hljs-number">1px</span> solid;</span><br><span class="css">    <span class="hljs-attribute">float</span>: left;</span><br><span class="css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">17px</span>;</span><br><span class="css">    <span class="hljs-attribute">font-family</span>: Verdana;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.mini</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">55px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">55px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#aaa</span>;</span><br><span class="css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.hide</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">display</span>: none;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">anmateIt</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;#mover&quot;</span>).slideToggle(<span class="hljs-string">&quot;slow&quot;</span>, anmateIt);</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript">anmateIt();</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="javascript">:hidden   </span></span><br><span class="hljs-comment"><span class="javascript">:visible  </span></span><br><span class="hljs-comment"><span class="javascript">*/</span></span><br><span class="javascript">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//1.选取所有可见的  div 元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn1&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;div:visible&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//2.选择所有不可见的 div 元素</span></span><br><span class="javascript"><span class="hljs-comment">//不可见：display属性设置为none，或visible设置为hidden</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn2&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;div:hidden&quot;</span>).show(<span class="hljs-string">&quot;slow&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//3.选择所有不可见的 input 元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn3&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">alert($(<span class="hljs-string">&quot;input:hidden&quot;</span>).attr(<span class="hljs-string">&quot;value&quot;</span>));</span><br><span class="javascript">&#125;);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选取所有可见的  div 元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择所有不可见的 div 元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择所有不可见的 input 元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn3&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>id 为 one,class 为 one 的div<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;two&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>id为two,class为one,title为test的div<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;other&quot;</span>&gt;</span>class为mini,title为other<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>class为mini,title为test<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;tesst&quot;</span>&gt;</span>class为mini,title为tesst<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;none&quot;</span>&gt;</span>style的display为&quot;none&quot;的div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hide&quot;</span>&gt;</span>class为&quot;hide&quot;的div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>包含input的type为&quot;hidden&quot;的div<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456789&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mover&quot;</span>&gt;</span>正在执行动画的div元素.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h4><span id="属性过滤器">属性过滤器</span></h4><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-attr">[attribute]</span>匹配包含给定属性的元素。<br><br><span class="hljs-selector-attr">[attribute=value]</span>匹配给定的属性是某个特定值的元素<br><br><span class="hljs-selector-attr">[attribute!=value]</span>匹配所有不含有指定的属性，或者属性不等于特定值的元素。<br><br><span class="hljs-selector-attr">[attribute^=value]</span>匹配给定的属性是以某些值开始的元素<br><br><span class="hljs-selector-attr">[attribute$=value]</span>匹配给定的属性是以某些值结尾的元素<br><br><span class="hljs-selector-attr">[attribute*=value]</span>匹配给定的属性是以包含某些值的元素<br><br><span class="hljs-selector-attr">[attrSel1]</span><span class="hljs-selector-attr">[attrSel2]</span><span class="hljs-selector-attr">[attrSelN]</span>复合属性选择器，需要同时满足多个条件时使用。<br></code></pre></div></td></tr></table></figure><p>演示</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Untitled Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">div</span>,<span class="hljs-selector-tag">span</span>,<span class="hljs-selector-tag">p</span> &#123;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">140px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">140px</span>;</span><br><span class="css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span>;</span><br><span class="css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#aaa</span>;</span><br><span class="css"><span class="hljs-attribute">border</span>: <span class="hljs-number">#000</span> <span class="hljs-number">1px</span> solid;</span><br><span class="css"><span class="hljs-attribute">float</span>: left;</span><br><span class="css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">17px</span>;</span><br><span class="css"><span class="hljs-attribute">font-family</span>: Verdana;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.mini</span> &#123;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">55px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">55px</span>;</span><br><span class="css"><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#aaa</span>;</span><br><span class="css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.hide</span> &#123;</span><br><span class="css"><span class="hljs-attribute">display</span>: none;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="javascript">[attribute] </span></span><br><span class="hljs-comment"><span class="javascript">[attribute=value] </span></span><br><span class="hljs-comment"><span class="javascript">[attribute!=value]  </span></span><br><span class="hljs-comment"><span class="javascript">[attribute^=value] </span></span><br><span class="hljs-comment"><span class="javascript">[attribute$=value] </span></span><br><span class="hljs-comment"><span class="javascript">[attribute*=value] </span></span><br><span class="hljs-comment"><span class="javascript">[attrSel1][attrSel2][attrSelN]  </span></span><br><span class="hljs-comment"><span class="javascript"></span></span><br><span class="hljs-comment"><span class="javascript"></span></span><br><span class="hljs-comment"><span class="javascript">*/</span></span><br><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//1.选取含有 属性title 的div元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn1&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;div[title]&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//2.选取 属性title值等于&#x27;test&#x27;的div元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn2&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;div[title=&#x27;test&#x27;]&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//3.选取 属性title值不等于&#x27;test&#x27;的div元素(*没有属性title的也将被选中)</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn3&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;div[title!=&#x27;test&#x27;]&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//4.选取 属性title值 以&#x27;te&#x27;开始 的div元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn4&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;div[title^=&#x27;te&#x27;]&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//5.选取 属性title值 以&#x27;est&#x27;结束 的div元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn5&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;div[title$=&#x27;est&#x27;]&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//6.选取 属性title值 含有&#x27;es&#x27;的div元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn6&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;div[title*=&#x27;es&#x27;]&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//7.首先选取有属性id的div元素，然后在结果中 选取属性title值 含有&#x27;es&#x27;的 div 元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn7&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;div[id][title*=&#x27;es&#x27;]&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//8.选取 含有 title 属性值, 且title 属性值不等于 test 的 div 元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn8&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;div[title][title!=&#x27;test&#x27;]&quot;</span>).css(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;#bbffaa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选取含有 属性title 的div元素.&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选取 属性title值等于&#x27;test&#x27;的div元素.&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选取 属性title值不等于&#x27;test&#x27;的div元素(没有属性title的也将被选中).&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn3&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选取 属性title值 以&#x27;te&#x27;开始 的div元素.&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn4&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选取 属性title值 以&#x27;est&#x27;结束 的div元素.&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn5&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选取 属性title值 含有&#x27;es&#x27;的div元素.&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn6&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">value</span>=<span class="hljs-string">&quot;组合属性选择器,首先选取有属性id的div元素，然后在结果中 选取属性title值 含有&#x27;es&#x27;的 div 元素.&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn7&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选取 含有 title 属性值, 且title 属性值不等于 test 的 div 元素.&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn8&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>id 为 one,class 为 one 的div<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;two&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>id为two,class为one,title为test的div<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;other&quot;</span>&gt;</span>class为mini,title为other<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>class为mini,title为test<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;tesst&quot;</span>&gt;</span>class为mini,title为tesst<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;none&quot;</span>&gt;</span>style的display为&quot;none&quot;的div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hide&quot;</span>&gt;</span>class为&quot;hide&quot;的div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>包含input的type为&quot;hidden&quot;的div<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456789&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">size</span>=<span class="hljs-string">&quot;8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mover&quot;</span>&gt;</span>正在执行动画的div元素.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h4><span id="表单表单对象属性过滤器">表单/表单对象属性过滤器</span></h4><p>表单过滤器</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">:<span class="hljs-keyword">input</span>匹配所有 <span class="hljs-keyword">input</span>, textarea, <span class="hljs-keyword">select</span> 和 button 元素<br><br>:<span class="hljs-type">text</span>匹配所有文本输入框<br><br>:<span class="hljs-keyword">password</span>匹配所有的密码输入框<br><br>:radio匹配所有的单选框<br><br>:checkbox匹配所有的复选框<br><br>:submit匹配所有提交按钮<br><br>:image匹配所有 img 标签<br><br>:<span class="hljs-keyword">reset</span>匹配所有重置按钮<br><br>:button匹配所有 <span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=button &lt;button&gt;按钮<br><br>:file匹配所有 <span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=file 文件上传<br><br>:hidden匹配所有不可见元素 display:<span class="hljs-keyword">none</span> 或 <span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=hidden<br></code></pre></div></td></tr></table></figure><p>表单对象属性过滤器</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir"><span class="hljs-symbol">:enabled</span>匹配所有可用元素<br><br><span class="hljs-symbol">:disabled</span>匹配所有不可用元素<br><br><span class="hljs-symbol">:checked</span>匹配所有选中的单选，复选，和下拉列表中选中的 option 标签对象<br><br><span class="hljs-symbol">:selected</span>匹配所有选中的 option<br></code></pre></div></td></tr></table></figure><p>演示</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Untitled Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//1.对表单内 可用input 赋值操作</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn1&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;:input:enabled&quot;</span>).val(<span class="hljs-string">&quot;New Value&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//2.对表单内 不可用input 赋值操作</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn2&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;:input:disabled&quot;</span>).val(<span class="hljs-string">&quot;New Value Too&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//3.获取多选框选中的个数  使用size()方法获取选取到的元素集合的元素个数</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn3&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">alert($(<span class="hljs-string">&quot;:checkbox:checked&quot;</span>).size())</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//4.获取多选框，每个选中的value值</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn4&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript"><span class="hljs-keyword">var</span> eles = $(<span class="hljs-string">&quot;:checkbox:checked&quot;</span>);</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(eles);</span><br><span class="javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i &lt; eles.size();i++)&#123;</span><br><span class="javascript">str += <span class="hljs-string">&quot;【&quot;</span>+$(eles[i]).val()+<span class="hljs-string">&quot;】&quot;</span>;</span><br><span class="javascript">&#125;</span><br><span class="javascript">alert(str)</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//5.获取下拉框选中的内容  </span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn5&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript"><span class="hljs-comment">//注意这个选择器的特殊，因为select里面的option是真正的被选择项，</span></span><br><span class="javascript"><span class="hljs-comment">//所以 :selected 选择器和 select[name=&#x27;test&#x27;]选择器的关系是子父关系</span></span><br><span class="javascript"><span class="hljs-comment">//必须按照基本选择器选择后代的方法选</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> els = $(<span class="hljs-string">&quot;select option:selected&quot;</span>);</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(els);</span><br><span class="javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;els.size();i++)&#123;</span><br><span class="javascript">str += <span class="hljs-string">&quot;【&quot;</span>+$(els[i]).val()+<span class="hljs-string">&quot;】&quot;</span>;</span><br><span class="javascript">&#125;</span><br><span class="javascript">alert(str);</span><br><span class="javascript">&#125;);</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>表单对象属性过滤选择器<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span>对表单内 可用input 赋值操作.<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span>&gt;</span>对表单内 不可用input 赋值操作.<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn3&quot;</span>&gt;</span>获取多选框选中的个数.<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn4&quot;</span>&gt;</span>获取多选框选中的内容.<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn5&quot;</span>&gt;</span>获取下拉框选中的内容.<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;form1&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>可用元素: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;可用文本框1&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>不可用元素: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;不可用文本框&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>可用元素: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;che&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;可用文本框2&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>不可用元素: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;不可用文本框&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>多选框: <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test1&quot;</span> /&gt;</span>test1<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test2&quot;</span> /&gt;</span>test2<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test3&quot;</span> /&gt;</span>test3<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test4&quot;</span> /&gt;</span>test4<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;newsletter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;test5&quot;</span> /&gt;</span>test5<br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>下拉列表1: <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 100px&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sele1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>浙江<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span>辽宁<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span>天津<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>湖北<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>下拉列表2: <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;test2&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>浙江<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>辽宁<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>天津<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>湖北<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h2><span id="6-jquery元素筛选">6. jQuery元素筛选</span></h2><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">eq</span><span class="hljs-params">()</span></span>获取给定索引的元素功能跟 :eq() 一样<br><br><span class="hljs-function"><span class="hljs-title">first</span><span class="hljs-params">()</span></span>获取第一个元素功能跟 <span class="hljs-selector-pseudo">:first</span> 一样<br><br><span class="hljs-function"><span class="hljs-title">last</span><span class="hljs-params">()</span></span>获取最后一个元素功能跟 :last 一样<br><br><span class="hljs-function"><span class="hljs-title">filter</span><span class="hljs-params">(exp)</span></span>留下匹配的元素<br><br><span class="hljs-function"><span class="hljs-title">is</span><span class="hljs-params">(exp)</span></span>判断是否匹配给定的选择器，只要有一个匹配就返回，true<br><br><span class="hljs-function"><span class="hljs-title">has</span><span class="hljs-params">(exp)</span></span>返回包含有匹配选择器的元素的元素功能跟 <span class="hljs-selector-pseudo">:has</span> 一样<br><br><span class="hljs-function"><span class="hljs-title">not</span><span class="hljs-params">(exp)</span></span>删除匹配选择器的元素功能跟 <span class="hljs-selector-pseudo">:not</span> 一样<br><br><span class="hljs-function"><span class="hljs-title">children</span><span class="hljs-params">(exp)</span></span>返回匹配给定选择器的子元素功能跟 parent&gt;child 一样<br><br><span class="hljs-function"><span class="hljs-title">find</span><span class="hljs-params">(exp)</span></span>返回匹配给定选择器的后代元素功能跟ancestor descendant一样<br><br><span class="hljs-function"><span class="hljs-title">next</span><span class="hljs-params">(exp)</span></span>返回当前元素的下一个兄弟元素功能跟prev + next功能一样<br><br><span class="hljs-function"><span class="hljs-title">nextAll</span><span class="hljs-params">()</span></span>返回当前元素后面所有的兄弟元素功能跟prev ~ siblings 功能一样<br><br><span class="hljs-function"><span class="hljs-title">nextUntil</span><span class="hljs-params">()</span></span> 返回当前元素到指定匹配的元素为止的后面元素<br><br><span class="hljs-function"><span class="hljs-title">parent</span><span class="hljs-params">(exp)</span></span> 返回唯一父元素<br><br><span class="hljs-function"><span class="hljs-title">parents</span><span class="hljs-params">(exp)</span></span> 返回祖宗元素的集合（不包含根元素）<br><br><span class="hljs-function"><span class="hljs-title">parentsUntil</span><span class="hljs-params">(exp)</span></span> 返回祖宗元素的集合,直到exp为止<br><br><span class="hljs-function"><span class="hljs-title">prev</span><span class="hljs-params">(exp)</span></span> 返回当前元素的上一个兄弟元素<br><br><span class="hljs-function"><span class="hljs-title">prevAll</span><span class="hljs-params">()</span></span> 返回当前元素前面所有的兄弟元素<br><br><span class="hljs-function"><span class="hljs-title">prevUnit</span><span class="hljs-params">(exp)</span></span> 返回当前元素到指定匹配的元素为止的前面元素<br><br><span class="hljs-function"><span class="hljs-title">siblings</span><span class="hljs-params">(exp)</span></span> 返回所有兄弟元素<br><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">()</span></span> 把 add 匹配的选择器的元素添加到当前 jquery 对象中<br></code></pre></div></td></tr></table></figure><p>演示</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>DOM查询<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">div</span>, <span class="hljs-selector-tag">span</span>, <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">140px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">140px</span>;</span><br><span class="css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span>;</span><br><span class="css">    <span class="hljs-attribute">background</span>: <span class="hljs-number">#aaa</span>;</span><br><span class="css">    <span class="hljs-attribute">border</span>: <span class="hljs-number">#000</span> <span class="hljs-number">1px</span> solid;</span><br><span class="css">    <span class="hljs-attribute">float</span>: left;</span><br><span class="css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">17px</span>;</span><br><span class="css">    <span class="hljs-attribute">font-family</span>: Verdana;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.mini</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">55px</span>;</span><br><span class="css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">55px</span>;</span><br><span class="css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#aaa</span>;</span><br><span class="css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.hide</span> &#123;</span><br><span class="css">    <span class="hljs-attribute">display</span>: none;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">anmateIt</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;#mover&quot;</span>).slideToggle(<span class="hljs-string">&quot;slow&quot;</span>, anmateIt);</span><br><span class="javascript">&#125;</span><br><span class="javascript">anmateIt();</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//(1)eq()  选择索引值为等于 3 的 div 元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn1&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;div&quot;</span>).eq(<span class="hljs-number">3</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;#bfa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//(2)first()选择第一个 div 元素</span></span><br><span class="javascript"> $(<span class="hljs-string">&quot;#btn2&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"> <span class="hljs-comment">//first()   选取第一个元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;div&quot;</span>).first().css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;#bfa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//(3)last()选择最后一个 div 元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn3&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//last()  选取最后一个元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;div&quot;</span>).last().css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;#bfa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//(4)filter()在div中选择索引为偶数的</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn4&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//filter()  过滤   传入的是选择器字符串</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;div&quot;</span>).filter(<span class="hljs-string">&quot;:even&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;#bfa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"> <span class="hljs-comment">//(5)is()判断#one是否为:empty或:parent</span></span><br><span class="javascript"><span class="hljs-comment">//is用来检测jq对象是否符合指定的选择器</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn5&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    alert( $(<span class="hljs-string">&quot;#one&quot;</span>).is(<span class="hljs-string">&quot;:empty&quot;</span>) );</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//(6)has()选择div中包含.mini的</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn6&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//has(selector)  选择器字符串    是否包含selector</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;div&quot;</span>).has(<span class="hljs-string">&quot;.mini&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;#bfa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//(7)not()选择div中class不为one的</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn7&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//not(selector)  选择不是selector的元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;div&quot;</span>).not(<span class="hljs-string">&quot;.one&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;#bfa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//(8)children()在body中选择所有class为one的div子元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn8&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//children()  选出所有的子元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;body&quot;</span>).children(<span class="hljs-string">&quot;div.one&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;#bfa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//(9)find()在body中选择所有class为mini的div元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn9&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//find()  选出所有的后代元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;body&quot;</span>).find(<span class="hljs-string">&quot;div.mini&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;#bfa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//(10)next() #one的下一个div</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn10&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//next()  选择下一个兄弟元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#one&quot;</span>).next(<span class="hljs-string">&quot;div&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;#bfa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//(11)nextAll() #one后面所有的span元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn11&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//nextAll()   选出后面所有的元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#one&quot;</span>).nextAll(<span class="hljs-string">&quot;span&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;#bfa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//(12)nextUntil() #one和span之间的元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn12&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#one&quot;</span>).nextUntil(<span class="hljs-string">&quot;span&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;#bfa&quot;</span>)</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//(13)parent() .mini的父元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn13&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;.mini&quot;</span>).parent().css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;#bfa&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//(14)prev() #two的上一个div</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn14&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//prev()  </span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#two&quot;</span>).prev(<span class="hljs-string">&quot;div&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;#bfa&quot;</span>)</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//(15)prevAll() span前面所有的div</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn15&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//prevAll()   选出前面所有的元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;span&quot;</span>).prevAll(<span class="hljs-string">&quot;div&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;#bfa&quot;</span>)</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//(16)prevUntil() span向前直到#one的元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn16&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//prevUntil(exp)   找到之前所有的兄弟元素直到找到exp停止</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;span&quot;</span>).prevUntil(<span class="hljs-string">&quot;#one&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;#bfa&quot;</span>)</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//(17)siblings() #two的所有兄弟元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn17&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//siblings()    找到所有的兄弟元素，包括前面的和后面的</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#two&quot;</span>).siblings().css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;#bfa&quot;</span>)</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//(18)add()选择所有的 span 元素和id为two的元素</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn18&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//   $(&quot;span,#two,.mini,#one&quot;)</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;span&quot;</span>).add(<span class="hljs-string">&quot;#two&quot;</span>)</span><br><span class="javascript">.add(<span class="hljs-string">&quot;.mini&quot;</span>).add(<span class="hljs-string">&quot;#one&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;#bfa&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;eq()选择索引值为等于 3 的 div 元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;first()选择第一个 div 元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;last()选择最后一个 div 元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn3&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;filter()在div中选择索引为偶数的&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn4&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;is()判断#one是否为:empty或:parent&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn5&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;has()选择div中包含.mini的&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn6&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;not()选择div中class不为one的&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn7&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;children()在body中选择所有class为one的div子元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;find()在body中选择所有class为mini的div后代元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn9&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;next()#one的下一个div&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn10&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;nextAll()#one后面所有的span元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn11&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;nextUntil()#one和span之间的元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn12&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;parent().mini的父元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn13&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;prev()#two的上一个div&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn14&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;prevAll()span前面所有的div&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn15&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;prevUntil()span向前直到#one的元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn16&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;siblings()#two的所有兄弟元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn17&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;add()选择所有的 span 元素和id为two的元素&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn18&quot;</span> /&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>基本选择器.<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>文本框<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;account&quot;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&quot;disabled&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>id 为 one,class 为 one 的div<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;two&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>id为two,class为one,title为test的div<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;other&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>class为mini,title为other<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>class为mini,title为test<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>class为mini<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;tesst&quot;</span>&gt;</span>class为mini,title为tesst<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;none&quot;</span>&gt;</span>style的display为&quot;none&quot;的div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hide&quot;</span>&gt;</span>class为&quot;hide&quot;的div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;span1&quot;</span>&gt;</span>^^span元素 111^^<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>包含input的type为&quot;hidden&quot;的div<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;span2&quot;</span>&gt;</span>^^span元素 222^^<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mover&quot;</span>&gt;</span>正在执行动画的div元素.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h2><span id="7-jquery属性操作">7. jQuery属性操作</span></h2><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">html()它可以设置和获取起始标签和结束标签中的内容。跟 dom 属性 innerHTML 一样。<br><br>text()它可以设置和获取起始标签和结束标签中的文本。跟 dom 属性 innerText 一样。<br><br>val()它可以设置和获取<span class="hljs-emphasis">*表单项*</span>的 value 属性值。跟 dom 属性 value 一样<br><br>attr()<br>可以设置和获取属性的值，不推荐操作 checked、readOnly、selected、disabled 等等<br>attr 方法还可以操作非标准的属性。比如自定义属性：abc,bbj<br><br>prop()<br>可以设置和获取属性的值,只推荐操作 checked、readOnly、selected、disabled 等等<br></code></pre></div></td></tr></table></figure><p>演示1</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//加载时</span></span><br><span class="javascript">            alert( $(<span class="hljs-string">&quot;div&quot;</span>).html() );</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>你好<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>演示2：注意html有参数是设置，原来的内容被替换掉了</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//加载时</span></span><br><span class="javascript">            $(<span class="hljs-string">&quot;div&quot;</span>).html(<span class="hljs-string">&quot;&lt;h1&gt;再见&lt;/h1&gt;&quot;</span>);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>你好<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>val方法同时设置多个表单项的选中状态</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh_CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        $(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="javascript">            // 批量操作单选</span></span><br><span class="hljs-comment"><span class="javascript">            $(&quot;:radio&quot;).val([&quot;radio2&quot;]);</span></span><br><span class="hljs-comment"><span class="javascript">            // 批量操作筛选框的选中状态</span></span><br><span class="hljs-comment"><span class="javascript">            $(&quot;:checkbox&quot;).val([&quot;checkbox3&quot;,&quot;checkbox2&quot;]);</span></span><br><span class="hljs-comment"><span class="javascript">            // 批量操作多选的下拉框选中状态</span></span><br><span class="hljs-comment"><span class="javascript">            $(&quot;#multiple&quot;).val([&quot;mul2&quot;,&quot;mul3&quot;,&quot;mul4&quot;]);</span></span><br><span class="hljs-comment"><span class="javascript">            // 操作单选的下拉框选中状态</span></span><br><span class="hljs-comment"><span class="javascript">            $(&quot;#single&quot;).val([&quot;sin2&quot;]);</span></span><br><span class="hljs-comment"><span class="javascript">            */</span></span><br><span class="javascript">            $(<span class="hljs-string">&quot;#multiple,#single,:radio,:checkbox&quot;</span>).val([<span class="hljs-string">&quot;radio2&quot;</span>,<span class="hljs-string">&quot;checkbox1&quot;</span>,<span class="hljs-string">&quot;checkbox3&quot;</span>,<span class="hljs-string">&quot;mul1&quot;</span>,<span class="hljs-string">&quot;mul4&quot;</span>,<span class="hljs-string">&quot;sin3&quot;</span>]</span><br><span class="javascript">            );</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    单选：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;radio1&quot;</span> /&gt;</span>radio1<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;radio2&quot;</span> /&gt;</span>radio2<br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    多选：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;checkbox1&quot;</span>/&gt;</span>checkbox1<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;checkbox2&quot;</span>/&gt;</span>checkbox2<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;checkbox3&quot;</span>/&gt;</span>checkbox3<br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    下拉多选 ：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mul1&quot;</span>&gt;</span>mul1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mul2&quot;</span>&gt;</span>mul2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mul3&quot;</span>&gt;</span>mul3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mul4&quot;</span>&gt;</span>mul4<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    下拉单选 ：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;single&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sin1&quot;</span>&gt;</span>sin1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sin2&quot;</span>&gt;</span>sin2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sin3&quot;</span>&gt;</span>sin3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>演示2</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">           alert( $(<span class="hljs-string">&quot;:checkbox:first&quot;</span>).attr(<span class="hljs-string">&quot;name&quot;</span>) );</span><br><span class="javascript">           $(<span class="hljs-string">&quot;:checkbox:first&quot;</span>).attr(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;abc&quot;</span>);</span><br><span class="javascript">           $(<span class="hljs-string">&quot;#bt1&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">               alert( $(<span class="hljs-string">&quot;:checkbox:first&quot;</span>).prop(<span class="hljs-string">&quot;checked&quot;</span>) );</span><br><span class="javascript">               alert( $(<span class="hljs-string">&quot;:checkbox:last&quot;</span>).prop(<span class="hljs-string">&quot;checked&quot;</span>) );</span><br><span class="javascript">           &#125;);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cb1&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cb1&quot;</span>&gt;</span>checkbox1<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cb2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cb2&quot;</span>&gt;</span>checkbox2<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bt1&quot;</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2><span id="9-jqunery-练习1">9. jQunery 练习1</span></h2><h3><span id="2全选全不选反选">2.全选，全不选，反选</span></h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">//全选</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#checkedAllBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            $(<span class="hljs-string">&quot;:checkbox&quot;</span>).prop(<span class="hljs-string">&quot;checked&quot;</span>,<span class="hljs-literal">true</span>);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript"><span class="hljs-comment">//全不选</span></span><br><span class="javascript">        $(<span class="hljs-string">&quot;#checkedNoBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            $(<span class="hljs-string">&quot;:checkbox&quot;</span>).prop(<span class="hljs-string">&quot;checked&quot;</span>,<span class="hljs-literal">false</span>);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">        <span class="hljs-comment">//反选</span></span><br><span class="javascript">        $(<span class="hljs-string">&quot;#checkedRevBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">//方法1</span></span><br><span class="javascript">            <span class="hljs-comment">// var cbs = $(&quot;:checkbox[name=&#x27;items&#x27;]&quot;);</span></span><br><span class="javascript">            <span class="hljs-comment">// for(var i = 0; i &lt; cbs.length; i++) &#123;</span></span><br><span class="javascript">            <span class="hljs-comment">//     cbs[i].checked = !cbs[i].checked;</span></span><br><span class="javascript">            <span class="hljs-comment">// &#125;</span></span><br><span class="javascript">            <span class="hljs-comment">//方法2</span></span><br><span class="javascript">            $(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.checked = !<span class="hljs-built_in">this</span>.checked;</span><br><span class="javascript">            &#125;)</span><br><span class="javascript">            <span class="hljs-comment">//判断全选，全不选</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> allCount = $(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).length;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> checkedCount = $(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]:checked&quot;</span>).length;</span><br><span class="javascript">            $(<span class="hljs-string">&quot;#checkedAllBox&quot;</span>).prop(<span class="hljs-string">&quot;checked&quot;</span>,allCount==checkedCount);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">        <span class="hljs-comment">//全选全不选点击</span></span><br><span class="javascript">        $(<span class="hljs-string">&quot;#checkedAllBox&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            $(<span class="hljs-string">&quot;:checkbox&quot;</span>).prop(<span class="hljs-string">&quot;checked&quot;</span>,<span class="hljs-built_in">this</span>.checked);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">        <span class="hljs-comment">//选项点击</span></span><br><span class="javascript">        $(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">//判断全选，全不选</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> allCount = $(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]&quot;</span>).length;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> checkedCount = $(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]:checked&quot;</span>).length;</span><br><span class="javascript">            $(<span class="hljs-string">&quot;#checkedAllBox&quot;</span>).prop(<span class="hljs-string">&quot;checked&quot;</span>,allCount==checkedCount);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">        <span class="hljs-comment">//提交</span></span><br><span class="javascript">        $(<span class="hljs-string">&quot;#sendBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="javascript">            $(<span class="hljs-string">&quot;:checkbox[name=&#x27;items&#x27;]:checked&quot;</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                str += <span class="hljs-string">&quot;【&quot;</span> + <span class="hljs-built_in">this</span>.value + <span class="hljs-string">&quot;】&quot;</span>;</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">            alert(str);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>你爱好的运动是？<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkedAllBox&quot;</span> /&gt;</span>全选/全不选 <br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;足球&quot;</span> /&gt;</span>足球<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;篮球&quot;</span> /&gt;</span>篮球<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;羽毛球&quot;</span> /&gt;</span>羽毛球<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;items&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;乒乓球&quot;</span> /&gt;</span>乒乓球<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkedAllBtn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;全　选&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkedNoBtn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;全不选&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkedRevBtn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;反　选&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sendBtn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提　交&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2><span id="10-dom的增删改">10. Dom的增删改</span></h2><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less">内部插入：<br><span class="hljs-selector-tag">append</span>()<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.append</span>(b)<span class="hljs-selector-tag">a</span>里面的后面追加<span class="hljs-selector-tag">b</span><br><span class="hljs-selector-tag">appendTo</span>()<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.appendTo</span>(b)把 <span class="hljs-selector-tag">a</span> 插入到 <span class="hljs-selector-tag">b</span> 子元素末尾，成为最后一个子<br><br>元素：<br><span class="hljs-selector-tag">prepend</span><span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.prepend</span>(b)<span class="hljs-selector-tag">a</span>里面的前面追加<span class="hljs-selector-tag">b</span><br><span class="hljs-selector-tag">prependTo</span>() <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.prependTo</span>(b)把<span class="hljs-selector-tag">a</span>插到<span class="hljs-selector-tag">b</span>所有子元素前面，成为第一个子元素<br><br>外部插入：<br><span class="hljs-selector-tag">insertAfter</span>()<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.insertAfter</span>(b)得到 <span class="hljs-selector-tag">ba</span><br><span class="hljs-selector-tag">insertBefore</span>()<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.insertBefore</span>(b)得到 <span class="hljs-selector-tag">ab</span><br><br>替换:<br><span class="hljs-selector-tag">replaceWith</span>()<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.replaceWith</span>(b)用 <span class="hljs-selector-tag">b</span> 替换掉 <span class="hljs-selector-tag">a</span><br><span class="hljs-selector-tag">replaceAll</span>()<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.replaceAll</span>(b)用 <span class="hljs-selector-tag">a</span> 替换掉所有 <span class="hljs-selector-tag">b</span><br><br>删除：<br><span class="hljs-selector-tag">remove</span>()<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.remove</span>();删除 <span class="hljs-selector-tag">a</span> 标签<br><span class="hljs-selector-tag">empty</span>()<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.empty</span>();清空 <span class="hljs-selector-tag">a</span> 标签里的内容<br></code></pre></div></td></tr></table></figure><p>演示</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>DOM增删改<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;style/css.css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn01&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//创建一个&quot;广州&quot;节点,添加到#city下[appendTo()]</span></span><br><span class="javascript"><span class="hljs-comment">//子节点.appendTo(父节点)</span></span><br><span class="javascript">                    $(<span class="hljs-string">&quot;&lt;li&gt;广州&lt;/li&gt;&quot;</span>).appendTo(<span class="hljs-string">&quot;#city&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn02&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//创建一个&quot;广州&quot;节点,添加到#city下[prependTo()]</span></span><br><span class="javascript">                    $(<span class="hljs-string">&quot;&lt;li&gt;广州&lt;/li&gt;&quot;</span>).prependTo(<span class="hljs-string">&quot;#city&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn03&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//将&quot;广州&quot;节点插入到#bj前面[insertBefore()]</span></span><br><span class="javascript"><span class="hljs-comment">//前边.insertBefore(后边的)</span></span><br><span class="javascript">                    $(<span class="hljs-string">&quot;&lt;li&gt;广州&lt;/li&gt;&quot;</span>).insertBefore(<span class="hljs-string">&quot;#bj&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn04&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//将&quot;广州&quot;节点插入到#bj后面[insertAfter()]</span></span><br><span class="javascript"><span class="hljs-comment">//后边.insertAfter(前边的)</span></span><br><span class="javascript">                    $(<span class="hljs-string">&quot;&lt;li&gt;广州&lt;/li&gt;&quot;</span>).insertAfter(<span class="hljs-string">&quot;#bj&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn05&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//使用&quot;广州&quot;节点替换#bj节点[replaceWith()]</span></span><br><span class="javascript"><span class="hljs-comment">//被替换的.replaceWith()</span></span><br><span class="javascript">                    $(<span class="hljs-string">&quot;#bj&quot;</span>).replaceWith(<span class="hljs-string">&quot;&lt;li&gt;广州&lt;/li&gt;&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn06&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//使用&quot;广州&quot;节点替换#bj节点[replaceAll()]</span></span><br><span class="javascript"><span class="hljs-comment">//新的节点.replaceAll(旧的节点)</span></span><br><span class="javascript">                    $(<span class="hljs-string">&quot;&lt;li&gt;广州&lt;/li&gt;&quot;</span>).replaceAll(<span class="hljs-string">&quot;#bj&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn07&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//删除#rl节点[remove()]</span></span><br><span class="javascript"><span class="hljs-comment">//$(&quot;ul&quot;).remove(&quot;#rl&quot;);</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#rl&quot;</span>).remove();</span><br><span class="javascript">&#125;);</span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn08&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//掏空#city节点[empty()]</span></span><br><span class="javascript">                    $(<span class="hljs-string">&quot;#city&quot;</span>).empty();</span><br><span class="javascript">&#125;);</span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn09&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//读取#city内的HTML代码</span></span><br><span class="javascript">                    alert($(<span class="hljs-string">&quot;#city&quot;</span>).html());</span><br><span class="javascript">&#125;);</span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn10&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//设置#bj内的HTML代码</span></span><br><span class="javascript">                    $(<span class="hljs-string">&quot;#city&quot;</span>).html(<span class="hljs-string">&quot;&lt;li id=\&quot;bj\&quot;&gt;无锡&lt;/li&gt;\n&quot;</span> +</span><br><span class="javascript">                            <span class="hljs-string">&quot;\t\t\t\t\t&lt;li&gt;常州&lt;/li&gt;\n&quot;</span> +</span><br><span class="javascript">                            <span class="hljs-string">&quot;\t\t\t\t\t&lt;li&gt;苏州&lt;/li&gt;\n&quot;</span> +</span><br><span class="javascript">                            <span class="hljs-string">&quot;\t\t\t\t\t&lt;li&gt;南京&lt;/li&gt;&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;total&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>你喜欢哪个城市?<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;city&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bj&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>东京<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>首尔<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>你喜欢哪款单机游戏?<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;game&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;rl&quot;</span>&gt;</span>红警<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>实况<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>极品飞车<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>魔兽<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>你手机的操作系统是?<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;phone&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>IOS<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;android&quot;</span>&gt;</span>Android<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Windows Phone<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span><br>gender:<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;male&quot;</span>/&gt;</span><br>Male<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;female&quot;</span>/&gt;</span><br>Female<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>name:<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;abcde&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnList&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn01&quot;</span>&gt;</span>创建一个&quot;广州&quot;节点,添加到#city下[appendTo()]<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn02&quot;</span>&gt;</span>创建一个&quot;广州&quot;节点,添加到#city下[prependTo()]<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn03&quot;</span>&gt;</span>将&quot;广州&quot;节点插入到#bj前面[insertBefore()]<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn04&quot;</span>&gt;</span>将&quot;广州&quot;节点插入到#bj后面[insertAfter()]<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn05&quot;</span>&gt;</span>使用&quot;广州&quot;节点替换#bj节点[replaceWith()]<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn06&quot;</span>&gt;</span>使用&quot;广州&quot;节点替换#bj节点[replaceAll()]<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn07&quot;</span>&gt;</span>删除#rl节点[remove()]<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn08&quot;</span>&gt;</span>掏空#city节点[empty()]<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn09&quot;</span>&gt;</span>读取#city内的HTML代码<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn10&quot;</span>&gt;</span>设置#bj内的HTML代码<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h2><span id="11-jquery-练习2">11. jQuery 练习2</span></h2><ol start="2"><li>从左到右，从右到左练习</li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">select &#123;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">140px</span>;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-tag">div</span> &#123;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">130px</span>;</span><br><span class="css"><span class="hljs-attribute">float</span>: left;</span><br><span class="css"><span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            选中添加到右边</span><br><span class="javascript">            $(<span class="hljs-string">&quot;#bt1&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                $(<span class="hljs-string">&quot;select[name=&#x27;sel01&#x27;]:selected&quot;</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    $(<span class="hljs-built_in">this</span>).appendTo(<span class="hljs-string">&quot;select[name=&#x27;sel02&#x27;]&quot;</span>);</span><br><span class="javascript">                &#125;);</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">            <span class="hljs-comment">//全部添加到右边</span></span><br><span class="javascript">            $(<span class="hljs-string">&quot;#bt2&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                $(<span class="hljs-string">&quot;select[name=&#x27;sel01&#x27;]&quot;</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    $(<span class="hljs-built_in">this</span>).appendTo(<span class="hljs-string">&quot;select[name=&#x27;sel02&#x27;]&quot;</span>);</span><br><span class="javascript">                &#125;);</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">            <span class="hljs-comment">//选中添加到左边</span></span><br><span class="javascript">            $(<span class="hljs-string">&quot;#bt3&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                $(<span class="hljs-string">&quot;select[name=&#x27;sel02&#x27;]:selected&quot;</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    $(<span class="hljs-built_in">this</span>).appendTo(<span class="hljs-string">&quot;select[name=&#x27;sel01&#x27;]&quot;</span>);</span><br><span class="javascript">                &#125;);</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">            <span class="hljs-comment">//全部添加到左边</span></span><br><span class="javascript">            $(<span class="hljs-string">&quot;#bt4&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                $(<span class="hljs-string">&quot;select[name=&#x27;sel02&#x27;]&quot;</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    $(<span class="hljs-built_in">this</span>).appendTo(<span class="hljs-string">&quot;select[name=&#x27;sel01&#x27;]&quot;</span>);</span><br><span class="javascript">                &#125;);</span><br><span class="javascript">            &#125;);</span><br><span class="javascript">        &#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sel01&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt01&quot;</span>&gt;</span>选项1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt02&quot;</span>&gt;</span>选项2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt03&quot;</span>&gt;</span>选项3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt04&quot;</span>&gt;</span>选项4<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt05&quot;</span>&gt;</span>选项5<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt06&quot;</span>&gt;</span>选项6<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt07&quot;</span>&gt;</span>选项7<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;opt08&quot;</span>&gt;</span>选项8<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bt1&quot;</span>&gt;</span>选中添加到右边<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bt2&quot;</span>&gt;</span>全部添加到右边<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;rigth&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sel02&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bt3&quot;</span>&gt;</span>选中删除到左边<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bt4&quot;</span>&gt;</span>全部删除到左边<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ol start="3"><li>动态添加、删除表格记录</li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Untitled Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;styleB/css.css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> deleteFun = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">//找到待删的行的姓名</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> name = $(<span class="hljs-built_in">this</span>).parent().siblings().first().text();</span><br><span class="javascript">            <span class="hljs-comment">//确认框</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> flag = confirm(<span class="hljs-string">&quot;确定要删除&quot;</span> + name + <span class="hljs-string">&quot;吗？&quot;</span>);</span><br><span class="javascript">            <span class="hljs-keyword">if</span>(flag) &#123;</span><br><span class="javascript">                <span class="hljs-comment">//获取爸爸的爸爸并删除</span></span><br><span class="javascript">                $(<span class="hljs-built_in">this</span>).parent().parent().remove();</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        $(<span class="hljs-string">&quot;#addEmpButton&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">//获取输入框内容</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> name = $(<span class="hljs-string">&quot;#empName&quot;</span>).val();</span><br><span class="javascript">            <span class="hljs-keyword">var</span> email = $(<span class="hljs-string">&quot;#email&quot;</span>).val();</span><br><span class="javascript">            <span class="hljs-keyword">var</span> salary = $(<span class="hljs-string">&quot;#salary&quot;</span>).val();</span><br><span class="javascript">            <span class="hljs-comment">//获取序号</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> count = $(<span class="hljs-string">&quot;#employeeTable &gt; tr&quot;</span>).length;    <span class="hljs-comment">//子元素tr的数量</span></span><br><span class="javascript">            count++;</span><br><span class="javascript">            <span class="hljs-comment">//添加到表格</span></span><br><span class="javascript">            $trObj = $(<span class="hljs-string">&quot;&lt;tr&gt;\n&quot;</span> +</span><br><span class="javascript">                    <span class="hljs-string">&quot;\t\t\t&lt;td&gt;&quot;</span> + name + <span class="hljs-string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="javascript">                    <span class="hljs-string">&quot;\t\t\t&lt;td&gt;&quot;</span> + email + <span class="hljs-string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="javascript">                    <span class="hljs-string">&quot;\t\t\t&lt;td&gt;&quot;</span> + salary + <span class="hljs-string">&quot;&lt;/td&gt;\n&quot;</span> +</span><br><span class="javascript">                    <span class="hljs-string">&quot;\t\t\t&lt;td&gt;&lt;a href=\&quot;deleteEmp?id=&quot;</span> + count + <span class="hljs-string">&quot;\&quot;&gt;Delete&lt;/a&gt;&lt;/td&gt;\n&quot;</span> +</span><br><span class="javascript">                    <span class="hljs-string">&quot;\t\t&lt;/tr&gt;&quot;</span>);</span><br><span class="javascript">            $trObj.appendTo(<span class="hljs-string">&quot;#employeeTable&quot;</span>);</span><br><span class="javascript">            <span class="hljs-comment">//补绑定a标签的点击事件</span></span><br><span class="javascript">            $trObj.find(<span class="hljs-string">&quot;a&quot;</span>).click( deleteFun );</span><br><span class="javascript">        &#125;);</span><br><span class="javascript"></span><br><span class="javascript">        $(<span class="hljs-string">&quot;a&quot;</span>).click( deleteFun );</span><br><span class="javascript"></span><br><span class="javascript">    &#125;);</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;employeeTable&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Email<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Salary<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Tom<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>tom@tom.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;deleteEmp?id=001&quot;</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Jerry<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>jerry@sohu.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>8000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;deleteEmp?id=002&quot;</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Bob<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>bob@tom.com<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>10000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;deleteEmp?id=003&quot;</span>&gt;</span>Delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;formDiv&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>添加新员工<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;word&quot;</span>&gt;</span>name: <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inp&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empName&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;word&quot;</span>&gt;</span>email: <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inp&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;email&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;word&quot;</span>&gt;</span>salary: <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inp&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;salary&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;salary&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addEmpButton&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span><br>Submit<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h2><span id="12-css样式操作">12. CSS样式操作</span></h2><p>addClass() 添加样式<br>removeClass() 删除样式<br>toggleClass() 有就删除，没有就添加样式。<br>offset() 获取和设置元素的坐标。</p><p>演示</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css"><span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>:<span class="hljs-number">260px</span>;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.whiteborder</span>&#123;</span><br><span class="css"><span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> white solid;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.redDiv</span>&#123;</span><br><span class="css"><span class="hljs-attribute">background-color</span>: red;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.blueBorder</span>&#123;</span><br><span class="css"><span class="hljs-attribute">border</span>: <span class="hljs-number">5px</span> blue solid;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">var</span> $divEle = $(<span class="hljs-string">&#x27;div:first&#x27;</span>);</span><br><span class="javascript">$(<span class="hljs-string">&#x27;#btn01&#x27;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//addClass() - 向被选元素添加一个或多个类</span></span><br><span class="javascript">$divEle.addClass(<span class="hljs-string">&quot;redDiv blueBorder&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript">$(<span class="hljs-string">&#x27;#btn02&#x27;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//removeClass() - 从被选元素删除一个或多个类 </span></span><br><span class="javascript">            $divEle.removeClass();</span><br><span class="javascript">&#125;);</span><br><span class="javascript">$(<span class="hljs-string">&#x27;#btn03&#x27;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//toggleClass() - 对被选元素进行添加/删除类的切换操作 </span></span><br><span class="javascript">            $divEle.toggleClass(<span class="hljs-string">&quot;redDiv blueBorder&quot;</span>);</span><br><span class="javascript">&#125;);</span><br><span class="javascript">$(<span class="hljs-string">&#x27;#btn04&#x27;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//offset() - 返回第一个匹配元素相对于文档的位置。</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> os = $divEle.offset();</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(os.top + <span class="hljs-string">&quot; &quot;</span> + os.left);</span><br><span class="javascript">            <span class="hljs-keyword">var</span> os = $divEle.offset(&#123;</span><br><span class="javascript">                <span class="hljs-attr">top</span>:<span class="hljs-number">50</span>,</span><br><span class="javascript">                <span class="hljs-attr">left</span>:<span class="hljs-number">50</span></span><br><span class="javascript">            &#125;);</span><br><span class="javascript">&#125;);</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;border&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;addClass()&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn01&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;removeClass()&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn02&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;toggleClass()&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn03&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;offset()&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn04&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2><span id="13-jquery-动画">13. jQuery 动画</span></h2><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">基本动画<br><span class="hljs-function"><span class="hljs-title">show</span><span class="hljs-params">()</span></span> 将隐藏的元素显示<br><span class="hljs-function"><span class="hljs-title">hide</span><span class="hljs-params">()</span></span> 将可见的元素隐藏。<br><span class="hljs-function"><span class="hljs-title">toggle</span><span class="hljs-params">()</span></span> 可见就隐藏，不可见就显示。<br><br>以上动画方法都可以添加参数。<br>    <span class="hljs-number">1</span>、第一个参数是动画 执行的时长，以毫秒为单位<br>    <span class="hljs-number">2</span>、第二个参数是动画的回调函数 (动画完成后自动调用的函数)<br><br>淡入淡出动画<br><span class="hljs-function"><span class="hljs-title">fadeIn</span><span class="hljs-params">()</span></span> 淡入（慢慢可见）<br><span class="hljs-function"><span class="hljs-title">fadeOut</span><span class="hljs-params">()</span></span> 淡出（慢慢消失）<br><span class="hljs-function"><span class="hljs-title">fadeTo</span><span class="hljs-params">()</span></span> 在指定时长内慢慢的将透明度修改到指定的值。<span class="hljs-number">0</span> 透明，<span class="hljs-number">1</span> 完成可见，<span class="hljs-number">0.5</span> 半透明<br><span class="hljs-function"><span class="hljs-title">fadeToggle</span><span class="hljs-params">()</span></span> 淡入/淡出 切换<br></code></pre></div></td></tr></table></figure><p>演示</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Untitled Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style.css&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="javascript">基本</span></span><br><span class="hljs-comment"><span class="javascript">show([speed,[easing],[fn]]) </span></span><br><span class="hljs-comment"><span class="javascript">hide([speed,[easing],[fn]]) </span></span><br><span class="hljs-comment"><span class="javascript">toggle([speed],[easing],[fn]) </span></span><br><span class="hljs-comment"><span class="javascript">滑动</span></span><br><span class="hljs-comment"><span class="javascript">slideDown([spe],[eas],[fn]) </span></span><br><span class="hljs-comment"><span class="javascript">slideUp([speed,[easing],[fn]]) </span></span><br><span class="hljs-comment"><span class="javascript">slideToggle([speed],[easing],[fn]) </span></span><br><span class="hljs-comment"><span class="javascript">淡入淡出</span></span><br><span class="hljs-comment"><span class="javascript">fadeIn([speed],[eas],[fn]) </span></span><br><span class="hljs-comment"><span class="javascript">fadeOut([speed],[eas],[fn]) </span></span><br><span class="hljs-comment"><span class="javascript">fadeTo([[spe],opa,[eas],[fn]]) </span></span><br><span class="hljs-comment"><span class="javascript">fadeToggle([speed,[eas],[fn]])</span></span><br><span class="hljs-comment"><span class="javascript">*/</span></span><br><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//显示   show()</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn1&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;#div1&quot;</span>).show(<span class="hljs-number">1000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;show已完成&quot;</span>);</span><br><span class="javascript">                &#125;);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//隐藏  hide()</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn2&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                $(<span class="hljs-string">&quot;#div1&quot;</span>).hide(<span class="hljs-number">1000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hide已完成&quot;</span>);</span><br><span class="javascript">                &#125;);</span><br><span class="javascript">            &#125;);</span><br><span class="javascript"><span class="hljs-comment">//切换   toggle()</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn3&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                $(<span class="hljs-string">&quot;#div1&quot;</span>).toggle(<span class="hljs-number">1000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;toggle已完成&quot;</span>);</span><br><span class="javascript">                &#125;);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//淡入   fadeIn()</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn4&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                $(<span class="hljs-string">&quot;#div1&quot;</span>).fadeIn(<span class="hljs-number">1000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;fadeIn已完成&quot;</span>);</span><br><span class="javascript">                &#125;);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//淡出  fadeOut()</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn5&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                $(<span class="hljs-string">&quot;#div1&quot;</span>).fadeOut(<span class="hljs-number">1000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;fadeOut已完成&quot;</span>);</span><br><span class="javascript">                &#125;);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//淡化到  fadeTo()</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn6&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                $(<span class="hljs-string">&quot;#div1&quot;</span>).fadeTo(<span class="hljs-number">1000</span>, <span class="hljs-built_in">Math</span>.random(), <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;fadeOut已完成&quot;</span>);</span><br><span class="javascript">                &#125;);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"><span class="hljs-comment">//淡化切换  fadeToggle()</span></span><br><span class="javascript">$(<span class="hljs-string">&quot;#btn7&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                $(<span class="hljs-string">&quot;#div1&quot;</span>).fadeToggle(<span class="hljs-number">1000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;fadeToggle已完成&quot;</span>);</span><br><span class="javascript">                &#125;);</span><br><span class="javascript">&#125;);</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float: left;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span>显示show()<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span>&gt;</span>隐藏hide()<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn3&quot;</span>&gt;</span>显示/隐藏切换 toggle()<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn4&quot;</span>&gt;</span>淡入fadeIn()<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn5&quot;</span>&gt;</span>淡出fadeOut()<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn6&quot;</span>&gt;</span>淡化到fadeTo()<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn7&quot;</span>&gt;</span>淡化切换fadeToggle()<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;float:left;border: 1px solid;background-color: blue;width: 300px;height: 200px;&quot;</span>&gt;</span><br>jquery动画定义了很多种动画效果，可以很方便的使用这些动画效果<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h2><span id="14-jquery-练习3">14. jQuery 练习3</span></h2><p>需求：<br>1.点击按钮的时候，隐藏和显示卡西欧之后的品牌。<br>2.当显示全部内容的时候，按钮文本为“显示精简品牌”<br>然后，小三角形向上。所有品牌产品为默认颜色。</p><p>3.当只显示精简品牌的时候，要隐藏卡西欧之后的品牌，按钮文本为“显示全部品牌”<br>然后小三形向下。并且把 佳能，尼康的品牌颜色改为红色（给 li 标签添加 promoted 样式即可）</p><p>//代码效果做了改动</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>品牌展示练习<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">* &#123;</span><br><span class="css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="css"><span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">a</span> &#123;</span><br><span class="css"><span class="hljs-attribute">color</span>: <span class="hljs-number">#04D</span>;</span><br><span class="css"><span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="css"><span class="hljs-attribute">color</span>: <span class="hljs-number">#F50</span>;</span><br><span class="css"><span class="hljs-attribute">text-decoration</span>: underline;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.SubCategoryBox</span> &#123;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="css"><span class="hljs-attribute">text-align</span>: center;</span><br><span class="css"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">40px</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.SubCategoryBox</span> <span class="hljs-selector-tag">ul</span> &#123;</span><br><span class="css"><span class="hljs-attribute">list-style</span>: none;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.SubCategoryBox</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="css"><span class="hljs-attribute">display</span>: block;</span><br><span class="css"><span class="hljs-attribute">float</span>: left;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css"><span class="hljs-attribute">line-height</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.showmore</span> , <span class="hljs-selector-class">.showless</span>&#123;</span><br><span class="css"><span class="hljs-attribute">clear</span>: both;</span><br><span class="css"><span class="hljs-attribute">text-align</span>: center;</span><br><span class="css"><span class="hljs-attribute">padding-top</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.showmore</span> <span class="hljs-selector-tag">a</span> , <span class="hljs-selector-class">.showless</span> <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="css"><span class="hljs-attribute">display</span>: block;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">120px</span>;</span><br><span class="css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="css"><span class="hljs-attribute">line-height</span>: <span class="hljs-number">24px</span>;</span><br><span class="css"><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#AAA</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.showmore</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="css"><span class="hljs-attribute">padding-left</span>: <span class="hljs-number">15px</span>;</span><br><span class="css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">img/down.gif</span>) no-repeat <span class="hljs-number">0</span> <span class="hljs-number">0</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.showless</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="css"><span class="hljs-attribute">padding-left</span>: <span class="hljs-number">15px</span>;</span><br><span class="css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">img/up.gif</span>) no-repeat <span class="hljs-number">0</span> <span class="hljs-number">0</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.promoted</span> <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="css"><span class="hljs-attribute">color</span>: <span class="hljs-number">#F50</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">//初始化精简状态</span></span><br><span class="javascript">        <span class="hljs-comment">//隐藏索引&gt;5的元素</span></span><br><span class="javascript">        $(<span class="hljs-string">&quot;.SubCategoryBox li:gt(5):not(:last)&quot;</span>).hide();</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">//绑定a标签点击事件</span></span><br><span class="javascript">        $(<span class="hljs-string">&quot;a&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">if</span>($(<span class="hljs-string">&quot;a&gt;span&quot;</span>).text() == <span class="hljs-string">&quot;显示全部品牌&quot;</span>) &#123;    <span class="hljs-comment">//全部显示模式</span></span><br><span class="javascript">                <span class="hljs-comment">//显示索引&gt;5的元素</span></span><br><span class="javascript">                $(<span class="hljs-string">&quot;.SubCategoryBox li:gt(5):not(:last)&quot;</span>).show();</span><br><span class="javascript">                <span class="hljs-comment">//文字改变</span></span><br><span class="javascript">                $(<span class="hljs-string">&quot;a&gt;span&quot;</span>).text(<span class="hljs-string">&quot;显示精简品牌&quot;</span>);</span><br><span class="javascript">                $(<span class="hljs-string">&quot;div&gt;div&quot;</span>).removeClass().addClass(<span class="hljs-string">&quot;showless&quot;</span>);</span><br><span class="javascript">                <span class="hljs-comment">//推广佳能、卡西欧、明基</span></span><br><span class="javascript">                $(<span class="hljs-string">&quot;li:contains(&#x27;佳能&#x27;),li:contains(&#x27;卡西欧&#x27;),li:contains(&#x27;明基&#x27;)&quot;</span>).addClass(<span class="hljs-string">&quot;promoted&quot;</span>);</span><br><span class="javascript">            &#125;<span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//精简显示模式</span></span><br><span class="javascript">                <span class="hljs-comment">//隐藏索引&gt;5的元素</span></span><br><span class="javascript">                $(<span class="hljs-string">&quot;.SubCategoryBox li:gt(5):not(:last)&quot;</span>).hide();</span><br><span class="javascript">                <span class="hljs-comment">//文字改变</span></span><br><span class="javascript">                $(<span class="hljs-string">&quot;a&gt;span&quot;</span>).text(<span class="hljs-string">&quot;显示全部品牌&quot;</span>);</span><br><span class="javascript">                $(<span class="hljs-string">&quot;div&gt;div&quot;</span>).removeClass().addClass(<span class="hljs-string">&quot;showmore&quot;</span>);</span><br><span class="javascript">                <span class="hljs-comment">//取消推广</span></span><br><span class="javascript">                $(<span class="hljs-string">&quot;li&quot;</span>).removeClass();</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;SubCategoryBox&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>佳能<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(30440) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>索尼<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(27220) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>三星<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(20808) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>尼康<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(17821) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>松下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(12289) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>卡西欧<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(8242) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>富士<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(14894) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>柯达<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(9520) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>宾得<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(2195) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>理光<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(4114) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>奥林巴斯<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(12205) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>明基<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(1466) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>爱国者<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(3091) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>其它品牌相机<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>(7275) <span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;showmore&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;more.html&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>显示全部品牌<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h2><span id="15-jquery-事件操作">15. jQuery 事件操作</span></h2><p>$( function(){} );<br>和<br>window.onload = function(){}<br>的区别？</p><p>他们分别是在什么时候触发？<br>1、jQuery 的页面加载完成之后是浏览器的内核解析完页面的标签创建好 DOM 对象之后就会马上执行。<br>2、原生 js 的页面加载完成之后，除了要等浏览器内核解析完标签创建好 DOM 对象，还要等标签显示时需要的内容加载<br>完成。</p><p>他们触发的顺序？<br>1、jQuery 页面加载完成之后先执行<br>2、原生 js 的页面加载完成之后</p><p>他们执行的次数？<br>1、原生 js 的页面加载完成之后，只会执行最后一次的赋值函数。<br>2、jQuery 的页面加载完成之后是全部把注册的 function 函数，依次顺序全部执行。</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">jQuery 中其他的事件处理方法：<br><span class="hljs-function"><span class="hljs-title">click</span><span class="hljs-params">()</span></span>它可以绑定单击事件，以及触发单击事件<br><br><span class="hljs-function"><span class="hljs-title">mouseover</span><span class="hljs-params">()</span></span>鼠标移入事件<br><br><span class="hljs-function"><span class="hljs-title">mouseout</span><span class="hljs-params">()</span></span>鼠标移出事件<br><br><span class="hljs-function"><span class="hljs-title">bind</span><span class="hljs-params">()</span></span>可以给元素一次性绑定一个或多个事件。<br><br><span class="hljs-function"><span class="hljs-title">one</span><span class="hljs-params">()</span></span>使用上跟 bind 一样。但是 one 方法绑定的事件只会响应一次。<br><br><span class="hljs-function"><span class="hljs-title">unbind</span><span class="hljs-params">()</span></span>跟 bind 方法相反的操作，解除事件的绑定<br><br><span class="hljs-function"><span class="hljs-title">live</span><span class="hljs-params">()</span></span>也是用来绑定事件。它可以用来绑定选择器匹配的所有元素的事件。哪怕这个元素是后面动态创建出来的也有效<br></code></pre></div></td></tr></table></figure><p>事件的冒泡<br>什么是事件的冒泡？<br>事件的冒泡是指，父子元素同时监听同一个事件。当触发子元素的事件的时候，同一个事件也被传递到了父元素的事件里去<br>响应。</p><p>那么如何阻止事件冒泡呢？<br>在子元素事件函数体内，return false;可以阻止事件的冒泡传递。</p><p>javaScript 事件对象<br>事件对象，是封装有触发的事件信息的一个 javascript 对象。<br>我们重点关心的是怎么拿到这个 javascript 的事件对象。以及使用。</p><p>如何获取呢 javascript 事件对象呢？<br>在给元素绑定事件的时候，在事件的 function( event ) 参数列表中添加一个参数，这个参数名，我们习惯取名为 event。<br>这个 event 就是 javascript 传递参事件处理函数的事件对象。</p><p>比如：</p><p>//1.原生 javascript 获取 事件对象</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;areaDiv&quot;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(event);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>//2.jQuery 代码获取 事件对象</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    $(<span class="hljs-string">&quot;#areaDiv&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(event);<br>    &#125;);<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>//3.使用 bind 同时对多个事件绑定同一个函数。怎么获取当前操作是什么事件。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#areaDiv&quot;</span>).bind(<span class="hljs-string">&quot;mouseover mouseout&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (event.type == <span class="hljs-string">&quot;mouseover&quot;</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;鼠标移入&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.type == <span class="hljs-string">&quot;mouseout&quot;</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;鼠标移出&quot;</span>);<br>    &#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure><h2><span id="16-jquery-练习4">16. jQuery 练习4</span></h2><p>图片跟随</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-tag">body</span> &#123;</span><br><span class="css"><span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-id">#small</span> &#123;</span><br><span class="css"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">150px</span>;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-id">#showBig</span> &#123;</span><br><span class="css"><span class="hljs-attribute">position</span>: absolute;</span><br><span class="css"><span class="hljs-attribute">display</span>: none;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script/jquery-1.7.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">$(<span class="hljs-string">&quot;#small&quot;</span>).bind(<span class="hljs-string">&quot;mouseover mouseout mousemove&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;</span><br><span class="javascript">           <span class="hljs-keyword">if</span>(event.type == <span class="hljs-string">&quot;mouseover&quot;</span>) &#123;</span><br><span class="javascript">               $(<span class="hljs-string">&quot;#showBig&quot;</span>).show();</span><br><span class="javascript">           &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(event.type == <span class="hljs-string">&quot;mousemove&quot;</span>) &#123;</span><br><span class="javascript">               $(<span class="hljs-string">&quot;#showBig&quot;</span>).offset(&#123;</span><br><span class="javascript">                   <span class="hljs-attr">left</span>:event.pageX + <span class="hljs-number">10</span>,</span><br><span class="javascript">                   <span class="hljs-attr">top</span>:event.pageY+<span class="hljs-number">10</span></span><br><span class="javascript">               &#125;);</span><br><span class="javascript">           &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(event.type == <span class="hljs-string">&quot;mouseout&quot;</span>) &#123;</span><br><span class="javascript">               $(<span class="hljs-string">&quot;#showBig&quot;</span>).hide();</span><br><span class="javascript">           &#125;</span><br><span class="javascript">        &#125;);</span><br><span class="javascript">&#125;);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;small&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/small.jpg&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;showBig&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/big.jpg&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaWeb</tag>
      
      <tag>Jquery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb-02-JavaScript</title>
    <link href="/2021/07/20/JavaWeb-02-JavaScript/"/>
    <url>/2021/07/20/JavaWeb-02-JavaScript/</url>
    
    <content type="html"><![CDATA[<h1><span id="javascript">JavaScript</span></h1><!-- toc --><ul><li><a href="#1-javascript-%E4%BB%8B%E7%BB%8D">1. JavaScript 介绍</a></li><li><a href="#2-javascript-%E5%92%8C-html-%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BB%93%E5%90%88%E6%96%B9%E5%BC%8F">2. JavaScript 和 html 代码的结合方式</a><ul><li><a href="#%E7%AC%AC%E4%B8%80%E7%A7%8D%E6%96%B9%E5%BC%8F">第一种方式</a></li><li><a href="#%E7%AC%AC%E4%BA%8C%E7%A7%8D%E6%96%B9%E5%BC%8F">第二种方式</a></li></ul></li><li><a href="#4-%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97">4. 关系运算</a></li><li><a href="#5-%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97">5. 逻辑运算</a></li><li><a href="#6-%E6%95%B0%E5%AD%97star%E9%87%8D%E7%82%B9">6. 数字（:star:重点）</a></li><li><a href="#7-%E5%87%BD%E6%95%B0star%E9%87%8D%E7%82%B9">7. 函数（:star:重点）</a><ul><li><a href="#%E7%AC%AC%E4%B8%80%E7%A7%8D%E5%AE%9A%E4%B9%89%E6%96%B9%E5%BC%8F">第一种定义方式</a></li><li><a href="#%E7%AC%AC%E4%BA%8C%E7%A7%8D%E5%AE%9A%E4%B9%89%E6%96%B9%E5%BC%8F">第二种定义方式</a></li><li><a href="#arguments%E9%9A%90%E5%BD%A2%E5%8F%82%E6%95%B0%E5%8F%AA%E5%9C%A8function%E5%87%BD%E6%95%B0%E5%86%85">arguments隐形参数（只在function函数内）</a></li></ul></li><li><a href="#8-js%E4%B8%AD%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%B9%E8%B1%A1">8. JS中的自定义对象</a><ul><li><a href="#object-%E5%BD%A2%E5%BC%8F%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%B9%E8%B1%A1">Object 形式的自定义对象</a></li><li><a href="#%E8%8A%B1%E6%8B%AC%E5%8F%B7%E5%BD%A2%E5%BC%8F%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%B9%E8%B1%A1">{}花括号形式的自定义对象</a></li></ul></li><li><a href="#9-js%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6">9. JS中的事件</a></li><li><a href="#10-dom%E6%A8%A1%E5%9E%8B">10. DOM模型</a><ul><li><a href="#document%E5%AF%B9%E8%B1%A1">Document对象</a></li><li><a href="#document%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95">Document对象的方法</a></li><li><a href="#%E8%8A%82%E7%82%B9%E7%9A%84%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95">节点的常用属性和方法</a></li></ul></li></ul><!-- tocstop --><h2><span id="1-javascript-介绍">1. JavaScript 介绍</span></h2><p>Javascript 语言诞生主要是完成页面的数据验证。因此它运行在客户端，需要运行浏览器来解析执行 JavaScript 代码。</p><p>JS 是 Netscape 网景公司的产品，最早取名为 LiveScript;为了吸引更多 java 程序员。更名为 JavaScript。</p><p>JS 是弱类型，Java 是强类型。</p><p>特点：</p><ol><li><strong>交互性</strong>（它可以做的就是信息的动态交互）</li><li><strong>安全性</strong>（不允许直接访问本地硬盘）</li><li><strong>跨平台性</strong>（只要是可以解释 JS 的浏览器都可以执行，和平台无关）</li></ol><h2><span id="2-javascript-和-html-代码的结合方式">2. JavaScript 和 html 代码的结合方式</span></h2><h3><span id="第一种方式">第一种方式</span></h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>way1<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        alert(<span class="hljs-string">&quot;hello world&quot;</span>); <span class="hljs-comment">//警告框</span></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="第二种方式">第二种方式</span></h3><ol><li><p>JS文件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">alert(<span class="hljs-string">&quot;js hello world&quot;</span>);<br></code></pre></div></td></tr></table></figure></li><li><p>html文件</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">   <span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>way2<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;1.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">           alert(<span class="hljs-string">&quot;123&quot;</span>);</span><br><span class="javascript">       </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br><br><br>## 3.  变量<br><br>|变量类型|表示|<br>|--|--|<br>|数值类型|number|<br>|字符串类型|string|<br>|对象类型|object|<br>|布尔类型|boolean|<br>|函数类型|function|<br><br>JavaScript 里特殊的值<br>|值|描述|<br>|--|--|<br>|undefined|未定义，所有 js 变量未赋于初始值的时候，默认值都是 undefined|<br>|null|空值|<br>|NaN|全称是：Not a Number。非数字。非数值。|<br><br>JS 中的定义变量格式：<br>```javascript<br>var 变量名;<br>var 变量名 = 值;<br></code></pre></div></td></tr></table></figure></li></ol><p>演示</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> i;</span><br><span class="javascript">    alert(<span class="hljs-keyword">typeof</span> i);    <span class="hljs-comment">//undefined 未定义</span></span><br><span class="javascript">    i = <span class="hljs-number">12</span>;</span><br><span class="javascript">    alert(<span class="hljs-keyword">typeof</span> i);    <span class="hljs-comment">//number 数值</span></span><br><span class="javascript">    i = <span class="hljs-string">&quot;abc&quot;</span>;</span><br><span class="javascript">    alert(<span class="hljs-keyword">typeof</span> i);    <span class="hljs-comment">//String 字符串</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> a = <span class="hljs-number">12</span>;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> b = <span class="hljs-string">&quot;abc&quot;</span>;</span><br><span class="javascript">    alert(a * b);   <span class="hljs-comment">//NaN 非数值</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2><span id="4-关系运算">4. 关系运算</span></h2><table><thead><tr><th>描述</th><th>符号</th><th>解释</th></tr></thead><tbody><tr><td>等于</td><td>==</td><td>等于是简单的做字面值的比较</td></tr><tr><td>全等于</td><td>===</td><td>除了做字面值的比较之外，还会比较两个变量的数据类型</td></tr></tbody></table><p>演示</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> a = <span class="hljs-string">&quot;12&quot;</span>;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> b = <span class="hljs-number">12</span>;</span><br><span class="javascript"></span><br><span class="javascript">    alert( a == b ); <span class="hljs-comment">// true</span></span><br><span class="javascript">    alert( a === b ); <span class="hljs-comment">// false</span></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2><span id="5-逻辑运算">5. 逻辑运算</span></h2><p>且运算：&amp;&amp;</p><p>或运算：||</p><p>取反运算：!</p><p>在 JavaScript 语言中，所有的变量，都可以做为一个 boolean 类型的变量去使用。<br><font color="red" size="5">0、null、undefined、””(空串)都认为是false；</font></p><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c"><span class="hljs-meta">&amp;&amp; 且运算。</span><br>有两种情况：<br>第一种：当表达式全为真的时候。返回最后一个表达式的值。<br>第二种：当表达式中，有一个为假的时候。返回第一个为假的表达式的值<br><br><span class="hljs-string">|| 或运算</span><br>第一种情况：当表达式全为假时，返回最后一个表达式的值<br>第二种情况：只要有一个表达式为真。就会把回第一个为真的表达式的值<br><br>并且 <span class="hljs-meta">&amp;&amp; 与运算 和 ||或运算 有短路。</span><br>短路就是说，当这个<span class="hljs-meta">&amp;&amp;或||运算有结果了之后。后面的表达式不再执行</span><br></code></pre></div></td></tr></table></figure><p><strong>实际上就是判断到能够出结果的项就跳出，返回该项的值</strong></p><p>演示</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (a) alert(<span class="hljs-string">&quot;a为真&quot;</span>);<br><span class="hljs-keyword">else</span> alert(<span class="hljs-string">&quot;a为假&quot;</span>);<br><span class="hljs-comment">//a为false</span><br><br><span class="hljs-keyword">var</span> b = <span class="hljs-literal">null</span>;<span class="hljs-comment">//b为false</span><br><br><span class="hljs-keyword">var</span> c = <span class="hljs-literal">undefined</span>;<span class="hljs-comment">//c为false</span><br><br><span class="hljs-keyword">var</span> d = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//d为false</span><br><br><span class="hljs-comment">//&amp;&amp;运算</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-keyword">var</span> b = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">var</span> c = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">var</span> d = <span class="hljs-literal">false</span>;<br><span class="hljs-comment">//返回值</span><br>alert( a &amp;&amp; b );<span class="hljs-comment">//true</span><br>alert( b &amp;&amp; a );<span class="hljs-comment">//abc</span><br>alert( a &amp;&amp; d );<span class="hljs-comment">//false</span><br>alert( a &amp;&amp; c );<span class="hljs-comment">//null</span><br><br><span class="hljs-comment">//||运算</span><br>alert( d || c ); <span class="hljs-comment">// null</span><br>alert( c || d ); <span class="hljs-comment">//false</span><br>alert( a || c ); <span class="hljs-comment">//abc</span><br>alert( b || c ); <span class="hljs-comment">//true</span><br></code></pre></div></td></tr></table></figure><h2><span id="6-数字star重点">6. 数字（:star:重点）</span></h2><p>JS 中 数组的定义：<br>    格式：<br>    var 数组名 = []; // 空数组<br>    var 数组名 = [1 , ’abc’ , true]; // 定义数组同时赋值元素</p><p>演示</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-literal">true</span>, <span class="hljs-number">1</span>];<br>alert(arr.length);<span class="hljs-comment">//2</span><br><br>arr[<span class="hljs-number">5</span>] = <span class="hljs-number">12</span>;<br>alert( arr[<span class="hljs-number">5</span>] );<span class="hljs-comment">//12</span><br>alert( arr.length ); <span class="hljs-comment">//6 = 5 + 1</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) alert(arr[i]);<br></code></pre></div></td></tr></table></figure><p><font color="red" size="5">javaScript 语言中的数组，只要我们通过数组下标赋值，那么最大的下标值，就会自动的给数组做扩容操作。</font></p><h2><span id="7-函数star重点">7. 函数（:star:重点）</span></h2><h3><span id="第一种定义方式">第一种定义方式</span></h3><p>可以使用 function 关键字来定义函数</p><p>使用的格式如下:</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> 函数名(<span class="hljs-params">形参列表</span>)</span>&#123;<br>函数体<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在 JavaScript 语言中，如何定义带有返回值的函数？<br>只需要在函数体内直接使用 return 语句返回值即可！</p><p>演示</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//无参函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params"></span>) </span>&#123;<br>    alert(<span class="hljs-string">&quot;无参函数&quot;</span>);<br>&#125;<br>fun();<br><br><span class="hljs-comment">//有参函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun2</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> c = a + b;<br>    alert(<span class="hljs-string">&quot;有参函数被调用了，值为&quot;</span> + c);<br>&#125;<br>fun2(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);   <span class="hljs-comment">//5</span><br>fun2(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;abc&quot;</span>);   <span class="hljs-comment">//2abc</span><br><br><span class="hljs-comment">//有返回值的函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun3</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> c = a + b;<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br>alert(fun3(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>));<br></code></pre></div></td></tr></table></figure><h3><span id="第二种定义方式">第二种定义方式</span></h3><p>使用格式如下：</p><figure class="highlight actionscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> 函数名 = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(形参列表)</span> </span>&#123;<br>函数体<br>&#125;<br></code></pre></div></td></tr></table></figure><p>演示</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fun = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>alert(<span class="hljs-string">&quot;无参函数&quot;</span>);<br>&#125;<br>fun();<br><br><span class="hljs-keyword">var</span> fun2 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a,b</span>) </span>&#123;<br>alert(<span class="hljs-string">&quot;有参函数 a=&quot;</span> + a + <span class="hljs-string">&quot;,b=&quot;</span> + b);<br>&#125;<br>fun2(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><br><span class="hljs-keyword">var</span> fun3 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">num1,num2</span>) </span>&#123;<br><span class="hljs-keyword">return</span> num1 + num2;<br>&#125;<br>alert( fun3(<span class="hljs-number">100</span>,<span class="hljs-number">200</span>) );<br></code></pre></div></td></tr></table></figure><p><font color="red" size="4">注：在 Java 中函数允许重载。但是在 JS 中函数的重载会直接覆盖掉上一次的定义</font></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params"></span>) </span>&#123;<br>alert(<span class="hljs-string">&quot;无参函数 fun()&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params">a,b</span>) </span>&#123;<br>alert(<span class="hljs-string">&quot;有参函数 fun(a,b)&quot;</span>);<br>&#125;<br><br>fun();<span class="hljs-comment">//有参函数...</span><br></code></pre></div></td></tr></table></figure><h3><span id="arguments隐形参数只在function函数内">arguments隐形参数（只在function函数内）</span></h3><p>就是在 function 函数中不需要定义，但却可以直接用来获取所有参数的变量。我们管它叫隐形参数。<br>隐形参数特别像 java 基础的可变长参数一样。<br>public void fun( Object … args );<br>可变长参数其他是一个数组。</p><p>那么 js 中的隐形参数也跟 java 的可变长参数一样。操作类似数组。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">num1, num2</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> result = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">arguments</span>.length; i++) &#123;<br>        result += <span class="hljs-built_in">arguments</span>[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br>alert( sum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>) );<br></code></pre></div></td></tr></table></figure><h2><span id="8-js中的自定义对象">8. JS中的自定义对象</span></h2><h3><span id="object-形式的自定义对象">Object 形式的自定义对象</span></h3><p>对象的定义：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> 变量名 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>(); <span class="hljs-comment">// 对象实例（空对象）</span><br>变量名.属性名 = 值; <span class="hljs-comment">// 定义一个属性</span><br>变量名.函数名 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125; <span class="hljs-comment">// 定义一个函数</span><br></code></pre></div></td></tr></table></figure><p>对象的访问：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">变量名.属性 / 函数名();<br></code></pre></div></td></tr></table></figure><p>演示</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>obj.name = <span class="hljs-string">&quot;华仔&quot;</span>;<br>obj.age = <span class="hljs-number">18</span>;<br>obj.fun = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    alert(<span class="hljs-string">&quot;姓名：&quot;</span> + <span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot;，年龄：&quot;</span> + <span class="hljs-built_in">this</span>.age);<br>&#125;<br>obj.fun();<br></code></pre></div></td></tr></table></figure><h3><span id="花括号形式的自定义对象">{}花括号形式的自定义对象</span></h3><p>对象的定义：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> 变量名 = &#123;<br>    属性名：值,<br>    属性名：值,<br>    函数名：<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>对象的访问：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">变量名.属性/函数名();<br></code></pre></div></td></tr></table></figure><p>演示</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;国哥&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<br>    <span class="hljs-attr">fun</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        alert(<span class="hljs-string">&quot;姓名：&quot;</span> + <span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot;，年龄&quot;</span> + <span class="hljs-built_in">this</span>.age);<br>    &#125;<br>&#125;<br>alert(obj.name);<br>obj.fun();<br></code></pre></div></td></tr></table></figure><h2><span id="9-js中的事件">9. JS中的事件</span></h2><p>什么是事件？事件是电脑输入设备与页面进行交互的响应。我们称之为事件。</p><p>常用的事件：</p><table><thead><tr><th>事件名</th><th>作用</th></tr></thead><tbody><tr><td>onload 加载完成事件</td><td>页面加载完成之后，常用于做页面 js 代码初始化操作</td></tr><tr><td>onclick 单击事件</td><td>常用于按钮的点击响应操作。</td></tr><tr><td>onblur 失去焦点事件</td><td>常用用于输入框失去焦点后验证其输入内容是否合法。</td></tr><tr><td>onchange 内容发生改变事件</td><td>常用于下拉列表和输入框内容发生改变后操作</td></tr><tr><td>onsubmit 表单提交事件</td><td>常用于表单提交前，验证所有表单项是否合法。</td></tr></tbody></table><p><strong>事件的注册又分为静态注册和动态注册两种</strong></p><p>什么是事件的注册（绑定）？<br>其实就是告诉浏览器，当事件响应后要执行哪些操作代码，叫事件注册或事件绑定。</p><p><strong>静态注册事件</strong>：通过 html 标签的事件属性直接赋于事件响应后的代码，这种方式我们叫静态注册。</p><p><strong>动态注册事件</strong>：是指先通过 js 代码得到标签的 dom 对象，然后再通过 dom 对象.事件名= function(){}这种形式赋于事件响应后的代码，叫动态注册。</p><p>动态注册基本步骤：<br>1、获取标签对象<br>2、标签对象.事件名= fucntion(){}</p><p>onload静态</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>事件<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onloadFun</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            alert(<span class="hljs-string">&quot;静态注册onload事件，所有代码&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;onloadFun()&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>onload动态</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>事件<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            alert(<span class="hljs-string">&quot;动态注册的onload事件&quot;</span>)</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>onclick静态</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>事件<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onclickFun</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            alert(<span class="hljs-string">&quot;点击了&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;onclickFun()&quot;</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>onclick动态</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>事件<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> obj = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn01&quot;</span>)</span><br><span class="javascript">            obj.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                alert(<span class="hljs-string">&quot;动态注册的onclick事件&quot;</span>);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn01&quot;</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>onblur 失去焦点</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 静态注册失去焦点事件</span></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onblurFun</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">// console 是控制台对象，是由 JavaScript 语言提供，专门用来向浏览器的控制器打印输出， 用于测试使用</span></span><br><span class="javascript">        <span class="hljs-comment">// log() 是打印的方法</span></span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;静态注册失去焦点事件&quot;</span>);</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 动态注册 onblur 事件</span></span><br><span class="javascript">    <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">//1 获取标签对象</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> passwordObj = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;password&quot;</span>);</span><br><span class="javascript">        <span class="hljs-comment">// alert(passwordObj);</span></span><br><span class="javascript">        <span class="hljs-comment">//2 通过标签对象.事件名 = function()&#123;&#125;;</span></span><br><span class="javascript">        passwordObj.onblur = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;动态注册失去焦点事件&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    用户名:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">onblur</span>=<span class="hljs-string">&quot;onblurFun();&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    密码:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>onchange 内容发生改变事件</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onchangeFun</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    alert(<span class="hljs-string">&quot;女神已经改变了&quot;</span>);</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-comment">//1 获取标签对象</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> selObj = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;sel01&quot;</span>);</span><br><span class="javascript">        <span class="hljs-comment">// alert( selObj );</span></span><br><span class="javascript">        <span class="hljs-comment">//2 通过标签对象.事件名 = function()&#123;&#125;</span></span><br><span class="javascript">        selObj.onchange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        alert(<span class="hljs-string">&quot;男神已经改变了&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    请选择你心中的女神：<br>    <span class="hljs-comment">&lt;!--静态注册 onchange 事件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">onchange</span>=<span class="hljs-string">&quot;onchangeFun();&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>--女神--<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>芳芳<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>佳佳<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>娘娘<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    请选择你心中的男神：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sel01&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>--男神--<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>国哥<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>华仔<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>富城<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>onsubmit 表单提交事件</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> &gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 静态注册表单提交事务</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onsubmitFun</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">// 要验证所有表单项是否合法，如果，有一个不合法就阻止表单提交</span></span><br><span class="javascript">alert(<span class="hljs-string">&quot;静态注册表单提交事件----发现不合法&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">return</span> flase;</span><br><span class="javascript"></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//1 获取标签对象</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> formObj = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;form01&quot;</span>);</span><br><span class="javascript"><span class="hljs-comment">//2 通过标签对象.事件名 = function()&#123;&#125;</span></span><br><span class="javascript">formObj.onsubmit = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-comment">// 要验证所有表单项是否合法，如果，有一个不合法就阻止表单提交</span></span><br><span class="javascript">alert(<span class="hljs-string">&quot;动态注册表单提交事件----发现不合法&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="javascript"></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--return false 可以阻止 表单提交 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:8080&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">onsubmit</span>=<span class="hljs-string">&quot;return onsubmitFun();&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;静态注册&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:8080&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;form01&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;动态注册&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2><span id="10-dom模型">10. DOM模型</span></h2><p>DOM 全称是 Document Object Model 文档对象模型</p><p>大白话，就是把文档中的标签，属性，文本，转换成为对象来管理。</p><h3><span id="document对象">Document对象</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210720111820.png" alt="image-20210720111813338"></p><p>Document 对象的理解：<br>第一点：Document 它管理了所有的 HTML 文档内容。<br>第二点：document 它是一种树结构的文档。有层级关系。<br>第三点：它让我们把所有的标签 都 对象化<br>第四点：我们可以通过 document 访问所有的标签对象。</p><p>什么是对象化？？<br>我们基础班已经学过面向对象。请问什么是对象化？<br>举例：<br>有一个人有年龄：18 岁，性别：女，名字：张某某<br>我们要把这个人的信息对象化怎么办！</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Class Person &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>那么html标签要对象化怎么办？</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div01&quot;</span>&gt;</span>div01<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>模拟对象化，相当于：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dom</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String id; <span class="hljs-comment">// id 属性</span><br>    <span class="hljs-keyword">private</span> String tagName; <span class="hljs-comment">//表示标签名</span><br>    <span class="hljs-keyword">private</span> Dom parentNode; <span class="hljs-comment">//父亲</span><br>    <span class="hljs-keyword">private</span> List&lt;Dom&gt; children; <span class="hljs-comment">// 孩子结点</span><br>    <span class="hljs-keyword">private</span> String innerHTML; <span class="hljs-comment">// 起始标签和结束标签中间的内容</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3><span id="document对象的方法">Document对象的方法</span></h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.getElementById(elementId)<br>通过标签的 id 属性查找标签 dom 对象，elementId 是标签的 id 属性值<br><br><span class="hljs-built_in">document</span>.getElementsByName(elementName)<br>通过标签的 name 属性查找标签 dom 对象，elementName 标签的 name 属性值<br><br><span class="hljs-built_in">document</span>.getElementsByTagName(tagname)<br>通过标签名查找标签 dom 对象。tagname 是标签名<br><br><span class="hljs-built_in">document</span>.createElement( tagName)<br>方法，通过给定的标签名，创建一个标签对象。tagName 是要创建的标签名<br></code></pre></div></td></tr></table></figure><p>注：<br>document 对象的三个查询方法，如果有 id 属性，优先使用 getElementById 方法来进行查询<br>如果没有 id 属性，则优先使用 getElementsByName 方法来进行查询<br>如果 id 属性和 name 属性都没有最后再按标签名查 getElementsByTagName<br>以上三个方法，一定要在页面加载完成之后执行，才能查询到标签对象。</p><p><strong>演示getElementById</strong></p><p>需求：当用户点击了较验按钮，要获取输出框中的内容。然后验证其是否合法。<br>            验证的规则是：必须由字母，数字，下划线组成。并且长度是 5 到 12 位</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>getElementById<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="javascript">        * 需求：当用户点击了较验按钮，要获取输出框中的内容。然后验证其是否合法。</span></span><br><span class="hljs-comment"><span class="javascript">        * 验证的规则是：必须由字母，数字，下划线组成。并且长度是 5 到 12 位</span></span><br><span class="hljs-comment"><span class="javascript">        * */</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> btCheck,userName;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> patt = <span class="hljs-regexp">/^\w&#123;5,12&#125;$/</span>;    <span class="hljs-comment">//正则表达式</span></span><br><span class="javascript">        <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">//获取标签对象</span></span><br><span class="javascript">            btCheck = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;bt_check&quot;</span>);</span><br><span class="javascript">            userName = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;user_name&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ck_check</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">//正则表达式</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> str = userName.value;   <span class="hljs-comment">//获取输入框的内容</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> flag = patt.test(str);  <span class="hljs-comment">//正则匹配</span></span><br><span class="javascript">            <span class="hljs-keyword">if</span>(flag) alert(<span class="hljs-string">&quot;合法&quot;</span>);   <span class="hljs-comment">//处理结果</span></span><br><span class="javascript">            <span class="hljs-keyword">else</span> alert(<span class="hljs-string">&quot;非法&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user_name&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;ck_check();&quot;</span>&gt;</span>校验<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>使用文字（用innerText也可以）</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>getElementById<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="javascript">        * 需求：当用户点击了较验按钮，要获取输出框中的内容。然后验证其是否合法。</span></span><br><span class="hljs-comment"><span class="javascript">        * 验证的规则是：必须由字母，数字，下划线组成。并且长度是 5 到 12 位</span></span><br><span class="hljs-comment"><span class="javascript">        * */</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> btCheck,userName,resText;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> patt = <span class="hljs-regexp">/^\w&#123;5,12&#125;$/</span>;    <span class="hljs-comment">//正则表达式</span></span><br><span class="javascript">        <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">//获取标签的对象</span></span><br><span class="javascript">            btCheck = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;bt_check&quot;</span>);</span><br><span class="javascript">            userName = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;user_name&quot;</span>);</span><br><span class="javascript">            resText = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;res_text&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ck_check</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">//正则表达式</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> str = userName.value;   <span class="hljs-comment">//获取输入框的内容</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> flag = patt.test(str);  <span class="hljs-comment">//正则匹配</span></span><br><span class="javascript">            <span class="hljs-keyword">if</span>(flag) resText.innerHTML = <span class="hljs-string">&quot;输入内容合法&quot;</span>;</span><br><span class="javascript">            <span class="hljs-keyword">else</span> resText.innerHTML = <span class="hljs-string">&quot;输入内容非法&quot;</span>;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user_name&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;ck_check();&quot;</span>&gt;</span>校验<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;res_text&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p>使用图像</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>getElementById<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="javascript">        * 需求：当用户点击了较验按钮，要获取输出框中的内容。然后验证其是否合法。</span></span><br><span class="hljs-comment"><span class="javascript">        * 验证的规则是：必须由字母，数字，下划线组成。并且长度是 5 到 12 位</span></span><br><span class="hljs-comment"><span class="javascript">        * */</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> btCheck,userName,resText;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> patt = <span class="hljs-regexp">/^\w&#123;5,12&#125;$/</span>;    <span class="hljs-comment">//正则表达式</span></span><br><span class="javascript">        <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">//获取标签的对象</span></span><br><span class="javascript">            btCheck = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;bt_check&quot;</span>);</span><br><span class="javascript">            userName = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;user_name&quot;</span>);</span><br><span class="javascript">            resText = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;res_text&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ck_check</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">//正则表达式</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> str = userName.value;   <span class="hljs-comment">//获取输入框的内容</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> flag = patt.test(str);  <span class="hljs-comment">//正则匹配</span></span><br><span class="javascript">            <span class="hljs-keyword">if</span>(flag) resText.innerHTML = <span class="hljs-string">&quot;&lt;img src=\&quot;right.png\&quot; width=\&quot;18\&quot; height=\&quot;18\&quot;/&gt;&quot;</span>;</span><br><span class="javascript">            <span class="hljs-keyword">else</span> resText.innerHTML = <span class="hljs-string">&quot;&lt;img src=\&quot;wrong.png\&quot; width=\&quot;18\&quot; height=\&quot;18\&quot;/&gt;&quot;</span>;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user_name&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;ck_check();&quot;</span>&gt;</span>校验<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;res_text&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red;&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p><strong>演示getElementsByName</strong></p><p>三个复选框，三个按钮，完成全选，全不选，反选三个功能</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>多选框全选全不选反选<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> cbHobby;    <span class="hljs-comment">//得到的是一个集合</span></span><br><span class="javascript">        <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            cbHobby = <span class="hljs-built_in">document</span>.getElementsByName(<span class="hljs-string">&quot;cb_hobby&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ckAll</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; cbHobby.length; i++) &#123;</span><br><span class="javascript">                cbHobby[i].checked = <span class="hljs-literal">true</span>;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ckNone</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; cbHobby.length; i++) &#123;</span><br><span class="javascript">                cbHobby[i].checked = <span class="hljs-literal">false</span>;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ckReverse</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; cbHobby.length; i++) &#123;</span><br><span class="javascript">                cbHobby[i].checked = !cbHobby[i].checked;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cb_hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cpp&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>/&gt;</span>C++<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cb_hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java&quot;</span>/&gt;</span>Java<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cb_hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;js&quot;</span>/&gt;</span>JavaScript<br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;ckAll();&quot;</span>&gt;</span>全选<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;ckNone();&quot;</span>&gt;</span>全不选<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;ckReverse();&quot;</span>&gt;</span>反选<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>演示getElementsByTagName</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>多选框全选全不选反选<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> cbHobby;    <span class="hljs-comment">//得到的是一个集合</span></span><br><span class="javascript">        <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            cbHobby = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;input&quot;</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ckAll</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; cbHobby.length; i++) &#123;</span><br><span class="javascript">                cbHobby[i].checked = <span class="hljs-literal">true</span>;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cpp&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>/&gt;</span>C++<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;java&quot;</span>/&gt;</span>Java<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;js&quot;</span>/&gt;</span>JavaScript<br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;ckAll();&quot;</span>&gt;</span>全选<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>演示createElement</strong></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Create<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> divObj = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;div&quot;</span>);<span class="hljs-comment">// 在内存中 &lt;div&gt;&lt;/div&gt;</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> textObj = <span class="hljs-built_in">document</span>.createTextNode(<span class="hljs-string">&quot;你好&quot;</span>);<span class="hljs-comment">// 有一个文本节点对象 #hello world</span></span><br><span class="javascript">            divObj.appendChild(textObj); <span class="hljs-comment">// &lt;div&gt;你好&lt;/div&gt;</span></span><br><span class="javascript">            <span class="hljs-built_in">document</span>.body.appendChild(divObj);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="节点的常用属性和方法">节点的常用属性和方法</span></h3><p>通过具体的元素节点调用<br>getElementsByTagName()<br>方法，获取当前节点的指定标签名孩子节点</p><p>appendChild( oChildNode )<br>方法，可以添加一个子节点，oChildNode 是要添加的孩子节点</p><p>属性：</p><p>childNodes<br>属性，获取当前节点的所有子节点<br>firstChild<br>属性，获取当前节点的第一个子节点<br>lastChild<br>属性，获取当前节点的最后一个子节点<br>parentNode<br>属性，获取当前节点的父节点<br>nextSibling<br>属性，获取当前节点的下一个节点<br>previousSibling<br>属性，获取当前节点的上一个节点<br>className<br>用于获取或设置标签的 class 属性值<br>innerHTML<br>属性，表示获取/设置起始标签和结束标签中的内容<br>innerText<br>属性，表示获取/设置起始标签和结束标签中的文本</p><p>演示</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//1.查找#bj 节点</span><br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn01&quot;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> bjObj = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;bj&quot;</span>);<br>    alert(bjObj.innerHTML);<br>&#125;<br><br><span class="hljs-comment">//2.查找所有 li 节点</span><br><span class="hljs-keyword">var</span> btn02Ele = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn02&quot;</span>);<br>btn02Ele.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> lis = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;li&quot;</span>);<br>    alert(lis.length)<br>&#125;;<br><br><span class="hljs-comment">//3.查找 name=gender 的所有节点</span><br><span class="hljs-keyword">var</span> btn03Ele = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn03&quot;</span>);<br>btn03Ele.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> genders = <span class="hljs-built_in">document</span>.getElementsByName(<span class="hljs-string">&quot;gender&quot;</span>);<br>    alert(genders.length)<br>&#125;;<br><br><span class="hljs-comment">//4.查找#city 下所有 li 节点</span><br><span class="hljs-keyword">var</span> btn04Ele = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn04&quot;</span>);<br>btn04Ele.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//1 获取 id 为 city 的节点</span><br>    <span class="hljs-comment">//2 通过 city 节点.getElementsByTagName 按标签名查子节点</span><br>    <span class="hljs-keyword">var</span> lis = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;city&quot;</span>).getElementsByTagName(<span class="hljs-string">&quot;li&quot;</span>);<br>    alert(lis.length)<br>&#125;;<br><br><span class="hljs-comment">//5.返回#city 的所有子节点</span><br><span class="hljs-keyword">var</span> btn05Ele = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn05&quot;</span>);<br>btn05Ele.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//1 获取 id 为 city 的节点</span><br>    <span class="hljs-comment">//2 通过 city 获取所有子节点</span><br>    alert(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;city&quot;</span>).childNodes.length);<br>&#125;;<br><br><span class="hljs-comment">//6.返回#phone 的第一个子节点</span><br><span class="hljs-keyword">var</span> btn06Ele = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn06&quot;</span>);<br>btn06Ele.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-comment">// 查询 id 为 phone 的节点</span><br>alert( <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;phone&quot;</span>).firstChild.innerHTML );<br>&#125;;<br><br><span class="hljs-comment">//7.返回#bj 的父节点</span><br><span class="hljs-keyword">var</span> btn07Ele = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn07&quot;</span>);<br>btn07Ele.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//1 查询 id 为 bj 的节点</span><br>    <span class="hljs-keyword">var</span> bjObj = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;bj&quot;</span>);<br>    <span class="hljs-comment">//2 bj 节点获取父节点</span><br>    alert( bjObj.parentNode.innerHTML );<br>&#125;;<br><br><span class="hljs-comment">//8.返回#android 的前一个兄弟节点</span><br><span class="hljs-keyword">var</span> btn08Ele = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn08&quot;</span>);<br>btn08Ele.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// 获取 id 为 android 的节点</span><br>    <span class="hljs-comment">// 通过 android 节点获取前面兄弟节点</span><br>    alert( <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;android&quot;</span>).previousSibling.innerHTML );<br>&#125;;<br><br><span class="hljs-comment">//9.读取#username 的 value 属性值</span><br><span class="hljs-keyword">var</span> btn09Ele = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn09&quot;</span>);<br>btn09Ele.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    alert(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;username&quot;</span>).value);<br>&#125;;<br><br><span class="hljs-comment">//10.设置#username 的 value 属性值</span><br><span class="hljs-keyword">var</span> btn10Ele = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn10&quot;</span>);<br>btn10Ele.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;username&quot;</span>).value = <span class="hljs-string">&quot;国哥你真牛逼&quot;</span>;<br>&#125;;<br><br><span class="hljs-comment">//11.返回#bj 的文本值</span><br><span class="hljs-keyword">var</span> btn11Ele = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;btn11&quot;</span>);<br>btn11Ele.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    alert(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;city&quot;</span>).innerHTML);<br>    <span class="hljs-comment">// alert(document.getElementById(&quot;city&quot;).innerText);</span><br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaWeb</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb-01-html and css</title>
    <link href="/2021/07/20/JavaWeb-01-html%20and%20css/"/>
    <url>/2021/07/20/JavaWeb-01-html%20and%20css/</url>
    
    <content type="html"><![CDATA[<h1><span id="htmlampcss">html&amp;CSS</span></h1><!-- toc --><ul><li><a href="#1-bs%E8%BD%AF%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84">1. B/S软件的结构</a></li><li><a href="#2-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B">2. 前端开发流程</a></li><li><a href="#3-%E7%BD%91%E9%A1%B5%E7%BB%84%E6%88%90">3. 网页组成</a></li><li><a href="#4-html%E4%BB%8B%E7%BB%8D">4. HTML介绍</a></li><li><a href="#5-%E5%88%9B%E5%BB%BAhtml%E6%96%87%E4%BB%B6">5. 创建HTML文件</a></li><li><a href="#6-html%E6%96%87%E4%BB%B6%E7%9A%84%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83">6. HTML文件的书写规范</a></li><li><a href="#7-html%E6%A0%87%E7%AD%BE">7. HTML标签</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5">基本概念</a></li><li><a href="#%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF">常见错误</a></li></ul></li><li><a href="#8-%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE%E4%BB%8B%E7%BB%8D">8. 常用标签介绍</a><ul><li><a href="#81-font-%E5%AD%97%E4%BD%93%E6%A0%87%E7%AD%BE">8.1 font 字体标签</a></li><li><a href="#82-%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6">8.2 特殊字符</a></li><li><a href="#83-%E6%A0%87%E9%A2%98%E6%A0%87%E7%AD%BE">8.3 标题标签</a></li><li><a href="#84-%E8%B6%85%E9%93%BE%E6%8E%A5%E9%87%8D%E7%82%B9star">8.4 超链接（重点:star:）</a></li><li><a href="#85-%E5%88%97%E8%A1%A8%E6%A0%87%E7%AD%BE">8.5 列表标签</a></li><li><a href="#86-img%E6%A0%87%E7%AD%BE">8.6 img标签</a></li><li><a href="#87-%E8%A1%A8%E6%A0%BC%E6%A0%87%E7%AD%BE%E9%87%8D%E7%82%B9star">8.7 表格标签（重点:star:）</a></li><li><a href="#88-%E8%B7%A8%E8%A1%8C%E8%B7%A8%E5%88%97%E8%A1%A8%E6%A0%BC%E6%AC%A1%E9%87%8D%E7%82%B9star">8.8 跨行跨列表格（次重点:star:）</a></li><li><a href="#89-iframe%E6%A1%86%E6%9E%B6%E6%A0%87%E7%AD%BE%E5%86%85%E5%B5%8C%E7%AA%97%E5%8F%A3">8.9 iframe框架标签（内嵌窗口）</a></li><li><a href="#810-%E8%A1%A8%E5%8D%95%E9%87%8D%E7%82%B9star">8.10 表单（重点:star:）</a><ul><li><a href="#%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4%E7%9A%84%E7%BB%86%E8%8A%82">表单提交的细节</a></li></ul></li><li><a href="#811-%E5%85%B6%E4%BB%96%E6%A0%87%E7%AD%BE">8.11 其他标签</a></li><li><a href="#%E9%99%84%E5%BD%95-%E5%B8%B8%E8%A7%81%E6%A0%87%E7%AD%BE%E5%AF%B9%E5%BA%94%E8%8B%B1%E6%96%87">附录 常见标签对应英文</a></li></ul></li><li><a href="#9-css%E6%8A%80%E6%9C%AF">9. CSS技术</a><ul><li><a href="#91-%E4%BB%8B%E7%BB%8D">9.1 介绍</a></li><li><a href="#92-%E8%AF%AD%E6%B3%95">9.2 语法</a></li><li><a href="#93-css%E4%B8%8Ehtml%E7%9B%B8%E7%BB%93%E5%90%88%E7%9A%84%E6%96%B9%E5%BC%8F">9.3 CSS与HTML相结合的方式</a><ul><li><a href="#%E7%AC%AC%E4%B8%80%E7%A7%8D">第一种</a></li><li><a href="#%E7%AC%AC%E4%BA%8C%E7%A7%8D">第二种</a></li><li><a href="#%E7%AC%AC%E4%B8%89%E7%A7%8D">第三种</a></li></ul></li><li><a href="#94-css%E9%80%89%E6%8B%A9%E5%99%A8">9.4 CSS选择器</a><ul><li><a href="#941-%E6%A0%87%E7%AD%BE%E5%90%8D%E9%80%89%E6%8B%A9%E5%99%A8">9.4.1 标签名选择器</a></li><li><a href="#942-id%E9%80%89%E6%8B%A9%E5%99%A8">9.4.2 id选择器</a></li><li><a href="#943-class%E9%80%89%E6%8B%A9%E5%99%A8">9.4.3 class选择器</a></li><li><a href="#944-%E7%BB%84%E5%90%88%E9%80%89%E6%8B%A9%E5%99%A8">9.4.4 组合选择器</a></li></ul></li><li><a href="#95-%E5%B8%B8%E7%94%A8%E6%A0%B7%E5%BC%8F">9.5 常用样式</a></li></ul></li></ul><!-- tocstop --><h2><span id="1-bs软件的结构">1. B/S软件的结构</span></h2><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210716185738.png" alt="image-20210716185738553" style="zoom:50%;"><h2><span id="2-前端开发流程">2. 前端开发流程</span></h2><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210716185757.png" alt="image-20210716185757025" style="zoom:50%;"><h2><span id="3-网页组成">3. 网页组成</span></h2><p>页面由三部分内容组成！<br>分别是内容（结构）、表现、行为。</p><ul><li>内容（结构），是我们在页面中可以看到的数据。我们称之为内容。一般内容我们使用html 技术来展示。</li><li>表现，指的是这些内容在页面上的展示形式。比如说。布局，颜色，大小等等。一般使用CSS 技术实现</li><li>行为，指的是页面中元素与输入设备交互的响应。一般使用 javascript 技术实现。</li></ul><h2><span id="4-html介绍">4. HTML介绍</span></h2><p>Hyper Text Markup Language （超文本标记语言） 简写：HTML<br>HTML 通过标签来标记要显示的网页中的各个部分。网页文件本身是一种文本文件，通过在文本文件中添加标记符，可以告诉浏览器如何显示其中的内容（如：文字如何处理，画面如何安排，图片如何显示等）</p><h2><span id="5-创建html文件">5. 创建HTML文件</span></h2><ul><li><p>步骤</p><ol><li>创建一个web工程（静态的web工程）</li><li>在工程根目录下创建html页面</li></ol></li><li><p>样例程序</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!-- 约束,声明 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh_CN&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- html标签表示html的开始 lang=&quot;zh_CN表示中文 html标签中一般分为两部分，分别是：head和body&quot;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-comment">&lt;!-- 表示头部信息，一般包含三部分内容，title标签,css样式,js代码--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 表示当前页面使用的字符集 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-comment">&lt;!-- 表示标题 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span> <span class="hljs-comment">&lt;!-- body标签是整个html页面显示的主体 --&gt;</span><br>    hello<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ul><h2><span id="6-html文件的书写规范">6. HTML文件的书写规范</span></h2><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210716191442.png" alt="image-20210716191442729"></p><h2><span id="7-html标签">7. HTML标签</span></h2><h3><span id="基本概念">基本概念</span></h3><ol><li><p>标签的格式:<br> &lt;标签名&gt;封装的数据&lt;/标签名&gt;</p></li><li><p>标签名大小写不敏感。</p></li><li><p>标签拥有自己的属性。</p><ul><li>分为基本属性<code>bgcolor=&quot;red&quot;</code> 可以修改简单的样式效果</li><li>事件属性： <code>onclick=&quot;alert(&#39;你好！&#39;);&quot;</code> 可以直接设置事件响应后的代码。</li></ul></li><li><p>标签又分为，单标签和双标签。</p><ul><li>单标签格式： &lt;标签名 /&gt; br 换行 hr 水平线</li><li>双标签格式: &lt;标签名&gt; …封装的数据…&lt;/标签名&gt;</li></ul></li><li><p>双标签与单标签</p><ul><li>双标签：<code>&lt;p&gt;&lt;/p&gt;</code></li><li>单标签：<code>&lt;br/&gt;</code></li><li>属性：<code>&lt;img src = &quot;1.jpg&quot;&gt;</code></li></ul></li><li><p>例子</p> <figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-comment">&lt;!-- 约束,声明 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh_CN&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- html标签表示html的开始 lang=&quot;zh_CN表示中文 html标签中一般分为两部分，分别是：head和body&quot;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-comment">&lt;!-- 表示头部信息，一般包含三部分内容，title标签,css样式,js代码--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 表示当前页面使用的字符集 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-comment">&lt;!-- 表示标题 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">bgcolor</span>=<span class="hljs-string">&quot;green&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;你好&#x27;)&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!-- body标签是整个html页面显示的主体 --&gt;</span><br>    hello<br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;鹏哥好帅&#x27;)&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    鹏哥<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>好帅<br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span><br>    呀<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>    <br></code></pre></div></td></tr></table></figure><h3><span id="常见错误">常见错误</span></h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--1. 标签不能交叉嵌套--&gt;</span><br><br><span class="hljs-comment">&lt;!--2. 标签必须正确闭合--&gt;</span><br><br><span class="hljs-comment">&lt;!--3. 属性必须有值，属性值必须加引号--&gt;</span><br><br><span class="hljs-comment">&lt;!--4. 注释不能嵌套--&gt;</span><br></code></pre></div></td></tr></table></figure></li></ol><h2><span id="8-常用标签介绍">8. 常用标签介绍</span></h2><h3><span id="81-font-字体标签">8.1 font 字体标签</span></h3><p>需求 1：在网页上显示 我是字体标签 ，并修改字体为 宋体，颜色为红色，大小为7（注意最大就为7）。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--需求 1：在网页上显示 我是字体标签 ，并修改字体为 宋体，颜色为红色，大小为7。</span><br><span class="hljs-comment">    font 标签是字体标签,它可以用来修改文本的字体,颜色,大小(尺寸)</span><br><span class="hljs-comment">    color 属性修改颜色</span><br><span class="hljs-comment">    face 属性修改字体</span><br><span class="hljs-comment">    size 属性修改文本大小(1-7)</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">face</span>=<span class="hljs-string">&quot;宋体&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;7&quot;</span>&gt;</span>我是字体<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="82-特殊字符">8.2 特殊字符</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210717143508.png" alt="image-20210717143501377"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210717143517.png" alt="image-20210717143517380"></p><p>需求 1：把<code> &lt;br&gt;</code> 换行标签变成文本转换成字符显示在页面上，再尝试一下空格</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-symbol">&amp;lt;</span>br<span class="hljs-symbol">&amp;gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><br>    鹏哥帅啊<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="83-标题标签">8.3 标题标签</span></h3><p>需求 1：演示标题 1 到 标题 6 的</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 标题标签</span><br><span class="hljs-comment">    需求 1：演示标题 1 到 标题 6 的</span><br><span class="hljs-comment">    h1 - h6 都是标题标签</span><br><span class="hljs-comment">    h1 最大</span><br><span class="hljs-comment">    h6 最小</span><br><span class="hljs-comment">    align 属性是对齐属性</span><br><span class="hljs-comment">    left 左对齐(默认)</span><br><span class="hljs-comment">    center 剧中</span><br><span class="hljs-comment">    right 右对齐</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>标题1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>标题2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>标题3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>标题4<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>标题5<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>标题6<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h7</span>&gt;</span>标题7<span class="hljs-tag">&lt;/<span class="hljs-name">h7</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="84-超链接重点star">8.4 超链接（重点:star:）</span></h3><p>需求 1：普通的超连接。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_self&quot;</span>&gt;</span>百度自己<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>百度空白页面<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="85-列表标签">8.5 列表标签</span></h3><p>无序列表 、 有序列表</p><p>需求 1：使用无序，列表方式，把东北 F4，赵四，刘能，小沈阳，宋小宝，展示出来</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--需求 1：使用无序，列表方式，把东北 F4，赵四，刘能，小沈阳，宋小宝，展示出来</span><br><span class="hljs-comment">    ul 是无序列表</span><br><span class="hljs-comment">    type 属性可以修改列表项前面的符号</span><br><span class="hljs-comment">    li 是列表项</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;none&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>赵四<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>刘能<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>小沈阳<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>宋小宝<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="86-img标签">8.6 img标签</span></h3><p>img 标签可以在 html 页面上显示图片。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--需求 1：使用 img 标签显示一张美女的照片。并修改宽高，和边框属性</span><br><span class="hljs-comment">    img 标签是图片标签,用来显示图片</span><br><span class="hljs-comment">    src 属性可以设置图片的路径</span><br><span class="hljs-comment">    width 属性设置图片的宽度</span><br><span class="hljs-comment">    height 属性设置图片的高度</span><br><span class="hljs-comment">    border 属性设置图片边框大小</span><br><span class="hljs-comment">    alt 属性设置当指定路径找不到图片时,用来代替显示的文本内容</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    相对路径:</span><br><span class="hljs-comment">    . 表示当前文件所在的目录</span><br><span class="hljs-comment">    .. 表示当前文件所在的上一级目录</span><br><span class="hljs-comment">    文件名 表示当前文件所在目录的文件,相当于 ./文件名 ./ 可以省略</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    绝对路径:是: http://ip:port/工程名/资源路径</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../src/1.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;260&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;美女找不到&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../src/2.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;260&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;美女找不到&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../src/3.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;260&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;美女找不到&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../src/4.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;260&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;美女找不到&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../src/5.jpg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;260&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;美女找不到&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="87-表格标签重点star">8.7 表格标签（重点:star:）</span></h3><p>需求 1：做一个 带表头的 ，三行，三列的表格，并显示边框<br>需求 2：修改表格的宽度，高度，表格的对齐方式，单元格间距。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    需求 1：做一个 带表头的 ，三行，三列的表格，并显示边框</span><br><span class="hljs-comment">    需求 2：修改表格的宽度，高度，表格的对齐方式，单元格间距。</span><br><span class="hljs-comment">    table 标签是表格标签</span><br><span class="hljs-comment">    border 设置表格标签</span><br><span class="hljs-comment">    width 设置表格宽度</span><br><span class="hljs-comment">    height 设置表格高度</span><br><span class="hljs-comment">    align 设置表格相对于页面的对齐方式</span><br><span class="hljs-comment">    cellspacing 设置单元格间距</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    tr 是行标签</span><br><span class="hljs-comment">    th 是表头标签</span><br><span class="hljs-comment">    td 是单元格标签</span><br><span class="hljs-comment">    align 设置单元格文本对齐方式</span><br><span class="hljs-comment">    b 是加粗标签</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;300&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>1.1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>1.3<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="88-跨行跨列表格次重点star">8.8 跨行跨列表格（次重点:star:）</span></h3><p>需求 1：新建一个五行，五列的表格，第一行，第一列的单元格要跨两列，第二行第一列的单元格跨两行，第四行第四<br>列的单元格跨两行两列。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 需求 1：</span><br><span class="hljs-comment">    新建一个五行，五列的表格</span><br><span class="hljs-comment">    第一行，第一列的单元格要跨两列</span><br><span class="hljs-comment">    第二行第一列的单元格跨两行</span><br><span class="hljs-comment">    第四行第四列的单元格跨两行两列</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    colspan 属性设置跨列</span><br><span class="hljs-comment">    rowspan 属性设置跨行</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;300&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>1.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1.4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1.5<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>3.5<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>4.4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5.3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="89-iframe框架标签内嵌窗口">8.9 iframe框架标签（内嵌窗口）</span></h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--ifarme 标签可以在页面上开辟一个小区域显示一个单独的页面</span><br><span class="hljs-comment">    ifarme 和 a 标签组合使用的步骤:</span><br><span class="hljs-comment">    1 在 iframe 标签中使用 name 属性定义一个名称</span><br><span class="hljs-comment">    2 在 a 标签的 target 属性上设置 iframe 的 name 的属性值</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;3.标题标签.html&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;400&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&lt;ahref=&quot;0-标签语法.html&quot; target=&quot;abc&quot;&gt;0-标签语法.html<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&lt;ahref=&quot;1.font 标签.html&quot; target=&quot;abc&quot;&gt;1.font 标签.html<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&lt;ahref=&quot;2.特殊字符.html&quot; target=&quot;abc&quot;&gt;2.特殊字符.html<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="810-表单重点star">8.10 表单（重点:star:）</span></h3><p>什么是表单?<br>表单就是 html 页面中,用来收集用户信息的所有元素集合.然后把这些信息发送给服务器.</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210717153215.png" alt="image-20210717153215896"></p><p>需求 1:创建一个个人信息注册的表单界面。包含用户名，密码，确认密码。性别（单选），兴趣爱好（多选），国籍（下<br>拉列表）。<br>隐藏域，自我评价（多行文本域）。重置，提交。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    用户名称：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;admin&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>    用户密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;admin&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>    确认密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;admin&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>    性别：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>/&gt;</span>男<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span>/&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>    兴趣爱好：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>/&gt;</span>Java<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>/&gt;</span>JavaScript<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>/&gt;</span>C++<span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>    国籍：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-请选择国籍-<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span>中国<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>美国<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>日本<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>英国<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>其他<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>    自我评价：<span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span>牛逼<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;重置&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上传文件&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;按钮&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>美化一下，把表单放在表格里显示</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>用户注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>用户名称：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;admin&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>用户密码：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;admin&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>确认密码：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;admin&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>性别：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>/&gt;</span>男<br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span>/&gt;</span>女<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>兴趣爱好：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>/&gt;</span>Java<br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>/&gt;</span>JavaScript<br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>/&gt;</span>C++<span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>国籍：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>-请选择国籍-<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span>中国<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>美国<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>日本<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>英国<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>其他<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>自我评价：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span>牛逼<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;重置&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>效果：</p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210717164003.png" alt="image-20210717164003400" style="zoom: 80%;"><h4><span id="表单提交的细节">表单提交的细节</span></h4><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">form 标签是表单标签<br>action 属性设置提交的服务器地址<br>method 属性设置提交的方式 GET(默认值)或 POST<br><br>表单提交的时候，数据没有发送给服务器的三种情况：<br><span class="hljs-bullet">1.</span> 表单项没有 name 属性值<br><span class="hljs-bullet">2.</span> 单选、复选（下拉列表中的 option 标签）都需要添加 value 属性，以便发送给服务器<br><span class="hljs-bullet">3.</span> 表单项不在提交的 form 标签中<br><br>GET 请求的特点是：<br><span class="hljs-bullet">1.</span> 浏览器地址栏中的地址是：action 属性[+?+请求参数]<br>请求参数的格式是：name=value&amp;name=value<br><span class="hljs-bullet">2.</span> 不安全<br><span class="hljs-bullet">3.</span> 它有数据长度的限制<br><br>POST 请求的特点是：<br><span class="hljs-bullet">1.</span> 浏览器地址栏中只有 action 属性值<br><span class="hljs-bullet">2.</span> 相对于 GET 请求要安全<br><span class="hljs-bullet">3.</span> 理论上没有数据长度的限制<br></code></pre></div></td></tr></table></figure><p>需求：把需要提交的内容都添加上name，再添加一个隐藏的输入，然后使用get方式提交，查看相关提交信息。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:8080&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hidden_action&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;login&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>用户注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>用户名称：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user_name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;admin&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>用户密码：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;admin&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>确认密码：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;verify_pswd&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;admin&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>性别：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;boy&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>/&gt;</span>男<br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;girl&quot;</span>/&gt;</span>女<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>兴趣爱好：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Java&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;checked&quot;</span>/&gt;</span>Java<br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;JavaScript&quot;</span>/&gt;</span>JavaScript<br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Cpp&quot;</span>/&gt;</span>C++<span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>国籍：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;country&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;none&quot;</span>&gt;</span>-请选择国籍-<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cn&quot;</span> <span class="hljs-attr">selected</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span>中国<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;usa&quot;</span>&gt;</span>美国<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jp&quot;</span>&gt;</span>日本<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;uk&quot;</span>&gt;</span>英国<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;other&quot;</span>&gt;</span>其他<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>自我评价：<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;desc&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span>牛逼<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;重置&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>查看</p><figure class="highlight http"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs http">http://localhost:8080/?<br>hidden_action=login&amp;<br>user_name=admin&amp;<br>password=123456&amp;<br>verify_pswd=123456&amp;<br>sex=girl&amp;<br>hobby=Java&amp;hobby=JavaScript<br>&amp;country=cn&amp;<br>desc=%E7%89%9B%E9%80%BC<br></code></pre></div></td></tr></table></figure><h3><span id="811-其他标签">8.11 其他标签</span></h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--需求 1：div、span、p 标签的演示</span><br><span class="hljs-comment">    div 标签 默认独占一行</span><br><span class="hljs-comment">    span 标签 它的长度是封装数据的长度</span><br><span class="hljs-comment">    p 段落标签 默认会在段落的上方或下方各空出一行来（如果已有就不再空）</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div 标签 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div 标签 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span 标签 1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span 标签 2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p 段落标签 1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p 段落标签 2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>div是块级元素，它不论大小默认占一行，而且可以设置宽高以及外边距<br>span是行内元素，它占它自身大小的位置，而且不能设置宽高以及边距</p><h3><span id="附录-常见标签对应英文">附录 常见标签对应英文</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">标签对应英文         说明<br>&lt;!DOCTYPE&gt;document type文档类型<br>&lt;a&gt;        anchor        超链接<br>&lt;b&gt;        bold        加粗<br>&lt;br&gt;        break        换行<br>&lt;div&gt;        division部分<br>&lt;em&gt;        emphasize强调<br>&lt;h1-h6&gt;        headline标题<br>&lt;hr&gt;        Horizontal Rule水平线<br>&lt;i&gt;        italic斜体<br>&lt;iframe&gt;inline frame内联框架<br>&lt;img&gt;        image图片<br>&lt;ul&gt;        Unordered List无序列表<br>&lt;li&gt;        List Item列表项<br>&lt;ol&gt;        Ordered List有序列表<br>&lt;dl&gt;        Definition List定义列表<br>&lt;dt&gt;        Definition Term定义条目<br>&lt;dd&gt;        Definition Description定义描述<br>&lt;nav&gt;        navigation导航<br>&lt;p&gt;        paragraph段落<br>&lt;tbody&gt;        table body表格主体<br>&lt;td&gt;        table data表格数据单元格<br>&lt;th&gt;        table headline表格标题<br>&lt;thead&gt;        table head表格头标签<br>&lt;tr&gt;        table row表格行<br></code></pre></div></td></tr></table></figure><h2><span id="9-css技术">9. CSS技术</span></h2><h3><span id="91-介绍">9.1 介绍</span></h3><p>CSS 是「层叠样式表单」。是用于(增强)控制网页样式并允许将样式信息与网页内容分离的一种标记性语言。</p><h3><span id="92-语法">9.2 语法</span></h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<br>    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">80px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>选择器</strong>：浏览器根据“选择器”决定受 CSS 样式影响的 HTML 元素（标签）。<br><strong>属性 (property)</strong> ：是你要改变的样式名，并且每个属性都有一个值。属性和值被冒号分开，并<br>由花括号包围，这样就组成了一个完整的样式声明（declaration），例如：p {color: blue}<br><strong>多个声明</strong>：如果要定义不止一个声明，则需要用分号将每个声明分开。虽然最后一条声明的<br>最后可以不加分号(但尽量在每条声明的末尾都加上分号)</p><hr><p><strong>例子</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<br>    <span class="hljs-attribute">color</span>:res;<br>    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">30px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>注：一般每行只描述一个属性</p><p>CSS 注释：<code>/* 注释内容 */</code></p><h3><span id="93-css与html相结合的方式">9.3 CSS与HTML相结合的方式</span></h3><h4><span id="第一种">第一种</span></h4><p>在标签的 style 属性上设置”key:value value;”，修改标签样式。</p><p>需求 1：分别定义两个div、span 标签，分别修改每个标签的样式为：边框 1 个像素，实线，红色。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div 标签 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div 标签 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span 标签 1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span 标签 2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border: 1px solid red;&quot;</span>&gt;</span>div标签1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border: 1px solid red;&quot;</span>&gt;</span>div标签2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border: 1px solid red&quot;</span>&gt;</span>span标签1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border: 1px solid red&quot;</span>&gt;</span>span标签2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>问题：这种方式的缺点？</p><ol><li>如果标签多了。样式多了。代码量非常庞大。</li><li>可读性非常差。</li><li>Css 代码没什么复用性可方言。</li></ol><h4><span id="第二种">第二种</span></h4><p>在 head 标签中，使用 style 标签来定义各种自己需要的 css 样式。<br>格式如下：<br>xxx {<br>Key : value value;<br>}</p><p>需求 1：分别定义两个div、span 标签，分别修改每个标签的样式为：边框 1 个像素，实线，红色。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div 标签 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div 标签 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span 标签 1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span 标签 2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>代码</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>css方式2<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">span</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div标签1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div标签2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span标签1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span标签2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="第三种">第三种</span></h4><p>把 css 样式写成一个单独的 css 文件，再通过 link 标签引入即可复用。<br>使用 html的<code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./styles.css&quot;/&gt;</code>标签导入css样式文件。</p><ol><li>css文件</li></ol><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>&#125;<br><span class="hljs-selector-tag">span</span>&#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><ol start="2"><li>html文件</li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./styles.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div标签1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div标签2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span标签1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span标签2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h3><span id="94-css选择器">9.4 CSS选择器</span></h3><h4><span id="941-标签名选择器">9.4.1 标签名选择器</span></h4><p>标签名选择器的格式是：<br>标签名{<br>属性：值;</p><p>}</p><p>标签名选择器，可以决定哪些标签被动的使用这个样式。</p><p>需求 1：在所有 div 标签上修改字体颜色为蓝色，字体大小 30 个像素。边框为 1 像素黄色实线。<br>并且修改所有 span 标签的字体颜色为黄色，字体大小 20 个像素。边框为 5 像素蓝色虚线。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div 标签 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div 标签 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span 标签 1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span 标签 2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>代码</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>标签名选择器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    在所有 div 标签上修改字体颜色为蓝色，字体大小 30 个像素。边框为 1 像素黄色实线。</span><br><span class="hljs-comment">    并且修改所有 span 标签的字体颜色为黄色，字体大小 20 个像素。边框为 5 像素蓝色虚线。</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">color</span>: blue;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid yellow;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-tag">span</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">color</span>: yellow;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">5px</span> dashed blue;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div 标签 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div 标签 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span 标签 1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span 标签 2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="942-id选择器">9.4.2 id选择器</span></h4><p>id 选择器的格式是：<br>#id 属性值{<br>属性：值;</p><p>}</p><p>id 选择器，可以让我们通过 id 属性选择性的去使用这个样式。</p><p>需求 1：分别定义两个 div 标签，第一个 div 标签定义 id 为 id001 ，然后根据 id属性定义 css 样式修改字体颜色为蓝色，字体大小 30 个像素。边框为 1 像素黄色实线。</p><p>第二个 div 标签定义 id 为id002，然后根据 id属性定义 css 样式修改的字体颜色为红色，字体大小 20 个像素。边框为 5 像素蓝色点线。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id001&quot;</span>&gt;</span>div 标签 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id002&quot;</span>&gt;</span>div 标签 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>代码</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">      <span class="hljs-selector-id">#id001</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">color</span>: blue;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> yellow solid;</span><br><span class="css">      &#125;</span><br><span class="css">      <span class="hljs-selector-id">#id002</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">color</span>: red;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">5px</span> blue dotted;</span><br><span class="css">      &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id001&quot;</span>&gt;</span>div 标签 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id002&quot;</span>&gt;</span>div 标签 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="943-class选择器">9.4.3 class选择器</span></h4><p>class 类型选择器的格式是：<br>.class 属性值{<br>属性：值;</p><p>}</p><p>class 类型选择器，可以通过 class 属性有效的选择性地去使用这个样式。</p><p>需求 1：修改class属性值为class01 的span 或 div 标签，字体颜色为蓝色，字体大小 30 个像素。边框为 1 像素黄色实线。</p><p>需求 2：修改class属性值为class02 的div 标签，字体颜色为灰色，字体大小 26 个像素。边框为 1 像素红色实线。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;class01&quot;</span>&gt;</span>div 标签 class01<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;class02&quot;</span>&gt;</span>div 标签<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;class01&quot;</span>&gt;</span>span 标签 class01<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span 标签 2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>代码</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.class01</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">color</span>: blue;</span><br><span class="css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> yellow solid;</span><br><span class="css">        &#125;</span><br><span class="css">        <span class="hljs-selector-class">.class02</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">color</span>: grey;</span><br><span class="css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">26px</span>;</span><br><span class="css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> red solid;</span><br><span class="css">       &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;class01&quot;</span>&gt;</span>div 标签 class01<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;class02&quot;</span>&gt;</span>div 标签<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;class01&quot;</span>&gt;</span>span 标签 class01<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span 标签 2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4><span id="944-组合选择器">9.4.4 组合选择器</span></h4><p>组合选择器的格式是：<br>选择器 1，选择器 2，选择器 n{<br>属性：值;</p><p>}</p><p>组合选择器可以让多个选择器共用同一个 css 样式代码。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;class01&quot;</span>&gt;</span>div 标签 class01<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id01&quot;</span>&gt;</span>span 标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div 标签<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div 标签 id01<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br></code></pre></div></td></tr></table></figure><p>需求 1：修改 class=”class01”的div标签和id=”id01”所有的 span 标签，字体颜色为蓝色，字体大小 20 个像素。边框为 1 像素黄色实线。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>class 类型选择器<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css">    <span class="hljs-selector-class">.class01</span> , <span class="hljs-selector-id">#id01</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">color</span>: blue;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> yellow solid;</span><br><span class="css">    &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">需求 1：修改 class=&quot;class01&quot; 的 div 标签 和 id=&quot;id01&quot; 所有的 span 标签，</span><br><span class="hljs-comment">字体颜色为蓝色，字体大小 20 个像素。边框为 1 像素黄色实线。</span><br><span class="hljs-comment">--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id01&quot;</span>&gt;</span>div 标签 class01<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> &gt;</span>span 标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div 标签<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div 标签 id01<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3><span id="95-常用样式">9.5 常用样式</span></h3><ol><li><p><strong>字体颜色</strong><br>color：red；<br>颜色可以写颜色名如：black, blue, red, green 等<br>颜色也可以写 rgb 值和十六进制表示值：如 rgb(255,0,0)，#00F6DE，如果写十六进制值必<br>须加#</p></li><li><p><strong>宽度</strong><br>width:19px;<br>宽度可以写像素值：19px；<br>也可以写百分比值：20%；</p></li><li><p><strong>高度</strong><br>height:20px;<br>高度可以写像素值：19px；<br>也可以写百分比值：20%；</p></li><li><p><strong>背景颜色</strong><br>background-color:#0F2D4C</p></li><li><p><strong>字体样式</strong><br>color：#FF0000；字体颜色红色<br>font-size：20px; 字体大小</p></li><li><p><strong>红色 1 像素实线边框</strong><br>border：1px solid red;</p></li><li><p><strong>DIV 居中</strong><br>margin-left: auto;  左外边距<br>margin-right: auto;  右外边距</p></li><li><p><strong>文本居中</strong><br>text-align: center;</p></li><li><p><strong>超连接去下划线</strong><br>text-decoration: none;</p></li><li><p><strong>表格细线</strong></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">table</span> &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black; <span class="hljs-comment">/*设置边框*/</span><br>    <span class="hljs-attribute">border-collapse</span>: collapse; <span class="hljs-comment">/*将边框合并*/</span><br>&#125;<br><br><span class="hljs-selector-tag">td</span>,<span class="hljs-selector-tag">th</span> &#123;<br><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black; <span class="hljs-comment">/*设置边框*/</span><br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>列表去除修饰</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span> &#123;<br>    <span class="hljs-attribute">list-style</span>: none;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol><p>测试代码</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>06-css 常用样式.html<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">color</span>: red;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> yellow solid;</span><br><span class="css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        <span class="hljs-attribute">background-color</span>: green;</span><br><span class="css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="css">        <span class="hljs-attribute">margin-left</span>: auto;</span><br><span class="css">        <span class="hljs-attribute">margin-right</span>: auto;</span><br><span class="css">        <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">    &#125;</span><br><span class="css">        </span><br><span class="css">    <span class="hljs-selector-tag">table</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> red solid;</span><br><span class="css">        <span class="hljs-attribute">border-collapse</span>: collapse;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-tag">td</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> red solid;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="css">    &#125;</span><br><span class="css"></span><br><span class="css">    <span class="hljs-selector-tag">ul</span>&#123;</span><br><span class="css">    <span class="hljs-attribute">list-style</span>: none;</span><br><span class="css">    &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>11111111111<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>11111111111<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>11111111111<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>11111111111<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>11111111111<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1.1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是 div 标签<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><span style="color:red">test</span></p>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaWeb</tag>
      
      <tag>HTML</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDBC-02-JDBC连接池和Template</title>
    <link href="/2021/07/12/JDBC-02-JDBC%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%92%8CTemplate/"/>
    <url>/2021/07/12/JDBC-02-JDBC%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%92%8CTemplate/</url>
    
    <content type="html"><![CDATA[<h1><span id="jdbc连接池和template">JDBC连接池和Template</span></h1><!-- toc --><ul><li><a href="#%E6%A6%82%E5%BF%B5">概念</a></li><li><a href="#c3p0">C3P0</a></li><li><a href="#druid">Druid</a></li><li><a href="#%E5%AE%9A%E4%B9%89%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%B9%B6%E6%B5%8B%E8%AF%95">定义工具类并测试</a></li><li><a href="#spring-jdbc">Spring JDBC</a><ul><li><a href="#%E6%A6%82%E5%BF%B5%E5%92%8C%E6%96%B9%E6%B3%95">概念和方法</a></li><li><a href="#%E7%BB%83%E4%B9%A0">练习</a></li></ul></li></ul><!-- tocstop --><h2><span id="概念">概念</span></h2><ol><li><p>概念：其实就是一个容器(集合)，存放数据库连接的容器。<br>当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。</p></li><li><p>好处：</p><ol start="2"><li>节约资源</li><li>用户访问高效</li></ol></li><li><p>实现：</p><ol><li><p>标准接口：DataSource   javax.sql包下的</p><ol><li><p>方法：</p><ul><li>获取连接：getConnection()</li><li>归还连接：Connection.close()。如果连接对象Connection是从连接池中获取的，那么调用Connection.close()方法，则不会再关闭连接了。而是归还连接</li></ul></li><li><p>一般我们不去实现它，有数据库厂商来实现</p></li></ol></li></ol></li><li><p>C3P0：数据库连接池技术</p></li><li><p>Druid：数据库连接池实现技术，由阿里巴巴提供的</p></li></ol><h2><span id="c3p0">C3P0</span></h2><ul><li><p>步骤：</p><ol><li><p>导入jar包 (两个) c3p0-0.9.5.2.jar | mchange-commons-java-0.2.12.jar ，</p><ul><li>不要忘记导入数据库驱动jar包</li></ul></li><li><p>定义配置文件：</p><ul><li>名称： c3p0.properties 或者 c3p0-config.xml</li><li>路径：直接将文件放在src目录下即可。</li></ul></li><li><p>创建核心对象 数据库连接池对象 ComboPooledDataSource</p></li><li><p>获取连接： getConnection</p></li></ol></li><li><p>代码</p><ol><li>创建数据库连接池对象 DataSource ds  = new ComboPooledDataSource();</li><li>获取连接对象 Connection conn = ds.getConnection();</li></ol></li><li><p>程序</p><ol><li><p>主程序</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.wangpeng.datasourse.c3p0;<br><br><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C3P0Demo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-comment">//1. 创建数据库连接池对象</span><br>        DataSource ds = <span class="hljs-keyword">new</span> ComboPooledDataSource();<br>        <span class="hljs-comment">//2. 获取连接对象</span><br>        Connection conn = ds.getConnection();<br>        <span class="hljs-comment">//3. 打印</span><br>        System.out.println(conn);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">default-config</span>&gt;</span><br><span class="hljs-comment">&lt;!--  连接参数 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/myjdbc2<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!-- 修改了数据库名 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>7783772<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!-- 修改了密码 --&gt;</span><br>  <br>  <span class="hljs-comment">&lt;!-- 连接池参数 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxPoolSize&quot;</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkoutTimeout&quot;</span>&gt;</span>3000<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">default-config</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ol></li><li><p>测试多个连接</p><ul><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>    DataSource ds = <span class="hljs-keyword">new</span> ComboPooledDataSource();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>        Connection conn = ds.getConnection();<br>        System.out.println(i + <span class="hljs-string">&quot;:&quot;</span> + conn);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul></li></ul><h2><span id="druid">Druid</span></h2><ul><li><p>步骤</p><ol><li>导入jar包 druid-1.0.9.jar</li><li>定义配置文件：<ul><li>是properties形式的</li><li>可以叫任意名称，可以放在任意目录下</li></ul><ol start="3"><li>加载配置文件。Properties</li><li>获取数据库连接池对象：通过工厂来来获取  DruidDataSourceFactory</li><li>获取连接：getConnection</li></ol></li></ol></li><li><p>代码</p><ol><li>加载配置文件<br> Properties pro = new Properties();<br> InputStream is = DruidDemo.class.getClassLoader().getResourceAsStream(“druid.properties”);<br> pro.load(is);</li><li>获取连接池对象<br> DataSource ds = DruidDataSourceFactory.createDataSource(pro);</li><li>获取连接<br> Connection conn = ds.getConnection();</li></ol></li><li><p>程序</p><ol><li><p>主程序</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.wangpeng.datasourse.druid;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DruidDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//加载配置文件</span><br>        Properties pro = <span class="hljs-keyword">new</span> Properties();<br>        pro.load(DruidDemo1.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;druid.properties&quot;</span>));<br>        <span class="hljs-comment">//获取连接池对象</span><br>        DataSource ds = DruidDataSourceFactory.createDataSource(pro);<br>        Connection conn = ds.getConnection();<br>        System.out.println(conn);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">driverClassName</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/myjdbc2</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">7783772</span><br><span class="hljs-attr">initialSize</span>=<span class="hljs-string">5</span><br><span class="hljs-attr">maxActive</span>=<span class="hljs-string">10</span><br><span class="hljs-attr">maxWait</span>=<span class="hljs-string">3000</span><br></code></pre></div></td></tr></table></figure></li></ol></li><li><p>测试查询数据库</p><ul><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.wangpeng.datasourse.druid;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DruidDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//加载配置文件</span><br>        Properties pro = <span class="hljs-keyword">new</span> Properties();<br>        pro.load(DruidDemo2.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;druid.properties&quot;</span>));<br>        <span class="hljs-comment">//获取连接池对象</span><br>        DataSource ds = DruidDataSourceFactory.createDataSource(pro);<br>        Connection conn = ds.getConnection();<br>        <span class="hljs-comment">//写sql</span><br>        String sql = <span class="hljs-string">&quot;Select * from account&quot;</span>;<br>        <span class="hljs-comment">//获取执行sql的对象</span><br>        PreparedStatement pstmt = conn.prepareStatement(sql);<br>        <span class="hljs-comment">//设置问号，这里不需要</span><br>        <span class="hljs-comment">//执行sql</span><br>        ResultSet rs = pstmt.executeQuery();<br>        <span class="hljs-keyword">while</span>(rs.next()) &#123;<br>            <span class="hljs-keyword">int</span> id = rs.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>            String sname = rs.getString(<span class="hljs-string">&quot;sname&quot;</span>);<br>            <span class="hljs-keyword">int</span> money = rs.getInt(<span class="hljs-string">&quot;money&quot;</span>);<br>            System.out.println(id + <span class="hljs-string">&quot;\t&quot;</span> + sname + <span class="hljs-string">&quot;\t&quot;</span> + money);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(rs != <span class="hljs-keyword">null</span>) rs.close();<br>        <span class="hljs-keyword">if</span>(pstmt != <span class="hljs-keyword">null</span>) pstmt.close();<br>        <span class="hljs-keyword">if</span>(conn != <span class="hljs-keyword">null</span>) conn.close();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li></ul></li></ul><h2><span id="定义工具类并测试">定义工具类并测试</span></h2><ol><li><p>步骤</p><ol><li>定义一个类 JDBCUtils</li><li>提供静态代码块加载配置文件，初始化连接池对象</li><li>提供方法<ol><li>获取连接方法：通过数据库连接池获取连接</li><li>释放资源</li><li>获取连接池的方法</li></ol></li></ol></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.wangpeng.Utils;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCUtils</span> </span>&#123;<br>    <span class="hljs-comment">//1. 定义成员变量DataSourse</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DataSource ds;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1. 加载配置文件</span><br>            Properties pro = <span class="hljs-keyword">new</span> Properties();<br>            pro.load(JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;druid.properties&quot;</span>));<br>            <span class="hljs-comment">//2. 获取DataSourse</span><br>            ds = DruidDataSourceFactory.createDataSource(pro);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取连接</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 连接的对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> SQLException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-keyword">return</span> ds.getConnection();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放资源</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> stmt</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> conn</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(Statement stmt, Connection conn)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(stmt != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                stmt.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(conn != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放资源</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> rs</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> stmt</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> conn</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(ResultSet rs, Statement stmt, Connection conn)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(rs != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                rs.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        close(stmt, conn);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取连接池方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 连接池对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DataSource <span class="hljs-title">getDataSourse</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> ds;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>测试主程序</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.wangpeng.datasourse.druid;<br><br><span class="hljs-keyword">import</span> cn.wangpeng.Utils.JDBCUtils;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用工具类完成添加操作</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DruidDemo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection conn = <span class="hljs-keyword">null</span>;<br>        PreparedStatement pstmt = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 获取连接</span><br>            conn = JDBCUtils.getConnection();<br>            <span class="hljs-comment">// 写sql</span><br>            String sql = <span class="hljs-string">&quot;insert into account value(null, ?, ?)&quot;</span>;<br>            <span class="hljs-comment">// 获取执行sql的对象</span><br>            pstmt = conn.prepareStatement(sql);<br>            <span class="hljs-comment">// 设置?</span><br>            pstmt.setString(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;张三丰&quot;</span>);<br>            pstmt.setInt(<span class="hljs-number">2</span>, <span class="hljs-number">2000</span>);<br>            <span class="hljs-comment">//执行sql</span><br>            <span class="hljs-keyword">int</span> count = pstmt.executeUpdate();<br>            System.out.println(count);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtils.close(pstmt, conn);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li></ol><h2><span id="spring-jdbc">Spring JDBC</span></h2><h3><span id="概念和方法">概念和方法</span></h3><ul><li><p>Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发</p></li><li><p>步骤</p><ol><li><p>导入jar包</p></li><li><p>创建JdbcTemplate对象。依赖于数据源DataSource</p><ul><li>JdbcTemplate template = new JdbcTemplate(ds);</li></ul></li><li><p>调用JdbcTemplate的方法来完成CRUD的操作</p><ul><li>update():执行DML语句。增、删、改语句</li><li>queryForMap():查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合<ul><li>注意：这个方法查询的结果集长度只能是1</li></ul></li><li>queryForList():查询结果将结果集封装为list集合<ul><li>注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中</li></ul></li><li>query():查询结果，将结果封装为JavaBean对象<ul><li>query的参数：RowMapper<ul><li>一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装</li><li>new BeanPropertyRowMapper&lt;类型&gt;(类型.class)</li></ul></li></ul></li><li>queryForObject：查询结果，将结果封装为对象<ul><li>一般用于聚合函数的查询</li></ul></li></ul></li></ol></li><li><p>测试</p><ul><li><p>主程序</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.wangpeng.datasourse.template;<br><br><span class="hljs-keyword">import</span> cn.wangpeng.Utils.JDBCUtils;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试Template</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCTemplateDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 导入jar包</span><br>        <span class="hljs-comment">//2. 创建JdbcTemplate的对象</span><br>        JdbcTemplate template = <span class="hljs-keyword">new</span> JdbcTemplate(JDBCUtils.getDataSourse());<br>        <span class="hljs-comment">//3. 写sql</span><br>        String sql = <span class="hljs-string">&quot;update student set sdept = ? where sid = ?&quot;</span>;<br>        <span class="hljs-comment">//4. 执行sql</span><br>        <span class="hljs-keyword">int</span> count = template.update(sql, <span class="hljs-string">&quot;中文&quot;</span>, <span class="hljs-number">3</span>);<br>        System.out.println(count);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li></ul></li></ul><h3><span id="练习">练习</span></h3><ul><li><p>需求</p><ol><li>修改1号数据的 salary 为 10000</li><li>添加一条记录</li><li>删除刚才添加的记录</li><li>查询id为1的记录，将其封装为Map集合</li><li>查询所有记录，将其封装为List</li><li>查询所有记录，将其封装为Emp对象的List集合</li><li>查询总记录数</li></ol></li><li><p>代码</p><ul><li>主函数  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.wangpeng.datasourse.template;<br><br><span class="hljs-keyword">import</span> cn.wangpeng.Utils.JDBCUtils;<br><span class="hljs-keyword">import</span> cn.wangpeng.domain.Student;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.RowMapper;<br><br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 练习</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCTemplateDemo2</span> </span>&#123;<br>    <span class="hljs-comment">//1. 修改1号数据的 salary 为 10000</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1. 获取Template对象</span><br>        JdbcTemplate template = <span class="hljs-keyword">new</span> JdbcTemplate(JDBCUtils.getDataSourse());<br>        <span class="hljs-comment">//2. 写sql</span><br>        String sql = <span class="hljs-string">&quot;update student set money = ? where sid = ?&quot;</span>;<br>        <span class="hljs-comment">//3. 执行sql</span><br>        <span class="hljs-keyword">int</span> count = template.update(sql, <span class="hljs-number">10000</span>, <span class="hljs-number">1</span>);<br>        System.out.println(count);<br>    &#125;<br><br>    <span class="hljs-comment">//2. 添加一条记录</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1. 获取Template对象</span><br>        JdbcTemplate template = <span class="hljs-keyword">new</span> JdbcTemplate(JDBCUtils.getDataSourse());<br>        <span class="hljs-comment">//2. 写sql</span><br>        String sql = <span class="hljs-string">&quot;insert into student value(null, ?, ?, ?, ?, ?)&quot;</span>;<br>        <span class="hljs-comment">//3. 执行sql</span><br>        <span class="hljs-keyword">int</span> count = template.update(sql, <span class="hljs-string">&quot;张无忌&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-string">&quot;体育&quot;</span>, <span class="hljs-string">&quot;2021-9-5&quot;</span>,<span class="hljs-number">500</span>);<br>        System.out.println(count);<br>    &#125;<br><br>    <span class="hljs-comment">//3. 删除刚才添加的记录</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1. 获取Template对象</span><br>        JdbcTemplate template = <span class="hljs-keyword">new</span> JdbcTemplate(JDBCUtils.getDataSourse());<br>        <span class="hljs-comment">//2. 写sql</span><br>        String sql = <span class="hljs-string">&quot;delete from student where sid = ?&quot;</span>;<br>        <span class="hljs-comment">//3. 执行sql</span><br>        <span class="hljs-keyword">int</span> count = template.update(sql, <span class="hljs-number">7</span>);<br>        System.out.println(count);<br>    &#125;<br><br>    <span class="hljs-comment">//4. 查询id为1的记录，将其封装为Map集合</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test4</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1. 获取Template对象</span><br>        JdbcTemplate template = <span class="hljs-keyword">new</span> JdbcTemplate(JDBCUtils.getDataSourse());<br>        <span class="hljs-comment">//2. 写sql</span><br>        String sql = <span class="hljs-string">&quot;select * from student where sid = ?&quot;</span>;<br>        <span class="hljs-comment">//3. 执行sql</span><br>        Map&lt;String, Object&gt; map = template.queryForMap(sql, <span class="hljs-number">1</span>);<br>        System.out.println(map);<br>    &#125;<br><br>    <span class="hljs-comment">//5. 查询所有记录，将其封装为List</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1. 获取Template对象</span><br>        JdbcTemplate template = <span class="hljs-keyword">new</span> JdbcTemplate(JDBCUtils.getDataSourse());<br>        <span class="hljs-comment">//2. 写sql</span><br>        String sql = <span class="hljs-string">&quot;select * from student&quot;</span>;<br>        <span class="hljs-comment">//3. 执行sql</span><br>        List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(sql);<br>        <span class="hljs-keyword">for</span> (Map&lt;String, Object&gt; cur : list) &#123;<br>            System.out.println(cur);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//6. 查询所有记录，将其封装为Emp对象的List集合</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test6</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1. 获取Template对象</span><br>        JdbcTemplate template = <span class="hljs-keyword">new</span> JdbcTemplate(JDBCUtils.getDataSourse());<br>        <span class="hljs-comment">//2. 写sql</span><br>        String sql = <span class="hljs-string">&quot;select * from student&quot;</span>;<br>        <span class="hljs-comment">//3. 执行sql</span><br>        List&lt;Student&gt; list = template.query(sql, <span class="hljs-keyword">new</span> RowMapper&lt;Student&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> Student <span class="hljs-title">mapRow</span><span class="hljs-params">(ResultSet rs, <span class="hljs-keyword">int</span> i)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>                Student stu = <span class="hljs-keyword">new</span> Student();<br>                <span class="hljs-keyword">int</span> sid = rs.getInt(<span class="hljs-string">&quot;sid&quot;</span>);<br>                String sname = rs.getString(<span class="hljs-string">&quot;sname&quot;</span>);<br>                String ssex = rs.getString(<span class="hljs-string">&quot;ssex&quot;</span>);<br>                String sdept = rs.getString(<span class="hljs-string">&quot;sdept&quot;</span>);<br>                Date sedate = rs.getDate(<span class="hljs-string">&quot;sedate&quot;</span>);<br>                <span class="hljs-keyword">int</span> money = rs.getInt(<span class="hljs-string">&quot;money&quot;</span>);<br>                stu.setSid(sid);<br>                stu.setSname(sname);<br>                stu.setSsex(ssex);<br>                stu.setSdept(sdept);<br>                stu.setSedate(sedate);<br>                stu.setMoney(money);<br>                <span class="hljs-keyword">return</span> stu;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">for</span> (Student cur : list) &#123;<br>            System.out.println(cur);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//6. 查询所有记录，将其封装为Emp对象的List集合</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test6_1</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1. 获取Template对象</span><br>        JdbcTemplate template = <span class="hljs-keyword">new</span> JdbcTemplate(JDBCUtils.getDataSourse());<br>        <span class="hljs-comment">//2. 写sql</span><br>        String sql = <span class="hljs-string">&quot;select * from student&quot;</span>;<br>        <span class="hljs-comment">//3. 执行sql</span><br>        List&lt;Student&gt; list = template.query(sql, <span class="hljs-keyword">new</span> BeanPropertyRowMapper&lt;Student&gt;(Student.class));<br>        <span class="hljs-keyword">for</span> (Student cur : list) &#123;<br>            System.out.println(cur);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//7. 查询总记录数</span><br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li>Student类<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.wangpeng.domain;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer sid;<br>    <span class="hljs-keyword">private</span> String sname;<br>    <span class="hljs-keyword">private</span> String ssex;<br>    <span class="hljs-keyword">private</span> String sdept;<br>    <span class="hljs-keyword">private</span> Date sedate;<br>    <span class="hljs-keyword">private</span> Integer money;<br>......<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>JDBC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
      <tag>JDBC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDBC-01-JDBC学习笔记</title>
    <link href="/2021/07/12/JDBC-01-JDBC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/07/12/JDBC-01-JDBC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1><span id="jdbc学习笔记">JDBC学习笔记</span></h1><!-- toc --><ul><li><a href="#%E4%B8%80-%E6%A6%82%E5%BF%B5">一、概念</a></li><li><a href="#%E4%BA%8C-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8">二、快速入门</a><ul><li><a href="#%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4">使用步骤</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#%E4%B8%89-%E8%AF%A6%E8%A7%A3%E5%90%84%E4%B8%AA%E5%AF%B9%E8%B1%A1">三、详解各个对象</a><ul><li><a href="#drivermanager%E9%A9%B1%E5%8A%A8%E7%AE%A1%E7%90%86%E5%AF%B9%E8%B1%A1">DriverManager：驱动管理对象</a><ul><li><a href="#%E5%8A%9F%E8%83%BD">功能</a></li></ul></li><li><a href="#connection%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E5%AF%B9%E8%B1%A1">Connection：数据库连接对象</a><ul><li><a href="#%E5%8A%9F%E8%83%BD-1">功能</a></li></ul></li><li><a href="#statement%E6%89%A7%E8%A1%8Csql%E7%9A%84%E5%AF%B9%E8%B1%A1">Statement：执行sql的对象</a><ul><li><a href="#%E5%8A%9F%E8%83%BD-2">功能</a></li><li><a href="#%E7%BB%83%E4%B9%A0">练习</a></li></ul></li><li><a href="#resultset%E7%BB%93%E6%9E%9C%E9%9B%86%E5%AF%B9%E8%B1%A1">ResultSet：结果集对象</a><ul><li><a href="#%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0">常用函数</a></li><li><a href="#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8">基本使用</a></li><li><a href="#%E5%AE%8C%E6%95%B4%E4%BD%BF%E7%94%A8">完整使用</a></li><li><a href="#%E5%B0%81%E8%A3%85%E6%88%90%E5%AF%B9%E8%B1%A1">封装成对象</a></li><li><a href="#%E5%81%9A%E6%88%90%E5%B7%A5%E5%85%B7%E7%B1%BB">做成工具类</a></li></ul></li><li><a href="#%E7%99%BB%E9%99%86demo">登陆Demo</a></li></ul></li><li><a href="#jdbc%E6%8E%A7%E5%88%B6%E4%BA%8B%E5%8A%A1">JDBC控制事务</a><ul><li><a href="#%E6%BC%94%E7%A4%BA">演示</a></li></ul></li></ul><!-- tocstop --><h2><span id="一-概念">一、概念</span></h2><ul><li><p>JDBC：Java Database Connectivity，Java 数据库连接，Java语言操作数据库</p></li><li><p>JDBC本质</p></li></ul><p>JDBC 定义了一套操作所有关系型数据库的规则（接口）</p><p>数据库厂商写了一套驱动，提供了数据库驱动jar包，我们可以使用JDBC来编程，驱动jar包中的实现类。</p><p><img src="https://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210712204922.png" alt="image-20210712204922486"></p><h2><span id="二-快速入门">二、快速入门</span></h2><h3><span id="使用步骤">使用步骤</span></h3><ol><li>导入驱动jar包 mysql-connector-java-5.1.37-bin<ol><li>复制mysql-connector-java-5.1.37-bin 到项目的libs（module下新建directory）目录下</li><li>右键libs–&gt;Add as Library…（ 才真正地将jar包加到项目中来）</li></ol></li><li>注册驱动</li><li>获取数据库连接对象Connection</li><li>定义sql</li><li>获取执行sql语句的对象Statement</li><li>执行sql，接受返回结果（获得结果的对象）</li><li>处理结果</li><li>释放资源</li></ol><h3><span id="代码">代码</span></h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.wangpeng.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* JDBC快速入门</span><br><span class="hljs-comment">* */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//1. 导入驱动jar包</span><br>        <span class="hljs-comment">//2. 注册驱动</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-comment">//3. 获取数据库连接对象</span><br>        Connection conn = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql:///girls&quot;</span>,<br>                <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;7783772&quot;</span>);<br>        <span class="hljs-comment">//4. 定义sql语句</span><br>        String sql = <span class="hljs-string">&quot;update admin set password = &#x27;1234&#x27; where id = 1&quot;</span>;<br>        <span class="hljs-comment">//5. 获取执行sql的独享 Statement</span><br>        Statement stmt = conn.createStatement();<br>        <span class="hljs-comment">//6. 执行sql</span><br>        <span class="hljs-keyword">int</span> count = stmt.executeUpdate(sql);<br>        <span class="hljs-comment">//7. 处理结果</span><br>        System.out.println(count);<br>        <span class="hljs-comment">//8. 释放资源</span><br>        stmt.close();<br>        conn.close();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2><span id="三-详解各个对象">三、详解各个对象</span></h2><ol><li>DriverManager：驱动管理对象</li><li>Connection：数据库连接对象</li><li>Statement：执行sql的对象</li><li>ResultSet：结果集对象</li><li>PreparedStatement：执行sql的对象（是Statement的子接口，功能更多）</li></ol><h3><span id="drivermanager驱动管理对象">DriverManager：驱动管理对象</span></h3><h4><span id="功能">功能</span></h4><ol><li><p>注册驱动：告诉我们的程序该使用哪一个数据库驱动jar包</p><ul><li><code>static void registerDriver(Driver driver)</code>  使用 <code>DriverManager</code>注册给定的驱动程序。</li><li>写代码使用：<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code>初始化给定的类<br>通过查看源码发现：在com.mysql.jdbc.Driver类中存在静态代码块<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>       java.sql.DriverManager.registerDriver(<span class="hljs-keyword">new</span> Driver());<br>   &#125; <span class="hljs-keyword">catch</span> (SQLException E) &#123;<br>       <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;Can&#x27;t register driver!&quot;</span>);<br>   &#125;<br></code></pre></div></td></tr></table></figure></li><li>注意：mysql 5 之后的驱动jar包可以省略注册驱动的步骤，因为它会自动帮你注册驱动。</li></ul></li><li><p>获取数据库连接</p><ul><li>方法：<code>static Connection getConnection(String url, String user, String password) </code>尝试建立与给定数据库URL的连接。 </li><li>参数：<ul><li>url：指定连接的路径<ul><li>语法：<code>jdbc:mysql://ip地址(域名):端口号/数据库名称</code></li><li>例子：<code>jdbc:mysql://localhost:3306/db3</code></li><li>细节：如果连接的是本机mysql服务器，并且mysql服务端口是3306，则url可以简写为：<code>jdbc:mysql:///数据库名称</code></li></ul></li><li>user：用户名</li><li>password：密码</li></ul></li></ul></li></ol><h3><span id="connection数据库连接对象">Connection：数据库连接对象</span></h3><h4><span id="功能">功能</span></h4><ol><li>获取执行sql的对象<ul><li><code>Statement createStatement()</code> 创建一个 Statement对象，用于将SQL语句发送到数据库。  </li><li><code>PreparedStatement prepareStatement(String sql)</code> 创建一个 PreparedStatement对象，用于将参数化SQL语句发送到数据库。  </li></ul></li><li>管理事务：<ol><li>开启事务<ol><li><code>void setAutoCommit(boolean autoCommit)</code>将此连接的自动提交模式设置为给定状态。  <ol><li>设置参数为false，即开启事务</li></ol></li></ol></li><li>提交事务<ol><li><code>void commit() </code>使自上次提交/回滚以来所做的所有更改成为永久更改，并释放此 Connection对象当前持有的所有数据库锁。</li></ol></li><li>回滚事务<ol><li><code>void rollback() </code>撤消当前事务中所做的所有更改，并释放此 Connection对象当前持有的所有数据库锁。</li></ol></li></ol></li></ol><h3><span id="statement执行sql的对象">Statement：执行sql的对象</span></h3><h4><span id="功能">功能</span></h4><ol><li>执行sql<ol><li><code>boolean execute(String sql)</code> ：可以执行任意的sql 了解 </li><li><code>int executeUpdate(String sql)</code> ：执行DML（insert、update、delete）语句、DDL(create，alter、drop)语句<ul><li>返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值&gt;0的则执行成功，反之，则失败。</li></ul></li><li><code>ResultSet executeQuery(String sql)</code>  ：执行DQL（select)语句</li></ol></li></ol><h4><span id="练习">练习</span></h4><p>自己做一个表结构</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE DATABASE my_jdbc;<br><br>/*<br>学号、姓名、性别、年龄、所在系<br>*/<br>CREATE TABLE student(<br>sid INT PRIMARY KEY AUTO_INCREMENT,<br>sname VARCHAR(10),<br>ssex CHAR(1),<br>sdept VARCHAR(10)<br>);<br><br>INSERT INTO student VALUE<br>(NULL, &#x27;孙磊&#x27;, &#x27;男&#x27;, &#x27;信息&#x27;),<br>(NULL, &#x27;王鹏&#x27;, &#x27;男&#x27;, &#x27;信息&#x27;),<br>(NULL, &#x27;王晨宇&#x27;, &#x27;男&#x27;, &#x27;信息&#x27;),<br>(NULL, &#x27;李卓阳&#x27;, &#x27;男&#x27;, &#x27;信息&#x27;),<br>(NULL, &#x27;蔡冬燕&#x27;, &#x27;女&#x27;, &#x27;信息&#x27;);<br><br>SELECT * FROM student;<br><br></code></pre></div></td></tr></table></figure><ol><li><p>account表 添加一条记录</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.wangpeng.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * insert一条记录</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCDemo2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        Statement statement = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1. 注册驱动</span><br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            <span class="hljs-comment">//2. 写sql语句</span><br>            String sql = <span class="hljs-string">&quot;insert into student value(null, &#x27;周冬雨&#x27;, &#x27;女&#x27;, &#x27;会计&#x27;)&quot;</span>;<br>            <span class="hljs-comment">//4. 通过驱动管理的类方法来获取连接的对象</span><br>            connection = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql:///my_jdbc&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;7783772&quot;</span>);<br>            <span class="hljs-comment">//5. 通过连接的成员方法来创建执行sql的对象</span><br>            statement = connection.createStatement();<br>            <span class="hljs-comment">//6. 执行sql</span><br>            <span class="hljs-keyword">int</span> res = statement.executeUpdate(sql);<br>            <span class="hljs-keyword">if</span>(res &gt; <span class="hljs-number">0</span>) System.out.println(<span class="hljs-string">&quot;添加成功&quot;</span>);<br>            <span class="hljs-keyword">else</span> System.out.println(<span class="hljs-string">&quot;添加失败&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//7. 释放资源</span><br>            <span class="hljs-keyword">if</span>(statement != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    statement.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                    throwables.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(connection != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    connection.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                    throwables.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>account表 修改记录</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.wangpeng.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 修改记录</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCDemo3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        Statement statement = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1. 注册驱动</span><br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            <span class="hljs-comment">//2. 获取连接对象</span><br>            connection = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql:///my_jdbc&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;7783772&quot;</span>);<br>            <span class="hljs-comment">//3. 获取执行sql的对象</span><br>            statement = connection.createStatement();<br>            <span class="hljs-comment">//4. 写sql语句</span><br>            String sql = <span class="hljs-string">&quot;update student set sname = &#x27;张飞&#x27; where sid = 3&quot;</span>;<br>            <span class="hljs-comment">//5. 执行sql语句</span><br>            <span class="hljs-keyword">int</span> res = statement.executeUpdate(sql);<br>            <span class="hljs-comment">//6. 处理结果</span><br>            <span class="hljs-keyword">if</span>(res &gt; <span class="hljs-number">0</span>) System.out.println(<span class="hljs-string">&quot;修改成功&quot;</span>);<br>            <span class="hljs-keyword">else</span> System.out.println(<span class="hljs-string">&quot;修改失败&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//7. 释放资源</span><br>            <span class="hljs-keyword">if</span>(statement != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    statement.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                    throwables.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(connection != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    connection.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                    throwables.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li><li><p>account表 删除一条记录</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.wangpeng.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除记录</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCDemo4</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        Statement statement = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1. 注册驱动</span><br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            <span class="hljs-comment">//2. 获取连接对象</span><br>            connection = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql:///my_jdbc&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;7783772&quot;</span>);<br>            <span class="hljs-comment">//3. 获取执行sql的对象</span><br>            statement = connection.createStatement();<br>            <span class="hljs-comment">//4. 写sql语句</span><br>            String sql = <span class="hljs-string">&quot;delete from student where sname = &#x27;李卓阳&#x27;&quot;</span>;<br>            <span class="hljs-comment">//5. 执行sql语句</span><br>            <span class="hljs-keyword">int</span> res = statement.executeUpdate(sql);<br>            <span class="hljs-comment">//6. 处理结果</span><br>            <span class="hljs-keyword">if</span>(res &gt; <span class="hljs-number">0</span>) System.out.println(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>            <span class="hljs-keyword">else</span> System.out.println(<span class="hljs-string">&quot;删除失败&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//7. 释放资源</span><br>            <span class="hljs-keyword">if</span>(statement != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    statement.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                    throwables.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(connection != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    connection.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                    throwables.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li></ol><ol start="4"><li><p>DDL语言实验</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.wangpeng.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * DDL实验：创建表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCDemo5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        Statement statement = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1. 注册驱动</span><br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            <span class="hljs-comment">//2. 获取连接对象</span><br>            connection = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql:///my_jdbc&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;7783772&quot;</span>);<br>            <span class="hljs-comment">//3. 获取执行sql的对象</span><br>            statement = connection.createStatement();<br>            <span class="hljs-comment">//4. 写sql语句</span><br>            String sql = <span class="hljs-string">&quot;create table xianyu(a int, b double, c varchar(10))&quot;</span>;<br>            <span class="hljs-comment">//5. 执行sql语句</span><br>            <span class="hljs-keyword">int</span> res = statement.executeUpdate(sql);<br>            <span class="hljs-comment">//6. 处理结果</span><br>            System.out.println(res);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//7. 释放资源</span><br>            <span class="hljs-keyword">if</span>(statement != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    statement.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                    throwables.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(connection != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    connection.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                    throwables.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li></ol><h3><span id="resultset结果集对象">ResultSet：结果集对象</span></h3><h4><span id="常用函数">常用函数</span></h4><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> next(): 游标向下移动一行，判断当前行是否是最后一行之后，返回true当前行有效；false当前行无效<br><br><span class="hljs-bullet">*</span> getXxx(): 获取数据<br><span class="hljs-bullet">*</span> Xxx: 代表数据类型，如：int getInt() string getString()<br><span class="hljs-bullet">*</span> 参数（or）：<br><span class="hljs-bullet">1.</span> Int：代表列的编号，从1开始。如：getString(1)<br><span class="hljs-bullet">2.</span> String: 代表列的名称。如：getDouble(&quot;balance&quot;)<br><br><span class="hljs-bullet">*</span> 注意：<br><span class="hljs-bullet">*</span> 使用步骤<br><span class="hljs-bullet">1.</span> 游标向下移动一行<br><span class="hljs-bullet">2.</span> 判断是否有数据<br><span class="hljs-bullet">3.</span> 获取数据<br></code></pre></div></td></tr></table></figure><h4><span id="基本使用">基本使用</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.wangpeng.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询语句，ResultSet的使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCDemo6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        Statement statement = <span class="hljs-keyword">null</span>;<br>        ResultSet resultSet = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1. 注册驱动</span><br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            <span class="hljs-comment">//2. 获取连接对象</span><br>            connection = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql:///my_jdbc&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;7783772&quot;</span>);<br>            <span class="hljs-comment">//3. 获取执行sql的对象</span><br>            statement = connection.createStatement();<br>            <span class="hljs-comment">//4. 写sql语句</span><br>            String sql = <span class="hljs-string">&quot;select * from student&quot;</span>;<br>            <span class="hljs-comment">//5. 执行sql语句</span><br>            resultSet = statement.executeQuery(sql);<br>            <span class="hljs-comment">//6. 处理结果</span><br>            <span class="hljs-comment">//6.1 移动游标</span><br>            resultSet.next();<br>            <span class="hljs-comment">//6.2 get</span><br>            <span class="hljs-keyword">int</span> sid = resultSet.getInt(<span class="hljs-number">1</span>);<br>            String sname = resultSet.getString(<span class="hljs-number">2</span>);<br>            String ssex = resultSet.getString(<span class="hljs-number">3</span>);<br>            String sdept = resultSet.getString(<span class="hljs-number">4</span>);<br>            <span class="hljs-comment">//6.3 输出</span><br>            System.out.println(sid + <span class="hljs-string">&quot;\t&quot;</span> + sname + <span class="hljs-string">&quot;\t&quot;</span> + ssex + <span class="hljs-string">&quot;\t&quot;</span> + sdept);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//7. 释放资源</span><br>            <span class="hljs-keyword">if</span>(resultSet != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    resultSet.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                    throwables.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(statement != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    statement.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                    throwables.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(connection != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    connection.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                    throwables.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4><span id="完整使用">完整使用</span></h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.wangpeng.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询语句，ResultSet的使用</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCDemo7</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        Statement statement = <span class="hljs-keyword">null</span>;<br>        ResultSet resultSet = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1. 注册驱动</span><br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            <span class="hljs-comment">//2. 获取连接对象</span><br>            connection = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql:///my_jdbc&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;7783772&quot;</span>);<br>            <span class="hljs-comment">//3. 获取执行sql的对象</span><br>            statement = connection.createStatement();<br>            <span class="hljs-comment">//4. 写sql语句</span><br>            String sql = <span class="hljs-string">&quot;select * from student&quot;</span>;<br>            <span class="hljs-comment">//5. 执行sql语句</span><br>            resultSet = statement.executeQuery(sql);<br>            <span class="hljs-comment">//6. 处理数据并输出</span><br>            System.out.println(<span class="hljs-string">&quot;学号\t\t姓名\t\t性别\t\t系别&quot;</span>);<br>            <span class="hljs-keyword">while</span>(resultSet.next()) &#123;   <span class="hljs-comment">//返回true，则该行有效</span><br>                <span class="hljs-keyword">int</span> sid = resultSet.getInt(<span class="hljs-number">1</span>);<br>                String sname = resultSet.getString(<span class="hljs-number">2</span>);<br>                String ssex = resultSet.getString(<span class="hljs-number">3</span>);<br>                String sdept = resultSet.getString(<span class="hljs-number">4</span>);<br>                System.out.println(sid + <span class="hljs-string">&quot;\t\t&quot;</span> + sname + <span class="hljs-string">&quot;\t\t&quot;</span> + ssex + <span class="hljs-string">&quot;\t\t&quot;</span> + sdept);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//7. 释放资源</span><br>            <span class="hljs-keyword">if</span>(resultSet != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    resultSet.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                    throwables.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(statement != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    statement.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                    throwables.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(connection != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    connection.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                    throwables.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4><span id="封装成对象">封装成对象</span></h4><ol><li>Student</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.wangpeng.domain;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> sid;<br>    <span class="hljs-keyword">private</span> String sname;<br>    <span class="hljs-keyword">private</span> String ssex;<br>    <span class="hljs-keyword">private</span> String sdept;<br>    <span class="hljs-keyword">private</span> Date sedate;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String sname, String ssex, String sdept, Date sedate)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sid = id;<br>        <span class="hljs-keyword">this</span>.sname = sname;<br>        <span class="hljs-keyword">this</span>.ssex = ssex;<br>        <span class="hljs-keyword">this</span>.sdept = sdept;<br>        <span class="hljs-keyword">this</span>.sedate = sedate;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sid;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sid = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSname</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sname;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSname</span><span class="hljs-params">(String sname)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sname = sname;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSsex</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> ssex;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSsex</span><span class="hljs-params">(String ssex)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.ssex = ssex;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSdept</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sdept;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSdept</span><span class="hljs-params">(String sdept)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sdept = sdept;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getSedate</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sedate;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSedate</span><span class="hljs-params">(Date sedate)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sedate = sedate;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + sid +<br>                <span class="hljs-string">&quot;, sname=&#x27;&quot;</span> + sname + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, ssex=&#x27;&quot;</span> + ssex + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, sdept=&#x27;&quot;</span> + sdept + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, sedate=&quot;</span> + sedate +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><ol start="2"><li>main</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.wangpeng.jdbc;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> cn.wangpeng.domain.Student;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCDemo8</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;Student&gt; list = <span class="hljs-keyword">new</span> JDBCDemo8().findAll();<br>        <span class="hljs-keyword">for</span>(Student cur : list) System.out.println(cur);<br>        System.out.println(list.size());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;Student&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Student&gt;();<br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        Statement statement = <span class="hljs-keyword">null</span>;<br>        ResultSet resultSet = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1. 注册驱动</span><br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            <span class="hljs-comment">//2. 获取连接</span><br>            connection = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql:///my_jdbc&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;7783772&quot;</span>);<br>            <span class="hljs-comment">//3. 获取执行sql的对象</span><br>            statement = connection.createStatement();<br>            <span class="hljs-comment">//4. 写sql</span><br>            String sql = <span class="hljs-string">&quot;select * from student&quot;</span>;<br>            <span class="hljs-comment">//5. 执行sql</span><br>            resultSet = statement.executeQuery(sql);<br>            <span class="hljs-comment">//6. 处理结果</span><br>            Student student;<br>            <span class="hljs-keyword">while</span>(resultSet.next()) &#123;<br>                <span class="hljs-keyword">int</span> sid = resultSet.getInt(<span class="hljs-string">&quot;sid&quot;</span>);<br>                String sname = resultSet.getString(<span class="hljs-string">&quot;sname&quot;</span>);<br>                String ssex = resultSet.getString(<span class="hljs-string">&quot;ssex&quot;</span>);<br>                String sdept = resultSet.getString(<span class="hljs-string">&quot;sdept&quot;</span>);<br>                Date sedate = resultSet.getDate(<span class="hljs-string">&quot;sedate&quot;</span>);<br>                student = <span class="hljs-keyword">new</span> Student(sid, sname, ssex, sdept, sedate);<br>                list.add(student);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//7. 释放资源</span><br>            <span class="hljs-keyword">if</span>(resultSet != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    resultSet.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                    throwables.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(statement != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    statement.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                    throwables.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(connection != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    connection.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                    throwables.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4><span id="做成工具类">做成工具类</span></h4><p>配置文件</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">url = jdbc:mysql:<span class="hljs-comment">///my_jdbc</span><br>user = root<br>password = <span class="hljs-number">7783772</span><br>driver = com.mysql.jdbc.Driver<br></code></pre></div></td></tr></table></figure><p>工具类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.wangpeng.utils;<br><br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JDBC工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCUtils</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String url;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String user;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String password;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String driver;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读取文件并注册sql驱动，只需要执行一次</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">//读取资源文件，获取值</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1. 创建Properties集合类</span><br>            Properties pro = <span class="hljs-keyword">new</span> Properties();<br>            <span class="hljs-comment">//获取src路径下的文件--&gt;ClassLoader 类加载器</span><br>            ClassLoader classLoader = JDBCUtils.class.getClassLoader();<br>            URL res = classLoader.getResource(<span class="hljs-string">&quot;jdbc.properties&quot;</span>);<br>            String path = res.getPath();<br>            <span class="hljs-comment">//2. 加载文件</span><br>            pro.load(<span class="hljs-keyword">new</span> FileReader(path));<br>            <span class="hljs-comment">//3. 获取值</span><br>            url = pro.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>            user = pro.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>            password = pro.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>            driver = pro.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>            <span class="hljs-comment">//4. 注册驱动</span><br>            Class.forName(driver);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取连接</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 连接对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-keyword">return</span> DriverManager.getConnection(url, user, password);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放资源</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(ResultSet rs, Statement smt, Connection cnn)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(rs != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                rs.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(smt != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                smt.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(cnn != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                cnn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 释放资源</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(Statement smt, Connection cnn)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(smt != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                smt.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(cnn != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                cnn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>                throwables.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>主程序</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.wangpeng.jdbc;<br><br><span class="hljs-keyword">import</span> cn.wangpeng.domain.Student;<br><span class="hljs-keyword">import</span> cn.wangpeng.utils.JDBCUtils;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCDemo9</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        List&lt;Student&gt; list = <span class="hljs-keyword">new</span> JDBCDemo9().findAll();<br>        <span class="hljs-keyword">for</span>(Student a : list) System.out.println(a);<br>        System.out.println(list.size());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用JDBC工具类实现查询所有</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 查询结果集合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;Student&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Student&gt;();<br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        Statement statement = <span class="hljs-keyword">null</span>;<br>        ResultSet resultSet = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = JDBCUtils.getConnection(); <span class="hljs-comment">//通过工具类获取连接</span><br>            statement = connection.createStatement();   <span class="hljs-comment">//获取执行sql的对象</span><br>            String sql = <span class="hljs-string">&quot;select * from student&quot;</span>;   <span class="hljs-comment">//写sql</span><br>            resultSet = statement.executeQuery(sql);    <span class="hljs-comment">//执行sql</span><br>            <span class="hljs-comment">//处理结果</span><br>            Student student;<br>            <span class="hljs-keyword">while</span>(resultSet.next()) &#123;<br>                <span class="hljs-keyword">int</span> sid = resultSet.getInt(<span class="hljs-string">&quot;sid&quot;</span>);<br>                String sname = resultSet.getString(<span class="hljs-string">&quot;sname&quot;</span>);<br>                String ssex = resultSet.getString(<span class="hljs-string">&quot;ssex&quot;</span>);<br>                String sdept = resultSet.getString(<span class="hljs-string">&quot;sdept&quot;</span>);<br>                Date sedate = resultSet.getDate(<span class="hljs-string">&quot;sedate&quot;</span>);<br>                student = <span class="hljs-keyword">new</span> Student(sid, sname, ssex, sdept, sedate);<br>                list.add(student);  <span class="hljs-comment">//添加到结果集</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtils.close(resultSet,statement,connection);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;    <span class="hljs-comment">//返回结果集</span><br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3><span id="登陆demo">登陆Demo</span></h3><ol><li><p>数据库建表</p><ul><li>```mysql<br>CREATE DATABASE myjdbc2;CREATE TABLE myuser(<div class="hljs code-wrapper"><pre><code>id INT PRIMARY KEY AUTO_INCREMENT,username VARCHAR(32),tpassword VARCHAR(32)</code></pre></div>);INSERT INTO myuser VALUE<br>(NULL, ‘zhangsan’, ‘123’),<br>(NULL, ‘lisi’, ‘456’);SELECT * FROM myuser;<figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs nix"><br><span class="hljs-number">2</span>. 改配置文件 jdbc.properties<br><br>   * ```<br>     <span class="hljs-attr">url</span> = jdbc:mysql:///myjdbc2<br>     <span class="hljs-attr">user</span> = root<br>     <span class="hljs-attr">password</span> = <span class="hljs-number">7783772</span><br>     <span class="hljs-attr">driver</span> = com.mysql.jdbc.Driver<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>java主程序</p><ul><li>```java<br>package cn.wangpeng.jdbc;import cn.wangpeng.utils.JDBCUtils;import java.sql.Connection;<br>import java.sql.ResultSet;<br>import java.sql.SQLException;<br>import java.sql.Statement;<br>import java.util.Scanner;public class JDBCDemo10 {<div class="hljs code-wrapper"><pre><code>public static void main(String[] args) &#123;    Scanner sc = new Scanner(System.in);    System.out.println(&quot;请输入用户名&quot;);    String user = sc.nextLine();    System.out.println(&quot;请输入密码&quot;);    String pswd = sc.nextLine();    if(new JDBCDemo10().login(user, pswd)) System.out.println(&quot;登陆成功&quot;);    else System.out.println(&quot;账号或密码错误&quot;);&#125;/** * 登陆 * @return 登陆是否成功 */public boolean login(String user, String pswd) &#123;    Connection cnn = null;    Statement stm = null;    ResultSet rs = null;    try &#123;        cnn = JDBCUtils.getConnection();    //获取连接        stm = cnn.createStatement();        //获取执行sql的对象        String sql = &quot;select * from myuser where username = &#39;&quot; + user + &quot;&#39; and tpassword = &#39;&quot; + pswd + &quot;&#39;&quot;;        rs = stm.executeQuery(sql);         //执行sql        return rs.next();                   //返回表是否为空，也就是游标的下一行是否有效    &#125; catch (SQLException throwables) &#123;        throwables.printStackTrace();    &#125; finally &#123;        JDBCUtils.close(rs, stm, cnn);    &#125;    return false;&#125;</code></pre></div>}<figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><br><br><br>### PreparedStatement：执行<span class="hljs-keyword">sql</span>的对象（是<span class="hljs-keyword">Statement</span>的子接口，功能更多）<br><br> #### 演示<br><br>```java<br>package cn.wangpeng.jdbc;<br><br><span class="hljs-keyword">import</span> cn.wangpeng.utils.JDBCUtils;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-keyword">sql</span>.*;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> JDBCDemo11 &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        Scanner sc = <span class="hljs-built_in">new</span> Scanner(<span class="hljs-keyword">System</span>.<span class="hljs-keyword">in</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;请输入用户名&quot;);<br>        String <span class="hljs-keyword">user</span> = sc.nextLine();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;请输入密码&quot;);<br>        String pswd = sc.nextLine();<br>        <span class="hljs-type">boolean</span> flag = <span class="hljs-built_in">new</span> JDBCDemo11().<span class="hljs-keyword">login</span>(<span class="hljs-keyword">user</span>, pswd);<br>        <span class="hljs-keyword">if</span>(flag) <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;登录成功!&quot;);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;账号或密码错误&quot;);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 登陆</span><br><span class="hljs-comment">     * @return 登陆是否成功</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">boolean</span> <span class="hljs-keyword">login</span>(String <span class="hljs-keyword">user</span>, String pswd) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">user</span> == <span class="hljs-keyword">null</span> || pswd == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">Connection</span> conn = <span class="hljs-keyword">null</span>;<br>        PreparedStatement pstmt = <span class="hljs-keyword">null</span>;<br>        ResultSet rs = <span class="hljs-keyword">null</span>;<br>        try &#123;<br>            conn = JDBCUtils.getConnection();    //获取连接<br>            String <span class="hljs-keyword">sql</span> = &quot;select * from myuser where username = ? and tpassword = ?&quot;;   //写<span class="hljs-keyword">sql</span><br>            pstmt = conn.prepareStatement(<span class="hljs-keyword">sql</span>);  //获取执行<span class="hljs-keyword">sql</span>的对象<br>            pstmt.setString(<span class="hljs-number">1</span>, <span class="hljs-keyword">user</span>);   //给?赋值<br>            pstmt.setString(<span class="hljs-number">2</span>, pswd);<br>            rs = pstmt.executeQuery();  //直接执行<br>            <span class="hljs-keyword">return</span> rs.next();   //返回表是否为空，也就是游标的下一行是否有效<br>        &#125; catch (SQLException throwables) &#123;<br>            throwables.printStackTrace();<br>        &#125; finally &#123;<br>            JDBCUtils.<span class="hljs-keyword">close</span>(rs, pstmt, conn);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure></li></ul></li></ol><h2><span id="jdbc控制事务">JDBC控制事务</span></h2><h4><span id="演示">演示</span></h4><ol><li><p>数据库建立account表</p><ul><li>```mysql<br>CREATE TABLE account(<div class="hljs code-wrapper"><pre><code>id INT PRIMARY KEY AUTO_INCREMENT,sname VARCHAR(32),money INT</code></pre></div>);INSERT INTO account VALUE<br>(NULL, ‘张三’, 1000),<br>(NULL, ‘李四’, 1000);SELECT * FROM account;<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-number">2.</span> java主程序<br><br>   * ```java<br>     <span class="hljs-keyword">package</span> cn.wangpeng.jdbc;<br>     <br>     <span class="hljs-keyword">import</span> cn.wangpeng.utils.JDBCUtils;<br>     <br>     <span class="hljs-keyword">import</span> java.sql.*;<br>     <span class="hljs-keyword">import</span> java.util.Scanner;<br>     <br>     <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCDemo12</span> </span>&#123;<br>     <br>         <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>             Connection conn = <span class="hljs-keyword">null</span>;<br>             PreparedStatement pstmt1 = <span class="hljs-keyword">null</span>;<br>             PreparedStatement pstmt2 = <span class="hljs-keyword">null</span>;<br>             <span class="hljs-keyword">try</span> &#123;<br>                 conn = JDBCUtils.getConnection();   <span class="hljs-comment">//获取连接</span><br>                 conn.setAutoCommit(<span class="hljs-keyword">false</span>);  <span class="hljs-comment">//开启事务</span><br>                 <span class="hljs-comment">//写sql</span><br>                 String sql1 = <span class="hljs-string">&quot;update account set money = money - ? where id = ?&quot;</span>;<br>                 String sql2 = <span class="hljs-string">&quot;update account set money = money + ? where id = ?&quot;</span>;<br>     <br>                 <span class="hljs-comment">//获取执行sql的对象</span><br>                 pstmt1 = conn.prepareStatement(sql1);<br>                 pstmt2 = conn.prepareStatement(sql2);<br>     <br>                 <span class="hljs-comment">//设置参数</span><br>                 pstmt1.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">500</span>);<br>                 pstmt1.setInt(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);<br>     <br>                 pstmt2.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">500</span>);<br>                 pstmt2.setInt(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);<br>     <br>                 pstmt1.executeUpdate(); <span class="hljs-comment">//执行sql1</span><br>     <br>                 <span class="hljs-comment">//int k = 3/0;    //手动制造异常</span><br>     <br>                 pstmt2.executeUpdate(); <span class="hljs-comment">//执行sql2</span><br>     <br>                 <span class="hljs-comment">//提交事务</span><br>                 conn.commit();<br>     <br>             &#125; <span class="hljs-keyword">catch</span> (Exception throwables) &#123;<br>                 <span class="hljs-keyword">if</span>(conn != <span class="hljs-keyword">null</span>) &#123;<br>                     <span class="hljs-keyword">try</span> &#123;<br>                         conn.rollback();<br>                     &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                         e.printStackTrace();<br>                     &#125;<br>                 &#125;<br>                 throwables.printStackTrace();<br>             &#125; <span class="hljs-keyword">finally</span> &#123;<br>                 JDBCUtils.close(pstmt1,conn);<br>                 JDBCUtils.close(pstmt2,conn);<br>             &#125;<br>         &#125;<br>     &#125;<br>     <br></code></pre></div></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>JDBC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
      <tag>JDBC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-19-视图</title>
    <link href="/2021/07/10/MySQL-19-%E8%A7%86%E5%9B%BE/"/>
    <url>/2021/07/10/MySQL-19-%E8%A7%86%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h1><span id="视图">视图</span></h1><!-- toc --><ul><li><a href="#%E8%A7%86%E5%9B%BE%E4%BB%8B%E7%BB%8D">视图介绍</a><ul><li><a href="#%E5%90%AB%E4%B9%89">含义</a></li><li><a href="#%E4%BE%8B%E5%AD%90">例子</a></li></ul></li><li><a href="#%E4%B8%80-%E5%88%9B%E5%BB%BA%E8%A7%86%E5%9B%BE">一、创建视图</a><ul><li><a href="#%E8%AF%AD%E6%B3%95">语法</a></li><li><a href="#%E4%BE%8B%E5%AD%90-1">例子</a></li></ul></li><li><a href="#%E4%BA%8C-%E8%A7%86%E5%9B%BE%E7%9A%84%E4%BF%AE%E6%94%B9">二、视图的修改</a><ul><li><a href="#%E6%96%B9%E5%BC%8F%E4%B8%80">方式一</a></li><li><a href="#%E6%96%B9%E5%BC%8F%E4%BA%8C">方式二</a></li></ul></li><li><a href="#%E4%B8%89-%E5%88%A0%E9%99%A4%E8%A7%86%E5%9B%BE">三、删除视图</a></li><li><a href="#%E5%9B%9B-%E6%9F%A5%E7%9C%8B%E8%A7%86%E5%9B%BE">四、查看视图</a></li><li><a href="#%E4%BA%94-%E8%A7%86%E5%9B%BE%E7%9A%84%E6%9B%B4%E6%96%B0">五、视图的更新</a><ul><li><a href="#%E5%85%B7%E5%A4%87%E4%BB%A5%E4%B8%8B%E7%89%B9%E7%82%B9%E7%9A%84%E8%A7%86%E5%9B%BE%E4%B8%8D%E5%85%81%E8%AE%B8%E6%9B%B4%E6%96%B0">具备以下特点的视图不允许更新</a><ul><li><a href="#1%E5%8C%85%E5%90%AB%E4%BB%A5%E4%B8%8B%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84sql%E8%AF%AD%E5%8F%A5%E5%88%86%E7%BB%84%E5%87%BD%E6%95%B0-distinct-group-by-having-union%E6%88%96%E8%80%85union-all">①包含以下关键字的sql语句：分组函数、distinct、group by、having、union或者union all</a></li><li><a href="#2%E5%B8%B8%E9%87%8F%E8%A7%86%E5%9B%BE">②常量视图</a></li><li><a href="#3select%E4%B8%AD%E5%8C%85%E5%90%AB%E5%AD%90%E6%9F%A5%E8%AF%A2">③Select中包含子查询</a></li><li><a href="#4join">④join</a></li><li><a href="#5from%E4%B8%80%E4%B8%AA%E4%B8%8D%E8%83%BD%E6%9B%B4%E6%96%B0%E7%9A%84%E8%A7%86%E5%9B%BE">⑤from一个不能更新的视图</a></li><li><a href="#6where%E5%AD%90%E5%8F%A5%E7%9A%84%E5%AD%90%E6%9F%A5%E8%AF%A2%E5%BC%95%E7%94%A8%E4%BA%86from%E5%AD%90%E5%8F%A5%E4%B8%AD%E7%9A%84%E8%A1%A8">⑥where子句的子查询引用了from子句中的表</a></li></ul></li></ul></li><li><a href="#%E4%BD%9C%E4%B8%9A">作业</a><ul><li><a href="#%E9%97%AE%E9%A2%98">问题</a></li><li><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94">我的解答</a></li></ul></li><li><a href="#%E6%B5%8B%E8%AF%95%E9%A2%985">测试题5</a><ul><li><a href="#%E9%97%AE%E9%A2%98-1">问题</a></li><li><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94-1">我的解答</a></li></ul></li></ul><!-- tocstop --><h2><span id="视图介绍">视图介绍</span></h2><h3><span id="含义">含义</span></h3><p>虚拟表，和普通表一样使用<br>mysql5.1版本出现的新特性，是通过表动态生成的数据</p><p>比如：舞蹈班和普通班级的对比</p><table><thead><tr><th>类型</th><th>创建语法的关键字</th><th>是否实际占用物理空间</th><th>使用</th></tr></thead><tbody><tr><td>视图</td><td>create view</td><td>只是保存了sql逻辑</td><td>增删改查，只是一般不能增删改</td></tr><tr><td>表</td><td>create table</td><td>保存了数据</td><td>增删改查</td></tr></tbody></table><h3><span id="例子">例子</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">案例：查询姓张的学生名和专业名<br>SELECT stuname,majorname<br>FROM stuinfo s<br>INNER JOIN major m ON s.`majorid`= m.`id`<br>WHERE s.`stuname` LIKE &#x27;张%&#x27;;<br><br>CREATE VIEW v1<br>AS<br>SELECT stuname,majorname<br>FROM stuinfo s<br>INNER JOIN major m ON s.`majorid`= m.`id`;<br><br>SELECT * FROM v1 WHERE stuname LIKE &#x27;张%&#x27;;<br></code></pre></div></td></tr></table></figure><h2><span id="一-创建视图">一、创建视图</span></h2><h3><span id="语法">语法</span></h3><p>create view 视图名<br>as<br>查询语句;</p><h3><span id="例子">例子</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">USE myemployees;<br><br><br>#1.查询姓名中包含a字符的员工名、部门名和工种信息<br><br>#①创建<br>CREATE VIEW myv1<br>AS<br><br>SELECT last_name,department_name,job_title<br>FROM employees e<br>JOIN departments d ON e.department_id  = d.department_id<br>JOIN jobs j ON j.job_id  = e.job_id;<br><br>#②使用<br>SELECT * FROM myv1 WHERE last_name LIKE &#x27;%a%&#x27;;<br><br><br>#2.查询各部门的平均工资级别<br><br>#①创建视图查看每个部门的平均工资<br>CREATE VIEW myv2<br>AS<br>SELECT AVG(salary) ag,department_id<br>FROM employees<br>GROUP BY department_id;<br><br>#②使用<br>SELECT myv2.`ag`,g.grade_level<br>FROM myv2<br>JOIN job_grades g<br>ON myv2.`ag` BETWEEN g.`lowest_sal` AND g.`highest_sal`;<br><br><br>#3.查询平均工资最低的部门信息<br><br>SELECT * FROM myv2 ORDER BY ag LIMIT 1;<br><br><br>#4.查询平均工资最低的部门名和工资<br><br>CREATE VIEW myv3<br>AS<br>SELECT * FROM myv2 ORDER BY ag LIMIT 1;<br><br>SELECT d.*,m.ag<br>FROM myv3 m<br>JOIN departments d<br>ON m.`department_id`=d.`department_id`;<br></code></pre></div></td></tr></table></figure><h2><span id="二-视图的修改">二、视图的修改</span></h2><h3><span id="方式一">方式一</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">/*<br>create or replace view  视图名<br>as<br>查询语句;<br><br>*/<br>SELECT * FROM myv3 <br><br>CREATE OR REPLACE VIEW myv3<br>AS<br>SELECT AVG(salary),job_id<br>FROM employees<br>GROUP BY job_id;<br></code></pre></div></td></tr></table></figure><h3><span id="方式二">方式二</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">/*<br>语法：<br>alter view 视图名<br>as <br>查询语句;<br><br>*/<br>ALTER VIEW myv3<br>AS<br>SELECT * FROM employees;<br></code></pre></div></td></tr></table></figure><h2><span id="三-删除视图">三、删除视图</span></h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">语法：drop view 视图名,视图名,...;<br><br>DROP VIEW emp_v1,emp_v2,myv3;<br></code></pre></div></td></tr></table></figure><h2><span id="四-查看视图">四、查看视图</span></h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">DESC myv3;<br><br>SHOW CREATE VIEW myv3;<br></code></pre></div></td></tr></table></figure><h2><span id="五-视图的更新">五、视图的更新</span></h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE OR REPLACE VIEW myv1<br>AS<br>SELECT last_name,email,salary*12*(1+IFNULL(commission_pct,0)) &quot;annual salary&quot;<br>FROM employees;<br><br>CREATE OR REPLACE VIEW myv1<br>AS<br>SELECT last_name,email<br>FROM employees;<br><br><br>SELECT * FROM myv1;<br>SELECT * FROM employees;<br>#1.插入<br><br>INSERT INTO myv1 VALUES(&#x27;张飞&#x27;,&#x27;zf@qq.com&#x27;);<br><br>#2.修改<br>UPDATE myv1 SET last_name = &#x27;张无忌&#x27; WHERE last_name=&#x27;张飞&#x27;;<br><br>#3.删除<br>DELETE FROM myv1 WHERE last_name = &#x27;张无忌&#x27;;<br></code></pre></div></td></tr></table></figure><h3><span id="具备以下特点的视图不允许更新">具备以下特点的视图不允许更新</span></h3><h4><span id="1包含以下关键字的sql语句分组函数-distinct-group-by-having-union或者union-all">①包含以下关键字的sql语句：分组函数、distinct、group  by、having、union或者union all</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE OR REPLACE VIEW myv1<br>AS<br>SELECT MAX(salary) m,department_id<br>FROM employees<br>GROUP BY department_id;<br><br>SELECT * FROM myv1;<br><br>#更新<br>UPDATE myv1 SET m=9000 WHERE department_id=10;<br></code></pre></div></td></tr></table></figure><h4><span id="2常量视图">②常量视图</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE OR REPLACE VIEW myv2<br>AS<br><br>SELECT &#x27;john&#x27; NAME;<br><br>SELECT * FROM myv2;<br><br>#更新<br>UPDATE myv2 SET NAME=&#x27;lucy&#x27;;<br></code></pre></div></td></tr></table></figure><h4><span id="3select中包含子查询">③Select中包含子查询</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE OR REPLACE VIEW myv3<br>AS<br><br>SELECT department_id,(SELECT MAX(salary) FROM employees) 最高工资<br>FROM departments;<br><br>#更新<br>SELECT * FROM myv3;<br>UPDATE myv3 SET 最高工资=100000;<br></code></pre></div></td></tr></table></figure><h4><span id="4join">④join</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE OR REPLACE VIEW myv4<br>AS<br><br>SELECT last_name,department_name<br>FROM employees e<br>JOIN departments d<br>ON e.department_id  = d.department_id;<br><br>#更新<br><br>SELECT * FROM myv4;<br>UPDATE myv4 SET last_name  = &#x27;张飞&#x27; WHERE last_name=&#x27;Whalen&#x27;;<br>INSERT INTO myv4 VALUES(&#x27;陈真&#x27;,&#x27;xxxx&#x27;);<br></code></pre></div></td></tr></table></figure><h4><span id="5from一个不能更新的视图">⑤from一个不能更新的视图</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE OR REPLACE VIEW myv5<br>AS<br><br>SELECT * FROM myv3;<br><br>#更新<br><br>SELECT * FROM myv5;<br><br>UPDATE myv5 SET 最高工资=10000 WHERE department_id=60;<br></code></pre></div></td></tr></table></figure><h4><span id="6where子句的子查询引用了from子句中的表">⑥where子句的子查询引用了from子句中的表</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE OR REPLACE VIEW myv6<br>AS<br><br>SELECT last_name,email,salary<br>FROM employees<br>WHERE employee_id IN(<br>SELECT  manager_id<br>FROM employees<br>WHERE manager_id IS NOT NULL<br>);<br><br>#更新<br>SELECT * FROM myv6;<br>UPDATE myv6 SET salary=10000 WHERE last_name = &#x27;k_ing&#x27;;<br></code></pre></div></td></tr></table></figure><h2><span id="作业">作业</span></h2><h3><span id="问题">问题</span></h3><ol><li> 创建视图emp_v1,要求查询电话号码以‘011’开头的员工姓名和工资、邮箱</li><li>创建视图emp_v2，要求查询部门的最高工资高于 12000 的部门信息</li></ol><h3><span id="我的解答">我的解答</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">1. 创建视图emp_v1,要求查询电话号码以‘011’开头的员工姓名和工资、邮箱<br>CREATE OR REPLACE VIEW emp_v1<br>AS<br>SELECT last_name, salary, email<br>FROM employees<br>WHERE phone_number LIKE &#x27;011%&#x27;;<br><br>SELECT *<br>FROM emp_v1;<br><br>2. 创建视图emp_v2，要求查询部门的最高工资高于 12000 的部门信息<br>① 按部门分组，找到各部门的最高工资，筛选大于12000<br>SELECT MAX(salary), department_id<br>FROM employees<br>GROUP BY department_id<br>HAVING MAX(salary) &gt; 12000<br>② 做视图<br>CREATE OR REPLACE VIEW emp_v2<br>AS<br>SELECT MAX(salary) mx_dep, department_id<br>FROM employees<br>GROUP BY department_id<br>HAVING MAX(salary) &gt; 12000;<br><br>SELECT d.*, emp_v2.mx_dep<br>FROM departments d<br>JOIN emp_v2<br>ON emp_v2.department_id = d.department_id;<br><br><br></code></pre></div></td></tr></table></figure><h2><span id="测试题5">测试题5</span></h2><h3><span id="问题">问题</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210714131919.png" alt="image-20210714131912109"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210714132006.png" alt="image-20210714132006175"></p><h3><span id="我的解答">我的解答</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE DATABASE test5;<br>USE test5;<br><br>已知bookType表，字段如下：<br>id<br>bname<br>CREATE TABLE bookType(<br>id INT PRIMARY KEY AUTO_INCREMENT,<br>bname VARCHAR(10)<br>);<br><br>1. 创建Book表<br>bid 整型，要求主键<br>bname 字符型， 要求设置唯一键，并非空<br>price 浮点型，要求有默认值 10<br>btypeId 类型编号，要求引用bookType表id字段<br><br>CREATE TABLE Book(<br>bid INT PRIMARY KEY,<br>bname VARCHAR(10) UNIQUE NOT NULL,<br>price DOUBLE DEFAULT 10,<br>btypeId INT,<br>FOREIGN KEY(btypeId) REFERENCES bookType(id)<br>);<br><br>2. 开启事务，向表中插入1行数据，并结束<br>SET autocommit = 0;<br>INSERT INTO Book VALUE(1, &#x27;sunlei&#x27;, 100.0, NULL);<br>COMMIT;<br><br>3. 创建视图，实现查询价格大于100的书名和类型名<br>CREATE VIEW v1<br>AS<br>SELECT bname, btypeId<br>FROM Book<br>WHERE price &gt; 100;<br><br>SELECT * FROM v1;<br><br>4. 修改视图，实现查询价格在90-120之间的书名和价格<br>CREATE OR REPLACE VIEW v1<br>AS<br>SELECT bname, btypeId<br>FROM Book<br>WHERE price BETWEEN 90 AND 120;<br><br>SELECT * FROM v1;<br><br>5. 删除刚才建的视图<br>DROP VIEW v1;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-18-事务</title>
    <link href="/2021/07/10/MySQL-18-%E4%BA%8B%E5%8A%A1/"/>
    <url>/2021/07/10/MySQL-18-%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1><span id="事务">事务</span></h1><!-- toc --><ul><li><a href="#%E4%BA%8B%E5%8A%A1">事务</a><ul><li><a href="#%E4%BA%8B%E5%8A%A1%E4%BB%8B%E7%BB%8D">事务介绍</a></li><li><a href="#%E4%BA%8B%E5%8A%A1%E7%9A%84%E7%89%B9%E6%80%A7">事务的特性</a></li></ul></li><li><a href="#%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%88%9B%E5%BB%BA">事务的创建</a></li><li><a href="#%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB">事务的隔离级别</a></li><li><a href="#%E4%BE%8B%E5%AD%90">例子</a><ul><li><a href="#1%E6%BC%94%E7%A4%BA%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4">1.演示事务的使用步骤</a></li><li><a href="#2%E6%BC%94%E7%A4%BA%E4%BA%8B%E5%8A%A1%E5%AF%B9%E4%BA%8Edelete%E5%92%8Ctruncate%E7%9A%84%E5%A4%84%E7%90%86%E7%9A%84%E5%8C%BA%E5%88%AB">2.演示事务对于delete和truncate的处理的区别</a></li><li><a href="#3%E6%BC%94%E7%A4%BAsavepoint-%E7%9A%84%E4%BD%BF%E7%94%A8">3.演示savepoint 的使用</a></li></ul></li><li><a href="#%E4%BD%9C%E4%B8%9A13-%E4%BA%8B%E5%8A%A1">作业13-事务</a><ul><li><a href="#%E9%A2%98%E7%9B%AE">题目</a></li><li><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94">我的解答</a></li></ul></li></ul><!-- tocstop --><h2><span id="事务">事务</span></h2><p>Transaction Control Language 事务控制语言</p><h3><span id="事务介绍">事务介绍</span></h3><p>一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行。</p><p>案例：转账</p><p>张三丰  1000<br>郭襄    1000</p><p>update 表 set 张三丰的余额=500 where name=’张三丰’<br>意外<br>update 表 set 郭襄的余额=1500 where name=’郭襄’</p><h3><span id="事务的特性">事务的特性</span></h3><p>ACID<br>原子性：一个事务不可再分割，要么都执行要么都不执行<br>一致性：一个事务执行会使数据从一个一致状态切换到另外一个一致状态<br>隔离性：一个事务的执行不受其他事务的干扰<br>持久性：一个事务一旦提交，则会永久的改变数据库的数据.</p><h2><span id="事务的创建">事务的创建</span></h2><p>隐式事务：事务没有明显的开启和结束的标记<br>比如insert、update、delete语句</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">delete from 表 where id =1;<br></code></pre></div></td></tr></table></figure><p>显式事务：事务具有明显的开启和结束的标记<br>前提：必须先设置自动提交功能为禁用</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">set autocommit=0;<br></code></pre></div></td></tr></table></figure><ul><li><p>步骤1：开启事务</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">set autocommit=0;<br>start transaction;可选的<br></code></pre></div></td></tr></table></figure></li><li><p>步骤2：编写事务中的sql语句(select insert update delete)</p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">语句<span class="hljs-number">1</span><span class="hljs-comment">;</span><br>语句<span class="hljs-number">2</span><span class="hljs-comment">;</span><br>...<br></code></pre></div></td></tr></table></figure></li><li><p>步骤3：结束事务</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">commit;提交事务<br>rollback;回滚事务<br>savepoint 节点名;设置保存点<br></code></pre></div></td></tr></table></figure></li></ul><h2><span id="事务的隔离级别">事务的隔离级别</span></h2><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>repeatable read</td><td>×</td><td>×</td><td>√</td></tr><tr><td>serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><ul><li>mysql中默认 第三个隔离级别 repeatable read</li><li>oracle中默认第二个隔离级别 read committed</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">查看隔离级别<br>select @@tx_isolation;<br>设置隔离级别<br>set session|global transaction isolation level 隔离级别;<br><br>开启事务的语句;<br>update 表 set 张三丰的余额=500 where name=&#x27;张三丰&#x27;<br><br>update 表 set 郭襄的余额=1500 where name=&#x27;郭襄&#x27; <br>结束事务的语句;<br><br>SHOW VARIABLES LIKE &#x27;autocommit&#x27;;<br>SHOW ENGINES;<br></code></pre></div></td></tr></table></figure><h2><span id="例子">例子</span></h2><h3><span id="1演示事务的使用步骤">1.演示事务的使用步骤</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#开启事务<br><br>SET autocommit=0;<br>START TRANSACTION;<br><br>#编写一组事务的语句<br>UPDATE account SET balance = 1000 WHERE username=&#x27;张无忌&#x27;;<br>UPDATE account SET balance = 1000 WHERE username=&#x27;赵敏&#x27;;<br><br>#结束事务<br>ROLLBACK;<br>#或<br>commit;<br><br>#查看<br>SELECT * FROM account;<br></code></pre></div></td></tr></table></figure><h3><span id="2演示事务对于delete和truncate的处理的区别">2.演示事务对于delete和truncate的处理的区别</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SET autocommit=0;<br>START TRANSACTION;<br><br>DELETE FROM account;<br>ROLLBACK;<br></code></pre></div></td></tr></table></figure><h3><span id="3演示savepoint-的使用">3.演示savepoint 的使用</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SET autocommit=0;<br>START TRANSACTION;<br>DELETE FROM account WHERE id=25;<br>SAVEPOINT a;#设置保存点<br>DELETE FROM account WHERE id=28;<br>ROLLBACK TO a;#回滚到保存点<br><br><br>SELECT * FROM account;<br></code></pre></div></td></tr></table></figure><h2><span id="作业13-事务">作业13-事务</span></h2><h3><span id="题目">题目</span></h3><p>1.创建一个表，里面有 id 为主键，stuname 唯一键，seat 座位号，要求将id 设置成自增<br>2.要求用事务的方式插入3 行数据<br>3.要求用事务的方式删除数据，并回滚 </p><h3><span id="我的解答">我的解答</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">1.创建一个表，里面有 id 为主键，stuname 唯一键，seat 座位号，要求将id 设置成自增<br><br>CREATE TABLE t1(<br>id INT PRIMARY KEY AUTO_INCREMENT,<br>stuname VARCHAR(10) UNIQUE,<br>seat INT<br>);<br><br>2.要求用事务的方式插入3 行数据<br><br>SET autocommit = 0;<br>START TRANSACTION;<br><br>INSERT INTO t1 VALUE(NULL, &#x27;sunlei&#x27;, 5151);<br>INSERT INTO t1 VALUE(NULL, &#x27;wangpeng&#x27;, 5152);<br>INSERT INTO t1 VALUE(NULL, &#x27;wangchengyu&#x27;, 5153);<br><br>COMMIT;<br><br>SELECT * FROM t1;<br><br>3.要求用事务的方式删除数据，并回滚<br>SET autocommit = 0;<br>START TRANSACTION;<br><br>DELETE FROM t1 WHERE id = 1;<br><br>ROLLBACK;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-17-标识列</title>
    <link href="/2021/07/10/MySQL-17-%E6%A0%87%E8%AF%86%E5%88%97/"/>
    <url>/2021/07/10/MySQL-17-%E6%A0%87%E8%AF%86%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1><span id="标识列">标识列</span></h1><!-- toc --><ul><li><a href="#%E4%BB%8B%E7%BB%8D">介绍</a><ul><li><a href="#%E5%90%AB%E4%B9%89">含义</a></li><li><a href="#%E7%89%B9%E7%82%B9">特点</a></li></ul></li><li><a href="#%E4%B8%80-%E5%88%9B%E5%BB%BA%E8%A1%A8%E6%97%B6%E8%AE%BE%E7%BD%AE%E6%A0%87%E8%AF%86%E5%88%97">一、创建表时设置标识列</a></li><li><a href="#%E4%BA%8C-%E4%BF%AE%E6%94%B9%E8%A1%A8%E6%97%B6%E8%AE%BE%E7%BD%AE%E6%A0%87%E8%AF%86%E5%88%97">二、修改表时设置标识列</a></li><li><a href="#%E4%B8%89-%E4%BF%AE%E6%94%B9%E8%A1%A8%E6%97%B6%E5%88%A0%E9%99%A4%E6%A0%87%E8%AF%86%E5%88%97">三、修改表时删除标识列</a></li></ul><!-- tocstop --><h2><span id="介绍">介绍</span></h2><p>又称为自增长列</p><h3><span id="含义">含义</span></h3><p>可以不用手动的插入值，系统提供默认的序列值</p><h3><span id="特点">特点</span></h3><p>1、标识列必须和主键搭配吗？不一定，但要求是一个key<br>2、一个表可以有几个标识列？至多一个！<br>3、标识列的类型只能是数值型<br>4、标识列可以通过 SET auto_increment_increment=3;设置步长<br>可以通过 手动插入值，设置起始值</p><h2><span id="一-创建表时设置标识列">一、创建表时设置标识列</span></h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">DROP TABLE IF EXISTS tab_identity;<br>CREATE TABLE tab_identity(<br>id INT  ,<br>NAME FLOAT UNIQUE AUTO_INCREMENT,<br>seat INT <br><br><br>);<br>TRUNCATE TABLE tab_identity;<br><br>INSERT INTO tab_identity(id,NAME) VALUES(NULL,&#x27;john&#x27;);<br>INSERT INTO tab_identity(NAME) VALUES(&#x27;lucy&#x27;);<br>SELECT * FROM tab_identity;<br><br>SHOW VARIABLES LIKE &#x27;%auto_increment%&#x27;;<br><br>SET auto_increment_increment=3;<br></code></pre></div></td></tr></table></figure><h2><span id="二-修改表时设置标识列">二、修改表时设置标识列</span></h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">ALTER TABLE tab_identity MODIFY COLUMN id INT PRIMARY KEY AUTO_INCREMENT;<br></code></pre></div></td></tr></table></figure><h2><span id="三-修改表时删除标识列">三、修改表时删除标识列</span></h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">ALTER TABLE tab_identity MODIFY COLUMN id INT;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-16-常见约束</title>
    <link href="/2021/07/10/MySQL-16-%E5%B8%B8%E8%A7%81%E7%BA%A6%E6%9D%9F/"/>
    <url>/2021/07/10/MySQL-16-%E5%B8%B8%E8%A7%81%E7%BA%A6%E6%9D%9F/</url>
    
    <content type="html"><![CDATA[<h1><span id="常见约束">常见约束</span></h1><!-- toc --><ul><li><a href="#%E5%B8%B8%E8%A7%81%E7%BA%A6%E6%9D%9F">常见约束</a><ul><li><a href="#%E5%90%AB%E4%B9%89">含义</a></li><li><a href="#%E5%88%86%E7%B1%BB">分类</a></li><li><a href="#%E6%B7%BB%E5%8A%A0%E7%BA%A6%E6%9D%9F%E7%9A%84%E6%97%B6%E6%9C%BA">添加约束的时机</a></li><li><a href="#%E7%BA%A6%E6%9D%9F%E7%9A%84%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB">约束的添加分类</a></li></ul></li><li><a href="#%E4%B8%80-%E5%88%9B%E5%BB%BA%E8%A1%A8%E6%97%B6%E6%B7%BB%E5%8A%A0%E7%BA%A6%E6%9D%9F">一、创建表时添加约束</a></li><li><a href="#1%E6%B7%BB%E5%8A%A0%E5%88%97%E7%BA%A7%E7%BA%A6%E6%9D%9F">1.添加列级约束</a><ul><li><a href="#%E8%AF%AD%E6%B3%95">语法</a></li></ul></li><li><a href="#2%E6%B7%BB%E5%8A%A0%E8%A1%A8%E7%BA%A7%E7%BA%A6%E6%9D%9F">2.添加表级约束</a><ul><li><a href="#%E8%AF%AD%E6%B3%95%E5%9C%A8%E5%90%84%E4%B8%AA%E5%AD%97%E6%AE%B5%E7%9A%84%E6%9C%80%E4%B8%8B%E9%9D%A2">语法：在各个字段的最下面</a></li></ul></li><li><a href="#%E9%80%9A%E7%94%A8%E7%9A%84%E5%86%99%E6%B3%95">通用的写法：★</a></li><li><a href="#%E4%BA%8C-%E4%BF%AE%E6%94%B9%E8%A1%A8%E6%97%B6%E6%B7%BB%E5%8A%A0%E7%BA%A6%E6%9D%9F">二、修改表时添加约束</a><ul><li><a href="#1-%E6%B7%BB%E5%8A%A0%E5%88%97%E7%BA%A7%E7%BA%A6%E6%9D%9F">1、添加列级约束</a></li><li><a href="#2-%E6%B7%BB%E5%8A%A0%E8%A1%A8%E7%BA%A7%E7%BA%A6%E6%9D%9F">2、添加表级约束</a></li></ul></li><li><a href="#%E4%B8%89-%E4%BF%AE%E6%94%B9%E8%A1%A8%E6%97%B6%E5%88%A0%E9%99%A4%E7%BA%A6%E6%9D%9F">三、修改表时删除约束</a></li><li><a href="#%E4%BD%9C%E4%B8%9A12-%E7%BA%A6%E6%9D%9F">作业12-约束</a><ul><li><a href="#%E9%97%AE%E9%A2%98">问题</a></li><li><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94">我的解答</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul></li><li><a href="#%E7%BA%A7%E8%81%94">级联</a></li></ul><!-- tocstop --><h2><span id="常见约束">常见约束</span></h2><h3><span id="含义">含义</span></h3><p>一种限制，用于限制表中的数据，为了保证表中的数据的准确和可靠性</p><h3><span id="分类">分类</span></h3><p>六大约束<br>    <strong>NOT NULL</strong>：非空，用于保证该字段的值不能为空<br>    比如姓名、学号等<br>    <strong>DEFAULT</strong>:默认，用于保证该字段有默认值<br>    比如性别<br>    <strong>PRIMARY KEY</strong>:主键，用于保证该字段的值具有唯一性，并且非空<br>    比如学号、员工编号等<br>    <strong>UNIQUE</strong>:唯一，用于保证该字段的值具有唯一性，可以为空<br>    比如座位号<br>    <strong>CHECK</strong>:检查约束【mysql中不支持】<br>    比如年龄、性别<br>    <strong>FOREIGN KEY</strong>:外键，用于限制两个表的关系，用于保证该字段的值必须来自于主表的关联列的值<br>        在从表添加外键约束，用于引用主表中某列的值<br>    比如学生表的专业编号，员工表的部门编号，员工表的工种编号</p><p>记忆以下：</p><p>主键、非空、唯一、外键</p><p>默认、检查</p><h3><span id="添加约束的时机">添加约束的时机</span></h3><p>​    1.创建表时<br>​    2.修改表时</p><h3><span id="约束的添加分类">约束的添加分类</span></h3><p>​    列级约束：六大约束语法上都支持，但外键约束没有效果<br>​<br>​    表级约束：除了非空、默认，其他的都支持</p><p>主键和唯一的大对比：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-code">保证唯一性  是否允许为空    一个表中可以有多少个   是否允许组合</span><br><span class="hljs-code">主键√×至多有1个           √，但不推荐</span><br><span class="hljs-code">唯一√√可以有多个          √，但不推荐</span><br></code></pre></div></td></tr></table></figure><p>外键：<br>    1、要求在从表设置外键关系<br>    2、从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求<br>    3、主表的关联列必须是一个key（一般是主键或唯一）<br>    4、插入数据时，先插入主表，再插入从表<br>    删除数据时，先删除从表，再删除主表</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE 表名(<br>字段名 字段类型 列级约束,<br>字段名 字段类型,<br>表级约束<br><br>)<br>CREATE DATABASE students;<br></code></pre></div></td></tr></table></figure><p>书上例子</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210713173843.png" alt="image-20210713173836080"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210713174106.png" alt="image-20210713174106279"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210713174144.png" alt="image-20210713174143974"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210713174044.png" alt="image-20210713174044517"></p><h2><span id="一-创建表时添加约束">一、创建表时添加约束</span></h2><h2><span id="1添加列级约束">1.添加列级约束</span></h2><h3><span id="语法">语法</span></h3><p>直接在字段名和类型后面追加 约束类型即可。</p><p>只支持：默认、非空、主键、唯一</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">USE students;<br>DROP TABLE stuinfo;<br>CREATE TABLE stuinfo(<br>id INT PRIMARY KEY,#主键<br>stuName VARCHAR(20) NOT NULL UNIQUE,#非空<br>gender CHAR(1) CHECK(gender=&#x27;男&#x27; OR gender =&#x27;女&#x27;),#检查<br>seat INT UNIQUE,#唯一<br>age INT DEFAULT  18,#默认约束<br>majorId INT REFERENCES major(id)#外键<br><br>);<br><br>CREATE TABLE major(<br>id INT PRIMARY KEY,<br>majorName VARCHAR(20)<br>);<br><br>#查看stuinfo中的所有索引，包括主键、外键、唯一<br>SHOW INDEX FROM stuinfo;<br></code></pre></div></td></tr></table></figure><h2><span id="2添加表级约束">2.添加表级约束</span></h2><h3><span id="语法在各个字段的最下面">语法：在各个字段的最下面</span></h3><p> 【constraint 约束名】 约束类型(字段名) </p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">DROP TABLE IF EXISTS stuinfo;<br>CREATE TABLE stuinfo(<br>id INT,<br>stuname VARCHAR(20),<br>gender CHAR(1),<br>seat INT,<br>age INT,<br>majorid INT,<br><br>CONSTRAINT pk PRIMARY KEY(id),#主键<br>CONSTRAINT uq UNIQUE(seat),#唯一键<br>CONSTRAINT ck CHECK(gender =&#x27;男&#x27; OR gender  = &#x27;女&#x27;),#检查<br>CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id)#外键<br>);<br><br>SHOW INDEX FROM stuinfo;<br></code></pre></div></td></tr></table></figure><h2><span id="通用的写法">通用的写法：★</span></h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE IF NOT EXISTS stuinfo(<br>id INT PRIMARY KEY,<br>stuname VARCHAR(20),<br>sex CHAR(1),<br>age INT DEFAULT 18,<br>seat INT UNIQUE,<br>majorid INT,<br>CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id)<br>);<br></code></pre></div></td></tr></table></figure><h2><span id="二-修改表时添加约束">二、修改表时添加约束</span></h2><h3><span id="1-添加列级约束">1、添加列级约束</span></h3><p>alter table 表名 modify column 字段名 字段类型 新约束;</p><h3><span id="2-添加表级约束">2、添加表级约束</span></h3><p>alter table 表名 add 【constraint 约束名】 约束类型(字段名) 【外键的引用】;</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">DROP TABLE IF EXISTS stuinfo;<br>CREATE TABLE stuinfo(<br>id INT,<br>stuname VARCHAR(20),<br>gender CHAR(1),<br>seat INT,<br>age INT,<br>majorid INT<br>)<br>DESC stuinfo;<br>#1.添加非空约束<br>ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20)  NOT NULL;<br>#2.添加默认约束<br>ALTER TABLE stuinfo MODIFY COLUMN age INT DEFAULT 18;<br>#3.添加主键<br>#①列级约束<br>ALTER TABLE stuinfo MODIFY COLUMN id INT PRIMARY KEY;<br>#②表级约束<br>ALTER TABLE stuinfo ADD PRIMARY KEY(id);<br><br>#4.添加唯一<br><br>#①列级约束<br>ALTER TABLE stuinfo MODIFY COLUMN seat INT UNIQUE;<br>#②表级约束<br>ALTER TABLE stuinfo ADD UNIQUE(seat);<br><br><br>#5.添加外键<br>ALTER TABLE stuinfo ADD CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id); <br></code></pre></div></td></tr></table></figure><h2><span id="三-修改表时删除约束">三、修改表时删除约束</span></h2><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#1.删除非空约束<br>ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20) NULL;<br><br>#2.删除默认约束<br>ALTER TABLE stuinfo MODIFY COLUMN age INT ;<br><br>#3.删除主键<br>ALTER TABLE stuinfo DROP PRIMARY KEY;<br><br>#4.删除唯一<br>ALTER TABLE stuinfo DROP INDEX seat;<br><br>#5.删除外键<br>ALTER TABLE stuinfo DROP FOREIGN KEY fk_stuinfo_major;<br><br>SHOW INDEX FROM stuinfo;<br></code></pre></div></td></tr></table></figure><h2><span id="作业12-约束">作业12-约束</span></h2><h3><span id="问题">问题</span></h3><ol><li><p>向表 emp2 的id 列中添加PRIMARY KEY 约束（my_emp_id_pk） </p></li><li><p>向表 dept2 的id 列中添加PRIMARY KEY 约束（my_dept_id_pk） </p></li><li><p>向表 emp2 中添加列 dept_id，并在其中定义 FOREIGN</p></li></ol><p>KEY 约束，与之相关联的列是</p><p>dept2 表中的id 列。 </p><h3><span id="我的解答">我的解答</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">1. 向表 emp2 的id 列中添加PRIMARY KEY 约束（my_emp_id_pk） <br><br>ALTER TABLE emp2 MODIFY COLUMN id INT PRIMARY KEY;<br>ALTER TABLE emp2 ADD CONSTRAINT my_emp_id_pk PRIMARY KEY(id);<br><br>2. 向表 dept2 的id 列中添加PRIMARY KEY 约束（my_dept_id_pk） <br>ALTER TABLE dept2 MODIFY COLUMN id PRIMARY KEY;<br>ALTER TABLE dept2 ADD CONSTRAINT my_dept_id_pk PRIMARY KEY(id);<br><br>3. 向表 emp2 中添加列 dept_id，并在其中定义 FOREIGN KEY 约束，与之相关联的列是<br>dept2 表中的id 列。 <br>ALTER TABLE ADD COLUMN dept_id INT;<br>ALTER TABLE ADD CONSTRAINT fk FOREIGN KEY(dept_id) REFERENCES dept2(id);<br></code></pre></div></td></tr></table></figure><h3><span id="总结">总结</span></h3><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210713174208.png" alt="image-20210713174208149"></p><h2><span id="级联">级联</span></h2><p>可以通过以下两种方式来删除主表的记录</p><p>#方式一：级联删除<br>ALTER TABLE stuinfo ADD CONSTRAINT fk_stu_major FOREIGN KEY(majorid) REFERENCES major(id) ON DELETE CASCADE;</p><p>#方式二：级联置空<br>ALTER TABLE stuinfo ADD CONSTRAINT fk_stu_major FOREIGN KEY(majorid) REFERENCES major(id) ON DELETE SET NULL;</p>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-15-数据类型</title>
    <link href="/2021/07/10/MySQL-15-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2021/07/10/MySQL-15-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1><span id="数据类型">数据类型</span></h1><!-- toc --><ul><li><a href="#%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">常见的数据类型</a></li><li><a href="#%E4%B8%80-%E6%95%B4%E5%9E%8B">一、整型</a><ul><li><a href="#%E5%88%86%E7%B1%BB">分类</a></li><li><a href="#%E7%89%B9%E7%82%B9">特点</a></li><li><a href="#%E4%BE%8B%E5%AD%90">例子</a><ul><li><a href="#1%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E6%97%A0%E7%AC%A6%E5%8F%B7%E5%92%8C%E6%9C%89%E7%AC%A6%E5%8F%B7">1.如何设置无符号和有符号</a></li></ul></li></ul></li><li><a href="#%E4%BA%8C-%E5%B0%8F%E6%95%B0">二、小数</a><ul><li><a href="#%E5%88%86%E7%B1%BB-1">分类</a></li><li><a href="#%E7%89%B9%E7%82%B9-1">特点</a></li><li><a href="#%E6%B5%8B%E8%AF%95m%E5%92%8Cd">测试M和D</a></li><li><a href="#%E5%8E%9F%E5%88%99">原则</a></li></ul></li><li><a href="#%E4%B8%89-%E5%AD%97%E7%AC%A6%E5%9E%8B">三、字符型</a><ul><li><a href="#%E5%88%86%E7%B1%BB-2">分类</a></li><li><a href="#%E7%89%B9%E7%82%B9-2">特点</a></li><li><a href="#%E4%BE%8B%E5%AD%90-1">例子</a></li></ul></li><li><a href="#%E5%9B%9B-%E6%97%A5%E6%9C%9F%E5%9E%8B">四、日期型</a><ul><li><a href="#%E5%88%86%E7%B1%BB-3">分类</a></li><li><a href="#%E7%89%B9%E7%82%B9-3">特点</a></li></ul></li></ul><!-- tocstop --><h2><span id="常见的数据类型">常见的数据类型</span></h2><ul><li><p>数值型</p><ul><li><p>整型</p></li><li><p>小数</p><ul><li><p>定点数</p><p>浮点数</p></li></ul></li></ul></li><li><p>字符型：</p><div class="hljs code-wrapper"><pre><code>较短的文本：char、varchar较长的文本：text、blob（较长的二进制数据）</code></pre></div></li><li><p>日期型</p></li></ul><h2><span id="一-整型">一、整型</span></h2><h3><span id="分类">分类</span></h3><p>| tinyint | smallint | mediumint | int/integer | bigint |<br>|–|<br>|1         |2        |3        |4        |8        |</p><h3><span id="特点">特点</span></h3><p>① 如果不设置无符号还是有符号，<strong>默认是有符号</strong>，如果想设置无符号，<strong>需要添加unsigned关键字</strong><br>② 如果插入的数值超出了整型的范围，会报out of range异常，并且插入临界值<br>③ 如果不设置长度，<strong>会有默认的长度</strong><br>长度代表了<strong>显示的最大宽度</strong>，如果不够会用0在左边填充，<strong>但必须搭配zerofill使用！</strong></p><h3><span id="例子">例子</span></h3><h4><span id="1如何设置无符号和有符号">1.如何设置无符号和有符号</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">DROP TABLE IF EXISTS tab_int;<br>CREATE TABLE tab_int(<br>t1 INT(7) ZEROFILL,<br>t2 INT(7) ZEROFILL <br>);<br><br>DESC tab_int;<br><br>INSERT INTO tab_int VALUES(-123456);<br>INSERT INTO tab_int VALUES(-123456,-123456);<br>INSERT INTO tab_int VALUES(214748364894967296);<br><br>INSERT INTO tab_int VALUES(123,123);<br><br>SELECT * FROM tab_int;<br></code></pre></div></td></tr></table></figure><h2><span id="二-小数">二、小数</span></h2><h3><span id="分类">分类</span></h3><p>1.浮点型<br>float(M,D)<br>double(M,D)<br>2.定点型<br>dec(M，D)<br>decimal(M,D)</p><h3><span id="特点">特点</span></h3><p>①<br>M：整数部位 + 小数部位<br>D：小数部位<br>如果超过范围，则插入临界值</p><p>②<br>M和D都可以省略<br>如果是decimal，则M默认为10，D默认为0<br>如果是float和double，则会根据插入的数值的精度来决定精度</p><p>③定点型的精确度较高，如果要求插入数值的精度较高如货币运算等则考虑使用</p><h3><span id="测试m和d">测试M和D</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">DROP TABLE tab_float;<br>CREATE TABLE tab_float(<br>f1 FLOAT,<br>f2 DOUBLE,<br>f3 DECIMAL<br>);<br>SELECT * FROM tab_float;<br>DESC tab_float;<br><br>INSERT INTO tab_float VALUES(123.4523,123.4523,123.4523);<br>INSERT INTO tab_float VALUES(123.456,123.456,123.456);<br>INSERT INTO tab_float VALUES(123.4,123.4,123.4);<br>INSERT INTO tab_float VALUES(1523.4,1523.4,1523.4);<br></code></pre></div></td></tr></table></figure><h3><span id="原则">原则</span></h3><p>所选择的类型越简单越好，能保存数值的型越小越好</p><h2><span id="三-字符型">三、字符型</span></h2><h3><span id="分类">分类</span></h3><p>较短的文本：</p><p>char<br>varchar</p><p>其他：</p><p>binary和varbinary用于保存较短的二进制<br>enum用于保存枚举<br>set用于保存集合</p><p>较长的文本<br>text<br>blob(较大的二进制)</p><h3><span id="特点">特点</span></h3><table><thead><tr><th>写法</th><th>M的意思</th><th>特点</th><th>空间的耗费</th><th>效率</th></tr></thead><tbody><tr><td>char    char(M)</td><td>最大的字符数，可以省略，默认为1</td><td>固定长度的字符</td><td>比较耗费</td><td>高</td></tr><tr><td>varchar    varchar(M)</td><td>最大的字符数，不可以省略</td><td>可变长度的字符</td><td>比较节省</td><td>低</td></tr></tbody></table><h3><span id="例子">例子</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE tab_char(<br>c1 ENUM(&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;)<br>);<br><br>INSERT INTO tab_char VALUES(&#x27;a&#x27;);<br>INSERT INTO tab_char VALUES(&#x27;b&#x27;);<br>INSERT INTO tab_char VALUES(&#x27;c&#x27;);<br>INSERT INTO tab_char VALUES(&#x27;m&#x27;);<br>INSERT INTO tab_char VALUES(&#x27;A&#x27;);<br><br>SELECT * FROM tab_set;<br><br>CREATE TABLE tab_set(<br><br>s1 SET(&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;)<br>    <br>);<br>INSERT INTO tab_set VALUES(&#x27;a&#x27;);<br>INSERT INTO tab_set VALUES(&#x27;A,B&#x27;);<br>INSERT INTO tab_set VALUES(&#x27;a,c,d&#x27;);<br></code></pre></div></td></tr></table></figure><h2><span id="四-日期型">四、日期型</span></h2><h3><span id="分类">分类</span></h3><p>date保存日期<br>time 只保存时间<br>year只保存年</p><p>datetime保存日期+时间<br>timestamp保存日期+时间</p><h3><span id="特点">特点</span></h3><table><thead><tr><th>类型</th><th>字节</th><th>范围</th><th>时区等的影响</th></tr></thead><tbody><tr><td>datetime</td><td>8</td><td>1000——9999</td><td>不受</td></tr><tr><td>timestamp</td><td>4</td><td>1970-2038</td><td>受</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">CREATE TABLE tab_date(<br>t1 DATETIME,<br>t2 TIMESTAMP<br>);<br><br>INSERT INTO tab_date VALUES(NOW(),NOW());<br><br>SELECT * FROM tab_date;<br><br>SHOW VARIABLES LIKE &#x27;time_zone&#x27;;<br><br>SET time_zone=&#x27;+9:00&#x27;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-14-库和表的管理</title>
    <link href="/2021/07/10/MySQL-14-%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E7%AE%A1%E7%90%86/"/>
    <url>/2021/07/10/MySQL-14-%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1><span id="库和表的管理">库和表的管理</span></h1><!-- toc --><ul><li><a href="#ddl%E4%BB%8B%E7%BB%8D">DDL介绍</a></li><li><a href="#%E4%B8%80-%E5%BA%93%E7%9A%84%E7%AE%A1%E7%90%86">一、库的管理</a><ul><li><a href="#1-%E5%BA%93%E7%9A%84%E5%88%9B%E5%BB%BA">1、库的创建</a><ul><li><a href="#%E8%AF%AD%E6%B3%95">语法：</a></li><li><a href="#%E4%BE%8B%E5%AD%90">例子：</a></li></ul></li><li><a href="#2-%E5%BA%93%E7%9A%84%E4%BF%AE%E6%94%B9">2、库的修改</a></li><li><a href="#%E6%9B%B4%E6%94%B9%E5%BA%93%E7%9A%84%E5%AD%97%E7%AC%A6%E9%9B%86">更改库的字符集</a></li><li><a href="#3-%E5%BA%93%E7%9A%84%E5%88%A0%E9%99%A4">3、库的删除</a></li></ul></li><li><a href="#%E4%BA%8C-%E8%A1%A8%E7%9A%84%E7%AE%A1%E7%90%86">二、表的管理</a><ul><li><a href="#1%E8%A1%A8%E7%9A%84%E5%88%9B%E5%BB%BA">1.表的创建 ★</a><ul><li><a href="#%E8%AF%AD%E6%B3%95">语法</a><ul><li><a href="#%E4%BE%8B%E5%AD%90">例子</a></li></ul></li></ul></li><li><a href="#2%E8%A1%A8%E7%9A%84%E4%BF%AE%E6%94%B9">2.表的修改</a><ul><li><a href="#%E8%AF%AD%E6%B3%95-1">语法</a></li><li><a href="#%E4%BE%8B%E5%AD%90-1">例子</a></li></ul></li><li><a href="#3%E8%A1%A8%E7%9A%84%E5%88%A0%E9%99%A4">3.表的删除</a></li><li><a href="#4%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6">4.表的复制</a></li></ul></li><li><a href="#%E4%BD%9C%E4%B8%9A11-%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%E8%A1%A8">作业11-创建和管理表</a><ul><li><a href="#%E9%97%AE%E9%A2%98">问题</a></li><li><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94">我的解答</a></li></ul></li></ul><!-- tocstop --><h2><span id="ddl介绍">DDL介绍</span></h2><p>数据定义语言</p><p>一、库的管理</p><p>创建、修改、删除</p><p>二、表的管理</p><p>创建、修改、删除</p><p>创建： create<br>修改： alter<br>删除： drop</p><h2><span id="一-库的管理">一、库的管理</span></h2><h3><span id="1-库的创建">1、库的创建</span></h3><h4><span id="语法">语法：</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create database  [if not exists]库名;<br></code></pre></div></td></tr></table></figure><h4><span id="例子">例子：</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例：创建库Books<br><br>CREATE DATABASE IF NOT EXISTS books ;<br></code></pre></div></td></tr></table></figure><h3><span id="2-库的修改">2、库的修改</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">RENAME DATABASE books TO 新库名;<br></code></pre></div></td></tr></table></figure><h3><span id="更改库的字符集">更改库的字符集</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">ALTER DATABASE books CHARACTER SET gbk;<br></code></pre></div></td></tr></table></figure><h3><span id="3-库的删除">3、库的删除</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">DROP DATABASE IF EXISTS books;<br></code></pre></div></td></tr></table></figure><h2><span id="二-表的管理">二、表的管理</span></h2><h3><span id="1表的创建">1.表的创建 ★</span></h3><h4><span id="语法">语法</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create table 表名(<br>列名 列的类型【(长度) 约束】,<br>列名 列的类型【(长度) 约束】,<br>列名 列的类型【(长度) 约束】,<br>...<br>列名 列的类型【(长度) 约束】<br>)<br></code></pre></div></td></tr></table></figure><h5><span id="例子">例子</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例：创建表Book<br><br>CREATE TABLE book(<br>id INT,#编号<br>bName VARCHAR(20),#图书名<br>price DOUBLE,#价格<br>authorId  INT,#作者编号<br>publishDate DATETIME#出版日期<br>);<br><br>DESC book;<br><br>#案例：创建表author<br>CREATE TABLE IF NOT EXISTS author(<br>id INT,<br>au_name VARCHAR(20),<br>nation VARCHAR(10)<br><br>)<br>DESC author;<br></code></pre></div></td></tr></table></figure><h3><span id="2表的修改">2.表的修改</span></h3><h4><span id="语法">语法</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">alter table 表名 add|drop|modify|change column 列名 【列类型 约束】;<br></code></pre></div></td></tr></table></figure><h4><span id="例子">例子</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#①修改列名<br><br>ALTER TABLE book CHANGE COLUMN publishdate pubDate DATETIME;<br><br>#②修改列的类型或约束<br>ALTER TABLE book MODIFY COLUMN pubdate TIMESTAMP;<br><br>#③添加新列<br>ALTER TABLE author ADD COLUMN annual DOUBLE; <br><br>#④删除列<br>ALTER TABLE book_author DROP COLUMN  annual;<br><br>#⑤修改表名<br>ALTER TABLE author RENAME TO book_author;<br><br>DESC book;<br></code></pre></div></td></tr></table></figure><h3><span id="3表的删除">3.表的删除</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">DROP TABLE IF EXISTS book_author;<br><br>SHOW TABLES;<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#通用的写法：<br><br>DROP DATABASE IF EXISTS 旧库名;<br>CREATE DATABASE 新库名;<br><br><br>DROP TABLE IF EXISTS 旧表名;<br>CREATE TABLE  表名();<br></code></pre></div></td></tr></table></figure><h3><span id="4表的复制">4.表的复制</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">INSERT INTO author VALUES<br>(1,&#x27;村上春树&#x27;,&#x27;日本&#x27;),<br>(2,&#x27;莫言&#x27;,&#x27;中国&#x27;),<br>(3,&#x27;冯唐&#x27;,&#x27;中国&#x27;),<br>(4,&#x27;金庸&#x27;,&#x27;中国&#x27;);<br><br>SELECT * FROM Author;<br>SELECT * FROM copy2;<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#1.仅仅复制表的结构<br><br>CREATE TABLE copy LIKE author;<br><br>#2.复制表的结构+数据<br>CREATE TABLE copy2 <br>SELECT * FROM author;<br><br>#只复制部分数据<br>CREATE TABLE copy3<br>SELECT id,au_name<br>FROM author <br>WHERE nation=&#x27;中国&#x27;;<br><br>#仅仅复制某些字段<br><br>CREATE TABLE copy4 <br>SELECT id,au_name<br>FROM author<br>WHERE 0;<br></code></pre></div></td></tr></table></figure><h2><span id="作业11-创建和管理表">作业11-创建和管理表</span></h2><h3><span id="问题">问题</span></h3><p>测 试 </p><ol><li><p>创建表dept1<br>name Null? type<br>id int(7)<br>name varchar(25) </p></li><li><p>将表departments 中的数据插入新表dept2 中 </p></li><li><p>创建表emp5<br>name Null? type<br>id int(7)<br>First_name Varchar (25)<br>Last_name Varchar(25)<br>Dept_id int(7) </p></li><li><p>将列Last_name 的长度增加到 50 </p></li><li><p>根据表employees 创建 employees2 </p></li><li><p>删除表emp5 </p></li><li><p>将表employees2 重命名为emp5 </p></li></ol><p>8 在表dept 和emp5 中添加新列 test_column，并检查所作的操作<br>9.直接删除表emp5 中的列 dept_id </p><h3><span id="我的解答">我的解答</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">1. 创建表dept1 <br>NAME NULL? TYPE <br>id INT(7) <br>NAME VARCHAR(25) <br><br><br>CREATE TABLE dept1(<br>id INT(7),<br>dname VARCHAR(25)<br>);<br><br>DESC dept1;<br><br>2. 将表departments 中的数据插入新表dept2 中 <br>CREATE TABLE dept2<br>SELECT *<br>FROM departments;<br><br>SELECT *<br>FROM dept2;<br><br>3. 创建表emp5 <br>NAME NULL? TYPE <br>id INT(7) <br>First_name VARCHAR (25) <br>Last_name VARCHAR(25) <br>Dept_id INT(7)<br><br>CREATE TABLE emp5(<br>id INT(7),<br>First_name VARCHAR(25),<br>Last_name VARCHAR(25),<br>Dept_id INT(7)<br>);<br><br>DESC emp5;<br><br>4. 将列Last_name 的长度增加到 50<br>ALTER TABLE emp5 MODIFY COLUMN Last_name VARCHAR(50);<br><br>5. 根据表employees 创建 employees2<br>CREATE TABLE employees2 LIKE employees;<br><br>DESC employees2;<br><br>6. 删除表emp5<br>DROP TABLE emp5;<br><br>SHOW TABLES;<br><br>7. 将表employees2 重命名为emp5 <br>ALTER TABLE employees RENAME TO emp5;<br>SHOW TABLES;<br><br>8 在表dept 和emp5 中添加新列 test_column，并检查所作的操作<br>ALTER TABLE dept1 ADD COLUMN test_column INT;<br>ALTER TABLE emp5 ADD COLUMN test_column INT;<br>SELECT *<br>FROM emp5;<br><br>9.直接删除表emp5 中的列 dept_id <br>DESC emp5;<br>ALTER TABLE emp5 DROP COLUMN test_column;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-13-数据的增删改</title>
    <link href="/2021/07/10/MySQL-13-%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9/"/>
    <url>/2021/07/10/MySQL-13-%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9/</url>
    
    <content type="html"><![CDATA[<h1><span id="数据的增删改">数据的增删改</span></h1><!-- toc --><ul><li><a href="#dml%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D">DML语言介绍</a></li><li><a href="#%E4%B8%80-%E6%8F%92%E5%85%A5%E8%AF%AD%E5%8F%A5">一、插入语句</a><ul><li><a href="#%E6%96%B9%E5%BC%8F%E4%B8%80%E7%BB%8F%E5%85%B8%E7%9A%84%E6%8F%92%E5%85%A5%E8%AF%AD%E6%B3%95">方式一：经典的插入——语法</a></li><li><a href="#%E4%BE%8B%E5%AD%90">例子</a></li><li><a href="#%E6%96%B9%E5%BC%8F%E4%BA%8C%E8%AF%AD%E6%B3%95">方式二语法：</a></li><li><a href="#%E4%BE%8B%E5%AD%90-1">例子</a></li><li><a href="#%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%A4%A7pk">两种方式大pk ★</a></li></ul></li><li><a href="#%E4%BA%8C-%E4%BF%AE%E6%94%B9%E8%AF%AD%E5%8F%A5">二、修改语句</a><ul><li><a href="#1%E4%BF%AE%E6%94%B9%E5%8D%95%E8%A1%A8%E7%9A%84%E8%AE%B0%E5%BD%95">1.修改单表的记录★</a></li><li><a href="#2%E4%BF%AE%E6%94%B9%E5%A4%9A%E8%A1%A8%E7%9A%84%E8%AE%B0%E5%BD%95%E8%A1%A5%E5%85%85">2.修改多表的记录【补充】</a></li><li><a href="#%E4%BE%8B%E5%AD%90-2">例子</a></li></ul></li><li><a href="#%E4%B8%89-%E5%88%A0%E9%99%A4%E8%AF%AD%E5%8F%A5">三、删除语句</a><ul><li><a href="#%E6%96%B9%E5%BC%8F%E4%B8%80delete">方式一：delete</a></li><li><a href="#%E6%96%B9%E5%BC%8F%E4%BA%8Ctruncate">方式二：truncate</a></li><li><a href="#%E4%BE%8B%E5%AD%90-3">例子</a></li><li><a href="#delete-pk-truncate%E9%9D%A2%E8%AF%95%E9%A2%98">delete pk truncate【面试题★】</a></li></ul></li><li><a href="#%E4%BD%9C%E4%B8%9A10-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86">作业10-数据处理</a><ul><li><a href="#%E9%97%AE%E9%A2%98">问题</a></li><li><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94">我的解答</a></li></ul></li></ul><!-- tocstop --><h2><span id="dml语言介绍">DML语言介绍</span></h2><p>数据操作语言：<br>插入：insert<br>修改：update<br>删除：delete</p><h2><span id="一-插入语句">一、插入语句</span></h2><h3><span id="方式一经典的插入语法">方式一：经典的插入——语法</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">insert into 表名(列名,...) values(值1,...);<br></code></pre></div></td></tr></table></figure><h3><span id="例子">例子</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT * FROM beauty;<br>#1.插入的值的类型要与列的类型一致或兼容<br>INSERT INTO beauty(id,NAME,sex,borndate,phone,photo,boyfriend_id)<br>VALUES(13,&#x27;唐艺昕&#x27;,&#x27;女&#x27;,&#x27;1990-4-23&#x27;,&#x27;1898888888&#x27;,NULL,2);<br><br>#2.不可以为null的列必须插入值。可以为null的列如何插入值？<br>#方式一：<br>INSERT INTO beauty(id,NAME,sex,borndate,phone,photo,boyfriend_id)<br>VALUES(13,&#x27;唐艺昕&#x27;,&#x27;女&#x27;,&#x27;1990-4-23&#x27;,&#x27;1898888888&#x27;,NULL,2);<br>#方式二：<br>INSERT INTO beauty(id,NAME,sex,phone)<br>VALUES(15,&#x27;娜扎&#x27;,&#x27;女&#x27;,&#x27;1388888888&#x27;);<br><br>#3.列的顺序是否可以调换<br>INSERT INTO beauty(NAME,sex,id,phone)<br>VALUES(&#x27;蒋欣&#x27;,&#x27;女&#x27;,16,&#x27;110&#x27;);<br><br>#4.列数和值的个数必须一致<br><br>INSERT INTO beauty(NAME,sex,id,phone)<br>VALUES(&#x27;关晓彤&#x27;,&#x27;女&#x27;,17,&#x27;110&#x27;);<br><br>#5.可以省略列名，默认所有列，而且列的顺序和表中列的顺序一致<br><br>INSERT INTO beauty<br>VALUES(18,&#x27;张飞&#x27;,&#x27;男&#x27;,NULL,&#x27;119&#x27;,NULL,NULL);<br></code></pre></div></td></tr></table></figure><h3><span id="方式二语法">方式二语法：</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">insert into 表名<br>set 列名=值,列名=值,...<br></code></pre></div></td></tr></table></figure><h3><span id="例子">例子</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">INSERT INTO beauty<br>SET id=19,NAME=&#x27;刘涛&#x27;,phone=&#x27;999&#x27;;<br></code></pre></div></td></tr></table></figure><h3><span id="两种方式大pk">两种方式大pk ★</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#1、方式一支持插入多行,方式二不支持<br><br>INSERT INTO beauty<br>VALUES(23,&#x27;唐艺昕1&#x27;,&#x27;女&#x27;,&#x27;1990-4-23&#x27;,&#x27;1898888888&#x27;,NULL,2)<br>,(24,&#x27;唐艺昕2&#x27;,&#x27;女&#x27;,&#x27;1990-4-23&#x27;,&#x27;1898888888&#x27;,NULL,2)<br>,(25,&#x27;唐艺昕3&#x27;,&#x27;女&#x27;,&#x27;1990-4-23&#x27;,&#x27;1898888888&#x27;,NULL,2);<br><br>#2、方式一支持子查询，方式二不支持<br><br>INSERT INTO beauty(id,NAME,phone)<br>SELECT 26,&#x27;宋茜&#x27;,&#x27;11809866&#x27;;<br><br>INSERT INTO beauty(id,NAME,phone)<br>SELECT id,boyname,&#x27;1234567&#x27;<br>FROM boys WHERE id&lt;3;<br></code></pre></div></td></tr></table></figure><h2><span id="二-修改语句">二、修改语句</span></h2><h3><span id="1修改单表的记录">1.修改单表的记录★</span></h3><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">update 表名<br>set 列=新值,列=新值,...<br>where 筛选条件;<br></code></pre></div></td></tr></table></figure><h3><span id="2修改多表的记录补充">2.修改多表的记录【补充】</span></h3><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">sql92语法：<br>update 表1 别名,表2 别名<br>set 列=值,...<br>where 连接条件<br>and 筛选条件;<br><br>sql99语法：<br>update 表1 别名<br>inner|left|right join 表2 别名<br>on 连接条件<br>set 列=值,...<br>where 筛选条件;<br></code></pre></div></td></tr></table></figure><h3><span id="例子">例子</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">1.修改单表的记录<br>#案例1：修改beauty表中姓唐的女神的电话为13899888899<br><br>UPDATE beauty SET phone = &#x27;13899888899&#x27;<br>WHERE NAME LIKE &#x27;唐%&#x27;;<br><br>#案例2：修改boys表中id好为2的名称为张飞，魅力值 10<br>UPDATE boys SET boyname=&#x27;张飞&#x27;,usercp=10<br>WHERE id=2;<br><br>#2.修改多表的记录<br><br>#案例 1：修改张无忌的女朋友的手机号为114<br><br>UPDATE boys bo<br>INNER JOIN beauty b ON bo.`id`=b.`boyfriend_id`<br>SET b.`phone`=&#x27;119&#x27;,bo.`userCP`=1000<br>WHERE bo.`boyName`=&#x27;张无忌&#x27;;<br><br><br><br>#案例2：修改没有男朋友的女神的男朋友编号都为2号<br><br>UPDATE boys bo<br>RIGHT JOIN beauty b ON bo.`id`=b.`boyfriend_id`<br>SET b.`boyfriend_id`=2<br>WHERE bo.`id` IS NULL;<br><br>SELECT * FROM boys;<br></code></pre></div></td></tr></table></figure><h2><span id="三-删除语句">三、删除语句</span></h2><h3><span id="方式一delete">方式一：delete</span></h3><p>语法：</p><p>1、单表的删除【★】<br>delete from 表名 where 筛选条件</p><p>2、多表的删除【补充】</p><p>sql92语法：<br>delete 表1的别名,表2的别名<br>from 表1 别名,表2 别名<br>where 连接条件<br>and 筛选条件;</p><p>sql99语法：</p><p>delete 表1的别名,表2的别名<br>from 表1 别名<br>inner|left|right join 表2 别名 on 连接条件<br>where 筛选条件;</p><h3><span id="方式二truncate">方式二：truncate</span></h3><p>语法：truncate table 表名;</p><h3><span id="例子">例子</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">方式一：delete<br>#1.单表的删除<br>#案例：删除手机号以9结尾的女神信息<br><br>DELETE FROM beauty WHERE phone LIKE &#x27;%9&#x27;;<br>SELECT * FROM beauty;<br><br>#2.多表的删除<br><br>#案例：删除张无忌的女朋友的信息<br><br>DELETE b<br>FROM beauty b<br>INNER JOIN boys bo ON b.`boyfriend_id` = bo.`id`<br>WHERE bo.`boyName`=&#x27;张无忌&#x27;;<br><br><br>#案例：删除黄晓明的信息以及他女朋友的信息<br>DELETE b,bo<br>FROM beauty b<br>INNER JOIN boys bo ON b.`boyfriend_id`=bo.`id`<br>WHERE bo.`boyName`=&#x27;黄晓明&#x27;;<br><br>#方式二：truncate语句<br><br>#案例：将魅力值&gt;100的男神信息删除<br>TRUNCATE TABLE boys ;<br></code></pre></div></td></tr></table></figure><h3><span id="delete-pk-truncate面试题">delete pk truncate【面试题★】</span></h3><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> delete 可以加where 条件，truncate不能加<br><br><span class="hljs-bullet">2.</span> truncate删除，效率高一丢丢<br><br><span class="hljs-bullet">3.</span> 假如要删除的表中有自增长列，<br>如果用delete删除后，再插入数据，自增长列的值从断点开始，<br>而truncate删除后，再插入数据，自增长列的值从1开始。<br><br><span class="hljs-bullet">4.</span> truncate删除没有返回值，delete删除有返回值<br><br><span class="hljs-bullet">5.</span> truncate删除不能回滚，delete删除可以回滚.<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT * FROM boys;<br><br>DELETE FROM boys;<br>TRUNCATE TABLE boys;<br>INSERT INTO boys (boyname,usercp)<br>VALUES(&#x27;张飞&#x27;,100),(&#x27;刘备&#x27;,100),(&#x27;关云长&#x27;,100);<br></code></pre></div></td></tr></table></figure><h2><span id="作业10-数据处理">作业10-数据处理</span></h2><h3><span id="问题">问题</span></h3><ol><li><p>运行以下脚本创建表 my_employees<br>Create table my_employees(<br> Id int(10),<br> First_name varchar(10),<br> Last_name varchar(10),<br> Userid varchar(10),<br> Salary double(10,2)<br>)<br>create table users(<br> id int,<br> userid varchar(10),<br> department_id int<br>)</p></li><li><p>显示表my_employees 的结构 </p></li><li><p>向 my_employees 表中插入下列数据<br>ID FIRST_NAME LAST_NAME USERID SALARY<br>1 patel Ralph Rpatel 895<br>2 Dancs Betty Bdancs 860<br>3 Biri Ben Bbiri 1100<br>4 Newman Chad Cnewman 750<br>5 Ropeburn Audrey Aropebur 1550 </p></li><li><p>向users 表中插入数据</p><p>1 Rpatel 10<br>2 Bdancs 10<br>3 Bbiri 20<br>4 Cnewman 30 </p><p>5 Aropebur 40  </p></li><li><p>将 3 号员工的last_name 修改为“drelxer” </p></li><li><p>将所有工资少于900 的员工的工资修改为1000 </p></li><li><p>将 userid 为Bbiri 的user 表和 my_employees 表的记录全部删除 </p></li><li><p>删除所有数据 </p></li><li><p>检查所作的修正 </p></li><li><p>清空表my_employees </p></li></ol><h3><span id="我的解答">我的解答</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">1. 运行以下脚本创建表 my_employees<br>CREATE TABLE my_employees( <br>    Id INT(10), <br>    First_name VARCHAR(10), <br>    Last_name VARCHAR(10), <br>    Userid VARCHAR(10), <br>    Salary DOUBLE(10,2) <br>) <br>CREATE TABLE users( <br>    id INT, <br>    userid VARCHAR(10), <br>    department_id INT <br>)<br><br>2. 显示表my_employees 的结构<br>DESC my_employees;<br><br>3. 向 my_employees 表中插入下列数据<br>ID FIRST_NAME LAST_NAME USERID SALARY<br>1 patel Ralph Rpatel 895 <br>2 Dancs Betty Bdancs 860 <br>3 Biri Ben Bbiri 1100 <br>4 Newman Chad Cnewman 750 <br>5 Ropeburn Audrey Aropebur 1550 <br><br><br>SELECT *<br>FROM my_employees;<br><br>INSERT INTO my_employees<br>VALUES(1, &#x27;patel&#x27;, &#x27;Ralph&#x27;, &#x27;Rpatel&#x27;, 895),<br>(2, &#x27;Dancs&#x27;, &#x27;Betty&#x27;, &#x27;Bdancs&#x27;, 860),<br>(3, &#x27;Biri&#x27;, &#x27;Ben&#x27;, &#x27;Bbiri&#x27;, 1100),<br>(4, &#x27;Newman&#x27;, &#x27;Chad&#x27;, &#x27;Cnewman&#x27;, 750),<br>(5, &#x27;Ropeburn&#x27;, &#x27;Audrey&#x27;, &#x27;Aropebur&#x27;, 1550);<br><br>TRUNCATE TABLE my_employees; <br><br>方法二：<br>INSERT INTO my_employees<br>SELECT 1, &#x27;patel&#x27;, &#x27;Ralph&#x27;, &#x27;Rpatel&#x27;, 895 UNION<br>SELECT 2, &#x27;Dancs&#x27;, &#x27;Betty&#x27;, &#x27;Bdancs&#x27;, 860 UNION<br>SELECT 3, &#x27;Biri&#x27;, &#x27;Ben&#x27;, &#x27;Bbiri&#x27;, 1100 UNION<br>SELECT 4, &#x27;Newman&#x27;, &#x27;Chad&#x27;, &#x27;Cnewman&#x27;, 750 UNION<br>SELECT 5, &#x27;Ropeburn&#x27;, &#x27;Audrey&#x27;, &#x27;Aropebur&#x27;, 1550;<br><br>4. 向users 表中插入数据 <br>1 Rpatel 10 <br>2 Bdancs 10 <br>3 Bbiri 20 <br>4 Cnewman 30 <br>5Aropebur40<br><br>DESC users;<br><br>SELECT *<br>FROM users;<br><br>INSERT INTO users VALUES (1,&#x27;Rpatel&#x27;,10),(3,&#x27;Bbiri&#x27;,20),(4,&#x27;Cnewman&#x27;,30),(5,&#x27;Aropebur&#x27;,40);<br><br>5. 将 3 号员工的last_name 修改为“drelxer”<br><br>SELECT *<br>FROM my_employees;<br><br>UPDATE my_employees<br>SET last_name = &#x27;drelxer&#x27;<br>WHERE Id = 3;<br><br>6. 将所有工资少于900 的员工的工资修改为1000<br>UPDATE my_employees<br>SET salary = 1000<br>WHERE salary &lt; 900;<br><br>7. 将 userid 为Bbiri 的USER 表和 my_employees 表的记录全部删除<br>DELETE e,u<br>FROM my_employees e<br>JOIN users u<br>ON e.`Userid` = u.`userid`<br>WHERE e.Userid = &#x27;Bbiri&#x27;<br><br># 也可以用两个delete完成<br><br>8. 删除所有数据<br>DELETE FROM my_employees;<br>DELETE FROM users;<br><br>9. 检查所作的修正<br>SELECT *<br>FROM my_employees;<br><br>SELECT *<br>FROM users;<br><br>10. 清空表my_employees <br>TRUNCATE my_employees;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-12-联合查询</title>
    <link href="/2021/07/10/MySQL-12-%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2/"/>
    <url>/2021/07/10/MySQL-12-%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h1><span id="联合查询">联合查询</span></h1><!-- toc --><ul><li><a href="#%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2">联合查询</a><ul><li><a href="#%E6%8F%8F%E8%BF%B0">描述</a></li><li><a href="#%E8%AF%AD%E6%B3%95">语法</a></li><li><a href="#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">应用场景</a></li><li><a href="#%E7%89%B9%E7%82%B9">特点：★</a></li><li><a href="#%E4%BE%8B%E5%AD%90">例子</a></li></ul></li></ul><!-- tocstop --><h2><span id="联合查询">联合查询</span></h2><h3><span id="描述">描述</span></h3><p>union 联合</p><p>合并：将多条查询语句的结果合并成一个结果</p><h3><span id="语法">语法</span></h3><p>查询语句1<br>union<br>查询语句2<br>union<br>…</p><h3><span id="应用场景">应用场景</span></h3><p>要查询的结果来自于多个表，且多个表没有直接的连接关系，但查询的信息一致时</p><h3><span id="特点">特点：★</span></h3><p>1、要求多条查询语句的查询列数是一致的！<br>2、要求多条查询语句的查询的每一列的类型和顺序最好一致<br>3、union关键字默认去重，如果使用union all 可以包含重复项</p><h3><span id="例子">例子</span></h3><p>#引入的案例：查询部门编号&gt;90或邮箱包含a的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"><br>SELECT * FROM employees WHERE email LIKE &#x27;%a%&#x27; OR department_id&gt;90;;<br><br>SELECT * FROM employees  WHERE email LIKE &#x27;%a%&#x27;<br>UNION<br>SELECT * FROM employees  WHERE department_id&gt;90;<br></code></pre></div></td></tr></table></figure><p>#案例：查询中国用户中男性的信息以及外国用户中年男性的用户信息</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT id,cname FROM t_ca WHERE csex=&#x27;男&#x27;<br>UNION ALL<br>SELECT t_id,tname FROM t_ua WHERE tGender=&#x27;male&#x27;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-11-分页查询</title>
    <link href="/2021/07/10/MySQL-11-%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/"/>
    <url>/2021/07/10/MySQL-11-%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h1><span id="分页查询">分页查询</span></h1><!-- toc --><ul><li><a href="#%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2">分页查询</a><ul><li><a href="#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">应用场景</a></li><li><a href="#%E8%AF%AD%E6%B3%95">语法</a></li><li><a href="#%E7%89%B9%E7%82%B9">特点</a></li><li><a href="#%E4%BE%8B%E5%AD%90">例子</a></li></ul></li><li><a href="#%E4%B9%A0%E9%A2%98">习题</a><ul><li><a href="#%E6%B5%8B%E8%AF%95%E9%A2%983">测试题3</a></li><li><a href="#%E5%AD%90%E6%9F%A5%E8%AF%A2%E7%BB%83%E4%B9%A0%E9%A2%98">子查询练习题</a></li><li><a href="#%E4%BD%9C%E4%B8%9A%E4%B9%A0%E9%A2%98">作业习题</a></li></ul></li></ul><!-- tocstop --><h2><span id="分页查询">分页查询</span></h2><h3><span id="应用场景">应用场景</span></h3><p>当我们数据特别多的时候，一页显示不全，就需要分页提交sql请求。</p><h3><span id="语法">语法</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select 查询列表<br>from 表<br>【join type join 表2<br>on 连接条件<br>where 筛选条件<br>group by 分组字段<br>having 分组后海选<br>order by 排序的字段<br>limit offset,size;<br><br>offset要显条目的起始索引（起始索引从0开始）<br>size 要显示的条目个数<br></code></pre></div></td></tr></table></figure><h3><span id="特点">特点</span></h3><p>①limit语句放在查询语句的最后<br>②公式<br>要显示的页数 page，每页的条目数size</p><p>select 查询列表<br>from 表<br>limit (page-1)*size,size;</p><p>size=10<br>page<br>1    0<br>2    10<br>3    20</p><h3><span id="例子">例子</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例1：查询前五条员工信息<br><br><br>SELECT * FROM  employees LIMIT 0,5;<br>SELECT * FROM  employees LIMIT 5;<br><br><br>#案例2：查询第11条——第25条<br>SELECT * FROM  employees LIMIT 10,15;<br><br><br>#案例3：有奖金的员工信息，并且工资较高的前10名显示出来<br>SELECT <br>    * <br>FROM<br>    employees <br>WHERE commission_pct IS NOT NULL <br>ORDER BY salary DESC <br>LIMIT 10 ;<br></code></pre></div></td></tr></table></figure><h2><span id="习题">习题</span></h2><h3><span id="测试题3">测试题3</span></h3><p><img src="https://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210711181056.png" alt="image-20210711181049002"></p><p><img src="https://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210711181057.png" alt="image-20210711181057229"></p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select strcat(eamil, 1, instr(&#x27;@&#x27;) - 1) 用户名<br>from stuinfo;<br></code></pre></div></td></tr></table></figure><p><img src="https://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210711181105.png" alt="image-20210711181105771"></p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select count(*), sex<br>from stuinfo<br>group by sex;<br></code></pre></div></td></tr></table></figure><p><img src="https://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210711181110.png" alt="image-20210711181110479"></p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select name, gradeName<br>from stuinfo s inner join grade g<br>on s.gradeId = g.id<br>where age &gt; 18;<br></code></pre></div></td></tr></table></figure><p><img src="https://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210711181208.png" alt="image-20210711181208376"></p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"># 嵌套查询<br><br>#1. 先按年级分组找一下每个年级的最小年龄<br>select min(age), grade<br>from stuinfo<br>group by gradeId<br><br>#2. 在1的结果上筛选<br>select min(age), grade<br>from stuinfo<br>group by gradeId<br>having min(age) &gt; 20<br></code></pre></div></td></tr></table></figure><p><img src="https://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210711181214.png" alt="image-20210711181214209"></p><p><img src="https://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210711184318.png" alt="image-20210711184318865"></p><h3><span id="子查询练习题">子查询练习题</span></h3><p><img src="https://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210711185416.png" alt="image-20210711185416671"></p><p>我的解答</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">1. 查询工资最低的员工信息：last_name, salary<br>SELECT last_name, salary<br>FROM employees<br>WHERE salary = (<br>SELECT MIN(salary)<br>FROM employees<br>);<br><br>2. 查询平均工资最低的部门信息<br>方法一：<br>①查询各部门的平均工资<br>SELECT AVG(salary) ag<br>FROM employees<br>GROUP BY department_id<br><br>②在这个表中找最低的平均工资<br>SELECT MIN(ag) min_avg_salary<br>FROM (<br>SELECT AVG(salary) ag<br>FROM employees<br>GROUP BY department_id<br>) avg_salary;<br><br>③找最低平均工资对应的部门编号<br>SELECT department_id<br>FROM employees<br>GROUP BY department_id<br>HAVING AVG(salary) = (<br>SELECT MIN(ag) min_avg_salary<br>FROM (<br>SELECT AVG(salary) ag<br>FROM employees<br>GROUP BY department_id<br>) avg_salary<br>);<br><br>④查询该部门编号的部门信息<br>SELECT *<br>FROM departments d<br>WHERE department_id IN (<br>SELECT department_id<br>FROM employees<br>GROUP BY department_id<br>HAVING AVG(salary) = (<br>SELECT MIN(ag) min_avg_salary<br>FROM (<br>SELECT AVG(salary) ag<br>FROM employees<br>GROUP BY department_id<br>) avg_salary<br>)<br>)<br><br>方法二：<br>①查询每个部门的平均工资<br>SELECT AVG(salary),department_id<br>FROM employees<br>GROUP BY department_id;<br><br>②按平均工资升序排序后，截取第一行<br>SELECT department_id<br>FROM employees<br>GROUP BY department_id<br>ORDER BY AVG(salary)<br>LIMIT 1;<br><br>③查询该部门编号的部门信息<br>SELECT *<br>FROM departments<br>WHERE department_id = (<br>SELECT department_id<br>FROM employees<br>GROUP BY department_id<br>ORDER BY AVG(salary)<br>LIMIT 1<br>);<br><br>3. 查询平均工资最低的部门信息和该部门的平均工资<br>我的方法：<br>① 查询各部门的平均工资<br>SELECT AVG(salary)<br>FROM `employees`<br>GROUP BY department_id<br>② 找到最低的平均工资的部门编号和这个部门的平均工资<br>SELECT department_id, AVG(salary)<br>FROM `employees`<br>GROUP BY department_id<br>ORDER BY AVG(salary)<br>LIMIT 1<br>③ 部门信息显示出来，平均工资显示出来<br>SELECT *,(<br>SELECT AVG(salary)<br>FROM `employees`<br>GROUP BY department_id<br>ORDER BY AVG(salary)<br>LIMIT 1<br>) AS min_salary<br>FROM departments<br>WHERE department_id = (<br>SELECT department_id<br>FROM `employees`<br>GROUP BY department_id<br>ORDER BY AVG(salary)<br>LIMIT 1<br>)<br>婷婷姐方法：<br>① 查询各部门的平均工资<br>SELECT AVG(salary)<br>FROM `employees`<br>GROUP BY department_id<br>② 找到最低的平均工资的部门编号和这个部门的平均工资<br>SELECT department_id, AVG(salary)<br>FROM `employees`<br>GROUP BY department_id<br>ORDER BY AVG(salary)<br>LIMIT 1<br>③ 相关子查询，给他连一下<br>SELECT d.*, t2.avg_salary<br>FROM departments d, (<br>SELECT department_id, AVG(salary) avg_salary<br>FROM `employees`<br>GROUP BY department_id<br>ORDER BY AVG(salary)<br>LIMIT 1<br>) t2<br>WHERE t2.department_id = d.department_id;<br><br>4. 查询平均工资最高的job信息<br>① 按job分类，得到平均工资<br>SELECT AVG(salary),job_id<br>FROM employees<br>GROUP BY job_id<br>② 得到最高的平均工资<br>SELECT MAX(avg_salary)<br>FROM (<br>SELECT AVG(salary) avg_salary,job_id<br>FROM employees<br>GROUP BY job_id<br>) t1<br>③ 找到这个平均工资是哪个job_id的<br>SELECT job_id<br>FROM employees<br>GROUP BY job_id<br>HAVING AVG(salary) = (<br>SELECT MAX(avg_salary)<br>FROM (<br>SELECT AVG(salary) avg_salary,job_id<br>FROM employees<br>GROUP BY job_id<br>) t1<br>)<br>④ 查询该job_id的所有信息<br>SELECT j.*<br>FROM jobs j<br>WHERE job_id IN (<br>SELECT job_id<br>FROM employees<br>GROUP BY job_id<br>HAVING AVG(salary) = (<br>SELECT MAX(avg_salary)<br>FROM (<br>SELECT AVG(salary) avg_salary,job_id<br>FROM employees<br>GROUP BY job_id<br>) t1<br>)<br>);<br><br>方法二：<br>① 按job分类，得到平均工资<br>SELECT AVG(salary),job_id<br>FROM employees<br>GROUP BY job_id<br>② 找到最高的job_id<br>SELECT job_id<br>FROM employees<br>GROUP BY job_id<br>ORDER BY AVG(salary)<br>LIMIT 0,1<br>③显示出该job_id的job信息<br>SELECT j.*<br>FROM jobs j<br>WHERE job_id = (<br>SELECT job_id<br>FROM employees<br>GROUP BY job_id<br>ORDER BY AVG(salary)<br>LIMIT 0,1<br>);<br><br>5. 查询平均工资高于公司平均工资的部门有哪些？<br>① 找到公司的平均工资<br>SELECT AVG(salary)<br>FROM employees<br>② 找到 各部门的平均工资，筛选大于公司平均公司的部门编号<br>SELECT department_id<br>FROM employees<br>GROUP BY department_id<br>HAVING AVG(salary) &gt; (<br>SELECT AVG(salary) avg_salary<br>FROM employees<br>)<br><br>6. 查询出公司中所有manager的详细信息<br>方法一：<br>SELECT DISTINCT m.*<br>FROM `employees` e, `employees` m<br>WHERE e.`manager_id` = m.`employee_id`<br><br>方法二：<br>① 找到所有管理员的员工编号<br>SELECT DISTINCT manager_id<br>FROM employees<br><br>② 筛选员工编号在管理员员工编号的集合中的<br>SELECT *<br>FROM employees<br>WHERE employee_id IN (<br>SELECT DISTINCT manager_id<br>FROM employees<br>)<br><br>7. 各个部门中最高工资中 最低的那个部门的最低工资是多少<br>方法一：<br>① 按部门分组，得到每个部门的最高工资<br>SELECT MAX(salary) a<br>FROM employees<br>GROUP BY department_id<br>② 从①中找到最低的那个数值<br>SELECT MIN(a)<br>FROM (<br>SELECT MAX(salary) a<br>FROM employees<br>GROUP BY department_id<br>) t1<br>③ 找到部门最高工资 = ②的部门<br>SELECT department_id<br>FROM employees<br>GROUP BY department_id<br>HAVING MAX(salary) = (<br>SELECT MIN(a)<br>FROM (<br>SELECT MAX(salary) a<br>FROM employees<br>GROUP BY department_id<br>) t1<br>)<br>④ 找到该部门的最低工资<br>SELECT MIN(salary), department_id<br>FROM employees<br>WHERE department_id = (<br>SELECT department_id<br>FROM employees<br>GROUP BY department_id<br>HAVING MAX(salary) = (<br>SELECT MIN(a)<br>FROM (<br>SELECT MAX(salary) a<br>FROM employees<br>GROUP BY department_id<br>) t1<br>)<br>)<br>GROUP BY department_id<br><br>方法二:<br>① 按部门分组，得到每个部门的最高工资<br>SELECT MAX(salary), department_id<br>FROM employees<br>GROUP BY department_id<br>② 在①中找最低的部门编号<br>SELECT department_id<br>FROM employees<br>GROUP BY department_id<br>ORDER BY MAX(salary)<br>LIMIT 0,1<br>③ 找该部门的全部员工的工资中最低的<br>SELECT MIN(salary)<br>FROM employees<br>WHERE department_id = (<br>SELECT department_id<br>FROM employees<br>GROUP BY department_id<br>ORDER BY MAX(salary)<br>LIMIT 0,1<br>)<br><br>8. 查询平均工资最高的部门的manager的详细信息：last_name, department_id, email, salary<br>① 按部门分类找平均工资<br>SELECT AVG(salary)<br>FROM employees<br>GROUP BY department_id<br>② 找平均工资最高的部门编号<br>SELECT department_id<br>FROM employees<br>GROUP BY department_id<br>ORDER BY AVG(salary) DESC<br>LIMIT 0, 1<br>③ 找该部门的管理者编号<br>SELECT manager_id<br>FROM departments<br>WHERE department_id = (<br>SELECT department_id<br>FROM employees<br>GROUP BY department_id<br>ORDER BY AVG(salary) DESC<br>LIMIT 0, 1<br>)<br>④ 找到该编号的员工的全部信息<br>SELECT last_name, department_id, email, salary<br>FROM employees<br>WHERE employee_id = (<br>SELECT manager_id<br>FROM departments<br>WHERE department_id = (<br>SELECT department_id<br>FROM employees<br>GROUP BY department_id<br>ORDER BY AVG(salary) DESC<br>LIMIT 0, 1<br>)<br>);<br><br></code></pre></div></td></tr></table></figure><h3><span id="作业习题">作业习题</span></h3><p>==P99</p>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-10-子查询</title>
    <link href="/2021/07/10/MySQL-10-%E5%AD%90%E6%9F%A5%E8%AF%A2/"/>
    <url>/2021/07/10/MySQL-10-%E5%AD%90%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h1><span id="子查询">子查询</span></h1><!-- toc --><ul><li><a href="#%E5%AD%90%E6%9F%A5%E8%AF%A2">子查询</a><ul><li><a href="#%E5%90%AB%E4%B9%89">含义</a></li><li><a href="#%E5%88%86%E7%B1%BB">分类</a><ul><li><a href="#%E4%B8%80-where%E6%88%96having%E5%90%8E%E9%9D%A2">一、where或having后面</a><ul><li><a href="#1%E6%A0%87%E9%87%8F%E5%AD%90%E6%9F%A5%E8%AF%A2">1.标量子查询★</a></li><li><a href="#2%E5%88%97%E5%AD%90%E6%9F%A5%E8%AF%A2%E5%A4%9A%E8%A1%8C%E5%AD%90%E6%9F%A5%E8%AF%A2">2.列子查询（多行子查询）★</a></li><li><a href="#3-%E8%A1%8C%E5%AD%90%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%E9%9B%86%E4%B8%80%E8%A1%8C%E5%A4%9A%E5%88%97%E6%88%96%E5%A4%9A%E8%A1%8C%E5%A4%9A%E5%88%97">3、行子查询（结果集一行多列或多行多列）</a></li></ul></li><li><a href="#%E4%BA%8C-select%E5%90%8E%E9%9D%A2">二、select后面</a></li><li><a href="#%E4%B8%89-from%E5%90%8E%E9%9D%A2">三、from后面</a></li><li><a href="#%E5%9B%9B-exists%E5%90%8E%E9%9D%A2%E7%9B%B8%E5%85%B3%E5%AD%90%E6%9F%A5%E8%AF%A2">四、exists后面（相关子查询）</a></li></ul></li><li><a href="#%E4%BD%9C%E4%B8%9A9-%E5%AD%90%E6%9F%A5%E8%AF%A2">作业9-子查询</a><ul><li><a href="#%E9%97%AE%E9%A2%98">问题</a></li><li><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94">我的解答</a></li></ul></li></ul></li></ul><!-- tocstop --><h2><span id="子查询">子查询</span></h2><h3><span id="含义">含义</span></h3><p>出现在其他语句中的select语句，称为子查询或内查询<br>外部的查询语句，称为主查询或外查询</p><h3><span id="分类">分类</span></h3><p>按子查询出现的位置：<br>select后面：<br>仅仅支持标量子查询</p><p>from后面：<br>支持表子查询<br>where或having后面：★<br>标量子查询（单行） √<br>列子查询  （多行） √</p><p>行子查询</p><p>exists后面（相关子查询）<br>表子查询<br>按结果集的行列数不同：<br>标量子查询（结果集只有一行一列）<br>列子查询（结果集只有一列多行）<br>行子查询（结果集有一行多列）<br>表子查询（结果集一般为多行多列）</p><h4><span id="一-where或having后面">一、where或having后面</span></h4><p>1、标量子查询（单行子查询）<br>2、列子查询（多行子查询）<br>3、行子查询（多列多行）</p><p>特点：<br>①子查询放在小括号内<br>②子查询一般放在条件的右侧<br>③标量子查询，一般搭配着单行操作符使用</p><blockquote><p>&lt; &gt;= &lt;= = &lt;&gt;</p></blockquote><p>列子查询，一般搭配着多行操作符使用<br>in、any/some、all</p><img src="https://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210709230410.png" alt="image-20210709230410380" style="zoom: 67%;"><p>④子查询的执行优先于主查询执行，主查询的条件用到了子查询的结果</p><h5><span id="1标量子查询">1.标量子查询★</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例1：谁的工资比 Abel 高?<br><br>#①查询Abel的工资<br>SELECT salary<br>FROM employees<br>WHERE last_name = &#x27;Abel&#x27;<br><br>#②查询员工的信息，满足 salary&gt;①结果<br>SELECT *<br>FROM employees<br>WHERE salary&gt;(<br><br>SELECT salary<br>FROM employees<br>WHERE last_name = &#x27;Abel&#x27;<br><br>);<br><br>#案例2：返回job_id与141号员工相同，salary比143号员工多的员工 姓名，job_id 和工资<br><br>#①查询141号员工的job_id<br>SELECT job_id<br>FROM employees<br>WHERE employee_id = 141<br><br>#②查询143号员工的salary<br>SELECT salary<br>FROM employees<br>WHERE employee_id = 143<br><br>#③查询员工的姓名，job_id 和工资，要求job_id=①并且salary&gt;②<br><br>SELECT last_name,job_id,salary<br>FROM employees<br>WHERE job_id = (<br>SELECT job_id<br>FROM employees<br>WHERE employee_id = 141<br>) AND salary&gt;(<br>SELECT salary<br>FROM employees<br>WHERE employee_id = 143<br><br>);<br><br><br>#案例3：返回公司工资最少的员工的last_name,job_id和salary<br><br>#①查询公司的 最低工资<br>SELECT MIN(salary)<br>FROM employees<br><br>#②查询last_name,job_id和salary，要求salary=①<br>SELECT last_name,job_id,salary<br>FROM employees<br>WHERE salary=(<br>SELECT MIN(salary)<br>FROM employees<br>);<br><br><br>#案例4：查询最低工资大于50号部门最低工资的部门id和其最低工资<br><br>#①查询50号部门的最低工资<br>SELECT  MIN(salary)<br>FROM employees<br>WHERE department_id = 50<br><br>#②查询每个部门的最低工资<br><br>SELECT MIN(salary),department_id<br>FROM employees<br>GROUP BY department_id<br><br>#③ 在②基础上筛选，满足min(salary)&gt;①<br>SELECT MIN(salary),department_id<br>FROM employees<br>GROUP BY department_id<br>HAVING MIN(salary)&gt;(<br>SELECT  MIN(salary)<br>FROM employees<br>WHERE department_id = 50<br><br><br>);<br><br>#非法使用标量子查询<br><br>SELECT MIN(salary),department_id<br>FROM employees<br>GROUP BY department_id<br>HAVING MIN(salary)&gt;(<br>SELECT  salary<br>FROM employees<br>WHERE department_id = 250<br><br><br>);<br></code></pre></div></td></tr></table></figure><h5><span id="2列子查询多行子查询">2.列子查询（多行子查询）★</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例1：返回location_id是1400或1700的部门中的所有员工姓名<br><br>#①查询location_id是1400或1700的部门编号<br>SELECT DISTINCT department_id<br>FROM departments<br>WHERE location_id IN(1400,1700)<br><br>#②查询员工姓名，要求部门号是①列表中的某一个<br><br>SELECT last_name<br>FROM employees<br>WHERE department_id  &lt;&gt;ALL(<br>SELECT DISTINCT department_id<br>FROM departments<br>WHERE location_id IN(1400,1700)<br>);<br><br>#案例2：返回其它工种中比job_id为‘IT_PROG’工种任一工资低的员工的员工号、姓名、job_id 以及salary<br><br>#①查询job_id为‘IT_PROG’部门任一工资<br><br>SELECT DISTINCT salary<br>FROM employees<br>WHERE job_id = &#x27;IT_PROG&#x27;<br><br>#②查询员工号、姓名、job_id 以及salary，salary&lt;(①)的任意一个<br>SELECT last_name,employee_id,job_id,salary<br>FROM employees<br>WHERE salary&lt;ANY(<br>SELECT DISTINCT salary<br>FROM employees<br>WHERE job_id = &#x27;IT_PROG&#x27;<br><br>) AND job_id&lt;&gt;&#x27;IT_PROG&#x27;;<br><br>#或<br>SELECT last_name,employee_id,job_id,salary<br>FROM employees<br>WHERE salary&lt;(<br>SELECT MAX(salary)<br>FROM employees<br>WHERE job_id = &#x27;IT_PROG&#x27;<br><br>) AND job_id&lt;&gt;&#x27;IT_PROG&#x27;;<br><br><br>#案例3：返回其它部门中比job_id为‘IT_PROG’部门所有工资都低的员工   的员工号、姓名、job_id 以及salary<br><br>SELECT last_name,employee_id,job_id,salary<br>FROM employees<br>WHERE salary&lt;ALL(<br>SELECT DISTINCT salary<br>FROM employees<br>WHERE job_id = &#x27;IT_PROG&#x27;<br><br>) AND job_id&lt;&gt;&#x27;IT_PROG&#x27;;<br><br>#或<br><br>SELECT last_name,employee_id,job_id,salary<br>FROM employees<br>WHERE salary&lt;(<br>SELECT MIN( salary)<br>FROM employees<br>WHERE job_id = &#x27;IT_PROG&#x27;<br><br>) AND job_id&lt;&gt;&#x27;IT_PROG&#x27;;<br></code></pre></div></td></tr></table></figure><h5><span id="3-行子查询结果集一行多列或多行多列">3、行子查询（结果集一行多列或多行多列）</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例：查询员工编号最小并且工资最高的员工信息<br><br>SELECT * <br>FROM employees<br>WHERE (employee_id,salary)=(<br>SELECT MIN(employee_id),MAX(salary)<br>FROM employees<br>);<br><br>#①查询最小的员工编号<br>SELECT MIN(employee_id)<br>FROM employees<br><br><br>#②查询最高工资<br>SELECT MAX(salary)<br>FROM employees<br><br><br>#③查询员工信息<br>SELECT *<br>FROM employees<br>WHERE employee_id=(<br>SELECT MIN(employee_id)<br>FROM employees<br><br><br>)AND salary=(<br>SELECT MAX(salary)<br>FROM employees<br><br>);<br></code></pre></div></td></tr></table></figure><h4><span id="二-select后面">二、select后面</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">/*<br>仅仅支持标量子查询<br>*/<br><br>#案例：查询每个部门的员工个数<br><br><br>SELECT d.*,(<br><br>SELECT COUNT(*)<br>FROM employees e<br>WHERE e.department_id = d.`department_id`<br> ) 个数<br> FROM departments d;<br><br><br> #案例2：查询员工号=102的部门名<br><br>SELECT (<br>SELECT department_name,e.department_id<br>FROM departments d<br>INNER JOIN employees e<br>ON d.department_id=e.department_id<br>WHERE e.employee_id=102<br><br>) 部门名;<br></code></pre></div></td></tr></table></figure><h4><span id="三-from后面">三、from后面</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">/*<br>将子查询结果充当一张表，要求必须起别名<br>*/<br><br>#案例：查询每个部门的平均工资的工资等级<br>#①查询每个部门的平均工资<br>SELECT AVG(salary),department_id<br>FROM employees<br>GROUP BY department_id<br><br><br>SELECT * FROM job_grades;<br><br><br>#②连接①的结果集和job_grades表，筛选条件平均工资 between lowest_sal and highest_sal<br><br>SELECT  ag_dep.*,g.`grade_level`<br>FROM (<br>SELECT AVG(salary) ag,department_id<br>FROM employees<br>GROUP BY department_id<br>) ag_dep<br>INNER JOIN job_grades g<br>ON ag_dep.ag BETWEEN lowest_sal AND highest_sal;<br></code></pre></div></td></tr></table></figure><h4><span id="四-exists后面相关子查询">四、exists后面（相关子查询）</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">/*<br>语法：<br>exists(完整的查询语句)<br>结果：<br>1或0<br>*/<br><br>SELECT EXISTS(SELECT employee_id FROM employees WHERE salary=300000);<br><br>#案例1：查询有员工的部门名<br><br>#in<br>SELECT department_name<br>FROM departments d<br>WHERE d.`department_id` IN(<br>SELECT department_id<br>FROM employees<br><br>)<br><br>#exists<br><br>SELECT department_name<br>FROM departments d<br>WHERE EXISTS(<br>SELECT *<br>FROM employees e<br>WHERE d.`department_id`=e.`department_id`<br><br><br>);<br><br>#案例2：查询没有女朋友的男神信息<br><br>#in<br><br>SELECT bo.*<br>FROM boys bo<br>WHERE bo.id NOT IN(<br>SELECT boyfriend_id<br>FROM beauty<br>)<br><br>#exists<br>SELECT bo.*<br>FROM boys bo<br>WHERE NOT EXISTS(<br>SELECT boyfriend_id<br>FROM beauty b<br>WHERE bo.`id`=b.`boyfriend_id`<br><br>);<br></code></pre></div></td></tr></table></figure><h3><span id="作业9-子查询">作业9-子查询</span></h3><h4><span id="问题">问题</span></h4><ol><li>查询和Zlotkey 相同部门的员工姓名和工资 </li><li>查询工资比公司平均工资高的员工的员工号，姓名和工资。 </li><li>查询各部门中工资比本部门平均工资高的员工的员工号, 姓名和工资 </li><li>查询和姓名中包含字母 u 的员工在相同部门的员工的员工号和姓名 </li><li>查询在部门的location_id 为1700 的部门工作的员工的员工号 </li><li>查询管理者是King 的员工姓名和工资 </li><li>查询工资最高的员工的姓名，要求 first_name 和 last_name 显示为一列，列名为 姓.名 </li></ol><h4><span id="我的解答">我的解答</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">1. 查询和Zlotkey相同部门的员工姓名和工资 <br>SELECT last_name, salary<br>FROM `employees`<br>WHERE department_id = (<br>SELECT department_id<br>FROM employees<br>WHERE last_name = &#x27;Zlotkey&#x27;<br>);<br><br>2. 查询工资比公司平均工资高的员工的员工号，姓名和工资。<br>SELECT employee_id, last_name, salary<br>FROM employees<br>WHERE salary &gt; (<br>SELECT AVG(salary)<br>FROM employees<br>)<br><br>3. 查询各部门中工资比本部门平均工资高的员工的员工号, 姓名和工资<br>我的答案:<br>SELECT employee_id, last_name, salary<br>FROM employees e1<br>WHERE salary &gt; (<br>SELECT AVG(salary)<br>FROM employees e2<br>WHERE e1.department_id = e2.department_id<br>GROUP BY department_id<br>);<br><br>婷婷姐答案：<br>SELECT employee_id, last_name, salary<br>FROM employees e<br>INNER JOIN(<br>SELECT AVG(salary) ag, department_id<br>FROM employees f<br>GROUP BY department_id<br>) ag_dep<br>ON e.department_id = ag_dep.department_id<br>WHERE salary &gt; ag_dep.ag;<br><br>4. 查询和姓名中包含字母 u 的员工在相同部门的员工的员工号和姓名<br>SELECT employee_id, last_name<br>FROM employees<br>WHERE department_id IN(<br>SELECT department_id<br>FROM employees<br>WHERE last_name LIKE &#x27;%u%&#x27;<br>);<br> <br>5. 查询在部门的location_id 为1700 的部门工作的员工的员工号 <br>SELECT employee_id<br>FROM employees<br>WHERE department_id IN(<br>SELECT department_id<br>FROM departments<br>WHERE location_id = 1700<br>);<br><br>6. 查询管理者是King 的员工姓名和工资<br>SELECT last_name, salary<br>FROM employees<br>WHERE `manager_id` IN (<br>SELECT `employee_id`<br>FROM `employees`<br>WHERE `last_name` = &#x27;K_ing&#x27;<br>);<br> <br>7. 查询工资最高的员工的姓名，要求 first_name 和 last_name 显示为一列，列名为 姓.名<br>SELECT CONCAT(first_name,last_name) AS &#x27;姓.名&#x27;<br>FROM employees<br>WHERE salary = (<br>SELECT MAX(salary)<br>FROM employees<br>);<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-09-连接</title>
    <link href="/2021/07/10/MySQL-09-%E8%BF%9E%E6%8E%A5/"/>
    <url>/2021/07/10/MySQL-09-%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h1><span id="连接">连接</span></h1><!-- toc --><ul><li><a href="#%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2">连接查询</a><ul><li><a href="#%E5%90%AB%E4%B9%89">含义</a></li><li><a href="#%E5%88%86%E7%B1%BB">分类</a></li><li><a href="#%E4%B8%80-sql92%E6%A0%87%E5%87%86">一、sql92标准</a><ul><li><a href="#1-%E7%AD%89%E5%80%BC%E8%BF%9E%E6%8E%A5">1、等值连接</a></li><li><a href="#2-%E4%B8%BA%E8%A1%A8%E8%B5%B7%E5%88%AB%E5%90%8D">2、为表起别名</a></li><li><a href="#3-%E4%B8%A4%E4%B8%AA%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E8%B0%83%E6%8D%A2">3、两个表的顺序是否可以调换</a></li><li><a href="#4-%E5%8F%AF%E4%BB%A5%E5%8A%A0%E7%AD%9B%E9%80%89">4、可以加筛选</a></li><li><a href="#5-%E5%8F%AF%E4%BB%A5%E5%8A%A0%E5%88%86%E7%BB%84">5、可以加分组</a></li><li><a href="#7-%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E4%B8%89%E8%A1%A8%E8%BF%9E%E6%8E%A5">7、可以实现三表连接？</a></li><li><a href="#8-%E9%9D%9E%E7%AD%89%E5%80%BC%E8%BF%9E%E6%8E%A5">8、非等值连接</a></li><li><a href="#9-%E8%87%AA%E8%BF%9E%E6%8E%A5">9、自连接</a></li></ul></li><li><a href="#%E4%BD%9C%E4%B8%9A7-sql92%E8%BF%9E%E6%8E%A5">作业7-sql92连接</a><ul><li><a href="#%E9%97%AE%E9%A2%98">问题</a></li><li><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94">我的解答</a></li></ul></li><li><a href="#%E4%BA%8C-sql99%E6%A0%87%E5%87%86">二、sql99标准</a></li><li><a href="#%E8%AF%AD%E6%B3%95">语法</a></li><li><a href="#%E5%88%86%E7%B1%BB-1">分类</a></li><li><a href="#%E7%89%B9%E7%82%B9">特点</a></li><li><a href="#%E4%BE%8B%E5%AD%90">例子</a><ul><li><a href="#1-%E7%AD%89%E5%80%BC%E8%BF%9E%E6%8E%A5-1">1、等值连接</a></li><li><a href="#2-%E6%9F%A5%E8%AF%A2%E5%90%8D%E5%AD%97%E4%B8%AD%E5%8C%85%E5%90%ABe%E7%9A%84%E5%91%98%E5%B7%A5%E5%90%8D%E5%92%8C%E5%B7%A5%E7%A7%8D%E5%90%8D%E6%B7%BB%E5%8A%A0%E7%AD%9B%E9%80%89">2. 查询名字中包含e的员工名和工种名（添加筛选）</a></li><li><a href="#3-%E6%9F%A5%E8%AF%A2%E9%83%A8%E9%97%A8%E4%B8%AA%E6%95%B03%E7%9A%84%E5%9F%8E%E5%B8%82%E5%90%8D%E5%92%8C%E9%83%A8%E9%97%A8%E4%B8%AA%E6%95%B0%E6%B7%BB%E5%8A%A0%E5%88%86%E7%BB%84%E7%AD%9B%E9%80%89">3. 查询部门个数&gt;3的城市名和部门个数，（添加分组+筛选）</a></li><li><a href="#4-%E6%9F%A5%E8%AF%A2%E5%93%AA%E4%B8%AA%E9%83%A8%E9%97%A8%E7%9A%84%E5%91%98%E5%B7%A5%E4%B8%AA%E6%95%B03%E7%9A%84%E9%83%A8%E9%97%A8%E5%90%8D%E5%92%8C%E5%91%98%E5%B7%A5%E4%B8%AA%E6%95%B0%E5%B9%B6%E6%8C%89%E4%B8%AA%E6%95%B0%E9%99%8D%E5%BA%8F%E6%B7%BB%E5%8A%A0%E6%8E%92%E5%BA%8F">4. 查询哪个部门的员工个数&gt;3的部门名和员工个数，并按个数降序（添加排序）</a></li><li><a href="#5%E6%9F%A5%E8%AF%A2%E5%91%98%E5%B7%A5%E5%90%8D-%E9%83%A8%E9%97%A8%E5%90%8D-%E5%B7%A5%E7%A7%8D%E5%90%8D%E5%B9%B6%E6%8C%89%E9%83%A8%E9%97%A8%E5%90%8D%E9%99%8D%E5%BA%8F%E6%B7%BB%E5%8A%A0%E4%B8%89%E8%A1%A8%E8%BF%9E%E6%8E%A5">5.查询员工名、部门名、工种名，并按部门名降序（添加三表连接）</a></li><li><a href="#%E4%BA%8C%E9%9D%9E%E7%AD%89%E5%80%BC%E8%BF%9E%E6%8E%A5">二）非等值连接</a></li><li><a href="#%E4%B8%89%E8%87%AA%E8%BF%9E%E6%8E%A5">三）自连接</a></li><li><a href="#%E4%BA%8C-%E5%A4%96%E8%BF%9E%E6%8E%A5">二、外连接</a></li></ul></li><li><a href="#%E4%BD%9C%E4%B8%9A">作业</a><ul><li><a href="#%E9%97%AE%E9%A2%98-1">问题</a></li><li><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94-1">我的解答</a></li></ul></li></ul></li><li><a href="#sql92%E5%92%8C-sql99pk">sql92和 sql99pk</a></li></ul><!-- tocstop --><h2><span id="连接查询">连接查询</span></h2><h3><span id="含义">含义</span></h3><p>又称多表查询，当查询的字段来自于多个表时，就会用到连接查询</p><p>笛卡尔乘积现象：表1 有m行，表2有n行，结果=m*n行</p><p>发生原因：没有有效的连接条件<br>如何避免：添加有效的连接条件</p><h3><span id="分类">分类</span></h3><p>按年代分类：<br>sql92标准:仅仅支持内连接<br>sql99标准【推荐】：支持内连接+外连接（左外和右外）+交叉连接</p><p>按功能分类：<br>内连接：<br>等值连接<br>非等值连接<br>自连接<br>外连接：<br>左外连接<br>右外连接<br>全外连接<br>交叉连接</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT * FROM beauty;<br><br>SELECT * FROM boys;<br><br><br>SELECT NAME,boyName FROM boys,beauty<br>WHERE beauty.boyfriend_id= boys.id;<br></code></pre></div></td></tr></table></figure><h3><span id="一-sql92标准">一、sql92标准</span></h3><h4><span id="1-等值连接">1、等值连接</span></h4><p>① 多表等值连接的结果为多表的交集部分<br>②n表连接，至少需要n-1个连接条件<br>③ 多表的顺序没有要求<br>④一般需要为表起别名<br>⑤可以搭配前面介绍的所有子句使用，比如排序、分组、筛选</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例1：查询女神名和对应的男神名<br>SELECT NAME,boyName <br>FROM boys,beauty<br>WHERE beauty.boyfriend_id= boys.id;<br><br>#案例2：查询员工名和对应的部门名<br><br>SELECT last_name,department_name<br>FROM employees,departments<br>WHERE employees.`department_id`=departments.`department_id`;<br></code></pre></div></td></tr></table></figure><h4><span id="2-为表起别名">2、为表起别名</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">/*<br>①提高语句的简洁度<br>②区分多个重名的字段<br><br>注意：如果为表起了别名，则查询的字段就不能使用原来的表名去限定<br><br>*/<br>#查询员工名、工种号、工种名<br><br>SELECT e.last_name,e.job_id,j.job_title<br>FROM employees  e,jobs j<br>WHERE e.`job_id`=j.`job_id`;<br></code></pre></div></td></tr></table></figure><h4><span id="3-两个表的顺序是否可以调换">3、两个表的顺序是否可以调换</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#查询员工名、工种号、工种名<br><br>SELECT e.last_name,e.job_id,j.job_title<br>FROM jobs j,employees e<br>WHERE e.`job_id`=j.`job_id`;<br></code></pre></div></td></tr></table></figure><h4><span id="4-可以加筛选">4、可以加筛选</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例：查询有奖金的员工名、部门名<br><br>SELECT last_name,department_name,commission_pct<br><br>FROM employees e,departments d<br>WHERE e.`department_id`=d.`department_id`<br>AND e.`commission_pct` IS NOT NULL;<br><br>#案例2：查询城市名中第二个字符为o的部门名和城市名<br><br>SELECT department_name,city<br>FROM departments d,locations l<br>WHERE d.`location_id` = l.`location_id`<br>AND city LIKE &#x27;_o%&#x27;;<br></code></pre></div></td></tr></table></figure><h4><span id="5-可以加分组">5、可以加分组</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例1：查询每个城市的部门个数<br><br>SELECT COUNT(*) 个数,city<br>FROM departments d,locations l<br>WHERE d.`location_id`=l.`location_id`<br>GROUP BY city;<br><br><br>#案例2：查询有奖金的每个部门的部门名和部门的领导编号和该部门的最低工资<br>SELECT department_name,d.`manager_id`,MIN(salary)<br>FROM departments d,employees e<br>WHERE d.`department_id`=e.`department_id`<br>AND commission_pct IS NOT NULL<br>GROUP BY department_name,d.`manager_id`;<br>#6、可以加排序<br><br><br>#案例：查询每个工种的工种名和员工的个数，并且按员工个数降序<br><br>SELECT job_title,COUNT(*)<br>FROM employees e,jobs j<br>WHERE e.`job_id`=j.`job_id`<br>GROUP BY job_title<br>ORDER BY COUNT(*) DESC;<br></code></pre></div></td></tr></table></figure><h4><span id="7-可以实现三表连接">7、可以实现三表连接？</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例：查询员工名、部门名和所在的城市<br><br>SELECT last_name,department_name,city<br>FROM employees e,departments d,locations l<br>WHERE e.`department_id`=d.`department_id`<br>AND d.`location_id`=l.`location_id`<br>AND city LIKE &#x27;s%&#x27;<br><br>ORDER BY department_name DESC;<br></code></pre></div></td></tr></table></figure><h4><span id="8-非等值连接">8、非等值连接</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例1：查询员工的工资和工资级别<br><br><br>SELECT salary,grade_level<br>FROM employees e,job_grades g<br>WHERE salary BETWEEN g.`lowest_sal` AND g.`highest_sal`<br>AND g.`grade_level`=&#x27;A&#x27;;<br><br>/*<br>select salary,employee_id from employees;<br>select * from job_grades;<br>CREATE TABLE job_grades<br>(grade_level VARCHAR(3),<br> lowest_sal  int,<br> highest_sal int);<br><br>INSERT INTO job_grades<br>VALUES (&#x27;A&#x27;, 1000, 2999);<br><br>INSERT INTO job_grades<br>VALUES (&#x27;B&#x27;, 3000, 5999);<br><br>INSERT INTO job_grades<br>VALUES(&#x27;C&#x27;, 6000, 9999);<br><br>INSERT INTO job_grades<br>VALUES(&#x27;D&#x27;, 10000, 14999);<br><br>INSERT INTO job_grades<br>VALUES(&#x27;E&#x27;, 15000, 24999);<br><br>INSERT INTO job_grades<br>VALUES(&#x27;F&#x27;, 25000, 40000);<br><br>*/<br></code></pre></div></td></tr></table></figure><h4><span id="9-自连接">9、自连接</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例：查询 员工名和上级的名称<br><br>SELECT e.employee_id,e.last_name,m.employee_id,m.last_name<br>FROM employees e,employees m<br>WHERE e.`manager_id`=m.`employee_id`;<br><br></code></pre></div></td></tr></table></figure><h3><span id="作业7-sql92连接">作业7-sql92连接</span></h3><h4><span id="问题">问题</span></h4><ol><li>显示所有员工的姓名，部门号和部门名称。 </li><li>查询90 号部门员工的 job_id 和 90 号部门的location_id </li><li>选择所有有奖金的员工的<br>last_name , department_name , location_id , city </li><li>选择city在Toronto工作的员工的<br>last_name , job_id , department_id , department_name </li></ol><p>5.查询每个工种、每个部门的部门名、工种名和最低工资<br>6.查询每个国家下的部门个数大于 2 的国家编号<br>7、选择指定员工的姓名，员工号，以及他的管理者的姓名和员工号，结果类似于下面的格<br>式<br>employees Emp# manager Mgr#<br>kochhar 101 king 100 </p><h4><span id="我的解答">我的解答</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">1. 显示所有员工的姓名，部门号和部门名称。<br>SELECT last_name, d.department_id, department_name<br>FROM `employees` e,`departments` d<br>WHERE e.department_id = d.department_id;<br><br>2. 查询90号部门员工的 job_id 和 90 号部门的location_id<br>SELECT job_id, location_id<br>FROM employees e, departments d<br>WHERE e.department_id = d.department_id AND d.department_id=90;<br><br>3. 选择所有有奖金的员工的 last_name , department_name , location_id , city <br>SELECT last_name, department_name, l.location_id, city<br>FROM employees e, departments d, locations l<br>WHERE e.department_id = d.department_id AND d.location_id = l.location_id AND `commission_pct` IS NOT NULL;<br><br>4. 选择city在Toronto工作的员工的last_name , job_id , department_id , department_name <br>SELECT last_name, job_id, d.department_id, department_name<br>FROM employees e, departments d, locations l<br>WHERE e.department_id = d.department_id AND d.location_id = l.location_id AND city = &#x27;Toronto&#x27;;<br><br>5.查询每个工种、每个部门的部门名、工种名和最低工资<br>SELECT department_name, job_id, MIN(salary)<br>FROM employees e, departments d<br>WHERE e.department_id = d.department_id<br>GROUP BY job_id, e.department_id<br><br>6.查询每个国家下的部门个数大于 2 的国家编号<br>SELECT country_id, COUNT(*)<br>FROM departments d, locations l<br>WHERE d.location_id = l.location_id<br>GROUP BY country_id<br>HAVING COUNT(*) &gt; 2;<br><br>7、选择指定员工的姓名，员工号，以及他的管理者的姓名和员工号，结果类似于下面的格式 <br>employees Emp# manager Mgr#<br>kochhar 101 king 100<br><br>SELECT e.last_name, e.employee_id, m.last_name, m.employee_id<br>FROM employees e, employees m<br>WHERE e.manager_id = m.`employee_id` AND e.employee_id = 101;<br><br></code></pre></div></td></tr></table></figure><h3><span id="二-sql99标准">二、sql99标准</span></h3><h3><span id="语法">语法</span></h3><p>​    select 查询列表<br>​    from 表1 别名 【连接类型】<br>​    join 表2 别名<br>​    on 连接条件<br>​    【where 筛选条件】<br>​    【group by 分组】<br>​    【having 筛选条件】<br>​    【order by 排序列表】</p><h3><span id="分类">分类</span></h3><p>内连接（★）：inner<br>外连接<br>    左外(★):left 【outer】<br>    右外(★)：right 【outer】<br>    全外：full【outer】<br>交叉连接：cross </p><p>一）内连接</p><p>语法：</p><p>select 查询列表<br>from 表1 别名<br>inner join 表2 别名<br>on 连接条件;</p><p>分类：<br>等值<br>非等值<br>自连接</p><h3><span id="特点">特点</span></h3><p>①添加排序、分组、筛选<br>②inner可以省略<br>③ 筛选条件放在where后面，连接条件放在on后面，提高分离性，便于阅读<br>④inner join连接和sql92语法中的等值连接效果是一样的，都是查询多表的交集</p><h3><span id="例子">例子</span></h3><h4><span id="1-等值连接">1、等值连接</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例1.查询员工名、部门名<br><br>SELECT last_name,department_name<br>FROM departments d<br> JOIN  employees e<br>ON e.`department_id` = d.`department_id`;<br></code></pre></div></td></tr></table></figure><h4><span id="2-查询名字中包含e的员工名和工种名添加筛选">2. 查询名字中包含e的员工名和工种名（添加筛选）</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT last_name,job_title<br>FROM employees e<br>INNER JOIN jobs j<br>ON e.`job_id`=  j.`job_id`<br>WHERE e.`last_name` LIKE &#x27;%e%&#x27;;<br></code></pre></div></td></tr></table></figure><h4><span id="3-查询部门个数gt3的城市名和部门个数添加分组筛选">3. 查询部门个数&gt;3的城市名和部门个数，（添加分组+筛选）</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#①查询每个城市的部门个数<br>#②在①结果上筛选满足条件的<br>SELECT city,COUNT(*) 部门个数<br>FROM departments d<br>INNER JOIN locations l<br>ON d.`location_id`=l.`location_id`<br>GROUP BY city<br>HAVING COUNT(*)&gt;3;<br></code></pre></div></td></tr></table></figure><h4><span id="4-查询哪个部门的员工个数gt3的部门名和员工个数并按个数降序添加排序">4. 查询哪个部门的员工个数&gt;3的部门名和员工个数，并按个数降序（添加排序）</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#①查询每个部门的员工个数<br>SELECT COUNT(*),department_name<br>FROM employees e<br>INNER JOIN departments d<br>ON e.`department_id`=d.`department_id`<br>GROUP BY department_name<br><br>#② 在①结果上筛选员工个数&gt;3的记录，并排序<br><br>SELECT COUNT(*) 个数,department_name<br>FROM employees e<br>INNER JOIN departments d<br>ON e.`department_id`=d.`department_id`<br>GROUP BY department_name<br>HAVING COUNT(*)&gt;3<br>ORDER BY COUNT(*) DESC;<br></code></pre></div></td></tr></table></figure><h4><span id="5查询员工名-部门名-工种名并按部门名降序添加三表连接">5.查询员工名、部门名、工种名，并按部门名降序（添加三表连接）</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT last_name,department_name,job_title<br>FROM employees e<br>INNER JOIN departments d ON e.`department_id`=d.`department_id`<br>INNER JOIN jobs j ON e.`job_id` = j.`job_id`<br><br>ORDER BY department_name DESC;<br></code></pre></div></td></tr></table></figure><h4><span id="二非等值连接">二）非等值连接</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#查询员工的工资级别<br><br>SELECT salary,grade_level<br>FROM employees e<br> JOIN job_grades g<br> ON e.`salary` BETWEEN g.`lowest_sal` AND g.`highest_sal`;<br><br><br> #查询工资级别的个数&gt;20的个数，并且按工资级别降序<br> SELECT COUNT(*),grade_level<br>FROM employees e<br> JOIN job_grades g<br> ON e.`salary` BETWEEN g.`lowest_sal` AND g.`highest_sal`<br> GROUP BY grade_level<br> HAVING COUNT(*)&gt;20<br> ORDER BY grade_level DESC;<br></code></pre></div></td></tr></table></figure><h4><span id="三自连接">三）自连接</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#查询员工的名字、上级的名字<br>SELECT e.last_name,m.last_name<br>FROM employees e<br>JOIN employees m<br>ON e.`manager_id`= m.`employee_id`;<br><br> #查询姓名中包含字符k的员工的名字、上级的名字<br>SELECT e.last_name,m.last_name<br>FROM employees e<br>JOIN employees m<br>ON e.`manager_id`= m.`employee_id`<br>WHERE e.`last_name` LIKE &#x27;%k%&#x27;;<br></code></pre></div></td></tr></table></figure><h4><span id="二-外连接">二、外连接</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">/*<br>应用场景：用于查询一个表中有，另一个表没有的记录<br><br>特点：<br>1、外连接的查询结果为主表中的所有记录<br>如果从表中有和它匹配的，则显示匹配的值<br>如果从表中没有和它匹配的，则显示null<br>外连接查询结果=内连接结果+主表中有而从表没有的记录<br>2、左外连接，left join左边的是主表<br>   右外连接，right join右边的是主表<br>3、左外和右外交换两个表的顺序，可以实现同样的效果 <br>4、全外连接=内连接的结果+表1中有但表2没有的+表2中有但表1没有的<br>*/<br>#引入：查询男朋友 不在男神表的的女神名<br><br>SELECT * FROM beauty;<br>SELECT * FROM boys;<br><br>#左外连接<br>SELECT b.*,bo.*<br>FROM boys bo<br>LEFT OUTER JOIN beauty b<br>ON b.`boyfriend_id` = bo.`id`<br>WHERE b.`id` IS NULL;<br><br><br>#案例1：查询哪个部门没有员工<br>#左外<br>SELECT d.*,e.employee_id<br>FROM departments d<br>LEFT OUTER JOIN employees e<br>ON d.`department_id` = e.`department_id`<br>WHERE e.`employee_id` IS NULL;<br><br><br>#右外<br><br> SELECT d.*,e.employee_id<br>FROM employees e<br>RIGHT OUTER JOIN departments d<br>ON d.`department_id` = e.`department_id`<br>WHERE e.`employee_id` IS NULL;<br><br><br>#全外<br><br><br>USE girls;<br>SELECT b.*,bo.*<br>FROM beauty b<br>FULL OUTER JOIN boys bo<br>ON b.`boyfriend_id` = bo.id;<br><br><br>#交叉连接<br><br>SELECT b.*,bo.*<br>FROM beauty b<br>CROSS JOIN boys bo;<br></code></pre></div></td></tr></table></figure><h3><span id="作业">作业</span></h3><h4><span id="问题">问题</span></h4><p>一、查询编号&gt;3 的女神的男朋友信息，如果有则列出详细，如果没有，用 null 填充<br>二、查询哪个城市没有部门<br>三、查询部门名为SAL 或IT 的员工信息 </p><h4><span id="我的解答">我的解答</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">一、查询编号&gt;3 的女神的男朋友信息，如果有则列出详细，如果没有，用 NULL 填充 <br>SELECT be.id, be.name, bo.*<br>FROM `beauty` be, `boys` bo<br>WHERE be.boyfriend_id = bo.id AND be.id &gt; 3;<br><br>SELECT be.id, be.name, bo.*<br>FROM beauty be LEFT OUTER JOIN boys bo<br>ON be.boyfriend_id = bo.id<br>WHERE be.id &gt; 3;<br><br>二、查询哪个城市没有部门<br>SELECT city<br>FROM locations l LEFT OUTER JOIN departments d<br>ON l.location_id = d.location_id<br>WHERE d.department_id IS NULL;<br><br>三、查询部门名为SAL 或IT 的员工信息<br>SELECT d.department_name, e.*<br>FROM `employees` e RIGHT OUTER JOIN `departments` d<br>ON e.department_id = d.department_id<br>WHERE d.department_name IN (&#x27;SAL&#x27;,&#x27;IT&#x27;);<br><br></code></pre></div></td></tr></table></figure><h2><span id="sql92和-sql99pk">sql92和 sql99pk</span></h2><p>/*<br>功能：sql99支持的较多<br>可读性：sql99实现连接条件和筛选条件的分离，可读性较高<br>*/</p>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-08-聚合函数与分组</title>
    <link href="/2021/07/10/MySQL-08-%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%E4%B8%8E%E5%88%86%E7%BB%84/"/>
    <url>/2021/07/10/MySQL-08-%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%E4%B8%8E%E5%88%86%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1><span id="分组函数与分组">分组函数与分组</span></h1><!-- toc --><ul><li><a href="#%E5%88%86%E7%BB%84%E5%87%BD%E6%95%B0">分组函数</a><ul><li><a href="#%E5%8A%9F%E8%83%BD">功能</a></li><li><a href="#%E5%88%86%E7%B1%BB">分类</a></li><li><a href="#%E7%89%B9%E7%82%B9">特点</a></li><li><a href="#%E4%BE%8B%E5%AD%90">例子</a><ul><li><a href="#1-%E7%AE%80%E5%8D%95%E7%9A%84%E4%BD%BF%E7%94%A8">1、简单的使用</a></li><li><a href="#2-%E5%8F%82%E6%95%B0%E6%94%AF%E6%8C%81%E5%93%AA%E4%BA%9B%E7%B1%BB%E5%9E%8B">2、参数支持哪些类型</a></li><li><a href="#3-%E6%98%AF%E5%90%A6%E5%BF%BD%E7%95%A5null">3、是否忽略null</a></li><li><a href="#4-%E5%92%8Cdistinct%E6%90%AD%E9%85%8D">4、和distinct搭配</a></li><li><a href="#5-count%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D">5、count函数的详细介绍</a></li><li><a href="#6-%E5%92%8C%E5%88%86%E7%BB%84%E5%87%BD%E6%95%B0%E4%B8%80%E5%90%8C%E6%9F%A5%E8%AF%A2%E7%9A%84%E5%AD%97%E6%AE%B5%E6%9C%89%E9%99%90%E5%88%B6">6、和分组函数一同查询的字段有限制</a></li></ul></li><li><a href="#%E4%BD%9C%E4%B8%9A5-%E5%88%86%E7%BB%84%E5%87%BD%E6%95%B0">作业5-分组函数</a><ul><li><a href="#%E9%97%AE%E9%A2%98">问题</a></li><li><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94">我的解答</a></li></ul></li></ul></li><li><a href="#%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2">分组查询</a><ul><li><a href="#%E8%AF%AD%E6%B3%95">语法</a></li><li><a href="#%E7%89%B9%E7%82%B9-1">特点</a></li><li><a href="#%E4%BE%8B%E5%AD%90-1">例子</a><ul><li><a href="#1-%E7%AE%80%E5%8D%95%E7%9A%84%E5%88%86%E7%BB%84">1. 简单的分组</a></li><li><a href="#2-%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E5%88%86%E7%BB%84%E5%89%8D%E7%9A%84%E7%AD%9B%E9%80%89">2. 可以实现分组前的筛选</a></li><li><a href="#3-%E5%88%86%E7%BB%84%E5%90%8E%E7%AD%9B%E9%80%89">3. 分组后筛选</a></li><li><a href="#4-%E6%B7%BB%E5%8A%A0%E6%8E%92%E5%BA%8F">4. 添加排序</a></li><li><a href="#5-%E6%8C%89%E5%A4%9A%E4%B8%AA%E5%AD%97%E6%AE%B5%E5%88%86%E7%BB%84">5. 按多个字段分组</a></li></ul></li><li><a href="#%E4%BD%9C%E4%B8%9A6-%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2">作业6-分组查询</a><ul><li><a href="#%E9%97%AE%E9%A2%98-1">问题</a></li><li><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94-1">我的解答</a></li></ul></li></ul></li></ul><!-- tocstop --><h2><span id="分组函数">分组函数</span></h2><h3><span id="功能">功能</span></h3><p>用作统计使用，又称为聚合函数或统计函数或组函数</p><h3><span id="分类">分类</span></h3><p>sum 求和、avg 平均值、max 最大值 、min 最小值 、count 计算个数</p><h3><span id="特点">特点</span></h3><p>1、sum、avg一般用于处理数值型<br>   max、min、count可以处理任何类型<br>2、以上分组函数都忽略null值</p><p>3、可以和distinct搭配实现去重的运算</p><p>4、count函数的单独介绍<br>一般使用count(*)用作统计行数</p><p>5、和分组函数一同查询的字段要求是group by后的字段</p><h3><span id="例子">例子</span></h3><h4><span id="1-简单的使用">1、简单的使用</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT SUM(salary) FROM employees;<br>SELECT AVG(salary) FROM employees;<br>SELECT MIN(salary) FROM employees;<br>SELECT MAX(salary) FROM employees;<br>SELECT COUNT(salary) FROM employees;<br><br><br>SELECT SUM(salary) 和,AVG(salary) 平均,MAX(salary) 最高,MIN(salary) 最低,COUNT(salary) 个数<br>FROM employees;<br><br>SELECT SUM(salary) 和,ROUND(AVG(salary),2) 平均,MAX(salary) 最高,MIN(salary) 最低,COUNT(salary) 个数<br>FROM employees;<br></code></pre></div></td></tr></table></figure><h4><span id="2-参数支持哪些类型">2、参数支持哪些类型</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT SUM(last_name) ,AVG(last_name) FROM employees;<br>SELECT SUM(hiredate) ,AVG(hiredate) FROM employees;<br><br>SELECT MAX(last_name),MIN(last_name) FROM employees;<br><br>SELECT MAX(hiredate),MIN(hiredate) FROM employees;<br><br>SELECT COUNT(commission_pct) FROM employees;<br>SELECT COUNT(last_name) FROM employees;<br></code></pre></div></td></tr></table></figure><h4><span id="3-是否忽略null">3、是否忽略null</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT SUM(commission_pct) ,AVG(commission_pct),SUM(commission_pct)/35,SUM(commission_pct)/107 FROM employees;<br><br>SELECT MAX(commission_pct) ,MIN(commission_pct) FROM employees;<br><br>SELECT COUNT(commission_pct) FROM employees;<br>SELECT commission_pct FROM employees;<br></code></pre></div></td></tr></table></figure><h4><span id="4-和distinct搭配">4、和distinct搭配</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT SUM(DISTINCT salary),SUM(salary) FROM employees;<br><br>SELECT COUNT(DISTINCT salary),COUNT(salary) FROM employees;<br></code></pre></div></td></tr></table></figure><h4><span id="5-count函数的详细介绍">5、count函数的详细介绍</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT COUNT(salary) FROM employees;<br><br><br>SELECT COUNT(*) FROM employees;<br><br>SELECT COUNT(1) FROM employees;<br><br>效率：<br>MYISAM存储引擎下  ，COUNT(*)的效率高<br>INNODB存储引擎下，COUNT(*)和COUNT(1)的效率差不多，比COUNT(字段)要高一些<br></code></pre></div></td></tr></table></figure><h4><span id="6-和分组函数一同查询的字段有限制">6、和分组函数一同查询的字段有限制</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT AVG(salary),employee_id  FROM employees;<br></code></pre></div></td></tr></table></figure><h3><span id="作业5-分组函数">作业5-分组函数</span></h3><h4><span id="问题">问题</span></h4><ol><li>查询公司员工工资的最大值，最小值，平均值，总和 </li><li>查询员工表中的最大入职时间和最小入职时间的相差天数 （DIFFRENCE） </li><li>查询部门编号为90 的员工个数 </li></ol><h4><span id="我的解答">我的解答</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">1. 查询公司员工工资的最大值，最小值，平均值，总和<br>SELECT MAX(salary), MIN(salary), AVG(salary), SUM(salary)<br>FROM `employees`<br><br>2. 查询员工表中的最大入职时间和最小入职时间的相差天数 （DIFFRENCE）<br>SELECT DATEDIFF(MAX(hiredate), MIN(hiredate))<br>FROM employees;<br><br>3. 查询部门编号为90 的员工个数<br>SELECT COUNT(*)<br>FROM employees<br>WHERE department_id = 90;<br></code></pre></div></td></tr></table></figure><h2><span id="分组查询">分组查询</span></h2><h3><span id="语法">语法</span></h3><p>select 查询列表<br>from 表<br>【where 筛选条件】<br>group by 分组的字段<br>【order by 排序的字段】;</p><h3><span id="特点">特点</span></h3><p>1、和分组函数一同查询的字段必须是group by后出现的字段<br>2、筛选分为两类：分组前筛选和分组后筛选<br>针对的表            位置                                        连接的关键字<br>分组前筛选        原始表                                    group by前    where</p><p>分组后筛选        group by后的结果集            group by后    having</p><p>问题1：分组函数做筛选能不能放在where后面<br>答：不能</p><p>问题2：where——group by——having</p><p>一般来讲，能用分组前筛选的，尽量使用分组前筛选，提高效率</p><p>3、分组可以按单个字段也可以按多个字段<br>4、可以搭配着排序使用</p><h3><span id="例子">例子</span></h3><p>引入：查询每个部门的员工个数</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT COUNT(*) FROM employees WHERE department_id=90;<br></code></pre></div></td></tr></table></figure><h4><span id="1-简单的分组">1. 简单的分组</span></h4><p>#案例1：查询每个工种的员工平均工资</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT AVG(salary),job_id<br>FROM employees<br>GROUP BY job_id;<br></code></pre></div></td></tr></table></figure><p>案例2：查询每个位置的部门个数</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT COUNT(*),location_id<br>FROM departments<br>GROUP BY location_id;<br></code></pre></div></td></tr></table></figure><h4><span id="2-可以实现分组前的筛选">2. 可以实现分组前的筛选</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例1：查询邮箱中包含a字符的 每个部门的最高工资<br><br>SELECT MAX(salary),department_id<br>FROM employees<br>WHERE email LIKE &#x27;%a%&#x27;<br>GROUP BY department_id;<br><br>#案例2：查询有奖金的每个领导手下员工的平均工资<br><br>SELECT AVG(salary),manager_id<br>FROM employees<br>WHERE commission_pct IS NOT NULL<br>GROUP BY manager_id;<br></code></pre></div></td></tr></table></figure><h4><span id="3-分组后筛选">3. 分组后筛选</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例：查询哪个部门的员工个数&gt;5<br><br>#①查询每个部门的员工个数<br>SELECT COUNT(*),department_id<br>FROM employees<br>GROUP BY department_id;<br><br>#② 筛选刚才①结果<br><br>SELECT COUNT(*),department_id<br>FROM employees<br><br>GROUP BY department_id<br><br>HAVING COUNT(*)&gt;5;<br><br><br>#案例2：每个工种有奖金的员工的最高工资&gt;12000的工种编号和最高工资<br><br>SELECT job_id,MAX(salary)<br>FROM employees<br>WHERE commission_pct IS NOT NULL<br>GROUP BY job_id<br>HAVING MAX(salary)&gt;12000;<br><br><br>#案例3：领导编号&gt;102的每个领导手下的最低工资大于5000的领导编号和最低工资<br><br>manager_id&gt;102<br><br>SELECT manager_id,MIN(salary)<br>FROM employees<br>GROUP BY manager_id<br>HAVING MIN(salary)&gt;5000;<br></code></pre></div></td></tr></table></figure><h4><span id="4-添加排序">4. 添加排序</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例：每个工种有奖金的员工的最高工资&gt;6000的工种编号和最高工资,按最高工资升序<br><br>SELECT job_id,MAX(salary) m<br>FROM employees<br>WHERE commission_pct IS NOT NULL<br>GROUP BY job_id<br>HAVING m&gt;6000<br>ORDER BY m ;<br></code></pre></div></td></tr></table></figure><h4><span id="5-按多个字段分组">5. 按多个字段分组</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例：查询每个工种每个部门的最低工资,并按最低工资降序<br><br>SELECT MIN(salary),job_id,department_id<br>FROM employees<br>GROUP BY department_id,job_id<br>ORDER BY MIN(salary) DESC;<br></code></pre></div></td></tr></table></figure><h3><span id="作业6-分组查询">作业6-分组查询</span></h3><h4><span id="问题">问题</span></h4><ol><li>查询各job_id 的员工工资的最大值，最小值，平均值，总和，并按job_id 升序 </li><li>查询员工最高工资和最低工资的差距（DIFFERENCE） </li><li>查询各个管理者手下员工的最低工资，其中最低工资不能低于 6000，没有管理者的员<br>工不计算在内 </li><li>查询所有部门的编号，员工数量和工资平均值,并按平均工资降序 </li><li>选择具有各个job_id 的员工人数 </li></ol><h4><span id="我的解答">我的解答</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">1. 查询各job_id 的员工工资的最大值，最小值，平均值，总和，并按job_id 升序<br>SELECT MAX(salary), MIN(salary), ROUND(AVG(salary),2), SUM(salary), job_id<br>FROM `employees`<br>GROUP BY job_id;<br>ORDER BY job_id ASC;<br><br>2. 查询员工最高工资和最低工资的差距（DIFFERENCE）<br>SELECT MAX(salary),MIN(salary), MAX(salary)-MIN(salary) AS DIFFERENCE<br>FROM `employees`;<br><br>3. 查询 各个管理者 手下员工的最低工资，其中最低工资 不能低于 6000 ，没有管理者的员工 不计算在内<br>SELECT MIN(salary), manager_id<br>FROM employees<br>WHERE manager_id IS NOT NULL<br>GROUP BY `manager_id`<br>HAVING MIN(salary) &gt;= 6000;<br><br>4. 查询所有部门的编号，员工数量和工资平均值,并按平均工资降序<br>SELECT department_id, COUNT(*), AVG(salary)<br>FROM employees<br>GROUP BY department_id<br>ORDER BY AVG(salary) DESC;<br><br>5. 选择具有各个job_id 的员工人数 <br>SELECT COUNT(*), job_id<br>FROM employees<br>GROUP BY job_id;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-07-常用函数</title>
    <link href="/2021/07/10/MySQL-07-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <url>/2021/07/10/MySQL-07-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1><span id="常用函数">常用函数</span></h1><!-- toc --><ul><li><a href="#%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0">常见函数</a><ul><li><a href="#%E6%A6%82%E5%BF%B5">概念</a></li><li><a href="#%E5%88%86%E7%B1%BB">分类</a></li><li><a href="#%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0-1">常见函数</a><ul><li><a href="#%E5%AD%97%E7%AC%A6%E5%87%BD%E6%95%B0">字符函数</a></li><li><a href="#%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0">数学函数</a></li><li><a href="#%E6%97%A5%E6%9C%9F%E5%87%BD%E6%95%B0">日期函数</a></li></ul></li><li><a href="#%E4%BE%8B%E5%AD%90">例子</a><ul><li><a href="#%E4%B8%80-%E5%AD%97%E7%AC%A6%E5%87%BD%E6%95%B0">一、字符函数</a><ul><li><a href="#1-length%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E5%80%BC%E7%9A%84%E5%AD%97%E8%8A%82%E4%B8%AA%E6%95%B0">1. length获取参数值的字节个数</a></li><li><a href="#2concat-%E6%8B%BC%E6%8E%A5%E5%AD%97%E7%AC%A6%E4%B8%B2">2.concat 拼接字符串</a></li><li><a href="#3upper-lower-%E5%A4%A7%E5%B0%8F%E5%86%99">3.upper、lower 大小写</a></li><li><a href="#4substr-substring-%E5%88%86%E9%9A%94%E5%AD%97%E7%AC%A6%E4%B8%B2">4.substr、substring 分隔字符串</a></li><li><a href="#5instr-%E8%BF%94%E5%9B%9E%E5%AD%90%E4%B8%B2%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%87%BA%E7%8E%B0%E7%9A%84%E7%B4%A2%E5%BC%95%E5%A6%82%E6%9E%9C%E6%89%BE%E4%B8%8D%E5%88%B0%E8%BF%94%E5%9B%9E0">5.instr 返回子串第一次出现的索引，如果找不到返回0</a></li><li><a href="#6trim-%E4%BF%AE%E5%89%AA">6.trim 修剪</a></li><li><a href="#7lpad-%E7%94%A8%E6%8C%87%E5%AE%9A%E7%9A%84%E5%AD%97%E7%AC%A6%E5%AE%9E%E7%8E%B0%E5%B7%A6%E5%A1%AB%E5%85%85%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6">7.lpad 用指定的字符实现左填充指定长度</a></li><li><a href="#8rpad-%E7%94%A8%E6%8C%87%E5%AE%9A%E7%9A%84%E5%AD%97%E7%AC%A6%E5%AE%9E%E7%8E%B0%E5%8F%B3%E5%A1%AB%E5%85%85%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6">8.rpad 用指定的字符实现右填充指定长度</a></li><li><a href="#9replace-%E6%9B%BF%E6%8D%A2">9.replace 替换</a></li></ul></li><li><a href="#%E4%BA%8C-%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0">二、数学函数</a><ul><li><a href="#round-%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5">round 四舍五入</a></li><li><a href="#ceil-%E5%90%91%E4%B8%8A%E5%8F%96%E6%95%B4%E8%BF%94%E5%9B%9E%E8%AF%A5%E5%8F%82%E6%95%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B4%E6%95%B0">ceil 向上取整,返回&gt;=该参数的最小整数</a></li><li><a href="#floor-%E5%90%91%E4%B8%8B%E5%8F%96%E6%95%B4%E8%BF%94%E5%9B%9E%E8%AF%A5%E5%8F%82%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B4%E6%95%B0">floor 向下取整，返回&lt;=该参数的最大整数</a></li><li><a href="#truncate-%E6%88%AA%E6%96%AD">truncate 截断</a></li><li><a href="#mod%E5%8F%96%E4%BD%99">mod取余</a></li></ul></li><li><a href="#%E4%B8%89-%E6%97%A5%E6%9C%9F%E5%87%BD%E6%95%B0">三、日期函数</a><ul><li><a href="#now-%E8%BF%94%E5%9B%9E%E5%BD%93%E5%89%8D%E7%B3%BB%E7%BB%9F%E6%97%9F%E6%97%B6%E9%97%B4">now 返回当前系统旟+时间</a></li><li><a href="#curdate-%E8%BF%94%E5%9B%9E%E5%BD%93%E5%89%8D%E7%B3%BB%E7%BB%9F%E6%97%A5%E6%9C%9F%E4%B8%8D%E5%8C%85%E5%90%AB%E6%97%B6%E9%97%B4">curdate 返回当前系统日期，不包含时间</a></li><li><a href="#curtime-%E8%BF%94%E5%9B%9E%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4%E4%B8%8D%E5%8C%85%E5%90%AB%E6%97%A5%E6%9C%9F">curtime 返回当前时间，不包含日期</a></li><li><a href="#%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%E9%83%A8%E5%88%86%E5%B9%B4-%E6%9C%88-%E6%97%A5-%E5%B0%8F%E6%97%B6-%E5%88%86%E9%92%9F-%E7%A7%92">获取指定的部分，年、月、日、小时、分钟、秒</a></li><li><a href="#str_to_date-%E5%B0%86%E5%AD%97%E7%AC%A6%E9%80%9A%E8%BF%87%E6%8C%87%E5%AE%9A%E7%9A%84%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2%E6%88%90%E6%97%A5%E6%9C%9F">str_to_date 将字符通过指定的格式转换成日期</a></li><li><a href="#date_format-%E5%B0%86%E6%97%A5%E6%9C%9F%E8%BD%AC%E6%8D%A2%E6%88%90%E5%AD%97%E7%AC%A6">date_format 将日期转换成字符</a></li></ul></li><li><a href="#%E5%9B%9B-%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0">四、其他函数</a></li><li><a href="#%E4%BA%94-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%87%BD%E6%95%B0">五、流程控制函数</a><ul><li><a href="#1-if%E5%87%BD%E6%95%B0-if-else-%E7%9A%84%E6%95%88%E6%9E%9C">1. if函数： if else 的效果</a></li><li><a href="#2-case%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%80-switch-case-%E7%9A%84%E6%95%88%E6%9E%9C">2. case函数的使用一： switch case 的效果</a></li><li><a href="#3-case-%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BA%8C%E7%B1%BB%E4%BC%BC%E4%BA%8E-%E5%A4%9A%E9%87%8Dif">3. case 函数的使用二：类似于 多重if</a></li></ul></li></ul></li><li><a href="#%E4%BD%9C%E4%B8%9A4-%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0">作业4-单行函数</a><ul><li><a href="#%E9%97%AE%E9%A2%98">问题</a></li><li><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94">我的解答</a></li></ul></li></ul></li></ul><!-- tocstop --><h2><span id="常见函数">常见函数</span></h2><h3><span id="概念">概念</span></h3><p>类似于java的方法，将一组逻辑语句封装在方法体中，对外暴露方法名<br>好处：1、隐藏了实现细节  2、提高代码的重用性<br>调用：select 函数名(实参列表) 【from 表】;<br>特点：<br>①叫什么（函数名）<br>②干什么（函数功能）</p><h3><span id="分类">分类</span></h3><p>1、单行函数<br>如 concat、length、ifnull等<br>2、分组函数<br>功能：做统计使用，又称为统计函数、聚合函数、组函数</p><h3><span id="常见函数">常见函数</span></h3><h5><span id="字符函数">字符函数</span></h5><p>length:获取字节个数(utf-8一个汉字代表3个字节,gbk为2个字节)<br>concat<br>substr<br>instr<br>trim<br>upper<br>lower<br>lpad<br>rpad<br>replace</p><h5><span id="数学函数">数学函数</span></h5><p>round<br>ceil<br>floor<br>truncate<br>mod</p><h5><span id="日期函数">日期函数</span></h5><p>now<br>curdate<br>curtime<br>year<br>month<br>monthname<br>day<br>hour<br>minute<br>second<br>str_to_date<br>date_format</p><p>其他函数：<br>version<br>database<br>user</p><p>控制函数<br>if<br>case</p><h3><span id="例子">例子</span></h3><h4><span id="一-字符函数">一、字符函数</span></h4><h5><span id="1-length获取参数值的字节个数">1. length获取参数值的字节个数</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT LENGTH(&#x27;john&#x27;);<br>SELECT LENGTH(&#x27;张三丰hahaha&#x27;);<br><br>SHOW VARIABLES LIKE &#x27;%char%&#x27;<br></code></pre></div></td></tr></table></figure><h5><span id="2concat-拼接字符串">2.concat 拼接字符串</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT CONCAT(last_name,&#x27;_&#x27;,first_name) 姓名 FROM employees;<br></code></pre></div></td></tr></table></figure><h5><span id="3upper-lower-大小写">3.upper、lower 大小写</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT UPPER(&#x27;john&#x27;);<br>SELECT LOWER(&#x27;joHn&#x27;);<br>#示例：将姓变大写，名变小写，然后拼接<br>SELECT CONCAT(UPPER(last_name),LOWER(first_name))  姓名 FROM employees;<br></code></pre></div></td></tr></table></figure><h5><span id="4substr-substring-分隔字符串">4.substr、substring 分隔字符串</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">注意：索引从1开始<br>#截取从指定索引处后面所有字符<br>SELECT SUBSTR(&#x27;李莫愁爱上了陆展元&#x27;,7)  out_put;<br><br>#截取从指定索引处指定字符长度的字符<br>SELECT SUBSTR(&#x27;李莫愁爱上了陆展元&#x27;,1,3) out_put;<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例：姓名中首字符大写，其他字符小写然后用_拼接，显示出来<br><br>SELECT CONCAT(UPPER(SUBSTR(last_name,1,1)),&#x27;_&#x27;,LOWER(SUBSTR(last_name,2)))  out_put<br>FROM employees;<br></code></pre></div></td></tr></table></figure><h5><span id="5instr-返回子串第一次出现的索引如果找不到返回0">5.instr 返回子串第一次出现的索引，如果找不到返回0</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT INSTR(&#x27;杨不殷六侠悔爱上了殷六侠&#x27;,&#x27;殷八䩠&#x27;) AS out_put;<br></code></pre></div></td></tr></table></figure><h5><span id="6trim-修剪">6.trim 修剪</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT LENGTH(TRIM(&#x27;    张翠山    &#x27;)) AS out_put;<br><br>SELECT TRIM(&#x27;aa&#x27; FROM &#x27;aaaaaaaaa张aaaaaaaaaaaa翠山aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;)  AS out_put;<br></code></pre></div></td></tr></table></figure><h5><span id="7lpad-用指定的字符实现左填充指定长度">7.lpad 用指定的字符实现左填充指定长度</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT LPAD(&#x27;殷素素&#x27;,2,&#x27;*&#x27;) AS out_put;<br></code></pre></div></td></tr></table></figure><h5><span id="8rpad-用指定的字符实现右填充指定长度">8.rpad 用指定的字符实现右填充指定长度</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT RPAD(&#x27;殷素素&#x27;,12,&#x27;ab&#x27;) AS out_put;<br></code></pre></div></td></tr></table></figure><h5><span id="9replace-替换">9.replace 替换</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT REPLACE(&#x27;周芷若周芷若周芷若周芷若张无忌爱上了周芷若&#x27;,&#x27;周芷若&#x27;,&#x27;赵敏&#x27;) AS out_put;<br></code></pre></div></td></tr></table></figure><h4><span id="二-数学函数">二、数学函数</span></h4><h5><span id="round-四舍五入">round 四舍五入</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT ROUND(-1.55);<br>SELECT ROUND(1.567,2);<br></code></pre></div></td></tr></table></figure><h5><span id="ceil-向上取整返回gt该参数的最小整数">ceil 向上取整,返回&gt;=该参数的最小整数</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT CEIL(-1.02);<br></code></pre></div></td></tr></table></figure><h5><span id="floor-向下取整返回lt该参数的最大整数">floor 向下取整，返回&lt;=该参数的最大整数</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT FLOOR(-9.99);<br></code></pre></div></td></tr></table></figure><h5><span id="truncate-截断">truncate 截断</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT TRUNCATE(1.69999,1);<br></code></pre></div></td></tr></table></figure><h5><span id="mod取余">mod取余</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">/*<br>mod(a,b) ：  a-a/b*b<br><br>mod(-10,-3):-10- (-10)/(-3)*（-3）=-1<br>*/<br>SELECT MOD(10,-3);<br>SELECT 10%3;<br></code></pre></div></td></tr></table></figure><h4><span id="三-日期函数">三、日期函数</span></h4><h5><span id="now-返回当前系统旟时间">now 返回当前系统旟+时间</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT NOW();<br></code></pre></div></td></tr></table></figure><h5><span id="curdate-返回当前系统日期不包含时间">curdate 返回当前系统日期，不包含时间</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT CURDATE();<br></code></pre></div></td></tr></table></figure><h5><span id="curtime-返回当前时间不包含日期">curtime 返回当前时间，不包含日期</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT CURTIME();<br></code></pre></div></td></tr></table></figure><h5><span id="获取指定的部分年-月-日-小时-分钟-秒">获取指定的部分，年、月、日、小时、分钟、秒</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT YEAR(NOW()) 年;<br>SELECT YEAR(&#x27;1998-1-1&#x27;) 年;<br><br>SELECT  YEAR(hiredate) 年 FROM employees;<br><br>SELECT MONTH(NOW()) 月;<br>SELECT MONTHNAME(NOW()) 月;<br></code></pre></div></td></tr></table></figure><h5><span id="str_to_date-将字符通过指定的格式转换成日期">str_to_date 将字符通过指定的格式转换成日期</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT STR_TO_DATE(&#x27;1998-3-2&#x27;,&#x27;%Y-%c-%d&#x27;) AS out_put;<br><br>#查询入职日期为1992--4-3的员工信息<br>SELECT * FROM employees WHERE hiredate = &#x27;1992-4-3&#x27;;<br><br>SELECT * FROM employees WHERE hiredate = STR_TO_DATE(&#x27;4-3 1992&#x27;,&#x27;%c-%d %Y&#x27;);<br></code></pre></div></td></tr></table></figure><h5><span id="date_format-将日期转换成字符">date_format 将日期转换成字符</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT DATE_FORMAT(NOW(),&#x27;%y年%m月%d日&#x27;) AS out_put;<br><br>#查询有奖金的员工名和入职日期(xx月/xx日 xx年)<br>SELECT last_name,DATE_FORMAT(hiredate,&#x27;%m月/%d日 %y年&#x27;) 入职日期<br>FROM employees<br>WHERE commission_pct IS NOT NULL;<br></code></pre></div></td></tr></table></figure><h4><span id="四-其他函数">四、其他函数</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT VERSION();<br>SELECT DATABASE();<br>SELECT USER();<br></code></pre></div></td></tr></table></figure><h4><span id="五-流程控制函数">五、流程控制函数</span></h4><h5><span id="1-if函数-if-else-的效果">1. if函数： if else 的效果</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT IF(10&lt;5,&#x27;大&#x27;,&#x27;小&#x27;);<br><br>SELECT last_name,commission_pct,IF(commission_pct IS NULL,&#x27;没奖金，呵呵&#x27;,&#x27;有奖金，嘻嘻&#x27;) 备注<br>FROM employees;<br></code></pre></div></td></tr></table></figure><h5><span id="2-case函数的使用一-switch-case-的效果">2. case函数的使用一： switch case 的效果</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">/*<br>java中<br>switch(变量或表达式)&#123;<br>case 常量1：语句1;break;<br>...<br>default:语句n;break;<br><br><br>&#125;<br><br>mysql中<br><br>case 要判断的字段或表达式<br>when 常量1 then 要显示的值1或语句1;<br>when 常量2 then 要显示的值2或语句2;<br>...<br>else 要显示的值n或语句n;<br>end<br>*/<br><br>/*案例：查询员工的工资，要求<br><br>部门号=30，显示的工资为1.1倍<br>部门号=40，显示的工资为1.2倍<br>部门号=50，显示的工资为1.3倍<br>其他部门，显示的工资为原工资<br><br>*/<br><br><br>SELECT salary 原始工资,department_id,<br>CASE department_id<br>WHEN 30 THEN salary*1.1<br>WHEN 40 THEN salary*1.2<br>WHEN 50 THEN salary*1.3<br>ELSE salarEND AS 新工资<br>FROM employees;<br></code></pre></div></td></tr></table></figure><h5><span id="3-case-函数的使用二类似于-多重if">3. case 函数的使用二：类似于 多重if</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">/*<br>java中：<br>if(条件1)&#123;<br>语句1；<br>&#125;else if(条件2)&#123;<br>语句2；<br>&#125;<br>...<br>else&#123;<br>语句n;<br>&#125;<br><br>mysql中：<br><br>case <br>when 条件1 then 要显示的值1或语句1<br>when 条件2 then 要显示的值2或语句2<br>。。。<br>else 要显示的值n或语句n<br>end<br>*/<br><br>#案例：查询员工的工资的情况<br>如果工资&gt;20000,显示A级别<br>如果工资&gt;15000,显示B级别<br>如果工资&gt;10000，显示C级别<br>否则，显示D级别<br><br><br>SELECT salary,<br>CASE <br>WHEN salary&gt;20000 THEN &#x27;A&#x27;<br>WHEN salary&gt;15000 THEN &#x27;B&#x27;<br>WHEN salary&gt;10000 THEN &#x27;C&#x27;<br>ELSE &#x27;D&#x27;<br>END AS 工资级别<br>FROM employees;<br><br></code></pre></div></td></tr></table></figure><h3><span id="作业4-单行函数">作业4-单行函数</span></h3><h4><span id="问题">问题</span></h4><p><img src="https://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210709202138.png" alt="image-20210709202130888"></p><h4><span id="我的解答">我的解答</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">1. 显示系统时间(注：日期+时间) <br>SELECT NOW();<br><br>2. 查询员工号，姓名，工资，以及工资提高百分之 20%后的结果（NEW salary） <br>SELECT employee_id, last_name, salary, salary*1.2 &quot;new salary&quot;<br>FROM employees<br><br>3. 将员工的姓名按首字母排序（升序），并写出姓名的长度（LENGTH）<br>SELECT last_name, LENGTH(last_name)<br>FROM employees<br>ORDER BY last_name ASC;<br><br>4. 做一个查询，产生下面的结果 <br>&lt;last_name&gt; earns &lt;salary&gt; monthly but wants &lt;salary*3&gt; <br>Dream Salary <br>King earns 24000 monthly but wants 72000<br><br>SELECT CONCAT(last_name, &quot;earns&quot;, salary, &quot;monthly but wants&quot;, salary * 3) AS &quot;Dream Salary&quot;;<br>FROM employees<br>WHERE salary = 24000;<br><br>5. 使用CASE-WHEN，按照下面的条件： <br>job grade <br>AD_PRES A <br>ST_MAN B <br>IT_PROG C <br>SA_REP D <br>ST_CLERK E <br>产生下面的结果 <br>Last_name Job_id Grade <br><br>king AD_PRES A <br><br>SELECT last_name AS Last_name, job_id AS Job_id,<br>CASE job_id<br>WHEN &#x27;AD_PRES&#x27; THEN &#x27;A&#x27;<br>WHEN &#x27;ST_MAN&#x27; THEN &#x27;B&#x27;<br>WHEN &#x27;IT_PROG&#x27; THEN &#x27;C&#x27;<br>WHEN &#x27;SA_REP&#x27; THEN &#x27;D&#x27;<br>WHEN &#x27;ST_CLERK&#x27; THEN &#x27;E&#x27;<br>END AS Grade<br>FROM employees<br>WHERE job_id = &#x27;AD_PRES&#x27;;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-06-排序</title>
    <link href="/2021/07/10/MySQL-06-%E6%8E%92%E5%BA%8F/"/>
    <url>/2021/07/10/MySQL-06-%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1><span id="排序">排序</span></h1><!-- toc --><ul><li><a href="#%E6%8E%92%E5%BA%8F">排序</a><ul><li><a href="#%E8%AF%AD%E6%B3%95">语法</a></li><li><a href="#%E7%89%B9%E7%82%B9">特点</a></li><li><a href="#%E4%BE%8B%E5%AD%90">例子</a><ul><li><a href="#1-%E6%8C%89%E5%8D%95%E4%B8%AA%E5%AD%97%E6%AE%B5%E6%8E%92%E5%BA%8F">1、按单个字段排序</a></li><li><a href="#2-%E6%B7%BB%E5%8A%A0%E7%AD%9B%E9%80%89%E6%9D%A1%E4%BB%B6%E5%86%8D%E6%8E%92%E5%BA%8F">2、添加筛选条件再排序</a></li><li><a href="#3-%E6%8C%89%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8E%92%E5%BA%8F">3、按表达式排序</a></li><li><a href="#4-%E6%8C%89%E5%88%AB%E5%90%8D%E6%8E%92%E5%BA%8F">4、按别名排序</a></li><li><a href="#5-%E6%8C%89%E5%87%BD%E6%95%B0%E6%8E%92%E5%BA%8F">5、按函数排序</a></li><li><a href="#6-%E6%8C%89%E5%A4%9A%E4%B8%AA%E5%AD%97%E6%AE%B5%E6%8E%92%E5%BA%8F">6、按多个字段排序</a></li></ul></li><li><a href="#%E4%BD%9C%E4%B8%9A3-%E6%8E%92%E5%BA%8F">作业3-排序</a><ul><li><a href="#%E9%97%AE%E9%A2%98">问题</a></li><li><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94">我的解答</a></li></ul></li></ul></li></ul><!-- tocstop --><h2><span id="排序">排序</span></h2><h3><span id="语法">语法</span></h3><p>select 查询列表<br>from 表名<br>【where  筛选条件】<br>order by 排序的字段或表达式;</p><h3><span id="特点">特点</span></h3><p>1、asc代表的是升序，可以省略<br>desc代表的是降序</p><p>2、order by子句可以支持 单个字段、别名、表达式、函数、多个字段</p><p>3、order by子句在查询语句的最后面，除了limit子句</p><h3><span id="例子">例子</span></h3><h4><span id="1-按单个字段排序">1、按单个字段排序</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT * FROM employees ORDER BY salary DESC;<br></code></pre></div></td></tr></table></figure><h4><span id="2-添加筛选条件再排序">2、添加筛选条件再排序</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例：查询部门编号&gt;=90的员工信息，并按员工编号降序<br>SELECT *<br>FROM employees<br>WHERE department_id&gt;=90<br>ORDER BY employee_id DESC;<br></code></pre></div></td></tr></table></figure><h4><span id="3-按表达式排序">3、按表达式排序</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例：查询员工信息 按年薪降序<br>SELECT *,salary*12*(1+IFNULL(commission_pct,0))<br>FROM employees<br>ORDER BY salary*12*(1+IFNULL(commission_pct,0)) DESC;<br></code></pre></div></td></tr></table></figure><h4><span id="4-按别名排序">4、按别名排序</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例：查询员工信息 按年薪升序<br><br>SELECT *,salary*12*(1+IFNULL(commission_pct,0)) 年薪<br>FROM employees<br>ORDER BY 年薪 ASC;<br></code></pre></div></td></tr></table></figure><h4><span id="5-按函数排序">5、按函数排序</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例：查询员工名，并且按名字的长度降序<br>SELECT LENGTH(last_name),last_name <br>FROM employees<br>ORDER BY LENGTH(last_name) DESC;<br></code></pre></div></td></tr></table></figure><h4><span id="6-按多个字段排序">6、按多个字段排序</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例：查询员工信息，要求先按工资降序，再按employee_id升序<br>SELECT *<br>FROM employees<br>ORDER BY salary DESC,employee_id ASC;<br></code></pre></div></td></tr></table></figure><h3><span id="作业3-排序">作业3-排序</span></h3><h4><span id="问题">问题</span></h4><ol><li>查询员工的姓名和部门号和年薪，按年薪降序 按姓名升序 </li><li>选择工资不在8000 到17000 的员工的姓名和工资，按工资降序 </li><li>查询邮箱中包含e 的员工信息，并先按邮箱的字节数降序，再按部门号升序 </li></ol><h4><span id="我的解答">我的解答</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">1. 查询员工的姓名和部门号和年薪，按年薪降序 按姓名升序<br>SELECT last_name, department_id, salary*12*(1+IFNULL(`commission_pct`,0)) 年薪<br>FROM `employees`<br>ORDER BY 年薪 DESC, last_name ASC;<br><br>2. 选择工资不在8000 到17000 的员工的姓名和工资，按工资降序<br>SELECT last_name, salary<br>FROM employees<br>WHERE salary NOT BETWEEN 8000 AND 17000<br>ORDER BY salary DESC;<br><br>3. 查询邮箱中包含e的员工信息，并先按邮箱的字节数降序，再按部门号升序<br>SELECT *, LENGTH(email)<br>FROM employees<br>WHERE email LIKE &#x27;%e%&#x27;<br>ORDER BY LENGTH(email) DESC, department_id ASC;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-05-查询</title>
    <link href="/2021/07/10/MySQL-05-%E6%9F%A5%E8%AF%A2/"/>
    <url>/2021/07/10/MySQL-05-%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h1><span id="基础查询与条件查询">基础查询与条件查询</span></h1><!-- toc --><ul><li><a href="#%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2">基础查询</a><ul><li><a href="#%E8%AF%AD%E6%B3%95">语法</a></li><li><a href="#%E7%89%B9%E7%82%B9">特点</a></li><li><a href="#%E4%BE%8B%E5%AD%90">例子</a><ul><li><a href="#0-%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93">0. 使用数据库</a></li><li><a href="#1-%E6%9F%A5%E8%AF%A2%E5%8D%95%E4%B8%AA%E5%AD%97%E6%AE%B5">1. 查询单个字段</a></li><li><a href="#2-%E6%9F%A5%E8%AF%A2%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%A4%9A%E4%B8%AA%E5%AD%97%E6%AE%B5">2. 查询表中的多个字段</a></li><li><a href="#3-%E6%9F%A5%E8%AF%A2%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E5%AD%97%E6%AE%B5">3. 查询表中的所有字段</a></li><li><a href="#4-%E6%9F%A5%E8%AF%A2%E5%B8%B8%E9%87%8F%E5%80%BC">4. 查询常量值</a></li><li><a href="#5-%E6%9F%A5%E8%AF%A2%E8%A1%A8%E8%BE%BE%E5%BC%8F">5. 查询表达式</a></li><li><a href="#6-%E6%9F%A5%E8%AF%A2%E5%87%BD%E6%95%B0">6. 查询函数</a></li><li><a href="#7-%E8%B5%B7%E5%88%AB%E5%90%8D">7. 起别名</a></li><li><a href="#8-%E5%8E%BB%E9%87%8D">8. 去重</a></li><li><a href="#9-%E5%8F%B7%E7%9A%84%E4%BD%9C%E7%94%A8">9. +号的作用</a></li></ul></li><li><a href="#%E4%BD%9C%E4%B8%9A1-%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2">作业1-基础查询</a><ul><li><a href="#%E9%97%AE%E9%A2%98">问题</a></li><li><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94">我的解答</a></li></ul></li></ul></li><li><a href="#%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2">条件查询</a><ul><li><a href="#%E8%AF%AD%E6%B3%95-1">语法</a></li><li><a href="#%E5%88%86%E7%B1%BB">分类</a><ul><li><a href="#%E4%B8%80-%E6%8C%89%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AD%9B%E9%80%89">一、按条件表达式筛选</a></li><li><a href="#%E4%BA%8C-%E6%8C%89%E9%80%BB%E8%BE%91%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AD%9B%E9%80%89">二、按逻辑表达式筛选</a></li><li><a href="#%E4%B8%89-%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2">三、模糊查询</a></li></ul></li><li><a href="#%E4%BE%8B%E5%AD%90-1">例子</a><ul><li><a href="#%E4%B8%80-%E6%8C%89%E6%9D%A1%E4%BB%B6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AD%9B%E9%80%89-1">一、按条件表达式筛选</a></li><li><a href="#%E4%BA%8C-%E6%8C%89%E9%80%BB%E8%BE%91%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AD%9B%E9%80%89-1">二、按逻辑表达式筛选</a></li><li><a href="#%E4%B8%89-%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2-1">三、模糊查询</a><ul><li><a href="#1-like">1. like</a></li><li><a href="#2-between-and">2. between and</a></li><li><a href="#3-in">3. in</a></li><li><a href="#4-is-null">4. is null</a></li><li><a href="#5-%E5%AE%89%E5%85%A8%E7%AD%89%E4%BA%8E">5. 安全等于  &lt;=&gt;</a></li><li><a href="#6-is-null-pk">6. is null pk &lt;=&gt;</a></li></ul></li></ul></li><li><a href="#%E4%BD%9C%E4%B8%9A2-%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2">作业2-条件查询</a><ul><li><a href="#%E9%97%AE%E9%A2%98-1">问题</a></li><li><a href="#%E6%88%91%E7%9A%84%E8%A7%A3%E7%AD%94-1">我的解答</a></li></ul></li></ul></li></ul><!-- tocstop --><h2><span id="基础查询">基础查询</span></h2><h3><span id="语法">语法</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select 查询列表 from 表名;<br></code></pre></div></td></tr></table></figure><h3><span id="特点">特点</span></h3><ol><li>查询列表可以是：表中的字段、常量值、表达式、函数</li><li>查询的结果是一个虚拟的表格</li></ol><h3><span id="例子">例子</span></h3><h4><span id="0-使用数据库">0. 使用数据库</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">USE employees;<br></code></pre></div></td></tr></table></figure><h4><span id="1-查询单个字段">1. 查询单个字段</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT last_name FROM employees;<br></code></pre></div></td></tr></table></figure><h4><span id="2-查询表中的多个字段">2. 查询表中的多个字段</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT last_name,salary,email FROM employees;<br></code></pre></div></td></tr></table></figure><h4><span id="3-查询表中的所有字段">3. 查询表中的所有字段</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#方式一：<br>SELECT <br>    `employee_id`,<br>    `first_name`,<br>    `last_name`,<br>    `phone_number`,<br>    `last_name`,<br>    `job_id`,<br>    `phone_number`,<br>    `job_id`,<br>    `salary`,<br>    `commission_pct`,<br>    `manager_id`,<br>    `department_id`,<br>    `hiredate` <br>FROM<br>    employees ;<br><br>#方式二：  <br> SELECT * FROM employees;<br></code></pre></div></td></tr></table></figure><p><strong>补充：方式一可以调整字段的显示顺序，方式二代码简短。</strong></p><h4><span id="4-查询常量值">4. 查询常量值</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT 100;<br>SELECT &#x27;john&#x27;;<br></code></pre></div></td></tr></table></figure><h4><span id="5-查询表达式">5. 查询表达式</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT 100%98;<br></code></pre></div></td></tr></table></figure><h4><span id="6-查询函数">6. 查询函数</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT VERSION();<br></code></pre></div></td></tr></table></figure><h4><span id="7-起别名">7. 起别名</span></h4><div class="hljs code-wrapper"><pre><code>**①便于理解****②如果要查询的字段有重名的情况，使用别名可以区分开来**</code></pre></div><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql"> 方式一：使用as<br>SELECT 100%98 AS 结果;<br>SELECT last_name AS 姓,first_name AS 名 FROM employees;<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#方式二：使用空格<br>SELECT last_name 姓,first_name 名 FROM employees;<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例：查询salary，显示结果为 out put<br>SELECT salary AS &quot;out put&quot; FROM employees;<br></code></pre></div></td></tr></table></figure><h4><span id="8-去重">8. 去重</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例：查询员工表中涉及到的所有的部门编号<br>SELECT DISTINCT department_id FROM employees;<br></code></pre></div></td></tr></table></figure><h4><span id="9-号的作用">9. +号的作用</span></h4><p><strong>mysql中的+号，仅仅只有一个功能：运算符</strong></p><table><thead><tr><th>情况</th><th>说明</th></tr></thead><tbody><tr><td><code>select 100+90</code></td><td>两个操作数都为数值型，则做加法运算</td></tr><tr><td><code>select &#39;123&#39;+90;</code></td><td>只要其中一方为字符型，试图将字符型数值转换成数值型；如果转换成功，则继续做加法运算</td></tr><tr><td><code>select &#39;john&#39;+90;</code></td><td>如果转换失败，则将字符型数值转换成0</td></tr><tr><td><code>select null+10;</code></td><td>只要其中一方为null，则结果肯定为null</td></tr></tbody></table><p>案例：查询员工名和姓连接成一个字段，并显示为 姓名</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT CONCAT(&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;) AS 结果;<br><br>SELECT <br>CONCAT(last_name,first_name) AS 姓名<br>FROM<br>employees;<br></code></pre></div></td></tr></table></figure><h3><span id="作业1-基础查询">作业1-基础查询</span></h3><h4><span id="问题">问题</span></h4><ol><li>下面的语句是否可以执行成功<br>  select last_name , job_id , salary as sal <div class="hljs code-wrapper"><pre><code>from employees; </code></pre></div></li><li>下面的语句是否可以执行成功<br>  select * from employees; </li><li>找出下面语句中的错误<br>  select employee_id , last_name， <div class="hljs code-wrapper"><pre><code>salary * 12 “ANNUAL SALARY” from employees; </code></pre></div></li><li>显示表departments 的结构，并查询其中的全部数据 </li><li>显示出表employees 中的全部job_id（不能重复） </li><li>显示出表employees 的全部列，各个列之间用逗号连接，列头显示成OUT_PUT</li></ol><h4><span id="我的解答">我的解答</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">1. 下面的语句是否可以执行成功 <br>SELECT last_name , job_id , salary AS sal<br>FROM employees;<br>答：可以<br><br>2. 下面的语句是否可以执行成功 <br>SELECT * FROM employees;<br>答：可以<br><br>3. 找出下面语句中的错误 <br>SELECT employee_id , last_name， <br>salary * 12 “ANNUAL SALARY” <br>FROM employees;<br><br>4. 显示表departments 的结构，并查询其中的全部数据<br>DESC departments;<br><br>5. 显示出表employees 中的全部job_id（不能重复）<br>SELECT DISTINCT job_id<br>FROM employees<br><br>6. 显示出表employees的全部列，各个列之间用逗号连接，列头显示成OUT_PUT（太多了，就显示前4个）<br>SELECT CONCAT(`first_name`,&#x27;,&#x27;,`last_name`,&#x27;,&#x27;,`email`,&#x27;,&#x27;,`phone_number`) AS OUT_PUT<br>FROM employees<br><br></code></pre></div></td></tr></table></figure><h2><span id="条件查询">条件查询</span></h2><h3><span id="语法">语法</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select <br>查询列表<br>from<br>表名<br>where<br>筛选条件;<br></code></pre></div></td></tr></table></figure><h3><span id="分类">分类</span></h3><h4><span id="一-按条件表达式筛选">一、按条件表达式筛选</span></h4><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">简单条件运算符：&gt; &lt; = != &lt;&gt; &gt;= &lt;=<br></code></pre></div></td></tr></table></figure><h4><span id="二-按逻辑表达式筛选">二、按逻辑表达式筛选</span></h4><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">&amp;&amp;和and：两个条件都为true，结果为true，反之为false<br>||或or： 只要有一个条件为true，结果为true，反之为false<br>!或not： 如果连接的条件本身为false，结果为true，反之为false<br></code></pre></div></td></tr></table></figure><h4><span id="三-模糊查询">三、模糊查询</span></h4><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">like<br>between and<br>in<br>is null<br></code></pre></div></td></tr></table></figure><h3><span id="例子">例子</span></h3><h4><span id="一-按条件表达式筛选">一、按条件表达式筛选</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例1：查询工资&gt;12000的员工信息<br><br>SELECT <br>*<br>FROM<br>employees<br>WHERE<br>salary&gt;12000;<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例2：查询部门编号不等于90号的员工名和部门编号<br>SELECT <br>last_name,<br>department_id<br>FROM<br>employees<br>WHERE<br>department_id&lt;&gt;90;<br></code></pre></div></td></tr></table></figure><h4><span id="二-按逻辑表达式筛选">二、按逻辑表达式筛选</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例1：查询工资z在10000到20000之间的员工名、工资以及奖金<br>SELECT<br>last_name,<br>salary,<br>commission_pct<br>FROM<br>employees<br>WHERE<br>salary&gt;=10000 AND salary&lt;=20000;<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例2：查询部门编号不是在90到110之间，或者工资高于15000的员工信息<br>SELECT<br>*<br>FROM<br>employees<br>WHERE<br>NOT(department_id&gt;=90 AND  department_id&lt;=110) OR salary&gt;15000;<br></code></pre></div></td></tr></table></figure><h4><span id="三-模糊查询">三、模糊查询</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">/*<br>like<br><br>between and<br>in<br>is null|is not null<br></code></pre></div></td></tr></table></figure><h5><span id="1-like">1. like</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">/*<br>特点：<br>①一般和通配符搭配使用<br>通配符：<br>% 任意多个字符,包含0个字符<br>_ 任意单个字符<br>*、<br><br>​```mysql<br>#案例1：查询员工名中包含字符a的员工信息<br><br>select <br>*<br>from<br>employees<br>where<br>last_name like &#x27;%a%&#x27;;#abc<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例2：查询员工名中第三个字符为e，第五个字符为a的员工名和工资<br>select<br>last_name,<br>salary<br>FROM<br>employees<br>WHERE<br>last_name LIKE &#x27;__n_l%&#x27;;<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例3：查询员工名中第二个字符为_的员工名<br><br>SELECT<br>last_name<br>FROM<br>employees<br>WHERE<br>last_name LIKE &#x27;_$_%&#x27; ESCAPE &#x27;$&#x27;;<br></code></pre></div></td></tr></table></figure><h5><span id="2-between-and">2. between and</span></h5><p>①使用between and 可以提高语句的简洁度<br>②包含临界值<br>③两个临界值不要调换顺序</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例1：查询员工编号在100到120之间的员工信息<br><br>SELECT<br>*<br>FROM<br>employees<br>WHERE<br>employee_id &gt;= 120 AND employee_id&lt;=100;<br>#----------------------<br>SELECT<br>*<br>FROM<br>employees<br>WHERE<br>employee_id BETWEEN 120 AND 100;<br></code></pre></div></td></tr></table></figure><h5><span id="3-in">3. in</span></h5><p>含义：判断某字段的值是否属于in列表中的某一项<br>特点：<br>    ①使用in提高语句简洁度<br>    ②in列表的值类型必须一致或兼容<br>    ③in列表中不支持通配符</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例：查询员工的工种编号是 IT_PROG、AD_VP、AD_PRES中的一个员工名和工种编号<br><br>SELECT<br>last_name,<br>job_id<br>FROM<br>employees<br>WHERE<br>job_id = &#x27;IT_PROT&#x27; OR job_id = &#x27;AD_VP&#x27; OR JOB_ID =&#x27;AD_PRES&#x27;;<br></code></pre></div></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT<br>last_name,<br>job_id<br>FROM<br>employees<br>WHERE<br>job_id IN( &#x27;IT_PROT&#x27; ,&#x27;AD_VP&#x27;,&#x27;AD_PRES&#x27;);<br></code></pre></div></td></tr></table></figure><h5><span id="4-is-null">4. is null</span></h5><p>=或&lt;&gt;不能用于判断null值<br>is null或is not null 可以判断null值</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例1：查询没有奖金的员工名和奖金率<br>SELECT<br>last_name,<br>commission_pct<br>FROM<br>employees<br>WHERE<br>commission_pct IS NULL;<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例2：查询有奖金的员工名和奖金率<br>SELECT<br>last_name,<br>commission_pct<br>FROM<br>employees<br>WHERE<br>commission_pct IS NOT NULL;<br></code></pre></div></td></tr></table></figure><p>—以下为×—</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT<br>last_name,<br>commission_pct<br>FROM<br>employees<br><br>WHERE <br>salary IS 12000;<br></code></pre></div></td></tr></table></figure><h5><span id="5-安全等于-ltgt">5. 安全等于  &lt;=&gt;</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例1：查询没有奖金的员工名和奖金率<br>SELECT<br>last_name,<br>commission_pct<br>FROM<br>employees<br>WHERE<br>commission_pct &lt;=&gt;NULL;<br></code></pre></div></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">#案例2：查询工资为12000的员工信息<br>SELECT<br>last_name,<br>salary<br>FROM<br>employees<br><br>WHERE <br>salary &lt;=&gt; 12000;<br></code></pre></div></td></tr></table></figure><h5><span id="6-is-null-pk-ltgt">6. is null pk &lt;=&gt;</span></h5><table><thead><tr><th>符号</th><th>特点</th></tr></thead><tbody><tr><td>IS NULL</td><td>仅仅可以判断NULL值，可读性较高，建议使用</td></tr><tr><td>&lt;=&gt;</td><td>既可以判断NULL值，又可以判断普通的数值，可读性较低</td></tr></tbody></table><h3><span id="作业2-条件查询">作业2-条件查询</span></h3><h4><span id="问题">问题</span></h4><ol><li>查询工资大于12000 的员工姓名和工资 </li><li>查询员工号为176 的员工的姓名和部门号和年薪 </li><li>选择工资不在5000 到12000 的员工的姓名和工资 </li><li>选择在20 或50 号部门工作的员工姓名和部门号 </li><li>选择公司中没有管理者的员工姓名及 job_id </li><li>选择公司中有奖金的员工姓名，工资和奖金级别 </li><li>选择员工姓名的第三个字母是 a 的员工姓名 </li><li>选择姓名中有字母 a 和 e 的员工姓名 </li><li>显示出表employees 表中 first_name 以 ‘e’结尾的员工信息 </li><li>显示出表employees 部门编号在80-100 之间 的姓名、职位 </li><li>显示出表employees 的manager_id 是 100,101,110 的员工姓名、职位 </li></ol><h4><span id="我的解答">我的解答</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">1. 查询工资大于12000的员工姓名和工资<br>SELECT DISTINCT last_name, salary<br>FROM employees<br>WHERE salary &gt; 12000;<br><br>2. 查询员工号为176的员工的姓名和部门号和年薪<br>SELECT last_name, department_id, (salary * 12) * (1 + IFNULL(commission_pct,0)) AS 年薪<br>FROM employees<br>WHERE employee_id = 176;<br><br>3. 选择工资不在5000到12000的员工的姓名和工资<br>SELECT last_name, salary<br>FROM employees<br>WHERE salary NOT BETWEEN 5000 AND 12000;<br><br>4. 选择在20或50号部门工作的员工姓名和部门号<br>SELECT last_name, department_id<br>FROM employees<br>WHERE department_id IN (20,50);<br><br>5. 选择公司中没有管理者的员工姓名及job_id<br>SELECT last_name, job_id<br>FROM employees<br>WHERE manager_id IS NULL;<br><br>6. 选择公司中有奖金的员工姓名，工资和奖金级别<br>SELECT last_name, salary, `commission_pct`<br>FROM employees<br>WHERE commission_pct IS NOT NULL<br><br>7. 选择员工姓名的第三个字母是 a 的员工姓名<br>SELECT last_name<br>FROM employees<br>WHERE last_name LIKE &#x27;__a%&#x27;;<br><br>8. 选择姓名中有字母 a 和 e 的员工姓名<br>SELECT last_name<br>FROM employees<br>WHERE last_name LIKE &#x27;%a%&#x27; AND last_name LIKE &#x27;%e%&#x27;;<br><br>9. 显示出表employees 表中 first_name 以 &#x27;e&#x27;结尾的员工信息<br>SELECT *<br>FROM employees<br>WHERE first_name LIKE &#x27;%e&#x27;<br><br>10. 显示出表employees 部门编号在80-100 之间 的姓名、职位<br>SELECT last_name, job_id<br>FROM employees<br>WHERE department_id BETWEEN 80 AND 100;<br><br>11. 显示出表employees 的manager_id 是 100,101,110 的员工姓名、职位<br>SELECT last_name, job_id<br>FROM employees<br>WHERE manager_id IN (100,101,110);<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-04-图形化用户界面安装与导入数据库</title>
    <link href="/2021/07/10/MySQL-04-%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E5%AE%89%E8%A3%85%E4%B8%8E%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2021/07/10/MySQL-04-%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E5%AE%89%E8%A3%85%E4%B8%8E%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1><span id="图形化用户界面安装与导入数据库">图形化用户界面安装与导入数据库</span></h1><!-- toc --><ul><li><a href="#%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E8%A3%85">图形化界面客户端安装</a></li><li><a href="#%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E4%BD%BF%E7%94%A8">客户端的使用</a></li><li><a href="#%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93">导入数据库</a></li></ul><!-- tocstop --><h2><span id="图形化界面客户端安装">图形化界面客户端安装</span></h2><ol><li>打开资源包里的SQLyog的安装包，无脑下一步安装就行。（安装路径随便改，没有关系）</li><li>把秘钥给输上。</li></ol><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">Name: any<br>key: dd987f34-f358-4894-bd0f-21f3f04be9c1<br></code></pre></div></td></tr></table></figure><ol start="3"><li>点击新建，输入相关信息<ol><li>名字随便</li><li>用户名root</li><li>密码安装mysql时候的密码</li><li>端口号也是安装mysql时的端口号。</li><li>数据库什么都不写，默认是全部的数据库。</li></ol></li><li>点击连接。</li></ol><h2><span id="客户端的使用">客户端的使用</span></h2><p>比较简单，不赘述。</p><h2><span id="导入数据库">导入数据库</span></h2><p>执行资源包里的myemplyees的sql脚本，导入表。</p><p>每个表和属性的意思</p><p><img src="https://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210706182313.png" alt="image-20210706182312893"></p>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-03-MySQL常用命令语法</title>
    <link href="/2021/07/10/MySQL-03-MySQL%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/07/10/MySQL-03-MySQL%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1><span id="mysql常用命令语法规范">MySQL常用命令语法规范</span></h1><!-- toc --><ul><li><a href="#mysql%E7%9A%84%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4">MySQL的常见命令</a><ul><li><a href="#1-%E5%B1%95%E7%A4%BA%E6%95%B0%E6%8D%AE%E5%BA%93">1. 展示数据库</a></li><li><a href="#2-%E6%89%93%E5%BC%80%E6%95%B0%E6%8D%AE%E5%BA%93">2. 打开数据库</a></li><li><a href="#3-%E5%B1%95%E7%A4%BA%E5%BD%93%E5%89%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E8%A1%A8">3. 展示当前数据库中的表</a></li><li><a href="#4-%E5%B1%95%E7%A4%BA%E6%8C%87%E5%AE%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E8%A1%A8">4. 展示指定数据库中的表</a></li><li><a href="#5-%E6%9F%A5%E7%9C%8B%E5%9C%A8%E5%93%AA%E4%B8%AA%E5%BA%93">5. 查看在哪个库</a></li><li><a href="#6-%E5%88%9B%E5%BB%BA%E8%A1%A8">6. 创建表</a></li><li><a href="#7-%E6%9F%A5%E7%9C%8B%E8%A1%A8%E7%9A%84%E7%BB%93%E6%9E%84">7. 查看表的结构</a></li><li><a href="#8-%E6%9F%A5%E7%9C%8B%E8%A1%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B9%9F%E5%B0%B1%E6%98%AF%E6%9F%A5%E8%AF%A2">8. 查看表的数据（也就是查询）</a></li><li><a href="#9-%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE">9. 插入数据</a></li><li><a href="#10-%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE">10. 修改数据</a></li><li><a href="#11-%E5%88%A0%E9%99%A4%E5%85%83%E7%BB%84">11. 删除元组</a></li><li><a href="#12-%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%89%88%E6%9C%AC">12. 查看当前数据库的版本</a></li></ul></li><li><a href="#mysql%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83">MySQL编写规范</a></li></ul><!-- tocstop --><h2><span id="mysql的常见命令">MySQL的常见命令</span></h2><h3><span id="1-展示数据库">1. 展示数据库</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">show databases;<br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210613023845.png" alt="image-20210613023845934"></p><p>前三个不能动，都是系统有用的。</p><h3><span id="2-打开数据库">2. 打开数据库</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">use test;<br></code></pre></div></td></tr></table></figure><h3><span id="3-展示当前数据库中的表">3. 展示当前数据库中的表</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">show tables;<br></code></pre></div></td></tr></table></figure><p>显示empty就是空的。</p><h3><span id="4-展示指定数据库中的表">4. 展示指定数据库中的表</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">show tables from mysql;<br></code></pre></div></td></tr></table></figure><p><strong>注意，这里仅仅是展示，现在还是在test库中。</strong></p><h3><span id="5-查看在哪个库">5. 查看在哪个库</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select database();<br></code></pre></div></td></tr></table></figure><h3><span id="6-创建表">6. 创建表</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">create table stuinfo(<br>id int,<br>name varchar(20)); --varchar是字符串<br></code></pre></div></td></tr></table></figure><h3><span id="7-查看表的结构">7. 查看表的结构</span></h3><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">desc stuinfo<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><p>列主要分为：属性、类型、约束</p><h3><span id="8-查看表的数据也就是查询">8. 查看表的数据（也就是查询）</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select * from stuinfo;<br></code></pre></div></td></tr></table></figure><h3><span id="9-插入数据">9. 插入数据</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">insert into stuinfo(id, name) values(1,&#x27;john&#x27;);<br><br>insert into stuinfo(id, name) values(2,&#x27;rose&#x27;);<br></code></pre></div></td></tr></table></figure><p>感受一下就行，之后会详细讲解。</p><h3><span id="10-修改数据">10. 修改数据</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">update stuinfo set name=&#x27;lilei&#x27; where id = 1;<br></code></pre></div></td></tr></table></figure><h3><span id="11-删除元组">11. 删除元组</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">delete from stuinfo where id = 1;<br></code></pre></div></td></tr></table></figure><h3><span id="12-查看当前数据库的版本">12. 查看当前数据库的版本</span></h3><p>方法1，在sql中</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select version();<br></code></pre></div></td></tr></table></figure><p>方法2，在系统中</p><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">mysql <span class="hljs-comment">--version</span><br>或者<br>mysql -V<br></code></pre></div></td></tr></table></figure><h2><span id="mysql编写规范">MySQL编写规范</span></h2><ol><li>不区分大小写，建议关键字大写，表明，列明小写。</li><li>每条命令最好用分号结尾。</li><li>每条命令根据需要，可以进行缩进或换行。</li><li>注释<ol><li>单行注释：# 注释文字</li><li>单行注释：– 注释文字</li><li>多行注释：/* 注释文字 */</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-02-MySQL介绍卸载安装</title>
    <link href="/2021/07/10/MySQL-02-MySQL%E4%BB%8B%E7%BB%8D%E5%8D%B8%E8%BD%BD%E5%AE%89%E8%A3%85/"/>
    <url>/2021/07/10/MySQL-02-MySQL%E4%BB%8B%E7%BB%8D%E5%8D%B8%E8%BD%BD%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1><span id="mysql介绍卸载安装">MySQL介绍卸载安装</span></h1><!-- toc --><ul><li><a href="#mysql%E4%BB%8B%E7%BB%8D">MySQL介绍</a></li><li><a href="#mysql%E5%8D%B8%E8%BD%BD">MySQL卸载</a></li><li><a href="#mysql%E5%AE%89%E8%A3%85">MySQL安装</a><ul><li><a href="#%E9%85%8D%E7%BD%AE">配置</a></li></ul></li><li><a href="#mysql%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%90%AF%E5%8A%A8%E5%92%8C%E5%81%9C%E6%AD%A2">MySQL服务的启动和停止</a></li><li><a href="#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E7%99%BB%E5%BD%95%E5%92%8C%E9%80%80%E5%87%BA">服务端的登录和退出</a></li><li><a href="#%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">配置环境变量</a></li></ul><!-- tocstop --><h2><span id="mysql介绍">MySQL介绍</span></h2><p>被oracle收购</p><p><strong>优点</strong></p><ol><li>成本低</li><li>性能高</li><li>简单</li></ol><p><strong>DBMS分为两类：</strong></p><ol><li>基于共享文件系统的DBMS（Access）</li><li>基于C/S架构（MySQL、Oracle、SQL Server）<ol><li>需要安装客户端、服务端。</li></ol></li></ol><p>一般都是安装服务端。</p><p><strong>学习版本：5.5</strong></p><h2><span id="mysql卸载">MySQL卸载</span></h2><ol><li>先在控制面板中卸载。</li><li>在安装路径中，删除MySQL的文件夹，默认路径<code>C:\Program Files\MySQL</code>。</li><li>在<code>C:\ProgramData</code>中删除MySQL文件夹。</li><li>如果安装有问题，可以再清除注册表。（一般不需要清除，卸载程序已经清除了）</li></ol><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210613015548.png" alt="image-20210613015548702"></p><h2><span id="mysql安装">MySQL安装</span></h2><p><strong>PS：如果没放图那就不需要更改，直接点击下一步。</strong></p><p>打开安装包，循环下一步</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210613015836.png" alt="image-20210613015829091"></p><p>继续循环下一步，进度条过一下，有一个广告循环下一步。</p><p>然后<strong>需要继续配置</strong></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210613020022.png" alt="image-20210613020022680"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210613020137.png" alt="image-20210613020137275"></p><p><strong>选开发机</strong></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210613020230.png" alt="image-20210613020230766"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210613020241.png" alt="image-20210613020241169"></p><p>不用管都下一步</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210613020328.png" alt="image-20210613020328269"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210613020402.png" alt="image-20210613020402478"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210613020434.png" alt="image-20210613020434778"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210613020533.png" alt="image-20210613020533147"></p><p>密码自己输一个</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210613020636.png" alt="image-20210613020636737"></p><h3><span id="配置">配置</span></h3><p>配置文件位置</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210613020758.png" alt="image-20210613020758674"></p><p>客户端配置</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210613021044.png" alt="image-20210613021044214"></p><p>服务端配置</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210613020953.png" alt="image-20210613020953645"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210613021152.png" alt="image-20210613021152474"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210613021210.png" alt="image-20210613021210661"></p><h2><span id="mysql服务的启动和停止">MySQL服务的启动和停止</span></h2><p>方法1：在windows服务中找到MySQL（注意，这个是安装时自己设置的服务名，默认是MySQL）；然后可以停止和启动。</p><p>方法2：</p><p>运行cmd（<strong>注意管理员身份运行</strong>）</p><p>输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">-- 停止<br>net stop mysql<br>-- 启动<br>net start mysql<br></code></pre></div></td></tr></table></figure><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210613021605.png" alt="image-20210613021605938"></p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210613021709.png" alt="image-20210613021709461"></p><h2><span id="服务端的登录和退出">服务端的登录和退出</span></h2><p><strong>保证服务是启动状态。</strong></p><p>root用户，和设置的密码</p><p>方法1：</p><p>打开MySQL自带的控制台（<strong>注意管理员身份运行</strong>）</p><p>输入密码（安装时自己设置的密码）</p><p>退出，命令<code>exit</code>或者<code>ctrl+c</code></p><p>暂时只有root用户，日后可能有很多个用户。</p><p>方法2：</p><p>系统cmd</p><p>输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">-- 登录<br>mysql 【-h主机名 -P端口号 】-u用户名 -p密码<br><br>-- 退出<br>exit或ctrl+C<br></code></pre></div></td></tr></table></figure><p>一般用法</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">mysql -h localhost -P 3306 -u root -p<br></code></pre></div></td></tr></table></figure><p>h: host</p><p>P: Port</p><p>u: user</p><p>p: password</p><p>这句话的意思就是</p><p>主机是本地主机，端口是3306，用户是root，密码可以回车输入（或者明文输入）</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span> -h localhost -P <span class="hljs-number">3306</span> -u root -p<span class="hljs-number">7783772</span><br></code></pre></div></td></tr></table></figure><p><strong>注意p后面不能有空格。</strong></p><p>简写（如果是本机的）</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span> -u root -p<span class="hljs-number">7783772</span><br></code></pre></div></td></tr></table></figure><h2><span id="配置环境变量">配置环境变量</span></h2><p>把bin加到环境变量-系统变量的Path中。</p><p>把它加在最前面（因为它的path的值是从前往后找）</p><p><img src="http://wangpeng-imgsubmit.oss-cn-hangzhou.aliyuncs.com/img/20210613023303.png" alt="image-20210613023303244"></p>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-01-数据库与SQL相关概念</title>
    <link href="/2021/07/10/MySQL-01-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8ESQL%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/"/>
    <url>/2021/07/10/MySQL-01-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8ESQL%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h1><span id="数据库与sql相关概念">数据库与SQL相关概念</span></h1><!-- toc --><ul><li><a href="#%E5%BC%95%E5%85%A5">引入</a></li><li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AD%A6%E4%B9%A0%E6%95%B0%E6%8D%AE%E5%BA%93">为什么要学习数据库</a></li><li><a href="#%E6%A6%82%E5%BF%B5">概念</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%89%B9%E7%82%B9">数据库的特点</a></li></ul><!-- tocstop --><h2><span id="引入">引入</span></h2><p>服务器从数据库中拿到数据。</p><p>mysql是互联网公司最常用的。</p><h2><span id="为什么要学习数据库">为什么要学习数据库</span></h2><p>内存：容易丢失</p><p>文件：不容易查询</p><p>数据库的好处</p><ol><li>持久化</li><li>方便查询</li></ol><h2><span id="概念">概念</span></h2><p>DB：数据库，保存了一系列有组织的数据的容器。</p><p>DBMS：数据库管理系统，DB是通过DMBS创建和操作的容器。有时候会简称数据库软件。</p><p>SQL：Structure Query Language，结构化查询语言。</p><hr><p>SQL的优点</p><ol><li>通用</li><li>简单易学</li><li>虽然简单但是强大</li></ol><h2><span id="数据库的特点">数据库的特点</span></h2><ol><li><p>先讲数据放在表中，表在放到库中。</p></li><li><p>一个数据库中可以有多个表，每个表都有一个名字，用来标识自己。表名具有唯一性。</p></li><li><p>表具有一些特性，特性定义了数据在表中如何存储，类似java中类的设计。（关系模式）</p></li><li><p>表的列称为字段（属性）。所有表都是由一个或多个列组成的，类似于java中的属性。</p></li><li><p>表的行称为元组。类似于java中的对象。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
